Opening output files
FE:EMIT_FILE obj/xed-operand-ctype-enum.txt
FE:EMIT_FILE obj/xed-operand-ctype-enum.c
FE:EMIT_FILE obj/xed-operand-ctype-enum.h
FE:EMIT_FILE obj/xed-operand-ctype-map.h
FE:EMIT_FILE obj/xed-operand-ctype-map.c
LER: Comparing YMM0 and ZMM0 for XMM0
	taking new wider version
LER: Comparing YMM1 and ZMM1 for XMM1
	taking new wider version
LER: Comparing YMM2 and ZMM2 for XMM2
	taking new wider version
LER: Comparing YMM3 and ZMM3 for XMM3
	taking new wider version
LER: Comparing YMM4 and ZMM4 for XMM4
	taking new wider version
LER: Comparing YMM5 and ZMM5 for XMM5
	taking new wider version
LER: Comparing YMM6 and ZMM6 for XMM6
	taking new wider version
LER: Comparing YMM7 and ZMM7 for XMM7
	taking new wider version
LER: Comparing YMM8 and ZMM8 for XMM8
	taking new wider version
LER: Comparing YMM9 and ZMM9 for XMM9
	taking new wider version
LER: Comparing YMM10 and ZMM10 for XMM10
	taking new wider version
LER: Comparing YMM11 and ZMM11 for XMM11
	taking new wider version
LER: Comparing YMM12 and ZMM12 for XMM12
	taking new wider version
LER: Comparing YMM13 and ZMM13 for XMM13
	taking new wider version
LER: Comparing YMM14 and ZMM14 for XMM14
	taking new wider version
LER: Comparing YMM15 and ZMM15 for XMM15
	taking new wider version
LER: Comparing YMM0 and ZMM0 for YMM0
	taking new wider version
LER: Comparing YMM1 and ZMM1 for YMM1
	taking new wider version
LER: Comparing YMM2 and ZMM2 for YMM2
	taking new wider version
LER: Comparing YMM3 and ZMM3 for YMM3
	taking new wider version
LER: Comparing YMM4 and ZMM4 for YMM4
	taking new wider version
LER: Comparing YMM5 and ZMM5 for YMM5
	taking new wider version
LER: Comparing YMM6 and ZMM6 for YMM6
	taking new wider version
LER: Comparing YMM7 and ZMM7 for YMM7
	taking new wider version
LER: Comparing YMM8 and ZMM8 for YMM8
	taking new wider version
LER: Comparing YMM9 and ZMM9 for YMM9
	taking new wider version
LER: Comparing YMM10 and ZMM10 for YMM10
	taking new wider version
LER: Comparing YMM11 and ZMM11 for YMM11
	taking new wider version
LER: Comparing YMM12 and ZMM12 for YMM12
	taking new wider version
LER: Comparing YMM13 and ZMM13 for YMM13
	taking new wider version
LER: Comparing YMM14 and ZMM14 for YMM14
	taking new wider version
LER: Comparing YMM15 and ZMM15 for YMM15
	taking new wider version
[RGROUPS] ['BNDCFG', 'BNDSTAT', 'BOUND', 'CR', 'DR', 'FLAGS', 'GPR16', 'GPR32', 'GPR64', 'GPR8', 'GPR8h', 'INVALID', 'IP', 'MASK', 'MMX', 'MSR', 'MXCSR', 'PSEUDO', 'PSEUDOX87', 'SR', 'TMP', 'TREG', 'UIF', 'X87', 'XCR', 'XMM', 'YMM', 'ZMM']
FE:EMIT_FILE obj/xed-reg-enum.txt
FE:EMIT_FILE obj/xed-reg-enum.c
FE:EMIT_FILE obj/xed-reg-enum.h
FE:EMIT_FILE obj/xed-reg-class-enum.txt
FE:EMIT_FILE obj/xed-reg-class-enum.c
FE:EMIT_FILE obj/xed-reg-class-enum.h
FE:EMIT_FILE obj/xed-init-reg-class.c
FE:EMIT_FILE obj/xed-operand-width-enum.txt
FE:EMIT_FILE obj/xed-operand-width-enum.c
FE:EMIT_FILE obj/xed-operand-width-enum.h
FE:EMIT_FILE obj/xed-init-width.c
Adding scalable width:  ASZ
Adding scalable width:  SSZ
Adding scalable width:  P
Adding scalable width:  P2
Adding scalable width:  S
Adding scalable width:  V
Adding scalable width:  Y
Adding scalable width:  Z
Adding scalable width:  SPW8
Adding scalable width:  SPW
Adding scalable width:  SPW5
Adding scalable width:  SPW3
Adding scalable width:  SPW2
Adding scalable width:  YU
MAKING ELEMENT BASE TYPE ENUM
FE:EMIT_FILE obj/xed-operand-element-type-enum.c
FE:EMIT_FILE obj/xed-operand-element-type-enum.h
FE:EMIT_FILE obj/xed-operand-element-xtype-enum.txt
FE:EMIT_FILE obj/xed-operand-element-xtype-enum.c
FE:EMIT_FILE obj/xed-operand-element-xtype-enum.h
FE:EMIT_FILE obj/xed-init-operand-type-mappings.c
FE:EMIT_FILE obj/xed-init-pointer-names.h
FE:EMIT_FILE obj/xed-init-pointer-names.c
MAKING ERRORS ENUM
FE:EMIT_FILE obj/xed-error-enum.c
FE:EMIT_FILE obj/xed-error-enum.h
Reading state bits
Done reading state bits
Reading structured input
Reading Instructions (ISA) input
=============================================
Creating a generator 0
=============================================
ALines (lines before reading input) = 110998
read_input 0
NONTERMINAL: ISA notype
Adding ISA to nonterminal dict
Nonterminal ISA()::
Nonterminal name ISA
read_flat_input 0
Hit a nonterminal, returning at: REMOVE_SEGMENT()::
BLines (lines remaining after reading input) = 110996
=============================================
Creating a generator 1
=============================================
ALines (lines before reading input) = 110996
read_input 1
NONTERMINAL: REMOVE_SEGMENT notype
Adding REMOVE_SEGMENT to nonterminal dict
Nonterminal REMOVE_SEGMENT()::
Nonterminal name REMOVE_SEGMENT
read_flat_input 1
Hit a nonterminal, returning at: PREFIXES()::
BLines (lines remaining after reading input) = 110992
=============================================
Creating a generator 2
=============================================
ALines (lines before reading input) = 110992
read_input 4
NONTERMINAL: PREFIXES notype
Adding PREFIXES to nonterminal dict
Nonterminal PREFIXES()::
Nonterminal name PREFIXES
read_flat_input 4
Hit a nonterminal, returning at: BRANCH_HINT()::
BLines (lines remaining after reading input) = 110944
=============================================
Creating a generator 3
=============================================
ALines (lines before reading input) = 110944
read_input 50
NONTERMINAL: BRANCH_HINT notype
Adding BRANCH_HINT to nonterminal dict
Nonterminal BRANCH_HINT()::
Nonterminal name BRANCH_HINT
read_flat_input 50
Hit a nonterminal, returning at: CET_NO_TRACK()::
BLines (lines remaining after reading input) = 110940
=============================================
Creating a generator 4
=============================================
ALines (lines before reading input) = 110940
read_input 53
NONTERMINAL: CET_NO_TRACK notype
Adding CET_NO_TRACK to nonterminal dict
Nonterminal CET_NO_TRACK()::
Nonterminal name CET_NO_TRACK
read_flat_input 53
Hit a nonterminal, returning at: xed_reg_enum_t rFLAGS()::
BLines (lines remaining after reading input) = 110936
=============================================
Creating a generator 5
=============================================
ALines (lines before reading input) = 110936
read_input 56
NONTERMINAL: rFLAGS type= xed_reg_enum_t
Adding rFLAGS to nonterminal dict
Nonterminal xed_reg_enum_t rFLAGS()::
Nonterminal name rFLAGS
read_flat_input 56
Hit a nonterminal, returning at: xed_reg_enum_t MMX_R()::
BLines (lines remaining after reading input) = 110932
=============================================
Creating a generator 6
=============================================
ALines (lines before reading input) = 110932
read_input 59
NONTERMINAL: MMX_R type= xed_reg_enum_t
Adding MMX_R to nonterminal dict
Nonterminal xed_reg_enum_t MMX_R()::
Nonterminal name MMX_R
read_flat_input 59
Hit a nonterminal, returning at: xed_reg_enum_t MMX_B()::
BLines (lines remaining after reading input) = 110923
=============================================
Creating a generator 7
=============================================
ALines (lines before reading input) = 110923
read_input 67
NONTERMINAL: MMX_B type= xed_reg_enum_t
Adding MMX_B to nonterminal dict
Nonterminal xed_reg_enum_t MMX_B()::
Nonterminal name MMX_B
read_flat_input 67
Hit a nonterminal, returning at: xed_reg_enum_t X87()::
BLines (lines remaining after reading input) = 110914
=============================================
Creating a generator 8
=============================================
ALines (lines before reading input) = 110914
read_input 75
NONTERMINAL: X87 type= xed_reg_enum_t
Adding X87 to nonterminal dict
Nonterminal xed_reg_enum_t X87()::
Nonterminal name X87
read_flat_input 75
Hit a nonterminal, returning at: xed_reg_enum_t SEG()::
BLines (lines remaining after reading input) = 110905
=============================================
Creating a generator 9
=============================================
ALines (lines before reading input) = 110905
read_input 83
NONTERMINAL: SEG type= xed_reg_enum_t
Adding SEG to nonterminal dict
Nonterminal xed_reg_enum_t SEG()::
Nonterminal name SEG
read_flat_input 83
Hit a nonterminal, returning at: xed_reg_enum_t SEG_MOV()::
BLines (lines remaining after reading input) = 110896
=============================================
Creating a generator 10
=============================================
ALines (lines before reading input) = 110896
read_input 91
NONTERMINAL: SEG_MOV type= xed_reg_enum_t
Adding SEG_MOV to nonterminal dict
Nonterminal xed_reg_enum_t SEG_MOV()::
Nonterminal name SEG_MOV
read_flat_input 91
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_DSEG()::
BLines (lines remaining after reading input) = 110887
=============================================
Creating a generator 11
=============================================
ALines (lines before reading input) = 110887
read_input 99
NONTERMINAL: FINAL_DSEG type= xed_reg_enum_t
Adding FINAL_DSEG to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_DSEG()::
Nonterminal name FINAL_DSEG
read_flat_input 99
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_DSEG_NOT64()::
BLines (lines remaining after reading input) = 110883
=============================================
Creating a generator 12
=============================================
ALines (lines before reading input) = 110883
read_input 102
NONTERMINAL: FINAL_DSEG_NOT64 type= xed_reg_enum_t
Adding FINAL_DSEG_NOT64 to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_DSEG_NOT64()::
Nonterminal name FINAL_DSEG_NOT64
read_flat_input 102
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_DSEG_MODE64()::
BLines (lines remaining after reading input) = 110875
=============================================
Creating a generator 13
=============================================
ALines (lines before reading input) = 110875
read_input 109
NONTERMINAL: FINAL_DSEG_MODE64 type= xed_reg_enum_t
Adding FINAL_DSEG_MODE64 to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_DSEG_MODE64()::
Nonterminal name FINAL_DSEG_MODE64
read_flat_input 109
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_DSEG1()::
BLines (lines remaining after reading input) = 110867
=============================================
Creating a generator 14
=============================================
ALines (lines before reading input) = 110867
read_input 116
NONTERMINAL: FINAL_DSEG1 type= xed_reg_enum_t
Adding FINAL_DSEG1 to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_DSEG1()::
Nonterminal name FINAL_DSEG1
read_flat_input 116
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_DSEG1_NOT64()::
BLines (lines remaining after reading input) = 110863
=============================================
Creating a generator 15
=============================================
ALines (lines before reading input) = 110863
read_input 119
NONTERMINAL: FINAL_DSEG1_NOT64 type= xed_reg_enum_t
Adding FINAL_DSEG1_NOT64 to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_DSEG1_NOT64()::
Nonterminal name FINAL_DSEG1_NOT64
read_flat_input 119
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_DSEG1_MODE64()::
BLines (lines remaining after reading input) = 110855
=============================================
Creating a generator 16
=============================================
ALines (lines before reading input) = 110855
read_input 126
NONTERMINAL: FINAL_DSEG1_MODE64 type= xed_reg_enum_t
Adding FINAL_DSEG1_MODE64 to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_DSEG1_MODE64()::
Nonterminal name FINAL_DSEG1_MODE64
read_flat_input 126
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_ESEG()::
BLines (lines remaining after reading input) = 110847
=============================================
Creating a generator 17
=============================================
ALines (lines before reading input) = 110847
read_input 133
NONTERMINAL: FINAL_ESEG type= xed_reg_enum_t
Adding FINAL_ESEG to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_ESEG()::
Nonterminal name FINAL_ESEG
read_flat_input 133
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_ESEG1()::
BLines (lines remaining after reading input) = 110843
=============================================
Creating a generator 18
=============================================
ALines (lines before reading input) = 110843
read_input 136
NONTERMINAL: FINAL_ESEG1 type= xed_reg_enum_t
Adding FINAL_ESEG1 to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_ESEG1()::
Nonterminal name FINAL_ESEG1
read_flat_input 136
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_SSEG1()::
BLines (lines remaining after reading input) = 110839
=============================================
Creating a generator 19
=============================================
ALines (lines before reading input) = 110839
read_input 139
NONTERMINAL: FINAL_SSEG1 type= xed_reg_enum_t
Adding FINAL_SSEG1 to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_SSEG1()::
Nonterminal name FINAL_SSEG1
read_flat_input 139
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_SSEG0()::
BLines (lines remaining after reading input) = 110835
=============================================
Creating a generator 20
=============================================
ALines (lines before reading input) = 110835
read_input 142
NONTERMINAL: FINAL_SSEG0 type= xed_reg_enum_t
Adding FINAL_SSEG0 to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_SSEG0()::
Nonterminal name FINAL_SSEG0
read_flat_input 142
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_SSEG()::
BLines (lines remaining after reading input) = 110831
=============================================
Creating a generator 21
=============================================
ALines (lines before reading input) = 110831
read_input 145
NONTERMINAL: FINAL_SSEG type= xed_reg_enum_t
Adding FINAL_SSEG to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_SSEG()::
Nonterminal name FINAL_SSEG
read_flat_input 145
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_SSEG_NOT64()::
BLines (lines remaining after reading input) = 110827
=============================================
Creating a generator 22
=============================================
ALines (lines before reading input) = 110827
read_input 148
NONTERMINAL: FINAL_SSEG_NOT64 type= xed_reg_enum_t
Adding FINAL_SSEG_NOT64 to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_SSEG_NOT64()::
Nonterminal name FINAL_SSEG_NOT64
read_flat_input 148
Hit a nonterminal, returning at: xed_reg_enum_t FINAL_SSEG_MODE64()::
BLines (lines remaining after reading input) = 110819
=============================================
Creating a generator 23
=============================================
ALines (lines before reading input) = 110819
read_input 155
NONTERMINAL: FINAL_SSEG_MODE64 type= xed_reg_enum_t
Adding FINAL_SSEG_MODE64 to nonterminal dict
Nonterminal xed_reg_enum_t FINAL_SSEG_MODE64()::
Nonterminal name FINAL_SSEG_MODE64
read_flat_input 155
Hit a nonterminal, returning at: xed_reg_enum_t ArAX()::
BLines (lines remaining after reading input) = 110811
=============================================
Creating a generator 24
=============================================
ALines (lines before reading input) = 110811
read_input 162
NONTERMINAL: ArAX type= xed_reg_enum_t
Adding ArAX to nonterminal dict
Nonterminal xed_reg_enum_t ArAX()::
Nonterminal name ArAX
read_flat_input 162
Hit a nonterminal, returning at: xed_reg_enum_t ArBX()::
BLines (lines remaining after reading input) = 110807
=============================================
Creating a generator 25
=============================================
ALines (lines before reading input) = 110807
read_input 165
NONTERMINAL: ArBX type= xed_reg_enum_t
Adding ArBX to nonterminal dict
Nonterminal xed_reg_enum_t ArBX()::
Nonterminal name ArBX
read_flat_input 165
Hit a nonterminal, returning at: xed_reg_enum_t ArCX()::
BLines (lines remaining after reading input) = 110803
=============================================
Creating a generator 26
=============================================
ALines (lines before reading input) = 110803
read_input 168
NONTERMINAL: ArCX type= xed_reg_enum_t
Adding ArCX to nonterminal dict
Nonterminal xed_reg_enum_t ArCX()::
Nonterminal name ArCX
read_flat_input 168
Hit a nonterminal, returning at: xed_reg_enum_t ArDX()::
BLines (lines remaining after reading input) = 110799
=============================================
Creating a generator 27
=============================================
ALines (lines before reading input) = 110799
read_input 171
NONTERMINAL: ArDX type= xed_reg_enum_t
Adding ArDX to nonterminal dict
Nonterminal xed_reg_enum_t ArDX()::
Nonterminal name ArDX
read_flat_input 171
Hit a nonterminal, returning at: xed_reg_enum_t ArSI()::
BLines (lines remaining after reading input) = 110795
=============================================
Creating a generator 28
=============================================
ALines (lines before reading input) = 110795
read_input 174
NONTERMINAL: ArSI type= xed_reg_enum_t
Adding ArSI to nonterminal dict
Nonterminal xed_reg_enum_t ArSI()::
Nonterminal name ArSI
read_flat_input 174
Hit a nonterminal, returning at: xed_reg_enum_t ArDI()::
BLines (lines remaining after reading input) = 110791
=============================================
Creating a generator 29
=============================================
ALines (lines before reading input) = 110791
read_input 177
NONTERMINAL: ArDI type= xed_reg_enum_t
Adding ArDI to nonterminal dict
Nonterminal xed_reg_enum_t ArDI()::
Nonterminal name ArDI
read_flat_input 177
Hit a nonterminal, returning at: xed_reg_enum_t ArSP()::
BLines (lines remaining after reading input) = 110787
=============================================
Creating a generator 30
=============================================
ALines (lines before reading input) = 110787
read_input 180
NONTERMINAL: ArSP type= xed_reg_enum_t
Adding ArSP to nonterminal dict
Nonterminal xed_reg_enum_t ArSP()::
Nonterminal name ArSP
read_flat_input 180
Hit a nonterminal, returning at: xed_reg_enum_t ArBP()::
BLines (lines remaining after reading input) = 110783
=============================================
Creating a generator 31
=============================================
ALines (lines before reading input) = 110783
read_input 183
NONTERMINAL: ArBP type= xed_reg_enum_t
Adding ArBP to nonterminal dict
Nonterminal xed_reg_enum_t ArBP()::
Nonterminal name ArBP
read_flat_input 183
Hit a nonterminal, returning at: xed_reg_enum_t SrSP()::
BLines (lines remaining after reading input) = 110779
=============================================
Creating a generator 32
=============================================
ALines (lines before reading input) = 110779
read_input 186
NONTERMINAL: SrSP type= xed_reg_enum_t
Adding SrSP to nonterminal dict
Nonterminal xed_reg_enum_t SrSP()::
Nonterminal name SrSP
read_flat_input 186
Hit a nonterminal, returning at: xed_reg_enum_t SrBP()::
BLines (lines remaining after reading input) = 110775
=============================================
Creating a generator 33
=============================================
ALines (lines before reading input) = 110775
read_input 189
NONTERMINAL: SrBP type= xed_reg_enum_t
Adding SrBP to nonterminal dict
Nonterminal xed_reg_enum_t SrBP()::
Nonterminal name SrBP
read_flat_input 189
Hit a nonterminal, returning at: xed_reg_enum_t Ar8()::
BLines (lines remaining after reading input) = 110771
=============================================
Creating a generator 34
=============================================
ALines (lines before reading input) = 110771
read_input 192
NONTERMINAL: Ar8 type= xed_reg_enum_t
Adding Ar8 to nonterminal dict
Nonterminal xed_reg_enum_t Ar8()::
Nonterminal name Ar8
read_flat_input 192
Hit a nonterminal, returning at: xed_reg_enum_t Ar9()::
BLines (lines remaining after reading input) = 110767
=============================================
Creating a generator 35
=============================================
ALines (lines before reading input) = 110767
read_input 195
NONTERMINAL: Ar9 type= xed_reg_enum_t
Adding Ar9 to nonterminal dict
Nonterminal xed_reg_enum_t Ar9()::
Nonterminal name Ar9
read_flat_input 195
Hit a nonterminal, returning at: xed_reg_enum_t Ar10()::
BLines (lines remaining after reading input) = 110763
=============================================
Creating a generator 36
=============================================
ALines (lines before reading input) = 110763
read_input 198
NONTERMINAL: Ar10 type= xed_reg_enum_t
Adding Ar10 to nonterminal dict
Nonterminal xed_reg_enum_t Ar10()::
Nonterminal name Ar10
read_flat_input 198
Hit a nonterminal, returning at: xed_reg_enum_t Ar11()::
BLines (lines remaining after reading input) = 110759
=============================================
Creating a generator 37
=============================================
ALines (lines before reading input) = 110759
read_input 201
NONTERMINAL: Ar11 type= xed_reg_enum_t
Adding Ar11 to nonterminal dict
Nonterminal xed_reg_enum_t Ar11()::
Nonterminal name Ar11
read_flat_input 201
Hit a nonterminal, returning at: xed_reg_enum_t Ar12()::
BLines (lines remaining after reading input) = 110755
=============================================
Creating a generator 38
=============================================
ALines (lines before reading input) = 110755
read_input 204
NONTERMINAL: Ar12 type= xed_reg_enum_t
Adding Ar12 to nonterminal dict
Nonterminal xed_reg_enum_t Ar12()::
Nonterminal name Ar12
read_flat_input 204
Hit a nonterminal, returning at: xed_reg_enum_t Ar13()::
BLines (lines remaining after reading input) = 110751
=============================================
Creating a generator 39
=============================================
ALines (lines before reading input) = 110751
read_input 207
NONTERMINAL: Ar13 type= xed_reg_enum_t
Adding Ar13 to nonterminal dict
Nonterminal xed_reg_enum_t Ar13()::
Nonterminal name Ar13
read_flat_input 207
Hit a nonterminal, returning at: xed_reg_enum_t Ar14()::
BLines (lines remaining after reading input) = 110747
=============================================
Creating a generator 40
=============================================
ALines (lines before reading input) = 110747
read_input 210
NONTERMINAL: Ar14 type= xed_reg_enum_t
Adding Ar14 to nonterminal dict
Nonterminal xed_reg_enum_t Ar14()::
Nonterminal name Ar14
read_flat_input 210
Hit a nonterminal, returning at: xed_reg_enum_t Ar15()::
BLines (lines remaining after reading input) = 110743
=============================================
Creating a generator 41
=============================================
ALines (lines before reading input) = 110743
read_input 213
NONTERMINAL: Ar15 type= xed_reg_enum_t
Adding Ar15 to nonterminal dict
Nonterminal xed_reg_enum_t Ar15()::
Nonterminal name Ar15
read_flat_input 213
Hit a nonterminal, returning at: xed_reg_enum_t Ar16()::
BLines (lines remaining after reading input) = 110739
=============================================
Creating a generator 42
=============================================
ALines (lines before reading input) = 110739
read_input 216
NONTERMINAL: Ar16 type= xed_reg_enum_t
Adding Ar16 to nonterminal dict
Nonterminal xed_reg_enum_t Ar16()::
Nonterminal name Ar16
read_flat_input 216
Hit a nonterminal, returning at: xed_reg_enum_t Ar17()::
BLines (lines remaining after reading input) = 110735
=============================================
Creating a generator 43
=============================================
ALines (lines before reading input) = 110735
read_input 219
NONTERMINAL: Ar17 type= xed_reg_enum_t
Adding Ar17 to nonterminal dict
Nonterminal xed_reg_enum_t Ar17()::
Nonterminal name Ar17
read_flat_input 219
Hit a nonterminal, returning at: xed_reg_enum_t Ar18()::
BLines (lines remaining after reading input) = 110731
=============================================
Creating a generator 44
=============================================
ALines (lines before reading input) = 110731
read_input 222
NONTERMINAL: Ar18 type= xed_reg_enum_t
Adding Ar18 to nonterminal dict
Nonterminal xed_reg_enum_t Ar18()::
Nonterminal name Ar18
read_flat_input 222
Hit a nonterminal, returning at: xed_reg_enum_t Ar19()::
BLines (lines remaining after reading input) = 110727
=============================================
Creating a generator 45
=============================================
ALines (lines before reading input) = 110727
read_input 225
NONTERMINAL: Ar19 type= xed_reg_enum_t
Adding Ar19 to nonterminal dict
Nonterminal xed_reg_enum_t Ar19()::
Nonterminal name Ar19
read_flat_input 225
Hit a nonterminal, returning at: xed_reg_enum_t Ar20()::
BLines (lines remaining after reading input) = 110723
=============================================
Creating a generator 46
=============================================
ALines (lines before reading input) = 110723
read_input 228
NONTERMINAL: Ar20 type= xed_reg_enum_t
Adding Ar20 to nonterminal dict
Nonterminal xed_reg_enum_t Ar20()::
Nonterminal name Ar20
read_flat_input 228
Hit a nonterminal, returning at: xed_reg_enum_t Ar21()::
BLines (lines remaining after reading input) = 110719
=============================================
Creating a generator 47
=============================================
ALines (lines before reading input) = 110719
read_input 231
NONTERMINAL: Ar21 type= xed_reg_enum_t
Adding Ar21 to nonterminal dict
Nonterminal xed_reg_enum_t Ar21()::
Nonterminal name Ar21
read_flat_input 231
Hit a nonterminal, returning at: xed_reg_enum_t Ar22()::
BLines (lines remaining after reading input) = 110715
=============================================
Creating a generator 48
=============================================
ALines (lines before reading input) = 110715
read_input 234
NONTERMINAL: Ar22 type= xed_reg_enum_t
Adding Ar22 to nonterminal dict
Nonterminal xed_reg_enum_t Ar22()::
Nonterminal name Ar22
read_flat_input 234
Hit a nonterminal, returning at: xed_reg_enum_t Ar23()::
BLines (lines remaining after reading input) = 110711
=============================================
Creating a generator 49
=============================================
ALines (lines before reading input) = 110711
read_input 237
NONTERMINAL: Ar23 type= xed_reg_enum_t
Adding Ar23 to nonterminal dict
Nonterminal xed_reg_enum_t Ar23()::
Nonterminal name Ar23
read_flat_input 237
Hit a nonterminal, returning at: xed_reg_enum_t Ar24()::
BLines (lines remaining after reading input) = 110707
=============================================
Creating a generator 50
=============================================
ALines (lines before reading input) = 110707
read_input 240
NONTERMINAL: Ar24 type= xed_reg_enum_t
Adding Ar24 to nonterminal dict
Nonterminal xed_reg_enum_t Ar24()::
Nonterminal name Ar24
read_flat_input 240
Hit a nonterminal, returning at: xed_reg_enum_t Ar25()::
BLines (lines remaining after reading input) = 110703
=============================================
Creating a generator 51
=============================================
ALines (lines before reading input) = 110703
read_input 243
NONTERMINAL: Ar25 type= xed_reg_enum_t
Adding Ar25 to nonterminal dict
Nonterminal xed_reg_enum_t Ar25()::
Nonterminal name Ar25
read_flat_input 243
Hit a nonterminal, returning at: xed_reg_enum_t Ar26()::
BLines (lines remaining after reading input) = 110699
=============================================
Creating a generator 52
=============================================
ALines (lines before reading input) = 110699
read_input 246
NONTERMINAL: Ar26 type= xed_reg_enum_t
Adding Ar26 to nonterminal dict
Nonterminal xed_reg_enum_t Ar26()::
Nonterminal name Ar26
read_flat_input 246
Hit a nonterminal, returning at: xed_reg_enum_t Ar27()::
BLines (lines remaining after reading input) = 110695
=============================================
Creating a generator 53
=============================================
ALines (lines before reading input) = 110695
read_input 249
NONTERMINAL: Ar27 type= xed_reg_enum_t
Adding Ar27 to nonterminal dict
Nonterminal xed_reg_enum_t Ar27()::
Nonterminal name Ar27
read_flat_input 249
Hit a nonterminal, returning at: xed_reg_enum_t Ar28()::
BLines (lines remaining after reading input) = 110691
=============================================
Creating a generator 54
=============================================
ALines (lines before reading input) = 110691
read_input 252
NONTERMINAL: Ar28 type= xed_reg_enum_t
Adding Ar28 to nonterminal dict
Nonterminal xed_reg_enum_t Ar28()::
Nonterminal name Ar28
read_flat_input 252
Hit a nonterminal, returning at: xed_reg_enum_t Ar29()::
BLines (lines remaining after reading input) = 110687
=============================================
Creating a generator 55
=============================================
ALines (lines before reading input) = 110687
read_input 255
NONTERMINAL: Ar29 type= xed_reg_enum_t
Adding Ar29 to nonterminal dict
Nonterminal xed_reg_enum_t Ar29()::
Nonterminal name Ar29
read_flat_input 255
Hit a nonterminal, returning at: xed_reg_enum_t Ar30()::
BLines (lines remaining after reading input) = 110683
=============================================
Creating a generator 56
=============================================
ALines (lines before reading input) = 110683
read_input 258
NONTERMINAL: Ar30 type= xed_reg_enum_t
Adding Ar30 to nonterminal dict
Nonterminal xed_reg_enum_t Ar30()::
Nonterminal name Ar30
read_flat_input 258
Hit a nonterminal, returning at: xed_reg_enum_t Ar31()::
BLines (lines remaining after reading input) = 110679
=============================================
Creating a generator 57
=============================================
ALines (lines before reading input) = 110679
read_input 261
NONTERMINAL: Ar31 type= xed_reg_enum_t
Adding Ar31 to nonterminal dict
Nonterminal xed_reg_enum_t Ar31()::
Nonterminal name Ar31
read_flat_input 261
Hit a nonterminal, returning at: xed_reg_enum_t rIP()::
BLines (lines remaining after reading input) = 110675
=============================================
Creating a generator 58
=============================================
ALines (lines before reading input) = 110675
read_input 264
NONTERMINAL: rIP type= xed_reg_enum_t
Adding rIP to nonterminal dict
Nonterminal xed_reg_enum_t rIP()::
Nonterminal name rIP
read_flat_input 264
Hit a nonterminal, returning at: xed_reg_enum_t rIPa()::
BLines (lines remaining after reading input) = 110671
=============================================
Creating a generator 59
=============================================
ALines (lines before reading input) = 110671
read_input 267
NONTERMINAL: rIPa type= xed_reg_enum_t
Adding rIPa to nonterminal dict
Nonterminal xed_reg_enum_t rIPa()::
Nonterminal name rIPa
read_flat_input 267
Hit a nonterminal, returning at: xed_reg_enum_t OeAX()::
BLines (lines remaining after reading input) = 110668
=============================================
Creating a generator 60
=============================================
ALines (lines before reading input) = 110668
read_input 269
NONTERMINAL: OeAX type= xed_reg_enum_t
Adding OeAX to nonterminal dict
Nonterminal xed_reg_enum_t OeAX()::
Nonterminal name OeAX
read_flat_input 269
Hit a nonterminal, returning at: xed_reg_enum_t OrAX()::
BLines (lines remaining after reading input) = 110664
=============================================
Creating a generator 61
=============================================
ALines (lines before reading input) = 110664
read_input 272
NONTERMINAL: OrAX type= xed_reg_enum_t
Adding OrAX to nonterminal dict
Nonterminal xed_reg_enum_t OrAX()::
Nonterminal name OrAX
read_flat_input 272
Hit a nonterminal, returning at: xed_reg_enum_t OrDX()::
BLines (lines remaining after reading input) = 110660
=============================================
Creating a generator 62
=============================================
ALines (lines before reading input) = 110660
read_input 275
NONTERMINAL: OrDX type= xed_reg_enum_t
Adding OrDX to nonterminal dict
Nonterminal xed_reg_enum_t OrDX()::
Nonterminal name OrDX
read_flat_input 275
Hit a nonterminal, returning at: xed_reg_enum_t OrCX()::
BLines (lines remaining after reading input) = 110656
=============================================
Creating a generator 63
=============================================
ALines (lines before reading input) = 110656
read_input 278
NONTERMINAL: OrCX type= xed_reg_enum_t
Adding OrCX to nonterminal dict
Nonterminal xed_reg_enum_t OrCX()::
Nonterminal name OrCX
read_flat_input 278
Hit a nonterminal, returning at: xed_reg_enum_t OrBX()::
BLines (lines remaining after reading input) = 110652
=============================================
Creating a generator 64
=============================================
ALines (lines before reading input) = 110652
read_input 281
NONTERMINAL: OrBX type= xed_reg_enum_t
Adding OrBX to nonterminal dict
Nonterminal xed_reg_enum_t OrBX()::
Nonterminal name OrBX
read_flat_input 281
Hit a nonterminal, returning at: xed_reg_enum_t OrSP()::
BLines (lines remaining after reading input) = 110648
=============================================
Creating a generator 65
=============================================
ALines (lines before reading input) = 110648
read_input 284
NONTERMINAL: OrSP type= xed_reg_enum_t
Adding OrSP to nonterminal dict
Nonterminal xed_reg_enum_t OrSP()::
Nonterminal name OrSP
read_flat_input 284
Hit a nonterminal, returning at: xed_reg_enum_t OrBP()::
BLines (lines remaining after reading input) = 110644
=============================================
Creating a generator 66
=============================================
ALines (lines before reading input) = 110644
read_input 287
NONTERMINAL: OrBP type= xed_reg_enum_t
Adding OrBP to nonterminal dict
Nonterminal xed_reg_enum_t OrBP()::
Nonterminal name OrBP
read_flat_input 287
Hit a nonterminal, returning at: xed_reg_enum_t GPRv_R()::
BLines (lines remaining after reading input) = 110640
=============================================
Creating a generator 67
=============================================
ALines (lines before reading input) = 110640
read_input 290
NONTERMINAL: GPRv_R type= xed_reg_enum_t
Adding GPRv_R to nonterminal dict
Nonterminal xed_reg_enum_t GPRv_R()::
Nonterminal name GPRv_R
read_flat_input 290
Hit a nonterminal, returning at: xed_reg_enum_t GPRv_SB()::
BLines (lines remaining after reading input) = 110636
=============================================
Creating a generator 68
=============================================
ALines (lines before reading input) = 110636
read_input 293
NONTERMINAL: GPRv_SB type= xed_reg_enum_t
Adding GPRv_SB to nonterminal dict
Nonterminal xed_reg_enum_t GPRv_SB()::
Nonterminal name GPRv_SB
read_flat_input 293
Hit a nonterminal, returning at: xed_reg_enum_t GPRz_R()::
BLines (lines remaining after reading input) = 110632
=============================================
Creating a generator 69
=============================================
ALines (lines before reading input) = 110632
read_input 296
NONTERMINAL: GPRz_R type= xed_reg_enum_t
Adding GPRz_R to nonterminal dict
Nonterminal xed_reg_enum_t GPRz_R()::
Nonterminal name GPRz_R
read_flat_input 296
Hit a nonterminal, returning at: xed_reg_enum_t GPRy_R()::
BLines (lines remaining after reading input) = 110628
=============================================
Creating a generator 70
=============================================
ALines (lines before reading input) = 110628
read_input 299
NONTERMINAL: GPRy_R type= xed_reg_enum_t
Adding GPRy_R to nonterminal dict
Nonterminal xed_reg_enum_t GPRy_R()::
Nonterminal name GPRy_R
read_flat_input 299
Hit a nonterminal, returning at: xed_reg_enum_t GPRv_B()::
BLines (lines remaining after reading input) = 110624
=============================================
Creating a generator 71
=============================================
ALines (lines before reading input) = 110624
read_input 302
NONTERMINAL: GPRv_B type= xed_reg_enum_t
Adding GPRv_B to nonterminal dict
Nonterminal xed_reg_enum_t GPRv_B()::
Nonterminal name GPRv_B
read_flat_input 302
Hit a nonterminal, returning at: xed_reg_enum_t GPRz_B()::
BLines (lines remaining after reading input) = 110620
=============================================
Creating a generator 72
=============================================
ALines (lines before reading input) = 110620
read_input 305
NONTERMINAL: GPRz_B type= xed_reg_enum_t
Adding GPRz_B to nonterminal dict
Nonterminal xed_reg_enum_t GPRz_B()::
Nonterminal name GPRz_B
read_flat_input 305
Hit a nonterminal, returning at: xed_reg_enum_t GPRy_B()::
BLines (lines remaining after reading input) = 110616
=============================================
Creating a generator 73
=============================================
ALines (lines before reading input) = 110616
read_input 308
NONTERMINAL: GPRy_B type= xed_reg_enum_t
Adding GPRy_B to nonterminal dict
Nonterminal xed_reg_enum_t GPRy_B()::
Nonterminal name GPRy_B
read_flat_input 308
Hit a nonterminal, returning at: xed_reg_enum_t GPR64_R()::
BLines (lines remaining after reading input) = 110612
=============================================
Creating a generator 74
=============================================
ALines (lines before reading input) = 110612
read_input 311
NONTERMINAL: GPR64_R type= xed_reg_enum_t
Adding GPR64_R to nonterminal dict
Nonterminal xed_reg_enum_t GPR64_R()::
Nonterminal name GPR64_R
read_flat_input 311
Hit a nonterminal, returning at: xed_reg_enum_t GPR64_B()::
BLines (lines remaining after reading input) = 110579
=============================================
Creating a generator 75
=============================================
ALines (lines before reading input) = 110579
read_input 343
NONTERMINAL: GPR64_B type= xed_reg_enum_t
Adding GPR64_B to nonterminal dict
Nonterminal xed_reg_enum_t GPR64_B()::
Nonterminal name GPR64_B
read_flat_input 343
Hit a nonterminal, returning at: xed_reg_enum_t GPR64_SB()::
BLines (lines remaining after reading input) = 110546
=============================================
Creating a generator 76
=============================================
ALines (lines before reading input) = 110546
read_input 375
NONTERMINAL: GPR64_SB type= xed_reg_enum_t
Adding GPR64_SB to nonterminal dict
Nonterminal xed_reg_enum_t GPR64_SB()::
Nonterminal name GPR64_SB
read_flat_input 375
Hit a nonterminal, returning at: xed_reg_enum_t GPR32_R()::
BLines (lines remaining after reading input) = 110513
=============================================
Creating a generator 77
=============================================
ALines (lines before reading input) = 110513
read_input 407
NONTERMINAL: GPR32_R type= xed_reg_enum_t
Adding GPR32_R to nonterminal dict
Nonterminal xed_reg_enum_t GPR32_R()::
Nonterminal name GPR32_R
read_flat_input 407
Hit a nonterminal, returning at: xed_reg_enum_t GPR32_B()::
BLines (lines remaining after reading input) = 110480
=============================================
Creating a generator 78
=============================================
ALines (lines before reading input) = 110480
read_input 439
NONTERMINAL: GPR32_B type= xed_reg_enum_t
Adding GPR32_B to nonterminal dict
Nonterminal xed_reg_enum_t GPR32_B()::
Nonterminal name GPR32_B
read_flat_input 439
Hit a nonterminal, returning at: xed_reg_enum_t GPR32_SB()::
BLines (lines remaining after reading input) = 110447
=============================================
Creating a generator 79
=============================================
ALines (lines before reading input) = 110447
read_input 471
NONTERMINAL: GPR32_SB type= xed_reg_enum_t
Adding GPR32_SB to nonterminal dict
Nonterminal xed_reg_enum_t GPR32_SB()::
Nonterminal name GPR32_SB
read_flat_input 471
Hit a nonterminal, returning at: xed_reg_enum_t GPR16_R()::
BLines (lines remaining after reading input) = 110414
=============================================
Creating a generator 80
=============================================
ALines (lines before reading input) = 110414
read_input 503
NONTERMINAL: GPR16_R type= xed_reg_enum_t
Adding GPR16_R to nonterminal dict
Nonterminal xed_reg_enum_t GPR16_R()::
Nonterminal name GPR16_R
read_flat_input 503
Hit a nonterminal, returning at: xed_reg_enum_t GPR16_B()::
BLines (lines remaining after reading input) = 110381
=============================================
Creating a generator 81
=============================================
ALines (lines before reading input) = 110381
read_input 535
NONTERMINAL: GPR16_B type= xed_reg_enum_t
Adding GPR16_B to nonterminal dict
Nonterminal xed_reg_enum_t GPR16_B()::
Nonterminal name GPR16_B
read_flat_input 535
Hit a nonterminal, returning at: xed_reg_enum_t GPR16_SB()::
BLines (lines remaining after reading input) = 110348
=============================================
Creating a generator 82
=============================================
ALines (lines before reading input) = 110348
read_input 567
NONTERMINAL: GPR16_SB type= xed_reg_enum_t
Adding GPR16_SB to nonterminal dict
Nonterminal xed_reg_enum_t GPR16_SB()::
Nonterminal name GPR16_SB
read_flat_input 567
Hit a nonterminal, returning at: xed_reg_enum_t CR_R()::
BLines (lines remaining after reading input) = 110315
=============================================
Creating a generator 83
=============================================
ALines (lines before reading input) = 110315
read_input 599
NONTERMINAL: CR_R type= xed_reg_enum_t
Adding CR_R to nonterminal dict
Nonterminal xed_reg_enum_t CR_R()::
Nonterminal name CR_R
read_flat_input 599
Hit a nonterminal, returning at: xed_reg_enum_t CR_B()::
BLines (lines remaining after reading input) = 110297
=============================================
Creating a generator 84
=============================================
ALines (lines before reading input) = 110297
read_input 616
NONTERMINAL: CR_B type= xed_reg_enum_t
Adding CR_B to nonterminal dict
Nonterminal xed_reg_enum_t CR_B()::
Nonterminal name CR_B
read_flat_input 616
Hit a nonterminal, returning at: xed_reg_enum_t DR_R()::
BLines (lines remaining after reading input) = 110279
=============================================
Creating a generator 85
=============================================
ALines (lines before reading input) = 110279
read_input 633
NONTERMINAL: DR_R type= xed_reg_enum_t
Adding DR_R to nonterminal dict
Nonterminal xed_reg_enum_t DR_R()::
Nonterminal name DR_R
read_flat_input 633
Hit a nonterminal, returning at: xed_reg_enum_t GPR8_R()::
BLines (lines remaining after reading input) = 110261
=============================================
Creating a generator 86
=============================================
ALines (lines before reading input) = 110261
read_input 650
NONTERMINAL: GPR8_R type= xed_reg_enum_t
Adding GPR8_R to nonterminal dict
Nonterminal xed_reg_enum_t GPR8_R()::
Nonterminal name GPR8_R
read_flat_input 650
Hit a nonterminal, returning at: xed_reg_enum_t GPR8_B()::
BLines (lines remaining after reading input) = 110216
=============================================
Creating a generator 87
=============================================
ALines (lines before reading input) = 110216
read_input 694
NONTERMINAL: GPR8_B type= xed_reg_enum_t
Adding GPR8_B to nonterminal dict
Nonterminal xed_reg_enum_t GPR8_B()::
Nonterminal name GPR8_B
read_flat_input 694
Hit a nonterminal, returning at: xed_reg_enum_t GPR8_SB()::
BLines (lines remaining after reading input) = 110171
=============================================
Creating a generator 88
=============================================
ALines (lines before reading input) = 110171
read_input 738
NONTERMINAL: GPR8_SB type= xed_reg_enum_t
Adding GPR8_SB to nonterminal dict
Nonterminal xed_reg_enum_t GPR8_SB()::
Nonterminal name GPR8_SB
read_flat_input 738
Hit a nonterminal, returning at: OSZ_NONTERM()::
BLines (lines remaining after reading input) = 110126
=============================================
Creating a generator 89
=============================================
ALines (lines before reading input) = 110126
read_input 782
NONTERMINAL: OSZ_NONTERM notype
Adding OSZ_NONTERM to nonterminal dict
Nonterminal OSZ_NONTERM()::
Nonterminal name OSZ_NONTERM
read_flat_input 782
Hit a nonterminal, returning at: DF64()::
BLines (lines remaining after reading input) = 110117
=============================================
Creating a generator 90
=============================================
ALines (lines before reading input) = 110117
read_input 790
NONTERMINAL: DF64 notype
Adding DF64 to nonterminal dict
Nonterminal DF64()::
Nonterminal name DF64
read_flat_input 790
Hit a nonterminal, returning at: REFINING66()::
BLines (lines remaining after reading input) = 110110
=============================================
Creating a generator 91
=============================================
ALines (lines before reading input) = 110110
read_input 796
NONTERMINAL: REFINING66 notype
Adding REFINING66 to nonterminal dict
Nonterminal REFINING66()::
Nonterminal name REFINING66
read_flat_input 796
Hit a nonterminal, returning at: IGNORE66()::
BLines (lines remaining after reading input) = 110105
=============================================
Creating a generator 92
=============================================
ALines (lines before reading input) = 110105
read_input 800
NONTERMINAL: IGNORE66 notype
Adding IGNORE66 to nonterminal dict
Nonterminal IGNORE66()::
Nonterminal name IGNORE66
read_flat_input 800
Hit a nonterminal, returning at: IMMUNE66()::
BLines (lines remaining after reading input) = 110100
=============================================
Creating a generator 93
=============================================
ALines (lines before reading input) = 110100
read_input 804
NONTERMINAL: IMMUNE66 notype
Adding IMMUNE66 to nonterminal dict
Nonterminal IMMUNE66()::
Nonterminal name IMMUNE66
read_flat_input 804
Hit a nonterminal, returning at: CR_WIDTH()::
BLines (lines remaining after reading input) = 110095
=============================================
Creating a generator 94
=============================================
ALines (lines before reading input) = 110095
read_input 808
NONTERMINAL: CR_WIDTH notype
Adding CR_WIDTH to nonterminal dict
Nonterminal CR_WIDTH()::
Nonterminal name CR_WIDTH
read_flat_input 808
Hit a nonterminal, returning at: IMMUNE66_LOOP64()::
BLines (lines remaining after reading input) = 110091
=============================================
Creating a generator 95
=============================================
ALines (lines before reading input) = 110091
read_input 811
NONTERMINAL: IMMUNE66_LOOP64 notype
Adding IMMUNE66_LOOP64 to nonterminal dict
Nonterminal IMMUNE66_LOOP64()::
Nonterminal name IMMUNE66_LOOP64
read_flat_input 811
Hit a nonterminal, returning at: IMMUNE_REXW()::
BLines (lines remaining after reading input) = 110087
=============================================
Creating a generator 96
=============================================
ALines (lines before reading input) = 110087
read_input 814
NONTERMINAL: IMMUNE_REXW notype
Adding IMMUNE_REXW to nonterminal dict
Nonterminal IMMUNE_REXW()::
Nonterminal name IMMUNE_REXW
read_flat_input 814
Hit a nonterminal, returning at: FORCE64()::
BLines (lines remaining after reading input) = 110081
=============================================
Creating a generator 97
=============================================
ALines (lines before reading input) = 110081
read_input 819
NONTERMINAL: FORCE64 notype
Adding FORCE64 to nonterminal dict
Nonterminal FORCE64()::
Nonterminal name FORCE64
read_flat_input 819
Hit a nonterminal, returning at: ASZ_NONTERM()::
BLines (lines remaining after reading input) = 110078
=============================================
Creating a generator 98
=============================================
ALines (lines before reading input) = 110078
read_input 820
NONTERMINAL: ASZ_NONTERM notype
Adding ASZ_NONTERM to nonterminal dict
Nonterminal ASZ_NONTERM()::
Nonterminal name ASZ_NONTERM
read_flat_input 820
Hit a nonterminal, returning at: ONE()::
BLines (lines remaining after reading input) = 110071
=============================================
Creating a generator 99
=============================================
ALines (lines before reading input) = 110071
read_input 826
NONTERMINAL: ONE notype
Adding ONE to nonterminal dict
Nonterminal ONE()::
Nonterminal name ONE
read_flat_input 826
Hit a nonterminal, returning at: UIMMv()::
BLines (lines remaining after reading input) = 110067
=============================================
Creating a generator 100
=============================================
ALines (lines before reading input) = 110067
read_input 829
NONTERMINAL: UIMMv notype
Adding UIMMv to nonterminal dict
Nonterminal UIMMv()::
Nonterminal name UIMMv
read_flat_input 829
Hit a nonterminal, returning at: SIMMz()::
BLines (lines remaining after reading input) = 110063
=============================================
Creating a generator 101
=============================================
ALines (lines before reading input) = 110063
read_input 832
NONTERMINAL: SIMMz notype
Adding SIMMz to nonterminal dict
Nonterminal SIMMz()::
Nonterminal name SIMMz
read_flat_input 832
Hit a nonterminal, returning at: SIMM8()::
BLines (lines remaining after reading input) = 110059
=============================================
Creating a generator 102
=============================================
ALines (lines before reading input) = 110059
read_input 835
NONTERMINAL: SIMM8 notype
Adding SIMM8 to nonterminal dict
Nonterminal SIMM8()::
Nonterminal name SIMM8
read_flat_input 835
Hit a nonterminal, returning at: UIMM8()::
BLines (lines remaining after reading input) = 110057
=============================================
Creating a generator 103
=============================================
ALines (lines before reading input) = 110057
read_input 836
NONTERMINAL: UIMM8 notype
Adding UIMM8 to nonterminal dict
Nonterminal UIMM8()::
Nonterminal name UIMM8
read_flat_input 836
Hit a nonterminal, returning at: UIMM8_1()::
BLines (lines remaining after reading input) = 110055
=============================================
Creating a generator 104
=============================================
ALines (lines before reading input) = 110055
read_input 837
NONTERMINAL: UIMM8_1 notype
Adding UIMM8_1 to nonterminal dict
Nonterminal UIMM8_1()::
Nonterminal name UIMM8_1
read_flat_input 837
Hit a nonterminal, returning at: UIMM16()::
BLines (lines remaining after reading input) = 110053
=============================================
Creating a generator 105
=============================================
ALines (lines before reading input) = 110053
read_input 838
NONTERMINAL: UIMM16 notype
Adding UIMM16 to nonterminal dict
Nonterminal UIMM16()::
Nonterminal name UIMM16
read_flat_input 838
Hit a nonterminal, returning at: UIMM32()::
BLines (lines remaining after reading input) = 110051
=============================================
Creating a generator 106
=============================================
ALines (lines before reading input) = 110051
read_input 839
NONTERMINAL: UIMM32 notype
Adding UIMM32 to nonterminal dict
Nonterminal UIMM32()::
Nonterminal name UIMM32
read_flat_input 839
Hit a nonterminal, returning at: BRDISP8()::
BLines (lines remaining after reading input) = 110049
=============================================
Creating a generator 107
=============================================
ALines (lines before reading input) = 110049
read_input 840
NONTERMINAL: BRDISP8 notype
Adding BRDISP8 to nonterminal dict
Nonterminal BRDISP8()::
Nonterminal name BRDISP8
read_flat_input 840
Hit a nonterminal, returning at: BRDISP32()::
BLines (lines remaining after reading input) = 110047
=============================================
Creating a generator 108
=============================================
ALines (lines before reading input) = 110047
read_input 841
NONTERMINAL: BRDISP32 notype
Adding BRDISP32 to nonterminal dict
Nonterminal BRDISP32()::
Nonterminal name BRDISP32
read_flat_input 841
Hit a nonterminal, returning at: BRDISP64()::
BLines (lines remaining after reading input) = 110045
=============================================
Creating a generator 109
=============================================
ALines (lines before reading input) = 110045
read_input 842
NONTERMINAL: BRDISP64 notype
Adding BRDISP64 to nonterminal dict
Nonterminal BRDISP64()::
Nonterminal name BRDISP64
read_flat_input 842
Hit a nonterminal, returning at: BRDISPz()::
BLines (lines remaining after reading input) = 110043
=============================================
Creating a generator 110
=============================================
ALines (lines before reading input) = 110043
read_input 843
NONTERMINAL: BRDISPz notype
Adding BRDISPz to nonterminal dict
Nonterminal BRDISPz()::
Nonterminal name BRDISPz
read_flat_input 843
Hit a nonterminal, returning at: MEMDISPv()::
BLines (lines remaining after reading input) = 110039
=============================================
Creating a generator 111
=============================================
ALines (lines before reading input) = 110039
read_input 846
NONTERMINAL: MEMDISPv notype
Adding MEMDISPv to nonterminal dict
Nonterminal MEMDISPv()::
Nonterminal name MEMDISPv
read_flat_input 846
Hit a nonterminal, returning at: MEMDISP32()::
BLines (lines remaining after reading input) = 110035
=============================================
Creating a generator 112
=============================================
ALines (lines before reading input) = 110035
read_input 849
NONTERMINAL: MEMDISP32 notype
Adding MEMDISP32 to nonterminal dict
Nonterminal MEMDISP32()::
Nonterminal name MEMDISP32
read_flat_input 849
Hit a nonterminal, returning at: MEMDISP16()::
BLines (lines remaining after reading input) = 110033
=============================================
Creating a generator 113
=============================================
ALines (lines before reading input) = 110033
read_input 850
NONTERMINAL: MEMDISP16 notype
Adding MEMDISP16 to nonterminal dict
Nonterminal MEMDISP16()::
Nonterminal name MEMDISP16
read_flat_input 850
Hit a nonterminal, returning at: MEMDISP8()::
BLines (lines remaining after reading input) = 110031
=============================================
Creating a generator 114
=============================================
ALines (lines before reading input) = 110031
read_input 851
NONTERMINAL: MEMDISP8 notype
Adding MEMDISP8 to nonterminal dict
Nonterminal MEMDISP8()::
Nonterminal name MEMDISP8
read_flat_input 851
Hit a nonterminal, returning at: MEMDISP()::
BLines (lines remaining after reading input) = 110029
=============================================
Creating a generator 115
=============================================
ALines (lines before reading input) = 110029
read_input 852
NONTERMINAL: MEMDISP notype
Adding MEMDISP to nonterminal dict
Nonterminal MEMDISP()::
Nonterminal name MEMDISP
read_flat_input 852
Hit a nonterminal, returning at: MODRM()::
BLines (lines remaining after reading input) = 110024
=============================================
Creating a generator 116
=============================================
ALines (lines before reading input) = 110024
read_input 856
NONTERMINAL: MODRM notype
Adding MODRM to nonterminal dict
Nonterminal MODRM()::
Nonterminal name MODRM
read_flat_input 856
Hit a nonterminal, returning at: MODRM64alt32()::
BLines (lines remaining after reading input) = 110017
=============================================
Creating a generator 117
=============================================
ALines (lines before reading input) = 110017
read_input 862
NONTERMINAL: MODRM64alt32 notype
Adding MODRM64alt32 to nonterminal dict
Nonterminal MODRM64alt32()::
Nonterminal name MODRM64alt32
read_flat_input 862
Hit a nonterminal, returning at: MODRM32()::
BLines (lines remaining after reading input) = 109920
=============================================
Creating a generator 118
=============================================
ALines (lines before reading input) = 109920
read_input 958
NONTERMINAL: MODRM32 notype
Adding MODRM32 to nonterminal dict
Nonterminal MODRM32()::
Nonterminal name MODRM32
read_flat_input 958
Hit a nonterminal, returning at: MODRM16()::
BLines (lines remaining after reading input) = 109895
=============================================
Creating a generator 119
=============================================
ALines (lines before reading input) = 109895
read_input 982
NONTERMINAL: MODRM16 notype
Adding MODRM16 to nonterminal dict
Nonterminal MODRM16()::
Nonterminal name MODRM16
read_flat_input 982
Hit a nonterminal, returning at: SIB()::
BLines (lines remaining after reading input) = 109870
=============================================
Creating a generator 120
=============================================
ALines (lines before reading input) = 109870
read_input 1006
NONTERMINAL: SIB notype
Adding SIB to nonterminal dict
Nonterminal SIB()::
Nonterminal name SIB
read_flat_input 1006
Hit a nonterminal, returning at: SIB_BASE0()::
BLines (lines remaining after reading input) = 109741
=============================================
Creating a generator 121
=============================================
ALines (lines before reading input) = 109741
read_input 1134
NONTERMINAL: SIB_BASE0 notype
Adding SIB_BASE0 to nonterminal dict
Nonterminal SIB_BASE0()::
Nonterminal name SIB_BASE0
read_flat_input 1134
Hit a nonterminal, returning at: OVERRIDE_SEG0()::
BLines (lines remaining after reading input) = 109700
=============================================
Creating a generator 122
=============================================
ALines (lines before reading input) = 109700
read_input 1174
NONTERMINAL: OVERRIDE_SEG0 notype
Adding OVERRIDE_SEG0 to nonterminal dict
Nonterminal OVERRIDE_SEG0()::
Nonterminal name OVERRIDE_SEG0
read_flat_input 1174
Hit a nonterminal, returning at: OVERRIDE_SEG1()::
BLines (lines remaining after reading input) = 109696
=============================================
Creating a generator 123
=============================================
ALines (lines before reading input) = 109696
read_input 1177
NONTERMINAL: OVERRIDE_SEG1 notype
Adding OVERRIDE_SEG1 to nonterminal dict
Nonterminal OVERRIDE_SEG1()::
Nonterminal name OVERRIDE_SEG1
read_flat_input 1177
Hit a nonterminal, returning at: xed_reg_enum_t XMM_R()::
BLines (lines remaining after reading input) = 109692
=============================================
Creating a generator 124
=============================================
ALines (lines before reading input) = 109692
read_input 1180
NONTERMINAL: XMM_R type= xed_reg_enum_t
Adding XMM_R to nonterminal dict
Nonterminal xed_reg_enum_t XMM_R()::
Nonterminal name XMM_R
read_flat_input 1180
Hit a nonterminal, returning at: xed_reg_enum_t XMM_R_32()::
BLines (lines remaining after reading input) = 109688
=============================================
Creating a generator 125
=============================================
ALines (lines before reading input) = 109688
read_input 1183
NONTERMINAL: XMM_R_32 type= xed_reg_enum_t
Adding XMM_R_32 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_R_32()::
Nonterminal name XMM_R_32
read_flat_input 1183
Hit a nonterminal, returning at: xed_reg_enum_t XMM_R_64()::
BLines (lines remaining after reading input) = 109679
=============================================
Creating a generator 126
=============================================
ALines (lines before reading input) = 109679
read_input 1191
NONTERMINAL: XMM_R_64 type= xed_reg_enum_t
Adding XMM_R_64 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_R_64()::
Nonterminal name XMM_R_64
read_flat_input 1191
Hit a nonterminal, returning at: xed_reg_enum_t XMM_B()::
BLines (lines remaining after reading input) = 109662
=============================================
Creating a generator 127
=============================================
ALines (lines before reading input) = 109662
read_input 1207
NONTERMINAL: XMM_B type= xed_reg_enum_t
Adding XMM_B to nonterminal dict
Nonterminal xed_reg_enum_t XMM_B()::
Nonterminal name XMM_B
read_flat_input 1207
Hit a nonterminal, returning at: xed_reg_enum_t XMM_B_32()::
BLines (lines remaining after reading input) = 109658
=============================================
Creating a generator 128
=============================================
ALines (lines before reading input) = 109658
read_input 1210
NONTERMINAL: XMM_B_32 type= xed_reg_enum_t
Adding XMM_B_32 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_B_32()::
Nonterminal name XMM_B_32
read_flat_input 1210
Hit a nonterminal, returning at: xed_reg_enum_t XMM_B_64()::
BLines (lines remaining after reading input) = 109649
=============================================
Creating a generator 129
=============================================
ALines (lines before reading input) = 109649
read_input 1218
NONTERMINAL: XMM_B_64 type= xed_reg_enum_t
Adding XMM_B_64 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_B_64()::
Nonterminal name XMM_B_64
read_flat_input 1218
Hit a nonterminal, returning at: AVX_SPLITTER()::
BLines (lines remaining after reading input) = 109632
=============================================
Creating a generator 130
=============================================
ALines (lines before reading input) = 109632
read_input 1234
NONTERMINAL: AVX_SPLITTER notype
Adding AVX_SPLITTER to nonterminal dict
Nonterminal AVX_SPLITTER()::
Nonterminal name AVX_SPLITTER
read_flat_input 1234
Hit a nonterminal, returning at: EVEX_SPLITTER()::
BLines (lines remaining after reading input) = 109630
=============================================
Creating a generator 131
=============================================
ALines (lines before reading input) = 109630
read_input 1235
NONTERMINAL: EVEX_SPLITTER notype
Adding EVEX_SPLITTER to nonterminal dict
Nonterminal EVEX_SPLITTER()::
Nonterminal name EVEX_SPLITTER
read_flat_input 1235
Hit a nonterminal, returning at: BND_R_CHECK()::
BLines (lines remaining after reading input) = 109628
=============================================
Creating a generator 132
=============================================
ALines (lines before reading input) = 109628
read_input 1236
NONTERMINAL: BND_R_CHECK notype
Adding BND_R_CHECK to nonterminal dict
Nonterminal BND_R_CHECK()::
Nonterminal name BND_R_CHECK
read_flat_input 1236
Hit a nonterminal, returning at: BND_B_CHECK()::
BLines (lines remaining after reading input) = 109611
=============================================
Creating a generator 133
=============================================
ALines (lines before reading input) = 109611
read_input 1252
NONTERMINAL: BND_B_CHECK notype
Adding BND_B_CHECK to nonterminal dict
Nonterminal BND_B_CHECK()::
Nonterminal name BND_B_CHECK
read_flat_input 1252
Hit a nonterminal, returning at: xed_reg_enum_t BND_R()::
BLines (lines remaining after reading input) = 109594
=============================================
Creating a generator 134
=============================================
ALines (lines before reading input) = 109594
read_input 1268
NONTERMINAL: BND_R type= xed_reg_enum_t
Adding BND_R to nonterminal dict
Nonterminal xed_reg_enum_t BND_R()::
Nonterminal name BND_R
read_flat_input 1268
Hit a nonterminal, returning at: xed_reg_enum_t BND_B()::
BLines (lines remaining after reading input) = 109577
=============================================
Creating a generator 135
=============================================
ALines (lines before reading input) = 109577
read_input 1284
NONTERMINAL: BND_B type= xed_reg_enum_t
Adding BND_B to nonterminal dict
Nonterminal xed_reg_enum_t BND_B()::
Nonterminal name BND_B
read_flat_input 1284
Hit a nonterminal, returning at: xed_reg_enum_t A_GPR_R()::
BLines (lines remaining after reading input) = 109560
=============================================
Creating a generator 136
=============================================
ALines (lines before reading input) = 109560
read_input 1300
NONTERMINAL: A_GPR_R type= xed_reg_enum_t
Adding A_GPR_R to nonterminal dict
Nonterminal xed_reg_enum_t A_GPR_R()::
Nonterminal name A_GPR_R
read_flat_input 1300
Hit a nonterminal, returning at: xed_reg_enum_t A_GPR_B()::
BLines (lines remaining after reading input) = 109527
=============================================
Creating a generator 137
=============================================
ALines (lines before reading input) = 109527
read_input 1332
NONTERMINAL: A_GPR_B type= xed_reg_enum_t
Adding A_GPR_B to nonterminal dict
Nonterminal xed_reg_enum_t A_GPR_B()::
Nonterminal name A_GPR_B
read_flat_input 1332
Hit a nonterminal, returning at: xed_reg_enum_t XMM_SE()::
BLines (lines remaining after reading input) = 109494
=============================================
Creating a generator 138
=============================================
ALines (lines before reading input) = 109494
read_input 1364
NONTERMINAL: XMM_SE type= xed_reg_enum_t
Adding XMM_SE to nonterminal dict
Nonterminal xed_reg_enum_t XMM_SE()::
Nonterminal name XMM_SE
read_flat_input 1364
Hit a nonterminal, returning at: xed_reg_enum_t XMM_SE64()::
BLines (lines remaining after reading input) = 109490
=============================================
Creating a generator 139
=============================================
ALines (lines before reading input) = 109490
read_input 1367
NONTERMINAL: XMM_SE64 type= xed_reg_enum_t
Adding XMM_SE64 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_SE64()::
Nonterminal name XMM_SE64
read_flat_input 1367
Hit a nonterminal, returning at: xed_reg_enum_t XMM_SE32()::
BLines (lines remaining after reading input) = 109473
=============================================
Creating a generator 140
=============================================
ALines (lines before reading input) = 109473
read_input 1383
NONTERMINAL: XMM_SE32 type= xed_reg_enum_t
Adding XMM_SE32 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_SE32()::
Nonterminal name XMM_SE32
read_flat_input 1383
Hit a nonterminal, returning at: xed_reg_enum_t YMM_SE()::
BLines (lines remaining after reading input) = 109456
=============================================
Creating a generator 141
=============================================
ALines (lines before reading input) = 109456
read_input 1399
NONTERMINAL: YMM_SE type= xed_reg_enum_t
Adding YMM_SE to nonterminal dict
Nonterminal xed_reg_enum_t YMM_SE()::
Nonterminal name YMM_SE
read_flat_input 1399
Hit a nonterminal, returning at: xed_reg_enum_t YMM_SE64()::
BLines (lines remaining after reading input) = 109452
=============================================
Creating a generator 142
=============================================
ALines (lines before reading input) = 109452
read_input 1402
NONTERMINAL: YMM_SE64 type= xed_reg_enum_t
Adding YMM_SE64 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_SE64()::
Nonterminal name YMM_SE64
read_flat_input 1402
Hit a nonterminal, returning at: xed_reg_enum_t YMM_SE32()::
BLines (lines remaining after reading input) = 109435
=============================================
Creating a generator 143
=============================================
ALines (lines before reading input) = 109435
read_input 1418
NONTERMINAL: YMM_SE32 type= xed_reg_enum_t
Adding YMM_SE32 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_SE32()::
Nonterminal name YMM_SE32
read_flat_input 1418
Hit a nonterminal, returning at: xed_reg_enum_t XMM_N()::
BLines (lines remaining after reading input) = 109418
=============================================
Creating a generator 144
=============================================
ALines (lines before reading input) = 109418
read_input 1434
NONTERMINAL: XMM_N type= xed_reg_enum_t
Adding XMM_N to nonterminal dict
Nonterminal xed_reg_enum_t XMM_N()::
Nonterminal name XMM_N
read_flat_input 1434
Hit a nonterminal, returning at: xed_reg_enum_t XMM_N_32()::
BLines (lines remaining after reading input) = 109414
=============================================
Creating a generator 145
=============================================
ALines (lines before reading input) = 109414
read_input 1437
NONTERMINAL: XMM_N_32 type= xed_reg_enum_t
Adding XMM_N_32 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_N_32()::
Nonterminal name XMM_N_32
read_flat_input 1437
Hit a nonterminal, returning at: xed_reg_enum_t XMM_N_64()::
BLines (lines remaining after reading input) = 109405
=============================================
Creating a generator 146
=============================================
ALines (lines before reading input) = 109405
read_input 1445
NONTERMINAL: XMM_N_64 type= xed_reg_enum_t
Adding XMM_N_64 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_N_64()::
Nonterminal name XMM_N_64
read_flat_input 1445
Hit a nonterminal, returning at: xed_reg_enum_t YMM_N()::
BLines (lines remaining after reading input) = 109388
=============================================
Creating a generator 147
=============================================
ALines (lines before reading input) = 109388
read_input 1461
NONTERMINAL: YMM_N type= xed_reg_enum_t
Adding YMM_N to nonterminal dict
Nonterminal xed_reg_enum_t YMM_N()::
Nonterminal name YMM_N
read_flat_input 1461
Hit a nonterminal, returning at: xed_reg_enum_t YMM_N_32()::
BLines (lines remaining after reading input) = 109384
=============================================
Creating a generator 148
=============================================
ALines (lines before reading input) = 109384
read_input 1464
NONTERMINAL: YMM_N_32 type= xed_reg_enum_t
Adding YMM_N_32 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_N_32()::
Nonterminal name YMM_N_32
read_flat_input 1464
Hit a nonterminal, returning at: xed_reg_enum_t YMM_N_64()::
BLines (lines remaining after reading input) = 109375
=============================================
Creating a generator 149
=============================================
ALines (lines before reading input) = 109375
read_input 1472
NONTERMINAL: YMM_N_64 type= xed_reg_enum_t
Adding YMM_N_64 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_N_64()::
Nonterminal name YMM_N_64
read_flat_input 1472
Hit a nonterminal, returning at: xed_reg_enum_t YMM_R()::
BLines (lines remaining after reading input) = 109358
=============================================
Creating a generator 150
=============================================
ALines (lines before reading input) = 109358
read_input 1488
NONTERMINAL: YMM_R type= xed_reg_enum_t
Adding YMM_R to nonterminal dict
Nonterminal xed_reg_enum_t YMM_R()::
Nonterminal name YMM_R
read_flat_input 1488
Hit a nonterminal, returning at: xed_reg_enum_t YMM_R_32()::
BLines (lines remaining after reading input) = 109354
=============================================
Creating a generator 151
=============================================
ALines (lines before reading input) = 109354
read_input 1491
NONTERMINAL: YMM_R_32 type= xed_reg_enum_t
Adding YMM_R_32 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_R_32()::
Nonterminal name YMM_R_32
read_flat_input 1491
Hit a nonterminal, returning at: xed_reg_enum_t YMM_R_64()::
BLines (lines remaining after reading input) = 109345
=============================================
Creating a generator 152
=============================================
ALines (lines before reading input) = 109345
read_input 1499
NONTERMINAL: YMM_R_64 type= xed_reg_enum_t
Adding YMM_R_64 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_R_64()::
Nonterminal name YMM_R_64
read_flat_input 1499
Hit a nonterminal, returning at: xed_reg_enum_t YMM_B()::
BLines (lines remaining after reading input) = 109328
=============================================
Creating a generator 153
=============================================
ALines (lines before reading input) = 109328
read_input 1515
NONTERMINAL: YMM_B type= xed_reg_enum_t
Adding YMM_B to nonterminal dict
Nonterminal xed_reg_enum_t YMM_B()::
Nonterminal name YMM_B
read_flat_input 1515
Hit a nonterminal, returning at: xed_reg_enum_t YMM_B_32()::
BLines (lines remaining after reading input) = 109324
=============================================
Creating a generator 154
=============================================
ALines (lines before reading input) = 109324
read_input 1518
NONTERMINAL: YMM_B_32 type= xed_reg_enum_t
Adding YMM_B_32 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_B_32()::
Nonterminal name YMM_B_32
read_flat_input 1518
Hit a nonterminal, returning at: xed_reg_enum_t YMM_B_64()::
BLines (lines remaining after reading input) = 109315
=============================================
Creating a generator 155
=============================================
ALines (lines before reading input) = 109315
read_input 1526
NONTERMINAL: YMM_B_64 type= xed_reg_enum_t
Adding YMM_B_64 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_B_64()::
Nonterminal name YMM_B_64
read_flat_input 1526
Hit a nonterminal, returning at: AVX_SPLITTER()::
BLines (lines remaining after reading input) = 109298
=============================================
Creating a generator 156
=============================================
ALines (lines before reading input) = 109298
read_input 1542
NONTERMINAL: AVX_SPLITTER notype
FOUND OLD PARSER FOR AVX_SPLITTER
Nonterminal AVX_SPLITTER()::
Nonterminal name AVX_SPLITTER
read_flat_input 1542
Hit a nonterminal, returning at: SE_IMM8()::
BLines (lines remaining after reading input) = 109295
=============================================
Creating a generator 156
=============================================
ALines (lines before reading input) = 109295
read_input 1544
NONTERMINAL: SE_IMM8 notype
Adding SE_IMM8 to nonterminal dict
Nonterminal SE_IMM8()::
Nonterminal name SE_IMM8
read_flat_input 1544
Hit a nonterminal, returning at: VMODRM_YMM()::
BLines (lines remaining after reading input) = 109293
=============================================
Creating a generator 157
=============================================
ALines (lines before reading input) = 109293
read_input 1545
NONTERMINAL: VMODRM_YMM notype
Adding VMODRM_YMM to nonterminal dict
Nonterminal VMODRM_YMM()::
Nonterminal name VMODRM_YMM
read_flat_input 1545
Hit a nonterminal, returning at: VMODRM_XMM()::
BLines (lines remaining after reading input) = 109289
=============================================
Creating a generator 158
=============================================
ALines (lines before reading input) = 109289
read_input 1548
NONTERMINAL: VMODRM_XMM notype
Adding VMODRM_XMM to nonterminal dict
Nonterminal VMODRM_XMM()::
Nonterminal name VMODRM_XMM
read_flat_input 1548
Hit a nonterminal, returning at: VSIB_YMM()::
BLines (lines remaining after reading input) = 109285
=============================================
Creating a generator 159
=============================================
ALines (lines before reading input) = 109285
read_input 1551
NONTERMINAL: VSIB_YMM notype
Adding VSIB_YMM to nonterminal dict
Nonterminal VSIB_YMM()::
Nonterminal name VSIB_YMM
read_flat_input 1551
Hit a nonterminal, returning at: VSIB_XMM()::
BLines (lines remaining after reading input) = 109280
=============================================
Creating a generator 160
=============================================
ALines (lines before reading input) = 109280
read_input 1555
NONTERMINAL: VSIB_XMM notype
Adding VSIB_XMM to nonterminal dict
Nonterminal VSIB_XMM()::
Nonterminal name VSIB_XMM
read_flat_input 1555
Hit a nonterminal, returning at: xed_reg_enum_t VSIB_INDEX_YMM()::
BLines (lines remaining after reading input) = 109275
=============================================
Creating a generator 161
=============================================
ALines (lines before reading input) = 109275
read_input 1559
NONTERMINAL: VSIB_INDEX_YMM type= xed_reg_enum_t
Adding VSIB_INDEX_YMM to nonterminal dict
Nonterminal xed_reg_enum_t VSIB_INDEX_YMM()::
Nonterminal name VSIB_INDEX_YMM
read_flat_input 1559
Hit a nonterminal, returning at: xed_reg_enum_t VSIB_INDEX_XMM()::
BLines (lines remaining after reading input) = 109258
=============================================
Creating a generator 162
=============================================
ALines (lines before reading input) = 109258
read_input 1575
NONTERMINAL: VSIB_INDEX_XMM type= xed_reg_enum_t
Adding VSIB_INDEX_XMM to nonterminal dict
Nonterminal xed_reg_enum_t VSIB_INDEX_XMM()::
Nonterminal name VSIB_INDEX_XMM
read_flat_input 1575
Hit a nonterminal, returning at: VSIB_BASE()::
BLines (lines remaining after reading input) = 109241
=============================================
Creating a generator 163
=============================================
ALines (lines before reading input) = 109241
read_input 1591
NONTERMINAL: VSIB_BASE notype
Adding VSIB_BASE to nonterminal dict
Nonterminal VSIB_BASE()::
Nonterminal name VSIB_BASE
read_flat_input 1591
Hit a nonterminal, returning at: xed_reg_enum_t VGPRy_R()::
BLines (lines remaining after reading input) = 109222
=============================================
Creating a generator 164
=============================================
ALines (lines before reading input) = 109222
read_input 1609
NONTERMINAL: VGPRy_R type= xed_reg_enum_t
Adding VGPRy_R to nonterminal dict
Nonterminal xed_reg_enum_t VGPRy_R()::
Nonterminal name VGPRy_R
read_flat_input 1609
Hit a nonterminal, returning at: xed_reg_enum_t VGPRy_B()::
BLines (lines remaining after reading input) = 109218
=============================================
Creating a generator 165
=============================================
ALines (lines before reading input) = 109218
read_input 1612
NONTERMINAL: VGPRy_B type= xed_reg_enum_t
Adding VGPRy_B to nonterminal dict
Nonterminal xed_reg_enum_t VGPRy_B()::
Nonterminal name VGPRy_B
read_flat_input 1612
Hit a nonterminal, returning at: xed_reg_enum_t VGPRy_N()::
BLines (lines remaining after reading input) = 109214
=============================================
Creating a generator 166
=============================================
ALines (lines before reading input) = 109214
read_input 1615
NONTERMINAL: VGPRy_N type= xed_reg_enum_t
Adding VGPRy_N to nonterminal dict
Nonterminal xed_reg_enum_t VGPRy_N()::
Nonterminal name VGPRy_N
read_flat_input 1615
Hit a nonterminal, returning at: xed_reg_enum_t VGPR32_N()::
BLines (lines remaining after reading input) = 109210
=============================================
Creating a generator 167
=============================================
ALines (lines before reading input) = 109210
read_input 1618
NONTERMINAL: VGPR32_N type= xed_reg_enum_t
Adding VGPR32_N to nonterminal dict
Nonterminal xed_reg_enum_t VGPR32_N()::
Nonterminal name VGPR32_N
read_flat_input 1618
Hit a nonterminal, returning at: xed_reg_enum_t VGPR32_B()::
BLines (lines remaining after reading input) = 109206
=============================================
Creating a generator 168
=============================================
ALines (lines before reading input) = 109206
read_input 1621
NONTERMINAL: VGPR32_B type= xed_reg_enum_t
Adding VGPR32_B to nonterminal dict
Nonterminal xed_reg_enum_t VGPR32_B()::
Nonterminal name VGPR32_B
read_flat_input 1621
Hit a nonterminal, returning at: xed_reg_enum_t VGPR32_R()::
BLines (lines remaining after reading input) = 109202
=============================================
Creating a generator 169
=============================================
ALines (lines before reading input) = 109202
read_input 1624
NONTERMINAL: VGPR32_R type= xed_reg_enum_t
Adding VGPR32_R to nonterminal dict
Nonterminal xed_reg_enum_t VGPR32_R()::
Nonterminal name VGPR32_R
read_flat_input 1624
Hit a nonterminal, returning at: xed_reg_enum_t VGPR32_N_32()::
BLines (lines remaining after reading input) = 109198
=============================================
Creating a generator 170
=============================================
ALines (lines before reading input) = 109198
read_input 1627
NONTERMINAL: VGPR32_N_32 type= xed_reg_enum_t
Adding VGPR32_N_32 to nonterminal dict
Nonterminal xed_reg_enum_t VGPR32_N_32()::
Nonterminal name VGPR32_N_32
read_flat_input 1627
Hit a nonterminal, returning at: xed_reg_enum_t VGPR32_N_64()::
BLines (lines remaining after reading input) = 109189
=============================================
Creating a generator 171
=============================================
ALines (lines before reading input) = 109189
read_input 1635
NONTERMINAL: VGPR32_N_64 type= xed_reg_enum_t
Adding VGPR32_N_64 to nonterminal dict
Nonterminal xed_reg_enum_t VGPR32_N_64()::
Nonterminal name VGPR32_N_64
read_flat_input 1635
Hit a nonterminal, returning at: xed_reg_enum_t VGPR64_N()::
BLines (lines remaining after reading input) = 109172
=============================================
Creating a generator 172
=============================================
ALines (lines before reading input) = 109172
read_input 1651
NONTERMINAL: VGPR64_N type= xed_reg_enum_t
Adding VGPR64_N to nonterminal dict
Nonterminal xed_reg_enum_t VGPR64_N()::
Nonterminal name VGPR64_N
read_flat_input 1651
Hit a nonterminal, returning at: xed_reg_enum_t VGPR32_R_32()::
BLines (lines remaining after reading input) = 109155
=============================================
Creating a generator 173
=============================================
ALines (lines before reading input) = 109155
read_input 1667
NONTERMINAL: VGPR32_R_32 type= xed_reg_enum_t
Adding VGPR32_R_32 to nonterminal dict
Nonterminal xed_reg_enum_t VGPR32_R_32()::
Nonterminal name VGPR32_R_32
read_flat_input 1667
Hit a nonterminal, returning at: xed_reg_enum_t VGPR32_R_64()::
BLines (lines remaining after reading input) = 109146
=============================================
Creating a generator 174
=============================================
ALines (lines before reading input) = 109146
read_input 1675
NONTERMINAL: VGPR32_R_64 type= xed_reg_enum_t
Adding VGPR32_R_64 to nonterminal dict
Nonterminal xed_reg_enum_t VGPR32_R_64()::
Nonterminal name VGPR32_R_64
read_flat_input 1675
Hit a nonterminal, returning at: xed_reg_enum_t VGPR64_R()::
BLines (lines remaining after reading input) = 109129
=============================================
Creating a generator 175
=============================================
ALines (lines before reading input) = 109129
read_input 1691
NONTERMINAL: VGPR64_R type= xed_reg_enum_t
Adding VGPR64_R to nonterminal dict
Nonterminal xed_reg_enum_t VGPR64_R()::
Nonterminal name VGPR64_R
read_flat_input 1691
Hit a nonterminal, returning at: xed_reg_enum_t VGPR32_B_32()::
BLines (lines remaining after reading input) = 109112
=============================================
Creating a generator 176
=============================================
ALines (lines before reading input) = 109112
read_input 1707
NONTERMINAL: VGPR32_B_32 type= xed_reg_enum_t
Adding VGPR32_B_32 to nonterminal dict
Nonterminal xed_reg_enum_t VGPR32_B_32()::
Nonterminal name VGPR32_B_32
read_flat_input 1707
Hit a nonterminal, returning at: xed_reg_enum_t VGPR32_B_64()::
BLines (lines remaining after reading input) = 109103
=============================================
Creating a generator 177
=============================================
ALines (lines before reading input) = 109103
read_input 1715
NONTERMINAL: VGPR32_B_64 type= xed_reg_enum_t
Adding VGPR32_B_64 to nonterminal dict
Nonterminal xed_reg_enum_t VGPR32_B_64()::
Nonterminal name VGPR32_B_64
read_flat_input 1715
Hit a nonterminal, returning at: xed_reg_enum_t VGPR64_B()::
BLines (lines remaining after reading input) = 109086
=============================================
Creating a generator 178
=============================================
ALines (lines before reading input) = 109086
read_input 1731
NONTERMINAL: VGPR64_B type= xed_reg_enum_t
Adding VGPR64_B to nonterminal dict
Nonterminal xed_reg_enum_t VGPR64_B()::
Nonterminal name VGPR64_B
read_flat_input 1731
Hit a nonterminal, returning at: NELEM_TUPLE1_4X()::
BLines (lines remaining after reading input) = 109069
=============================================
Creating a generator 179
=============================================
ALines (lines before reading input) = 109069
read_input 1747
NONTERMINAL: NELEM_TUPLE1_4X notype
Adding NELEM_TUPLE1_4X to nonterminal dict
Nonterminal NELEM_TUPLE1_4X()::
Nonterminal name NELEM_TUPLE1_4X
read_flat_input 1747
Hit a nonterminal, returning at: EVEX_SPLITTER()::
BLines (lines remaining after reading input) = 109065
=============================================
Creating a generator 180
=============================================
ALines (lines before reading input) = 109065
read_input 1750
NONTERMINAL: EVEX_SPLITTER notype
FOUND OLD PARSER FOR EVEX_SPLITTER
Nonterminal EVEX_SPLITTER()::
Nonterminal name EVEX_SPLITTER
read_flat_input 1750
Hit a nonterminal, returning at: AVX512_ROUND()::
BLines (lines remaining after reading input) = 109061
=============================================
Creating a generator 180
=============================================
ALines (lines before reading input) = 109061
read_input 1753
NONTERMINAL: AVX512_ROUND notype
Adding AVX512_ROUND to nonterminal dict
Nonterminal AVX512_ROUND()::
Nonterminal name AVX512_ROUND
read_flat_input 1753
Hit a nonterminal, returning at: SAE()::
BLines (lines remaining after reading input) = 109056
=============================================
Creating a generator 181
=============================================
ALines (lines before reading input) = 109056
read_input 1757
NONTERMINAL: SAE notype
Adding SAE to nonterminal dict
Nonterminal SAE()::
Nonterminal name SAE
read_flat_input 1757
Hit a nonterminal, returning at: EVEXR4_ONE()::
BLines (lines remaining after reading input) = 109053
=============================================
Creating a generator 182
=============================================
ALines (lines before reading input) = 109053
read_input 1759
NONTERMINAL: EVEXR4_ONE notype
Adding EVEXR4_ONE to nonterminal dict
Nonterminal EVEXR4_ONE()::
Nonterminal name EVEXR4_ONE
read_flat_input 1759
Hit a nonterminal, returning at: ESIZE_128_BITS()::
BLines (lines remaining after reading input) = 109051
=============================================
Creating a generator 183
=============================================
ALines (lines before reading input) = 109051
read_input 1760
NONTERMINAL: ESIZE_128_BITS notype
Adding ESIZE_128_BITS to nonterminal dict
Nonterminal ESIZE_128_BITS()::
Nonterminal name ESIZE_128_BITS
read_flat_input 1760
Hit a nonterminal, returning at: ESIZE_64_BITS()::
BLines (lines remaining after reading input) = 109049
=============================================
Creating a generator 184
=============================================
ALines (lines before reading input) = 109049
read_input 1761
NONTERMINAL: ESIZE_64_BITS notype
Adding ESIZE_64_BITS to nonterminal dict
Nonterminal ESIZE_64_BITS()::
Nonterminal name ESIZE_64_BITS
read_flat_input 1761
Hit a nonterminal, returning at: ESIZE_32_BITS()::
BLines (lines remaining after reading input) = 109047
=============================================
Creating a generator 185
=============================================
ALines (lines before reading input) = 109047
read_input 1762
NONTERMINAL: ESIZE_32_BITS notype
Adding ESIZE_32_BITS to nonterminal dict
Nonterminal ESIZE_32_BITS()::
Nonterminal name ESIZE_32_BITS
read_flat_input 1762
Hit a nonterminal, returning at: ESIZE_16_BITS()::
BLines (lines remaining after reading input) = 109045
=============================================
Creating a generator 186
=============================================
ALines (lines before reading input) = 109045
read_input 1763
NONTERMINAL: ESIZE_16_BITS notype
Adding ESIZE_16_BITS to nonterminal dict
Nonterminal ESIZE_16_BITS()::
Nonterminal name ESIZE_16_BITS
read_flat_input 1763
Hit a nonterminal, returning at: ESIZE_8_BITS()::
BLines (lines remaining after reading input) = 109043
=============================================
Creating a generator 187
=============================================
ALines (lines before reading input) = 109043
read_input 1764
NONTERMINAL: ESIZE_8_BITS notype
Adding ESIZE_8_BITS to nonterminal dict
Nonterminal ESIZE_8_BITS()::
Nonterminal name ESIZE_8_BITS
read_flat_input 1764
Hit a nonterminal, returning at: ESIZE_4_BITS()::
BLines (lines remaining after reading input) = 109041
=============================================
Creating a generator 188
=============================================
ALines (lines before reading input) = 109041
read_input 1765
NONTERMINAL: ESIZE_4_BITS notype
Adding ESIZE_4_BITS to nonterminal dict
Nonterminal ESIZE_4_BITS()::
Nonterminal name ESIZE_4_BITS
read_flat_input 1765
Hit a nonterminal, returning at: ESIZE_2_BITS()::
BLines (lines remaining after reading input) = 109039
=============================================
Creating a generator 189
=============================================
ALines (lines before reading input) = 109039
read_input 1766
NONTERMINAL: ESIZE_2_BITS notype
Adding ESIZE_2_BITS to nonterminal dict
Nonterminal ESIZE_2_BITS()::
Nonterminal name ESIZE_2_BITS
read_flat_input 1766
Hit a nonterminal, returning at: ESIZE_1_BITS()::
BLines (lines remaining after reading input) = 109037
=============================================
Creating a generator 190
=============================================
ALines (lines before reading input) = 109037
read_input 1767
NONTERMINAL: ESIZE_1_BITS notype
Adding ESIZE_1_BITS to nonterminal dict
Nonterminal ESIZE_1_BITS()::
Nonterminal name ESIZE_1_BITS
read_flat_input 1767
Hit a nonterminal, returning at: NELEM_MOVDDUP()::
BLines (lines remaining after reading input) = 109035
=============================================
Creating a generator 191
=============================================
ALines (lines before reading input) = 109035
read_input 1768
NONTERMINAL: NELEM_MOVDDUP notype
Adding NELEM_MOVDDUP to nonterminal dict
Nonterminal NELEM_MOVDDUP()::
Nonterminal name NELEM_MOVDDUP
read_flat_input 1768
Hit a nonterminal, returning at: NELEM_FULLMEM()::
BLines (lines remaining after reading input) = 109031
=============================================
Creating a generator 192
=============================================
ALines (lines before reading input) = 109031
read_input 1771
NONTERMINAL: NELEM_FULLMEM notype
Adding NELEM_FULLMEM to nonterminal dict
Nonterminal NELEM_FULLMEM()::
Nonterminal name NELEM_FULLMEM
read_flat_input 1771
Hit a nonterminal, returning at: NELEM_HALFMEM()::
BLines (lines remaining after reading input) = 109000
=============================================
Creating a generator 193
=============================================
ALines (lines before reading input) = 109000
read_input 1801
NONTERMINAL: NELEM_HALFMEM notype
Adding NELEM_HALFMEM to nonterminal dict
Nonterminal NELEM_HALFMEM()::
Nonterminal name NELEM_HALFMEM
read_flat_input 1801
Hit a nonterminal, returning at: NELEM_QUARTERMEM()::
BLines (lines remaining after reading input) = 108969
=============================================
Creating a generator 194
=============================================
ALines (lines before reading input) = 108969
read_input 1831
NONTERMINAL: NELEM_QUARTERMEM notype
Adding NELEM_QUARTERMEM to nonterminal dict
Nonterminal NELEM_QUARTERMEM()::
Nonterminal name NELEM_QUARTERMEM
read_flat_input 1831
Hit a nonterminal, returning at: NELEM_EIGHTHMEM()::
BLines (lines remaining after reading input) = 108938
=============================================
Creating a generator 195
=============================================
ALines (lines before reading input) = 108938
read_input 1861
NONTERMINAL: NELEM_EIGHTHMEM notype
Adding NELEM_EIGHTHMEM to nonterminal dict
Nonterminal NELEM_EIGHTHMEM()::
Nonterminal name NELEM_EIGHTHMEM
read_flat_input 1861
Hit a nonterminal, returning at: NELEM_GPR_READER_BYTE()::
BLines (lines remaining after reading input) = 108907
=============================================
Creating a generator 196
=============================================
ALines (lines before reading input) = 108907
read_input 1891
NONTERMINAL: NELEM_GPR_READER_BYTE notype
Adding NELEM_GPR_READER_BYTE to nonterminal dict
Nonterminal NELEM_GPR_READER_BYTE()::
Nonterminal name NELEM_GPR_READER_BYTE
read_flat_input 1891
Hit a nonterminal, returning at: NELEM_GPR_READER_WORD()::
BLines (lines remaining after reading input) = 108903
=============================================
Creating a generator 197
=============================================
ALines (lines before reading input) = 108903
read_input 1894
NONTERMINAL: NELEM_GPR_READER_WORD notype
Adding NELEM_GPR_READER_WORD to nonterminal dict
Nonterminal NELEM_GPR_READER_WORD()::
Nonterminal name NELEM_GPR_READER_WORD
read_flat_input 1894
Hit a nonterminal, returning at: NELEM_GPR_WRITER_LDOP_D()::
BLines (lines remaining after reading input) = 108899
=============================================
Creating a generator 198
=============================================
ALines (lines before reading input) = 108899
read_input 1897
NONTERMINAL: NELEM_GPR_WRITER_LDOP_D notype
Adding NELEM_GPR_WRITER_LDOP_D to nonterminal dict
Nonterminal NELEM_GPR_WRITER_LDOP_D()::
Nonterminal name NELEM_GPR_WRITER_LDOP_D
read_flat_input 1897
Hit a nonterminal, returning at: NELEM_GPR_WRITER_LDOP_Q()::
BLines (lines remaining after reading input) = 108895
=============================================
Creating a generator 199
=============================================
ALines (lines before reading input) = 108895
read_input 1900
NONTERMINAL: NELEM_GPR_WRITER_LDOP_Q notype
Adding NELEM_GPR_WRITER_LDOP_Q to nonterminal dict
Nonterminal NELEM_GPR_WRITER_LDOP_Q()::
Nonterminal name NELEM_GPR_WRITER_LDOP_Q
read_flat_input 1900
Hit a nonterminal, returning at: NELEM_GPR_WRITER_STORE_BYTE()::
BLines (lines remaining after reading input) = 108891
=============================================
Creating a generator 200
=============================================
ALines (lines before reading input) = 108891
read_input 1903
NONTERMINAL: NELEM_GPR_WRITER_STORE_BYTE notype
Adding NELEM_GPR_WRITER_STORE_BYTE to nonterminal dict
Nonterminal NELEM_GPR_WRITER_STORE_BYTE()::
Nonterminal name NELEM_GPR_WRITER_STORE_BYTE
read_flat_input 1903
Hit a nonterminal, returning at: NELEM_GPR_WRITER_STORE_WORD()::
BLines (lines remaining after reading input) = 108887
=============================================
Creating a generator 201
=============================================
ALines (lines before reading input) = 108887
read_input 1906
NONTERMINAL: NELEM_GPR_WRITER_STORE_WORD notype
Adding NELEM_GPR_WRITER_STORE_WORD to nonterminal dict
Nonterminal NELEM_GPR_WRITER_STORE_WORD()::
Nonterminal name NELEM_GPR_WRITER_STORE_WORD
read_flat_input 1906
Hit a nonterminal, returning at: NELEM_TUPLE1_BYTE()::
BLines (lines remaining after reading input) = 108883
=============================================
Creating a generator 202
=============================================
ALines (lines before reading input) = 108883
read_input 1909
NONTERMINAL: NELEM_TUPLE1_BYTE notype
Adding NELEM_TUPLE1_BYTE to nonterminal dict
Nonterminal NELEM_TUPLE1_BYTE()::
Nonterminal name NELEM_TUPLE1_BYTE
read_flat_input 1909
Hit a nonterminal, returning at: NELEM_TUPLE1_WORD()::
BLines (lines remaining after reading input) = 108879
=============================================
Creating a generator 203
=============================================
ALines (lines before reading input) = 108879
read_input 1912
NONTERMINAL: NELEM_TUPLE1_WORD notype
Adding NELEM_TUPLE1_WORD to nonterminal dict
Nonterminal NELEM_TUPLE1_WORD()::
Nonterminal name NELEM_TUPLE1_WORD
read_flat_input 1912
Hit a nonterminal, returning at: NELEM_SCALAR()::
BLines (lines remaining after reading input) = 108875
=============================================
Creating a generator 204
=============================================
ALines (lines before reading input) = 108875
read_input 1915
NONTERMINAL: NELEM_SCALAR notype
Adding NELEM_SCALAR to nonterminal dict
Nonterminal NELEM_SCALAR()::
Nonterminal name NELEM_SCALAR
read_flat_input 1915
Hit a nonterminal, returning at: NELEM_TUPLE1_SUBDWORD()::
BLines (lines remaining after reading input) = 108871
=============================================
Creating a generator 205
=============================================
ALines (lines before reading input) = 108871
read_input 1918
NONTERMINAL: NELEM_TUPLE1_SUBDWORD notype
Adding NELEM_TUPLE1_SUBDWORD to nonterminal dict
Nonterminal NELEM_TUPLE1_SUBDWORD()::
Nonterminal name NELEM_TUPLE1_SUBDWORD
read_flat_input 1918
Hit a nonterminal, returning at: NELEM_GPR_READER()::
BLines (lines remaining after reading input) = 108867
=============================================
Creating a generator 206
=============================================
ALines (lines before reading input) = 108867
read_input 1921
NONTERMINAL: NELEM_GPR_READER notype
Adding NELEM_GPR_READER to nonterminal dict
Nonterminal NELEM_GPR_READER()::
Nonterminal name NELEM_GPR_READER
read_flat_input 1921
Hit a nonterminal, returning at: NELEM_GPR_READER_SUBDWORD()::
BLines (lines remaining after reading input) = 108863
=============================================
Creating a generator 207
=============================================
ALines (lines before reading input) = 108863
read_input 1924
NONTERMINAL: NELEM_GPR_READER_SUBDWORD notype
Adding NELEM_GPR_READER_SUBDWORD to nonterminal dict
Nonterminal NELEM_GPR_READER_SUBDWORD()::
Nonterminal name NELEM_GPR_READER_SUBDWORD
read_flat_input 1924
Hit a nonterminal, returning at: NELEM_GPR_WRITER_LDOP()::
BLines (lines remaining after reading input) = 108859
=============================================
Creating a generator 208
=============================================
ALines (lines before reading input) = 108859
read_input 1927
NONTERMINAL: NELEM_GPR_WRITER_LDOP notype
Adding NELEM_GPR_WRITER_LDOP to nonterminal dict
Nonterminal NELEM_GPR_WRITER_LDOP()::
Nonterminal name NELEM_GPR_WRITER_LDOP
read_flat_input 1927
Hit a nonterminal, returning at: NELEM_GPR_WRITER_STORE()::
BLines (lines remaining after reading input) = 108855
=============================================
Creating a generator 209
=============================================
ALines (lines before reading input) = 108855
read_input 1930
NONTERMINAL: NELEM_GPR_WRITER_STORE notype
Adding NELEM_GPR_WRITER_STORE to nonterminal dict
Nonterminal NELEM_GPR_WRITER_STORE()::
Nonterminal name NELEM_GPR_WRITER_STORE
read_flat_input 1930
Hit a nonterminal, returning at: NELEM_GPR_WRITER_STORE_SUBDWORD()::
BLines (lines remaining after reading input) = 108851
=============================================
Creating a generator 210
=============================================
ALines (lines before reading input) = 108851
read_input 1933
NONTERMINAL: NELEM_GPR_WRITER_STORE_SUBDWORD notype
Adding NELEM_GPR_WRITER_STORE_SUBDWORD to nonterminal dict
Nonterminal NELEM_GPR_WRITER_STORE_SUBDWORD()::
Nonterminal name NELEM_GPR_WRITER_STORE_SUBDWORD
read_flat_input 1933
Hit a nonterminal, returning at: NELEM_TUPLE1()::
BLines (lines remaining after reading input) = 108847
=============================================
Creating a generator 211
=============================================
ALines (lines before reading input) = 108847
read_input 1936
NONTERMINAL: NELEM_TUPLE1 notype
Adding NELEM_TUPLE1 to nonterminal dict
Nonterminal NELEM_TUPLE1()::
Nonterminal name NELEM_TUPLE1
read_flat_input 1936
Hit a nonterminal, returning at: NELEM_GSCAT()::
BLines (lines remaining after reading input) = 108843
=============================================
Creating a generator 212
=============================================
ALines (lines before reading input) = 108843
read_input 1939
NONTERMINAL: NELEM_GSCAT notype
Adding NELEM_GSCAT to nonterminal dict
Nonterminal NELEM_GSCAT()::
Nonterminal name NELEM_GSCAT
read_flat_input 1939
Hit a nonterminal, returning at: NELEM_TUPLE2()::
BLines (lines remaining after reading input) = 108839
=============================================
Creating a generator 213
=============================================
ALines (lines before reading input) = 108839
read_input 1942
NONTERMINAL: NELEM_TUPLE2 notype
Adding NELEM_TUPLE2 to nonterminal dict
Nonterminal NELEM_TUPLE2()::
Nonterminal name NELEM_TUPLE2
read_flat_input 1942
Hit a nonterminal, returning at: NELEM_TUPLE4()::
BLines (lines remaining after reading input) = 108835
=============================================
Creating a generator 214
=============================================
ALines (lines before reading input) = 108835
read_input 1945
NONTERMINAL: NELEM_TUPLE4 notype
Adding NELEM_TUPLE4 to nonterminal dict
Nonterminal NELEM_TUPLE4()::
Nonterminal name NELEM_TUPLE4
read_flat_input 1945
Hit a nonterminal, returning at: NELEM_TUPLE8()::
BLines (lines remaining after reading input) = 108831
=============================================
Creating a generator 215
=============================================
ALines (lines before reading input) = 108831
read_input 1948
NONTERMINAL: NELEM_TUPLE8 notype
Adding NELEM_TUPLE8 to nonterminal dict
Nonterminal NELEM_TUPLE8()::
Nonterminal name NELEM_TUPLE8
read_flat_input 1948
Hit a nonterminal, returning at: NELEM_MEM128()::
BLines (lines remaining after reading input) = 108827
=============================================
Creating a generator 216
=============================================
ALines (lines before reading input) = 108827
read_input 1951
NONTERMINAL: NELEM_MEM128 notype
Adding NELEM_MEM128 to nonterminal dict
Nonterminal NELEM_MEM128()::
Nonterminal name NELEM_MEM128
read_flat_input 1951
Hit a nonterminal, returning at: NELEM_FULL()::
BLines (lines remaining after reading input) = 108824
=============================================
Creating a generator 217
=============================================
ALines (lines before reading input) = 108824
read_input 1953
NONTERMINAL: NELEM_FULL notype
Adding NELEM_FULL to nonterminal dict
Nonterminal NELEM_FULL()::
Nonterminal name NELEM_FULL
read_flat_input 1953
Hit a nonterminal, returning at: NELEM_HALF()::
BLines (lines remaining after reading input) = 108805
=============================================
Creating a generator 218
=============================================
ALines (lines before reading input) = 108805
read_input 1971
NONTERMINAL: NELEM_HALF notype
Adding NELEM_HALF to nonterminal dict
Nonterminal NELEM_HALF()::
Nonterminal name NELEM_HALF
read_flat_input 1971
Hit a nonterminal, returning at: FIX_ROUND_LEN512()::
BLines (lines remaining after reading input) = 108798
=============================================
Creating a generator 219
=============================================
ALines (lines before reading input) = 108798
read_input 1977
NONTERMINAL: FIX_ROUND_LEN512 notype
Adding FIX_ROUND_LEN512 to nonterminal dict
Nonterminal FIX_ROUND_LEN512()::
Nonterminal name FIX_ROUND_LEN512
read_flat_input 1977
Hit a nonterminal, returning at: FIX_ROUND_LEN128()::
BLines (lines remaining after reading input) = 108794
=============================================
Creating a generator 220
=============================================
ALines (lines before reading input) = 108794
read_input 1980
NONTERMINAL: FIX_ROUND_LEN128 notype
Adding FIX_ROUND_LEN128 to nonterminal dict
Nonterminal FIX_ROUND_LEN128()::
Nonterminal name FIX_ROUND_LEN128
read_flat_input 1980
Hit a nonterminal, returning at: UISA_VMODRM_ZMM()::
BLines (lines remaining after reading input) = 108790
=============================================
Creating a generator 221
=============================================
ALines (lines before reading input) = 108790
read_input 1983
NONTERMINAL: UISA_VMODRM_ZMM notype
Adding UISA_VMODRM_ZMM to nonterminal dict
Nonterminal UISA_VMODRM_ZMM()::
Nonterminal name UISA_VMODRM_ZMM
read_flat_input 1983
Hit a nonterminal, returning at: UISA_VMODRM_YMM()::
BLines (lines remaining after reading input) = 108786
=============================================
Creating a generator 222
=============================================
ALines (lines before reading input) = 108786
read_input 1986
NONTERMINAL: UISA_VMODRM_YMM notype
Adding UISA_VMODRM_YMM to nonterminal dict
Nonterminal UISA_VMODRM_YMM()::
Nonterminal name UISA_VMODRM_YMM
read_flat_input 1986
Hit a nonterminal, returning at: UISA_VMODRM_XMM()::
BLines (lines remaining after reading input) = 108782
=============================================
Creating a generator 223
=============================================
ALines (lines before reading input) = 108782
read_input 1989
NONTERMINAL: UISA_VMODRM_XMM notype
Adding UISA_VMODRM_XMM to nonterminal dict
Nonterminal UISA_VMODRM_XMM()::
Nonterminal name UISA_VMODRM_XMM
read_flat_input 1989
Hit a nonterminal, returning at: UISA_VSIB_ZMM()::
BLines (lines remaining after reading input) = 108778
=============================================
Creating a generator 224
=============================================
ALines (lines before reading input) = 108778
read_input 1992
NONTERMINAL: UISA_VSIB_ZMM notype
Adding UISA_VSIB_ZMM to nonterminal dict
Nonterminal UISA_VSIB_ZMM()::
Nonterminal name UISA_VSIB_ZMM
read_flat_input 1992
Hit a nonterminal, returning at: UISA_VSIB_YMM()::
BLines (lines remaining after reading input) = 108773
=============================================
Creating a generator 225
=============================================
ALines (lines before reading input) = 108773
read_input 1996
NONTERMINAL: UISA_VSIB_YMM notype
Adding UISA_VSIB_YMM to nonterminal dict
Nonterminal UISA_VSIB_YMM()::
Nonterminal name UISA_VSIB_YMM
read_flat_input 1996
Hit a nonterminal, returning at: UISA_VSIB_XMM()::
BLines (lines remaining after reading input) = 108768
=============================================
Creating a generator 226
=============================================
ALines (lines before reading input) = 108768
read_input 2000
NONTERMINAL: UISA_VSIB_XMM notype
Adding UISA_VSIB_XMM to nonterminal dict
Nonterminal UISA_VSIB_XMM()::
Nonterminal name UISA_VSIB_XMM
read_flat_input 2000
Hit a nonterminal, returning at: xed_reg_enum_t UISA_VSIB_INDEX_ZMM()::
BLines (lines remaining after reading input) = 108763
=============================================
Creating a generator 227
=============================================
ALines (lines before reading input) = 108763
read_input 2004
NONTERMINAL: UISA_VSIB_INDEX_ZMM type= xed_reg_enum_t
Adding UISA_VSIB_INDEX_ZMM to nonterminal dict
Nonterminal xed_reg_enum_t UISA_VSIB_INDEX_ZMM()::
Nonterminal name UISA_VSIB_INDEX_ZMM
read_flat_input 2004
Hit a nonterminal, returning at: xed_reg_enum_t UISA_VSIB_INDEX_YMM()::
BLines (lines remaining after reading input) = 108730
=============================================
Creating a generator 228
=============================================
ALines (lines before reading input) = 108730
read_input 2036
NONTERMINAL: UISA_VSIB_INDEX_YMM type= xed_reg_enum_t
Adding UISA_VSIB_INDEX_YMM to nonterminal dict
Nonterminal xed_reg_enum_t UISA_VSIB_INDEX_YMM()::
Nonterminal name UISA_VSIB_INDEX_YMM
read_flat_input 2036
Hit a nonterminal, returning at: xed_reg_enum_t UISA_VSIB_INDEX_XMM()::
BLines (lines remaining after reading input) = 108697
=============================================
Creating a generator 229
=============================================
ALines (lines before reading input) = 108697
read_input 2068
NONTERMINAL: UISA_VSIB_INDEX_XMM type= xed_reg_enum_t
Adding UISA_VSIB_INDEX_XMM to nonterminal dict
Nonterminal xed_reg_enum_t UISA_VSIB_INDEX_XMM()::
Nonterminal name UISA_VSIB_INDEX_XMM
read_flat_input 2068
Hit a nonterminal, returning at: UISA_VSIB_BASE()::
BLines (lines remaining after reading input) = 108664
=============================================
Creating a generator 230
=============================================
ALines (lines before reading input) = 108664
read_input 2100
NONTERMINAL: UISA_VSIB_BASE notype
Adding UISA_VSIB_BASE to nonterminal dict
Nonterminal UISA_VSIB_BASE()::
Nonterminal name UISA_VSIB_BASE
read_flat_input 2100
Hit a nonterminal, returning at: xed_reg_enum_t MASK1()::
BLines (lines remaining after reading input) = 108627
=============================================
Creating a generator 231
=============================================
ALines (lines before reading input) = 108627
read_input 2136
NONTERMINAL: MASK1 type= xed_reg_enum_t
Adding MASK1 to nonterminal dict
Nonterminal xed_reg_enum_t MASK1()::
Nonterminal name MASK1
read_flat_input 2136
Hit a nonterminal, returning at: xed_reg_enum_t MASKNOT0()::
BLines (lines remaining after reading input) = 108618
=============================================
Creating a generator 232
=============================================
ALines (lines before reading input) = 108618
read_input 2144
NONTERMINAL: MASKNOT0 type= xed_reg_enum_t
Adding MASKNOT0 to nonterminal dict
Nonterminal xed_reg_enum_t MASKNOT0()::
Nonterminal name MASKNOT0
read_flat_input 2144
Hit a nonterminal, returning at: xed_reg_enum_t MASK_R()::
BLines (lines remaining after reading input) = 108609
=============================================
Creating a generator 233
=============================================
ALines (lines before reading input) = 108609
read_input 2152
NONTERMINAL: MASK_R type= xed_reg_enum_t
Adding MASK_R to nonterminal dict
Nonterminal xed_reg_enum_t MASK_R()::
Nonterminal name MASK_R
read_flat_input 2152
Hit a nonterminal, returning at: xed_reg_enum_t MASK_B()::
BLines (lines remaining after reading input) = 108600
=============================================
Creating a generator 234
=============================================
ALines (lines before reading input) = 108600
read_input 2160
NONTERMINAL: MASK_B type= xed_reg_enum_t
Adding MASK_B to nonterminal dict
Nonterminal xed_reg_enum_t MASK_B()::
Nonterminal name MASK_B
read_flat_input 2160
Hit a nonterminal, returning at: xed_reg_enum_t MASK_N()::
BLines (lines remaining after reading input) = 108591
=============================================
Creating a generator 235
=============================================
ALines (lines before reading input) = 108591
read_input 2168
NONTERMINAL: MASK_N type= xed_reg_enum_t
Adding MASK_N to nonterminal dict
Nonterminal xed_reg_enum_t MASK_N()::
Nonterminal name MASK_N
read_flat_input 2168
Hit a nonterminal, returning at: xed_reg_enum_t MASK_N64()::
BLines (lines remaining after reading input) = 108587
=============================================
Creating a generator 236
=============================================
ALines (lines before reading input) = 108587
read_input 2171
NONTERMINAL: MASK_N64 type= xed_reg_enum_t
Adding MASK_N64 to nonterminal dict
Nonterminal xed_reg_enum_t MASK_N64()::
Nonterminal name MASK_N64
read_flat_input 2171
Hit a nonterminal, returning at: xed_reg_enum_t MASK_N32()::
BLines (lines remaining after reading input) = 108578
=============================================
Creating a generator 237
=============================================
ALines (lines before reading input) = 108578
read_input 2179
NONTERMINAL: MASK_N32 type= xed_reg_enum_t
Adding MASK_N32 to nonterminal dict
Nonterminal xed_reg_enum_t MASK_N32()::
Nonterminal name MASK_N32
read_flat_input 2179
Hit a nonterminal, returning at: xed_reg_enum_t XMM_R3()::
BLines (lines remaining after reading input) = 108569
=============================================
Creating a generator 238
=============================================
ALines (lines before reading input) = 108569
read_input 2187
NONTERMINAL: XMM_R3 type= xed_reg_enum_t
Adding XMM_R3 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_R3()::
Nonterminal name XMM_R3
read_flat_input 2187
Hit a nonterminal, returning at: xed_reg_enum_t XMM_R3_32()::
BLines (lines remaining after reading input) = 108565
=============================================
Creating a generator 239
=============================================
ALines (lines before reading input) = 108565
read_input 2190
NONTERMINAL: XMM_R3_32 type= xed_reg_enum_t
Adding XMM_R3_32 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_R3_32()::
Nonterminal name XMM_R3_32
read_flat_input 2190
Hit a nonterminal, returning at: xed_reg_enum_t XMM_R3_64()::
BLines (lines remaining after reading input) = 108556
=============================================
Creating a generator 240
=============================================
ALines (lines before reading input) = 108556
read_input 2198
NONTERMINAL: XMM_R3_64 type= xed_reg_enum_t
Adding XMM_R3_64 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_R3_64()::
Nonterminal name XMM_R3_64
read_flat_input 2198
Hit a nonterminal, returning at: xed_reg_enum_t YMM_R3()::
BLines (lines remaining after reading input) = 108523
=============================================
Creating a generator 241
=============================================
ALines (lines before reading input) = 108523
read_input 2230
NONTERMINAL: YMM_R3 type= xed_reg_enum_t
Adding YMM_R3 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_R3()::
Nonterminal name YMM_R3
read_flat_input 2230
Hit a nonterminal, returning at: xed_reg_enum_t YMM_R3_32()::
BLines (lines remaining after reading input) = 108519
=============================================
Creating a generator 242
=============================================
ALines (lines before reading input) = 108519
read_input 2233
NONTERMINAL: YMM_R3_32 type= xed_reg_enum_t
Adding YMM_R3_32 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_R3_32()::
Nonterminal name YMM_R3_32
read_flat_input 2233
Hit a nonterminal, returning at: xed_reg_enum_t YMM_R3_64()::
BLines (lines remaining after reading input) = 108510
=============================================
Creating a generator 243
=============================================
ALines (lines before reading input) = 108510
read_input 2241
NONTERMINAL: YMM_R3_64 type= xed_reg_enum_t
Adding YMM_R3_64 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_R3_64()::
Nonterminal name YMM_R3_64
read_flat_input 2241
Hit a nonterminal, returning at: xed_reg_enum_t ZMM_R3()::
BLines (lines remaining after reading input) = 108477
=============================================
Creating a generator 244
=============================================
ALines (lines before reading input) = 108477
read_input 2273
NONTERMINAL: ZMM_R3 type= xed_reg_enum_t
Adding ZMM_R3 to nonterminal dict
Nonterminal xed_reg_enum_t ZMM_R3()::
Nonterminal name ZMM_R3
read_flat_input 2273
Hit a nonterminal, returning at: xed_reg_enum_t ZMM_R3_32()::
BLines (lines remaining after reading input) = 108473
=============================================
Creating a generator 245
=============================================
ALines (lines before reading input) = 108473
read_input 2276
NONTERMINAL: ZMM_R3_32 type= xed_reg_enum_t
Adding ZMM_R3_32 to nonterminal dict
Nonterminal xed_reg_enum_t ZMM_R3_32()::
Nonterminal name ZMM_R3_32
read_flat_input 2276
Hit a nonterminal, returning at: xed_reg_enum_t ZMM_R3_64()::
BLines (lines remaining after reading input) = 108464
=============================================
Creating a generator 246
=============================================
ALines (lines before reading input) = 108464
read_input 2284
NONTERMINAL: ZMM_R3_64 type= xed_reg_enum_t
Adding ZMM_R3_64 to nonterminal dict
Nonterminal xed_reg_enum_t ZMM_R3_64()::
Nonterminal name ZMM_R3_64
read_flat_input 2284
Hit a nonterminal, returning at: xed_reg_enum_t XMM_B3()::
BLines (lines remaining after reading input) = 108431
=============================================
Creating a generator 247
=============================================
ALines (lines before reading input) = 108431
read_input 2316
NONTERMINAL: XMM_B3 type= xed_reg_enum_t
Adding XMM_B3 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_B3()::
Nonterminal name XMM_B3
read_flat_input 2316
Hit a nonterminal, returning at: xed_reg_enum_t XMM_B3_32()::
BLines (lines remaining after reading input) = 108427
=============================================
Creating a generator 248
=============================================
ALines (lines before reading input) = 108427
read_input 2319
NONTERMINAL: XMM_B3_32 type= xed_reg_enum_t
Adding XMM_B3_32 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_B3_32()::
Nonterminal name XMM_B3_32
read_flat_input 2319
Hit a nonterminal, returning at: xed_reg_enum_t XMM_B3_64()::
BLines (lines remaining after reading input) = 108418
=============================================
Creating a generator 249
=============================================
ALines (lines before reading input) = 108418
read_input 2327
NONTERMINAL: XMM_B3_64 type= xed_reg_enum_t
Adding XMM_B3_64 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_B3_64()::
Nonterminal name XMM_B3_64
read_flat_input 2327
Hit a nonterminal, returning at: xed_reg_enum_t YMM_B3()::
BLines (lines remaining after reading input) = 108385
=============================================
Creating a generator 250
=============================================
ALines (lines before reading input) = 108385
read_input 2359
NONTERMINAL: YMM_B3 type= xed_reg_enum_t
Adding YMM_B3 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_B3()::
Nonterminal name YMM_B3
read_flat_input 2359
Hit a nonterminal, returning at: xed_reg_enum_t YMM_B3_32()::
BLines (lines remaining after reading input) = 108381
=============================================
Creating a generator 251
=============================================
ALines (lines before reading input) = 108381
read_input 2362
NONTERMINAL: YMM_B3_32 type= xed_reg_enum_t
Adding YMM_B3_32 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_B3_32()::
Nonterminal name YMM_B3_32
read_flat_input 2362
Hit a nonterminal, returning at: xed_reg_enum_t YMM_B3_64()::
BLines (lines remaining after reading input) = 108372
=============================================
Creating a generator 252
=============================================
ALines (lines before reading input) = 108372
read_input 2370
NONTERMINAL: YMM_B3_64 type= xed_reg_enum_t
Adding YMM_B3_64 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_B3_64()::
Nonterminal name YMM_B3_64
read_flat_input 2370
Hit a nonterminal, returning at: xed_reg_enum_t ZMM_B3()::
BLines (lines remaining after reading input) = 108339
=============================================
Creating a generator 253
=============================================
ALines (lines before reading input) = 108339
read_input 2402
NONTERMINAL: ZMM_B3 type= xed_reg_enum_t
Adding ZMM_B3 to nonterminal dict
Nonterminal xed_reg_enum_t ZMM_B3()::
Nonterminal name ZMM_B3
read_flat_input 2402
Hit a nonterminal, returning at: xed_reg_enum_t ZMM_B3_32()::
BLines (lines remaining after reading input) = 108335
=============================================
Creating a generator 254
=============================================
ALines (lines before reading input) = 108335
read_input 2405
NONTERMINAL: ZMM_B3_32 type= xed_reg_enum_t
Adding ZMM_B3_32 to nonterminal dict
Nonterminal xed_reg_enum_t ZMM_B3_32()::
Nonterminal name ZMM_B3_32
read_flat_input 2405
Hit a nonterminal, returning at: xed_reg_enum_t ZMM_B3_64()::
BLines (lines remaining after reading input) = 108326
=============================================
Creating a generator 255
=============================================
ALines (lines before reading input) = 108326
read_input 2413
NONTERMINAL: ZMM_B3_64 type= xed_reg_enum_t
Adding ZMM_B3_64 to nonterminal dict
Nonterminal xed_reg_enum_t ZMM_B3_64()::
Nonterminal name ZMM_B3_64
read_flat_input 2413
Hit a nonterminal, returning at: xed_reg_enum_t XMM_N3()::
BLines (lines remaining after reading input) = 108293
=============================================
Creating a generator 256
=============================================
ALines (lines before reading input) = 108293
read_input 2445
NONTERMINAL: XMM_N3 type= xed_reg_enum_t
Adding XMM_N3 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_N3()::
Nonterminal name XMM_N3
read_flat_input 2445
Hit a nonterminal, returning at: xed_reg_enum_t XMM_N3_32()::
BLines (lines remaining after reading input) = 108289
=============================================
Creating a generator 257
=============================================
ALines (lines before reading input) = 108289
read_input 2448
NONTERMINAL: XMM_N3_32 type= xed_reg_enum_t
Adding XMM_N3_32 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_N3_32()::
Nonterminal name XMM_N3_32
read_flat_input 2448
Hit a nonterminal, returning at: xed_reg_enum_t XMM_N3_64()::
BLines (lines remaining after reading input) = 108280
=============================================
Creating a generator 258
=============================================
ALines (lines before reading input) = 108280
read_input 2456
NONTERMINAL: XMM_N3_64 type= xed_reg_enum_t
Adding XMM_N3_64 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_N3_64()::
Nonterminal name XMM_N3_64
read_flat_input 2456
Hit a nonterminal, returning at: xed_reg_enum_t YMM_N3()::
BLines (lines remaining after reading input) = 108247
=============================================
Creating a generator 259
=============================================
ALines (lines before reading input) = 108247
read_input 2488
NONTERMINAL: YMM_N3 type= xed_reg_enum_t
Adding YMM_N3 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_N3()::
Nonterminal name YMM_N3
read_flat_input 2488
Hit a nonterminal, returning at: xed_reg_enum_t YMM_N3_32()::
BLines (lines remaining after reading input) = 108243
=============================================
Creating a generator 260
=============================================
ALines (lines before reading input) = 108243
read_input 2491
NONTERMINAL: YMM_N3_32 type= xed_reg_enum_t
Adding YMM_N3_32 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_N3_32()::
Nonterminal name YMM_N3_32
read_flat_input 2491
Hit a nonterminal, returning at: xed_reg_enum_t YMM_N3_64()::
BLines (lines remaining after reading input) = 108234
=============================================
Creating a generator 261
=============================================
ALines (lines before reading input) = 108234
read_input 2499
NONTERMINAL: YMM_N3_64 type= xed_reg_enum_t
Adding YMM_N3_64 to nonterminal dict
Nonterminal xed_reg_enum_t YMM_N3_64()::
Nonterminal name YMM_N3_64
read_flat_input 2499
Hit a nonterminal, returning at: xed_reg_enum_t ZMM_N3()::
BLines (lines remaining after reading input) = 108201
=============================================
Creating a generator 262
=============================================
ALines (lines before reading input) = 108201
read_input 2531
NONTERMINAL: ZMM_N3 type= xed_reg_enum_t
Adding ZMM_N3 to nonterminal dict
Nonterminal xed_reg_enum_t ZMM_N3()::
Nonterminal name ZMM_N3
read_flat_input 2531
Hit a nonterminal, returning at: xed_reg_enum_t ZMM_N3_32()::
BLines (lines remaining after reading input) = 108197
=============================================
Creating a generator 263
=============================================
ALines (lines before reading input) = 108197
read_input 2534
NONTERMINAL: ZMM_N3_32 type= xed_reg_enum_t
Adding ZMM_N3_32 to nonterminal dict
Nonterminal xed_reg_enum_t ZMM_N3_32()::
Nonterminal name ZMM_N3_32
read_flat_input 2534
Hit a nonterminal, returning at: xed_reg_enum_t ZMM_N3_64()::
BLines (lines remaining after reading input) = 108188
=============================================
Creating a generator 264
=============================================
ALines (lines before reading input) = 108188
read_input 2542
NONTERMINAL: ZMM_N3_64 type= xed_reg_enum_t
Adding ZMM_N3_64 to nonterminal dict
Nonterminal xed_reg_enum_t ZMM_N3_64()::
Nonterminal name ZMM_N3_64
read_flat_input 2542
Hit a nonterminal, returning at: xed_reg_enum_t TMM_R()::
BLines (lines remaining after reading input) = 108155
=============================================
Creating a generator 265
=============================================
ALines (lines before reading input) = 108155
read_input 2574
NONTERMINAL: TMM_R type= xed_reg_enum_t
Adding TMM_R to nonterminal dict
Nonterminal xed_reg_enum_t TMM_R()::
Nonterminal name TMM_R
read_flat_input 2574
Hit a nonterminal, returning at: xed_reg_enum_t TMM_B()::
BLines (lines remaining after reading input) = 108146
=============================================
Creating a generator 266
=============================================
ALines (lines before reading input) = 108146
read_input 2582
NONTERMINAL: TMM_B type= xed_reg_enum_t
Adding TMM_B to nonterminal dict
Nonterminal xed_reg_enum_t TMM_B()::
Nonterminal name TMM_B
read_flat_input 2582
Hit a nonterminal, returning at: xed_reg_enum_t TMM_N()::
BLines (lines remaining after reading input) = 108137
=============================================
Creating a generator 267
=============================================
ALines (lines before reading input) = 108137
read_input 2590
NONTERMINAL: TMM_N type= xed_reg_enum_t
Adding TMM_N to nonterminal dict
Nonterminal xed_reg_enum_t TMM_N()::
Nonterminal name TMM_N
read_flat_input 2590
Hit a nonterminal, returning at: NELEM_HALF()::
BLines (lines remaining after reading input) = 108128
=============================================
Creating a generator 268
=============================================
ALines (lines before reading input) = 108128
read_input 2598
NONTERMINAL: NELEM_HALF notype
FOUND OLD PARSER FOR NELEM_HALF
Nonterminal NELEM_HALF()::
Nonterminal name NELEM_HALF
read_flat_input 2598
Hit a nonterminal, returning at: NELEM_QUARTER()::
BLines (lines remaining after reading input) = 108121
=============================================
Creating a generator 268
=============================================
ALines (lines before reading input) = 108121
read_input 2604
NONTERMINAL: NELEM_QUARTER notype
Adding NELEM_QUARTER to nonterminal dict
Nonterminal NELEM_QUARTER()::
Nonterminal name NELEM_QUARTER
read_flat_input 2604
Hit a nonterminal, returning at: xed_reg_enum_t XMM_L_R3()::
BLines (lines remaining after reading input) = 108114
=============================================
Creating a generator 269
=============================================
ALines (lines before reading input) = 108114
read_input 2610
NONTERMINAL: XMM_L_R3 type= xed_reg_enum_t
Adding XMM_L_R3 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_L_R3()::
Nonterminal name XMM_L_R3
read_flat_input 2610
Hit a nonterminal, returning at: xed_reg_enum_t XMM_L_R3_64()::
BLines (lines remaining after reading input) = 108112
=============================================
Creating a generator 270
=============================================
ALines (lines before reading input) = 108112
read_input 2611
NONTERMINAL: XMM_L_R3_64 type= xed_reg_enum_t
Adding XMM_L_R3_64 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_L_R3_64()::
Nonterminal name XMM_L_R3_64
read_flat_input 2611
Hit a nonterminal, returning at: xed_reg_enum_t XMM_L_B3()::
BLines (lines remaining after reading input) = 108095
=============================================
Creating a generator 271
=============================================
ALines (lines before reading input) = 108095
read_input 2627
NONTERMINAL: XMM_L_B3 type= xed_reg_enum_t
Adding XMM_L_B3 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_L_B3()::
Nonterminal name XMM_L_B3
read_flat_input 2627
Hit a nonterminal, returning at: xed_reg_enum_t XMM_L_B3_64()::
BLines (lines remaining after reading input) = 108093
=============================================
Creating a generator 272
=============================================
ALines (lines before reading input) = 108093
read_input 2628
NONTERMINAL: XMM_L_B3_64 type= xed_reg_enum_t
Adding XMM_L_B3_64 to nonterminal dict
Nonterminal xed_reg_enum_t XMM_L_B3_64()::
Nonterminal name XMM_L_B3_64
read_flat_input 2628
Hit a nonterminal, returning at: xed_reg_enum_t GPRv_N()::
BLines (lines remaining after reading input) = 108076
=============================================
Creating a generator 273
=============================================
ALines (lines before reading input) = 108076
read_input 2644
NONTERMINAL: GPRv_N type= xed_reg_enum_t
Adding GPRv_N to nonterminal dict
Nonterminal xed_reg_enum_t GPRv_N()::
Nonterminal name GPRv_N
read_flat_input 2644
Hit a nonterminal, returning at: xed_reg_enum_t GPR64_N()::
BLines (lines remaining after reading input) = 108072
=============================================
Creating a generator 274
=============================================
ALines (lines before reading input) = 108072
read_input 2647
NONTERMINAL: GPR64_N type= xed_reg_enum_t
Adding GPR64_N to nonterminal dict
Nonterminal xed_reg_enum_t GPR64_N()::
Nonterminal name GPR64_N
read_flat_input 2647
Hit a nonterminal, returning at: xed_reg_enum_t GPR32_N()::
BLines (lines remaining after reading input) = 108039
=============================================
Creating a generator 275
=============================================
ALines (lines before reading input) = 108039
read_input 2679
NONTERMINAL: GPR32_N type= xed_reg_enum_t
Adding GPR32_N to nonterminal dict
Nonterminal xed_reg_enum_t GPR32_N()::
Nonterminal name GPR32_N
read_flat_input 2679
Hit a nonterminal, returning at: xed_reg_enum_t GPR16_N()::
BLines (lines remaining after reading input) = 108006
=============================================
Creating a generator 276
=============================================
ALines (lines before reading input) = 108006
read_input 2711
NONTERMINAL: GPR16_N type= xed_reg_enum_t
Adding GPR16_N to nonterminal dict
Nonterminal xed_reg_enum_t GPR16_N()::
Nonterminal name GPR16_N
read_flat_input 2711
Hit a nonterminal, returning at: xed_reg_enum_t GPR8_N()::
BLines (lines remaining after reading input) = 107973
=============================================
Creating a generator 277
=============================================
ALines (lines before reading input) = 107973
read_input 2743
NONTERMINAL: GPR8_N type= xed_reg_enum_t
Adding GPR8_N to nonterminal dict
Nonterminal xed_reg_enum_t GPR8_N()::
Nonterminal name GPR8_N
read_flat_input 2743
Hit a nonterminal, returning at: xed_reg_enum_t GPR64_N_NORSP()::
BLines (lines remaining after reading input) = 107940
=============================================
Creating a generator 278
=============================================
ALines (lines before reading input) = 107940
read_input 2775
NONTERMINAL: GPR64_N_NORSP type= xed_reg_enum_t
Adding GPR64_N_NORSP to nonterminal dict
Nonterminal xed_reg_enum_t GPR64_N_NORSP()::
Nonterminal name GPR64_N_NORSP
read_flat_input 2775
Hit a nonterminal, returning at: xed_reg_enum_t GPR64_B_NORSP()::
BLines (lines remaining after reading input) = 107907
=============================================
Creating a generator 279
=============================================
ALines (lines before reading input) = 107907
read_input 2807
NONTERMINAL: GPR64_B_NORSP type= xed_reg_enum_t
Adding GPR64_B_NORSP to nonterminal dict
Nonterminal xed_reg_enum_t GPR64_B_NORSP()::
Nonterminal name GPR64_B_NORSP
read_flat_input 2807
Hit a nonterminal, returning at: xed_reg_enum_t DFV()::
BLines (lines remaining after reading input) = 107874
=============================================
Creating a generator 280
=============================================
ALines (lines before reading input) = 107874
read_input 2839
NONTERMINAL: DFV type= xed_reg_enum_t
Adding DFV to nonterminal dict
Nonterminal xed_reg_enum_t DFV()::
Nonterminal name DFV
read_flat_input 2839
Hit a nonterminal, returning at: xed_reg_enum_t TMM_R3()::
BLines (lines remaining after reading input) = 107857
=============================================
Creating a generator 281
=============================================
ALines (lines before reading input) = 107857
read_input 2855
NONTERMINAL: TMM_R3 type= xed_reg_enum_t
Adding TMM_R3 to nonterminal dict
Nonterminal xed_reg_enum_t TMM_R3()::
Nonterminal name TMM_R3
read_flat_input 2855
Hit a nonterminal, returning at: EVEXR4_ONE()::
BLines (lines remaining after reading input) = 107848
=============================================
Creating a generator 282
=============================================
ALines (lines before reading input) = 107848
read_input 2863
NONTERMINAL: EVEXR4_ONE notype
FOUND OLD PARSER FOR EVEXR4_ONE
Nonterminal EVEXR4_ONE()::
Nonterminal name EVEXR4_ONE
read_flat_input 2863
Hit a nonterminal, returning at: EVAPX()::
BLines (lines remaining after reading input) = 107845
=============================================
Creating a generator 282
=============================================
ALines (lines before reading input) = 107845
read_input 2865
NONTERMINAL: EVAPX notype
Adding EVAPX to nonterminal dict
Nonterminal EVAPX()::
Nonterminal name EVAPX
read_flat_input 2865
Hit a nonterminal, returning at: EVAPX_SCC()::
BLines (lines remaining after reading input) = 107842
=============================================
Creating a generator 283
=============================================
ALines (lines before reading input) = 107842
read_input 2867
NONTERMINAL: EVAPX_SCC notype
Adding EVAPX_SCC to nonterminal dict
Nonterminal EVAPX_SCC()::
Nonterminal name EVAPX_SCC
read_flat_input 2867
Hit a nonterminal, returning at: INSTRUCTIONS()::
BLines (lines remaining after reading input) = 107840
=============================================
Creating a generator 284
=============================================
ALines (lines before reading input) = 107840
read_input 2868
NONTERMINAL: INSTRUCTIONS notype
Adding INSTRUCTIONS to nonterminal dict
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 93469 lines remaining.
BLines (lines remaining after reading input) = 93469
=============================================
Creating a generator 285
=============================================
ALines (lines before reading input) = 93469
read_input 4780
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 93275 lines remaining.
BLines (lines remaining after reading input) = 93275
=============================================
Creating a generator 285
=============================================
ALines (lines before reading input) = 93275
read_input 4800
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 92833 lines remaining.
BLines (lines remaining after reading input) = 92833
=============================================
Creating a generator 285
=============================================
ALines (lines before reading input) = 92833
read_input 4849
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 92807 lines remaining.
BLines (lines remaining after reading input) = 92807
=============================================
Creating a generator 285
=============================================
ALines (lines before reading input) = 92807
read_input 4851
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 92669 lines remaining.
BLines (lines remaining after reading input) = 92669
=============================================
Creating a generator 285
=============================================
ALines (lines before reading input) = 92669
read_input 4869
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 92621 lines remaining.
BLines (lines remaining after reading input) = 92621
=============================================
Creating a generator 285
=============================================
ALines (lines before reading input) = 92621
read_input 4876
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 92609 lines remaining.
BLines (lines remaining after reading input) = 92609
=============================================
Creating a generator 285
=============================================
ALines (lines before reading input) = 92609
read_input 4877
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 92568 lines remaining.
BLines (lines remaining after reading input) = 92568
=============================================
Creating a generator 285
=============================================
ALines (lines before reading input) = 92568
read_input 4881
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: XOP_INSTRUCTIONS()::
parser returning with 92546 lines remaining.
BLines (lines remaining after reading input) = 92546
=============================================
Creating a generator 285
=============================================
ALines (lines before reading input) = 92546
read_input 4884
NONTERMINAL: XOP_INSTRUCTIONS notype
Adding XOP_INSTRUCTIONS to nonterminal dict
Nonterminal XOP_INSTRUCTIONS()::
Nonterminal name XOP_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 91573 lines remaining.
BLines (lines remaining after reading input) = 91573
=============================================
Creating a generator 286
=============================================
ALines (lines before reading input) = 91573
read_input 5080
NONTERMINAL: AVX_INSTRUCTIONS notype
Adding AVX_INSTRUCTIONS to nonterminal dict
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 91156 lines remaining.
BLines (lines remaining after reading input) = 91156
=============================================
Creating a generator 287
=============================================
ALines (lines before reading input) = 91156
read_input 5208
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 91107 lines remaining.
BLines (lines remaining after reading input) = 91107
=============================================
Creating a generator 287
=============================================
ALines (lines before reading input) = 91107
read_input 5224
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
REGISTERING UDELETE NOP0F1A
REGISTERING UDELETE NOP0F1B
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 90942 lines remaining.
BLines (lines remaining after reading input) = 90942
=============================================
Creating a generator 287
=============================================
ALines (lines before reading input) = 90942
read_input 5257
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
REGISTERING UDELETE NOP0F1E
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 90855 lines remaining.
BLines (lines remaining after reading input) = 90855
=============================================
Creating a generator 287
=============================================
ALines (lines before reading input) = 90855
read_input 5277
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 90700 lines remaining.
BLines (lines remaining after reading input) = 90700
=============================================
Creating a generator 287
=============================================
ALines (lines before reading input) = 90700
read_input 5291
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 90689 lines remaining.
BLines (lines remaining after reading input) = 90689
=============================================
Creating a generator 287
=============================================
ALines (lines before reading input) = 90689
read_input 5292
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 90513 lines remaining.
BLines (lines remaining after reading input) = 90513
=============================================
Creating a generator 287
=============================================
ALines (lines before reading input) = 90513
read_input 5306
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 90492 lines remaining.
BLines (lines remaining after reading input) = 90492
=============================================
Creating a generator 287
=============================================
ALines (lines before reading input) = 90492
read_input 5308
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 90451 lines remaining.
BLines (lines remaining after reading input) = 90451
=============================================
Creating a generator 287
=============================================
ALines (lines before reading input) = 90451
read_input 5312
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 90430 lines remaining.
BLines (lines remaining after reading input) = 90430
=============================================
Creating a generator 287
=============================================
ALines (lines before reading input) = 90430
read_input 5314
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 90419 lines remaining.
BLines (lines remaining after reading input) = 90419
=============================================
Creating a generator 287
=============================================
ALines (lines before reading input) = 90419
read_input 5315
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 90408 lines remaining.
BLines (lines remaining after reading input) = 90408
=============================================
Creating a generator 287
=============================================
ALines (lines before reading input) = 90408
read_input 5316
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 90373 lines remaining.
BLines (lines remaining after reading input) = 90373
=============================================
Creating a generator 287
=============================================
ALines (lines before reading input) = 90373
read_input 5320
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 90352 lines remaining.
BLines (lines remaining after reading input) = 90352
=============================================
Creating a generator 287
=============================================
ALines (lines before reading input) = 90352
read_input 5322
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 90331 lines remaining.
BLines (lines remaining after reading input) = 90331
=============================================
Creating a generator 287
=============================================
ALines (lines before reading input) = 90331
read_input 5324
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 90308 lines remaining.
BLines (lines remaining after reading input) = 90308
=============================================
Creating a generator 287
=============================================
ALines (lines before reading input) = 90308
read_input 5326
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 90296 lines remaining.
BLines (lines remaining after reading input) = 90296
=============================================
Creating a generator 287
=============================================
ALines (lines before reading input) = 90296
read_input 5328
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 90258 lines remaining.
BLines (lines remaining after reading input) = 90258
=============================================
Creating a generator 287
=============================================
ALines (lines before reading input) = 90258
read_input 5332
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 90220 lines remaining.
BLines (lines remaining after reading input) = 90220
=============================================
Creating a generator 287
=============================================
ALines (lines before reading input) = 90220
read_input 5335
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
REGISTERING UDELETE NOP0F1C
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 90155 lines remaining.
BLines (lines remaining after reading input) = 90155
=============================================
Creating a generator 287
=============================================
ALines (lines before reading input) = 90155
read_input 5347
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 90143 lines remaining.
BLines (lines remaining after reading input) = 90143
=============================================
Creating a generator 287
=============================================
ALines (lines before reading input) = 90143
read_input 5348
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 86705 lines remaining.
BLines (lines remaining after reading input) = 86705
=============================================
Creating a generator 287
=============================================
ALines (lines before reading input) = 86705
read_input 6071
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 86674 lines remaining.
BLines (lines remaining after reading input) = 86674
=============================================
Creating a generator 287
=============================================
ALines (lines before reading input) = 86674
read_input 6074
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 86607 lines remaining.
BLines (lines remaining after reading input) = 86607
=============================================
Creating a generator 287
=============================================
ALines (lines before reading input) = 86607
read_input 6086
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 86595 lines remaining.
BLines (lines remaining after reading input) = 86595
=============================================
Creating a generator 287
=============================================
ALines (lines before reading input) = 86595
read_input 6088
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 86560 lines remaining.
BLines (lines remaining after reading input) = 86560
=============================================
Creating a generator 287
=============================================
ALines (lines before reading input) = 86560
read_input 6096
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 85695 lines remaining.
BLines (lines remaining after reading input) = 85695
=============================================
Creating a generator 287
=============================================
ALines (lines before reading input) = 85695
read_input 6288
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 85574 lines remaining.
BLines (lines remaining after reading input) = 85574
=============================================
Creating a generator 287
=============================================
ALines (lines before reading input) = 85574
read_input 6304
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 84094 lines remaining.
BLines (lines remaining after reading input) = 84094
=============================================
Creating a generator 287
=============================================
ALines (lines before reading input) = 84094
read_input 6569
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 84018 lines remaining.
BLines (lines remaining after reading input) = 84018
=============================================
Creating a generator 287
=============================================
ALines (lines before reading input) = 84018
read_input 6589
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 84007 lines remaining.
BLines (lines remaining after reading input) = 84007
=============================================
Creating a generator 287
=============================================
ALines (lines before reading input) = 84007
read_input 6590
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 83766 lines remaining.
BLines (lines remaining after reading input) = 83766
=============================================
Creating a generator 287
=============================================
ALines (lines before reading input) = 83766
read_input 6668
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 83736 lines remaining.
BLines (lines remaining after reading input) = 83736
=============================================
Creating a generator 287
=============================================
ALines (lines before reading input) = 83736
read_input 6674
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 83725 lines remaining.
BLines (lines remaining after reading input) = 83725
=============================================
Creating a generator 287
=============================================
ALines (lines before reading input) = 83725
read_input 6675
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 83711 lines remaining.
BLines (lines remaining after reading input) = 83711
=============================================
Creating a generator 287
=============================================
ALines (lines before reading input) = 83711
read_input 6677
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 83679 lines remaining.
BLines (lines remaining after reading input) = 83679
=============================================
Creating a generator 287
=============================================
ALines (lines before reading input) = 83679
read_input 6683
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 83641 lines remaining.
BLines (lines remaining after reading input) = 83641
=============================================
Creating a generator 287
=============================================
ALines (lines before reading input) = 83641
read_input 6687
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 83608 lines remaining.
BLines (lines remaining after reading input) = 83608
=============================================
Creating a generator 287
=============================================
ALines (lines before reading input) = 83608
read_input 6695
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 83587 lines remaining.
BLines (lines remaining after reading input) = 83587
=============================================
Creating a generator 287
=============================================
ALines (lines before reading input) = 83587
read_input 6697
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 83576 lines remaining.
BLines (lines remaining after reading input) = 83576
=============================================
Creating a generator 287
=============================================
ALines (lines before reading input) = 83576
read_input 6698
NONTERMINAL: EVEX_INSTRUCTIONS notype
Adding EVEX_INSTRUCTIONS to nonterminal dict
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 83263 lines remaining.
BLines (lines remaining after reading input) = 83263
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 83263
read_input 6722
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 83028 lines remaining.
BLines (lines remaining after reading input) = 83028
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 83028
read_input 6740
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
REGISTERING UDELETE PREFETCH_RESERVED_0F0Dr2
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 83026 lines remaining.
BLines (lines remaining after reading input) = 83026
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 83026
read_input 6740
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 82427 lines remaining.
BLines (lines remaining after reading input) = 82427
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 82427
read_input 6786
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 82414 lines remaining.
BLines (lines remaining after reading input) = 82414
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 82414
read_input 6787
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 82361 lines remaining.
BLines (lines remaining after reading input) = 82361
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 82361
read_input 6791
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 82334 lines remaining.
BLines (lines remaining after reading input) = 82334
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 82334
read_input 6793
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 82281 lines remaining.
BLines (lines remaining after reading input) = 82281
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 82281
read_input 6797
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 70682 lines remaining.
BLines (lines remaining after reading input) = 70682
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 70682
read_input 7720
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 70485 lines remaining.
BLines (lines remaining after reading input) = 70485
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 70485
read_input 7735
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 70356 lines remaining.
BLines (lines remaining after reading input) = 70356
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 70356
read_input 7745
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 46984 lines remaining.
BLines (lines remaining after reading input) = 46984
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 46984
read_input 9551
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 46292 lines remaining.
BLines (lines remaining after reading input) = 46292
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 46292
read_input 9605
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 46135 lines remaining.
BLines (lines remaining after reading input) = 46135
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 46135
read_input 9617
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 45822 lines remaining.
BLines (lines remaining after reading input) = 45822
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 45822
read_input 9641
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 45798 lines remaining.
BLines (lines remaining after reading input) = 45798
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 45798
read_input 9644
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 45786 lines remaining.
BLines (lines remaining after reading input) = 45786
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 45786
read_input 9645
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 45770 lines remaining.
BLines (lines remaining after reading input) = 45770
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 45770
read_input 9647
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 45535 lines remaining.
BLines (lines remaining after reading input) = 45535
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 45535
read_input 9665
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 44286 lines remaining.
BLines (lines remaining after reading input) = 44286
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 44286
read_input 9761
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 44210 lines remaining.
BLines (lines remaining after reading input) = 44210
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 44210
read_input 9767
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 43975 lines remaining.
BLines (lines remaining after reading input) = 43975
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 43975
read_input 9785
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 43830 lines remaining.
BLines (lines remaining after reading input) = 43830
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 43830
read_input 9797
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 43454 lines remaining.
BLines (lines remaining after reading input) = 43454
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 43454
read_input 9827
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 43333 lines remaining.
BLines (lines remaining after reading input) = 43333
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 43333
read_input 9837
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 43228 lines remaining.
BLines (lines remaining after reading input) = 43228
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 43228
read_input 9845
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 43071 lines remaining.
BLines (lines remaining after reading input) = 43071
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 43071
read_input 9857
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 42938 lines remaining.
BLines (lines remaining after reading input) = 42938
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 42938
read_input 9868
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 42926 lines remaining.
BLines (lines remaining after reading input) = 42926
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 42926
read_input 9869
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 42733 lines remaining.
BLines (lines remaining after reading input) = 42733
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 42733
read_input 9885
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 42675 lines remaining.
BLines (lines remaining after reading input) = 42675
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 42675
read_input 9890
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 42518 lines remaining.
BLines (lines remaining after reading input) = 42518
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 42518
read_input 9902
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 42493 lines remaining.
BLines (lines remaining after reading input) = 42493
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 42493
read_input 9904
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 42470 lines remaining.
BLines (lines remaining after reading input) = 42470
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 42470
read_input 9906
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 42458 lines remaining.
BLines (lines remaining after reading input) = 42458
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 42458
read_input 9907
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 34783 lines remaining.
BLines (lines remaining after reading input) = 34783
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 34783
read_input 10497
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 34719 lines remaining.
BLines (lines remaining after reading input) = 34719
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 34719
read_input 10502
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 34705 lines remaining.
BLines (lines remaining after reading input) = 34705
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 34705
read_input 10503
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 34678 lines remaining.
BLines (lines remaining after reading input) = 34678
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 34678
read_input 10505
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
REGISTERING UDELETE NOP0F18r6
REGISTERING UDELETE NOP0F18r7
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 34675 lines remaining.
BLines (lines remaining after reading input) = 34675
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 34675
read_input 10505
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 34650 lines remaining.
BLines (lines remaining after reading input) = 34650
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 34650
read_input 10507
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 34553 lines remaining.
BLines (lines remaining after reading input) = 34553
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 34553
read_input 10515
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 34356 lines remaining.
BLines (lines remaining after reading input) = 34356
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 34356
read_input 10531
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 34067 lines remaining.
BLines (lines remaining after reading input) = 34067
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 34067
read_input 10555
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 33618 lines remaining.
BLines (lines remaining after reading input) = 33618
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 33618
read_input 10587
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 33593 lines remaining.
BLines (lines remaining after reading input) = 33593
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 33593
read_input 10589
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 33580 lines remaining.
BLines (lines remaining after reading input) = 33580
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 33580
read_input 10590
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 33553 lines remaining.
BLines (lines remaining after reading input) = 33553
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 33553
read_input 10592
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 33526 lines remaining.
BLines (lines remaining after reading input) = 33526
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 33526
read_input 10594
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 33237 lines remaining.
BLines (lines remaining after reading input) = 33237
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 33237
read_input 10618
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 33200 lines remaining.
BLines (lines remaining after reading input) = 33200
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 33200
read_input 10621
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: AVX_INSTRUCTIONS()::
parser returning with 33127 lines remaining.
BLines (lines remaining after reading input) = 33127
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 33127
read_input 10627
NONTERMINAL: AVX_INSTRUCTIONS notype
FOUND OLD PARSER FOR AVX_INSTRUCTIONS
Nonterminal AVX_INSTRUCTIONS()::
Nonterminal name AVX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 33030 lines remaining.
BLines (lines remaining after reading input) = 33030
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 33030
read_input 10635
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 33018 lines remaining.
BLines (lines remaining after reading input) = 33018
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 33018
read_input 10636
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 32967 lines remaining.
BLines (lines remaining after reading input) = 32967
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 32967
read_input 10640
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
REGISTERING UDELETE AMDSYSCALL32
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 32953 lines remaining.
BLines (lines remaining after reading input) = 32953
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 32953
read_input 10641
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 207 lines remaining.
BLines (lines remaining after reading input) = 207
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 207
read_input 13062
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: EVEX_INSTRUCTIONS()::
parser returning with 194 lines remaining.
BLines (lines remaining after reading input) = 194
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 194
read_input 13063
NONTERMINAL: EVEX_INSTRUCTIONS notype
FOUND OLD PARSER FOR EVEX_INSTRUCTIONS
Nonterminal EVEX_INSTRUCTIONS()::
Nonterminal name EVEX_INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 128 lines remaining.
BLines (lines remaining after reading input) = 128
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 128
read_input 13068
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
Hit a nonterminal, returning at: INSTRUCTIONS()::
parser returning with 105 lines remaining.
BLines (lines remaining after reading input) = 105
=============================================
Creating a generator 288
=============================================
ALines (lines before reading input) = 105
read_input 13070
NONTERMINAL: INSTRUCTIONS notype
FOUND OLD PARSER FOR INSTRUCTIONS
Nonterminal INSTRUCTIONS()::
Nonterminal name INSTRUCTIONS
read_structured_input
parser returning with 0 lines remaining.
BLines (lines remaining after reading input) = 0
DROPPING UNAME NOP0F18r6
DROPPING UNAME NOP0F18r7
DROPPING UNAME NOP0F1A
DROPPING UNAME NOP0F1A
DROPPING UNAME NOP0F1B
DROPPING UNAME NOP0F1B
DROPPING UNAME NOP0F1C
DROPPING UNAME NOP0F1C
DROPPING UNAME NOP0F1E
DROPPING UNAME NOP0F1E
DROPPING UNAME PREFETCH_RESERVED_0F0Dr2
DROPPING UNAME AMDSYSCALL32
FUNKY SPOT: bitpos 3
Others: 
REXR4=0 REXR=0 REG=0x4  REX=0  REX2=0  VEXVALID!=2 | OUTREG=XED_REG_AH
REXR4=0 REXR=0 REG=0x4  REX=1  REX2=0 | OUTREG=XED_REG_SPL
REXR4=0 REXR=0 REG=0x4         REX2=1 | OUTREG=XED_REG_SPL
REXR4=0 REXR=0 REG=0x4  REX=0  REX2=0  EVV | OUTREG=XED_REG_SPL
Ones: 
Zeros: 
REARRANGE ATTEMPT  using REX
	SKIPPING *NO-ICLASS* inum 654 -- already fine
	SKIPPING *NO-ICLASS* inum 658 -- already fine
	REARRANGE needs to juggle: *NO-ICLASS* inum 662
	REARRANGE FAILED for REX. Trying again...
REARRANGE ATTEMPT  using REX2
	REARRANGE needs to juggle: *NO-ICLASS* inum 654
	REARRANGE one pattern worked for *NO-ICLASS* inum 654
	REARRANGE needs to juggle: *NO-ICLASS* inum 658
	REARRANGE one pattern worked for *NO-ICLASS* inum 658
	SKIPPING *NO-ICLASS* inum 662 -- already fine
	REARRANGE needs to juggle: *NO-ICLASS* inum 666
	REARRANGE one pattern worked for *NO-ICLASS* inum 666
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 3
FUNKY SPOT: bitpos 3
Others: 
REXR4=0 REXR=0 REG=0x5  REX=0  REX2=0  VEXVALID!=2 | OUTREG=XED_REG_CH
REXR4=0 REXR=0 REG=0x5  REX=1  REX2=0 | OUTREG=XED_REG_BPL
REXR4=0 REXR=0 REG=0x5         REX2=1 | OUTREG=XED_REG_BPL
REXR4=0 REXR=0 REG=0x5  REX=0  REX2=0  EVV | OUTREG=XED_REG_BPL
Ones: 
Zeros: 
REARRANGE ATTEMPT  using REX
	SKIPPING *NO-ICLASS* inum 655 -- already fine
	SKIPPING *NO-ICLASS* inum 659 -- already fine
	REARRANGE needs to juggle: *NO-ICLASS* inum 663
	REARRANGE FAILED for REX. Trying again...
REARRANGE ATTEMPT  using REX2
	REARRANGE needs to juggle: *NO-ICLASS* inum 655
	REARRANGE one pattern worked for *NO-ICLASS* inum 655
	REARRANGE needs to juggle: *NO-ICLASS* inum 659
	REARRANGE one pattern worked for *NO-ICLASS* inum 659
	SKIPPING *NO-ICLASS* inum 663 -- already fine
	REARRANGE needs to juggle: *NO-ICLASS* inum 667
	REARRANGE one pattern worked for *NO-ICLASS* inum 667
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 3
FUNKY SPOT: bitpos 3
Others: 
REXR4=0 REXR=0 REG=0x6  REX=0  REX2=0  VEXVALID!=2 | OUTREG=XED_REG_DH
REXR4=0 REXR=0 REG=0x6  REX=1  REX2=0 | OUTREG=XED_REG_SIL
REXR4=0 REXR=0 REG=0x6         REX2=1 | OUTREG=XED_REG_SIL
REXR4=0 REXR=0 REG=0x6  REX=0  REX2=0  EVV | OUTREG=XED_REG_SIL
Ones: 
Zeros: 
REARRANGE ATTEMPT  using REX
	SKIPPING *NO-ICLASS* inum 656 -- already fine
	SKIPPING *NO-ICLASS* inum 660 -- already fine
	REARRANGE needs to juggle: *NO-ICLASS* inum 664
	REARRANGE FAILED for REX. Trying again...
REARRANGE ATTEMPT  using REX2
	REARRANGE needs to juggle: *NO-ICLASS* inum 656
	REARRANGE one pattern worked for *NO-ICLASS* inum 656
	REARRANGE needs to juggle: *NO-ICLASS* inum 660
	REARRANGE one pattern worked for *NO-ICLASS* inum 660
	SKIPPING *NO-ICLASS* inum 664 -- already fine
	REARRANGE needs to juggle: *NO-ICLASS* inum 668
	REARRANGE one pattern worked for *NO-ICLASS* inum 668
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 3
FUNKY SPOT: bitpos 3
Others: 
REXR4=0 REXR=0 REG=0x7  REX=0  REX2=0  VEXVALID!=2 | OUTREG=XED_REG_BH
REXR4=0 REXR=0 REG=0x7  REX=1  REX2=0 | OUTREG=XED_REG_DIL
REXR4=0 REXR=0 REG=0x7         REX2=1 | OUTREG=XED_REG_DIL
REXR4=0 REXR=0 REG=0x7  REX=0  REX2=0  EVV | OUTREG=XED_REG_DIL
Ones: 
Zeros: 
REARRANGE ATTEMPT  using REX
	SKIPPING *NO-ICLASS* inum 657 -- already fine
	SKIPPING *NO-ICLASS* inum 661 -- already fine
	REARRANGE needs to juggle: *NO-ICLASS* inum 665
	REARRANGE FAILED for REX. Trying again...
REARRANGE ATTEMPT  using REX2
	REARRANGE needs to juggle: *NO-ICLASS* inum 657
	REARRANGE one pattern worked for *NO-ICLASS* inum 657
	REARRANGE needs to juggle: *NO-ICLASS* inum 661
	REARRANGE one pattern worked for *NO-ICLASS* inum 661
	SKIPPING *NO-ICLASS* inum 665 -- already fine
	REARRANGE needs to juggle: *NO-ICLASS* inum 669
	REARRANGE one pattern worked for *NO-ICLASS* inum 669
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 3
FUNKY SPOT: bitpos 3
Others: 
REXB4=0 REXB=0 RM=0x4  REX=0  REX2=0  VEXVALID!=2 | OUTREG=XED_REG_AH
REXB4=0 REXB=0 RM=0x4  REX=1  REX2=0 | OUTREG=XED_REG_SPL
REXB4=0 REXB=0 RM=0x4         REX2=1 | OUTREG=XED_REG_SPL
REXB4=0 REXB=0 RM=0x4  REX=0  REX2=0  EVV | OUTREG=XED_REG_SPL
Ones: 
Zeros: 
REARRANGE ATTEMPT  using REX
	SKIPPING *NO-ICLASS* inum 698 -- already fine
	SKIPPING *NO-ICLASS* inum 702 -- already fine
	REARRANGE needs to juggle: *NO-ICLASS* inum 706
	REARRANGE FAILED for REX. Trying again...
REARRANGE ATTEMPT  using REX2
	REARRANGE needs to juggle: *NO-ICLASS* inum 698
	REARRANGE one pattern worked for *NO-ICLASS* inum 698
	REARRANGE needs to juggle: *NO-ICLASS* inum 702
	REARRANGE one pattern worked for *NO-ICLASS* inum 702
	SKIPPING *NO-ICLASS* inum 706 -- already fine
	REARRANGE needs to juggle: *NO-ICLASS* inum 710
	REARRANGE one pattern worked for *NO-ICLASS* inum 710
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 3
FUNKY SPOT: bitpos 3
Others: 
REXB4=0 REXB=0 RM=0x5  REX=0  REX2=0  VEXVALID!=2 | OUTREG=XED_REG_CH
REXB4=0 REXB=0 RM=0x5  REX=1  REX2=0 | OUTREG=XED_REG_BPL
REXB4=0 REXB=0 RM=0x5         REX2=1 | OUTREG=XED_REG_BPL
REXB4=0 REXB=0 RM=0x5  REX=0  REX2=0  EVV | OUTREG=XED_REG_BPL
Ones: 
Zeros: 
REARRANGE ATTEMPT  using REX
	SKIPPING *NO-ICLASS* inum 699 -- already fine
	SKIPPING *NO-ICLASS* inum 703 -- already fine
	REARRANGE needs to juggle: *NO-ICLASS* inum 707
	REARRANGE FAILED for REX. Trying again...
REARRANGE ATTEMPT  using REX2
	REARRANGE needs to juggle: *NO-ICLASS* inum 699
	REARRANGE one pattern worked for *NO-ICLASS* inum 699
	REARRANGE needs to juggle: *NO-ICLASS* inum 703
	REARRANGE one pattern worked for *NO-ICLASS* inum 703
	SKIPPING *NO-ICLASS* inum 707 -- already fine
	REARRANGE needs to juggle: *NO-ICLASS* inum 711
	REARRANGE one pattern worked for *NO-ICLASS* inum 711
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 3
FUNKY SPOT: bitpos 3
Others: 
REXB4=0 REXB=0 RM=0x6  REX=0  REX2=0  VEXVALID!=2 | OUTREG=XED_REG_DH
REXB4=0 REXB=0 RM=0x6  REX=1  REX2=0 | OUTREG=XED_REG_SIL
REXB4=0 REXB=0 RM=0x6         REX2=1 | OUTREG=XED_REG_SIL
REXB4=0 REXB=0 RM=0x6  REX=0  REX2=0  EVV | OUTREG=XED_REG_SIL
Ones: 
Zeros: 
REARRANGE ATTEMPT  using REX
	SKIPPING *NO-ICLASS* inum 700 -- already fine
	SKIPPING *NO-ICLASS* inum 704 -- already fine
	REARRANGE needs to juggle: *NO-ICLASS* inum 708
	REARRANGE FAILED for REX. Trying again...
REARRANGE ATTEMPT  using REX2
	REARRANGE needs to juggle: *NO-ICLASS* inum 700
	REARRANGE one pattern worked for *NO-ICLASS* inum 700
	REARRANGE needs to juggle: *NO-ICLASS* inum 704
	REARRANGE one pattern worked for *NO-ICLASS* inum 704
	SKIPPING *NO-ICLASS* inum 708 -- already fine
	REARRANGE needs to juggle: *NO-ICLASS* inum 712
	REARRANGE one pattern worked for *NO-ICLASS* inum 712
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 3
FUNKY SPOT: bitpos 3
Others: 
REXB4=0 REXB=0 RM=0x7  REX=0  REX2=0  VEXVALID!=2 | OUTREG=XED_REG_BH
REXB4=0 REXB=0 RM=0x7  REX=1  REX2=0 | OUTREG=XED_REG_DIL
REXB4=0 REXB=0 RM=0x7         REX2=1 | OUTREG=XED_REG_DIL
REXB4=0 REXB=0 RM=0x7  REX=0  REX2=0  EVV | OUTREG=XED_REG_DIL
Ones: 
Zeros: 
REARRANGE ATTEMPT  using REX
	SKIPPING *NO-ICLASS* inum 701 -- already fine
	SKIPPING *NO-ICLASS* inum 705 -- already fine
	REARRANGE needs to juggle: *NO-ICLASS* inum 709
	REARRANGE FAILED for REX. Trying again...
REARRANGE ATTEMPT  using REX2
	REARRANGE needs to juggle: *NO-ICLASS* inum 701
	REARRANGE one pattern worked for *NO-ICLASS* inum 701
	REARRANGE needs to juggle: *NO-ICLASS* inum 705
	REARRANGE one pattern worked for *NO-ICLASS* inum 705
	SKIPPING *NO-ICLASS* inum 709 -- already fine
	REARRANGE needs to juggle: *NO-ICLASS* inum 713
	REARRANGE one pattern worked for *NO-ICLASS* inum 713
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 3
FUNKY SPOT: bitpos 3
Others: 
REXB4=0 REXB=0 SRM=0x4  REX=0  REX2=0  VEXVALID!=2 | OUTREG=XED_REG_AH
REXB4=0 REXB=0 SRM=0x4  REX=1  REX2=0 | OUTREG=XED_REG_SPL
REXB4=0 REXB=0 SRM=0x4         REX2=1 | OUTREG=XED_REG_SPL
REXB4=0 REXB=0 SRM=0x4  REX=0  REX2=0  EVV | OUTREG=XED_REG_SPL
Ones: 
Zeros: 
REARRANGE ATTEMPT  using REX
	SKIPPING *NO-ICLASS* inum 742 -- already fine
	SKIPPING *NO-ICLASS* inum 746 -- already fine
	REARRANGE needs to juggle: *NO-ICLASS* inum 750
	REARRANGE FAILED for REX. Trying again...
REARRANGE ATTEMPT  using REX2
	REARRANGE needs to juggle: *NO-ICLASS* inum 742
	REARRANGE one pattern worked for *NO-ICLASS* inum 742
	REARRANGE needs to juggle: *NO-ICLASS* inum 746
	REARRANGE one pattern worked for *NO-ICLASS* inum 746
	SKIPPING *NO-ICLASS* inum 750 -- already fine
	REARRANGE needs to juggle: *NO-ICLASS* inum 754
	REARRANGE one pattern worked for *NO-ICLASS* inum 754
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 3
FUNKY SPOT: bitpos 3
Others: 
REXB4=0 REXB=0 SRM=0x5  REX=0  REX2=0  VEXVALID!=2 | OUTREG=XED_REG_CH
REXB4=0 REXB=0 SRM=0x5  REX=1  REX2=0 | OUTREG=XED_REG_BPL
REXB4=0 REXB=0 SRM=0x5         REX2=1 | OUTREG=XED_REG_BPL
REXB4=0 REXB=0 SRM=0x5  REX=0  REX2=0  EVV | OUTREG=XED_REG_BPL
Ones: 
Zeros: 
REARRANGE ATTEMPT  using REX
	SKIPPING *NO-ICLASS* inum 743 -- already fine
	SKIPPING *NO-ICLASS* inum 747 -- already fine
	REARRANGE needs to juggle: *NO-ICLASS* inum 751
	REARRANGE FAILED for REX. Trying again...
REARRANGE ATTEMPT  using REX2
	REARRANGE needs to juggle: *NO-ICLASS* inum 743
	REARRANGE one pattern worked for *NO-ICLASS* inum 743
	REARRANGE needs to juggle: *NO-ICLASS* inum 747
	REARRANGE one pattern worked for *NO-ICLASS* inum 747
	SKIPPING *NO-ICLASS* inum 751 -- already fine
	REARRANGE needs to juggle: *NO-ICLASS* inum 755
	REARRANGE one pattern worked for *NO-ICLASS* inum 755
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 3
FUNKY SPOT: bitpos 3
Others: 
REXB4=0 REXB=0 SRM=0x6  REX=0  REX2=0  VEXVALID!=2 | OUTREG=XED_REG_DH
REXB4=0 REXB=0 SRM=0x6  REX=1  REX2=0 | OUTREG=XED_REG_SIL
REXB4=0 REXB=0 SRM=0x6         REX2=1 | OUTREG=XED_REG_SIL
REXB4=0 REXB=0 SRM=0x6  REX=0  REX2=0  EVV | OUTREG=XED_REG_SIL
Ones: 
Zeros: 
REARRANGE ATTEMPT  using REX
	SKIPPING *NO-ICLASS* inum 744 -- already fine
	SKIPPING *NO-ICLASS* inum 748 -- already fine
	REARRANGE needs to juggle: *NO-ICLASS* inum 752
	REARRANGE FAILED for REX. Trying again...
REARRANGE ATTEMPT  using REX2
	REARRANGE needs to juggle: *NO-ICLASS* inum 744
	REARRANGE one pattern worked for *NO-ICLASS* inum 744
	REARRANGE needs to juggle: *NO-ICLASS* inum 748
	REARRANGE one pattern worked for *NO-ICLASS* inum 748
	SKIPPING *NO-ICLASS* inum 752 -- already fine
	REARRANGE needs to juggle: *NO-ICLASS* inum 756
	REARRANGE one pattern worked for *NO-ICLASS* inum 756
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 3
FUNKY SPOT: bitpos 3
Others: 
REXB4=0 REXB=0 SRM=0x7  REX=0  REX2=0  VEXVALID!=2 | OUTREG=XED_REG_BH
REXB4=0 REXB=0 SRM=0x7  REX=1  REX2=0 | OUTREG=XED_REG_DIL
REXB4=0 REXB=0 SRM=0x7         REX2=1 | OUTREG=XED_REG_DIL
REXB4=0 REXB=0 SRM=0x7  REX=0  REX2=0  EVV | OUTREG=XED_REG_DIL
Ones: 
Zeros: 
REARRANGE ATTEMPT  using REX
	SKIPPING *NO-ICLASS* inum 745 -- already fine
	SKIPPING *NO-ICLASS* inum 749 -- already fine
	REARRANGE needs to juggle: *NO-ICLASS* inum 753
	REARRANGE FAILED for REX. Trying again...
REARRANGE ATTEMPT  using REX2
	REARRANGE needs to juggle: *NO-ICLASS* inum 745
	REARRANGE one pattern worked for *NO-ICLASS* inum 745
	REARRANGE needs to juggle: *NO-ICLASS* inum 749
	REARRANGE one pattern worked for *NO-ICLASS* inum 749
	SKIPPING *NO-ICLASS* inum 753 -- already fine
	REARRANGE needs to juggle: *NO-ICLASS* inum 757
	REARRANGE one pattern worked for *NO-ICLASS* inum 757
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 3
FUNKY SPOT: bitpos 0
Others: 
REXR4=0   |
NO_APX=0 REXR4=1   |
NO_APX=1 REXR4=1   | error
Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXR4
	SKIPPING *NO-ICLASS* inum 1759 -- already fine
	REARRANGE needs to juggle: *NO-ICLASS* inum 2863
	REARRANGE one pattern worked for *NO-ICLASS* inum 2863
	REARRANGE needs to juggle: *NO-ICLASS* inum 2864
	REARRANGE one pattern worked for *NO-ICLASS* inum 2864
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 0
X9 need to splatter based on cases overlapping with scalar dispatch
Splattering because of conflicting 'other' conditions
X9 need to splatter based on cases overlapping with scalar dispatch
Splattering because of conflicting 'other' conditions
Length error: some instructions done and some are not done simultaneously
ilist len = 20


ILIST:
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27
bitpos:26  len-pattern:28
bitpos:26  len-pattern:29
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27
bitpos:26  len-pattern:28
bitpos:26  len-pattern:29


NODE:
	NOP inum=5261  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 0 n n    n REP=3

	NOP inum=5262  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    1 0 n n    n REP=3

	NOP inum=5263  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    1 1 n n    n REP=3

	NOP inum=5264  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    0 0 n n    n REP=3

	NOP inum=5265  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    0 1 n n    n REP=3

	NOP inum=5266  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 0 n n    n REP=3

	NOP inum=5267  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    0 REP=3

	NOP inum=5268  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    1 REP=3

	NOP inum=5269  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    0 REP=3

	NOP inum=5270  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    1 REP=3

	NOP inum=5271  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    0 REP=3

	NOP inum=5272  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    1 REP=3

	NOP inum=5273  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=0

	NOP inum=5274  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=0

	NOP inum=5275  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=28
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=0 CET=0   

	NOP inum=5276  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=29
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=1 MODE=2    CET=0

	ENDBR32 inum=5278  iform_input=ENDBR32  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=1

	ENDBR64 inum=5279  iform_input=ENDBR64  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=1

	RDSSPD inum=5282  iform_input=RDSSPD_GPR32u32  isa_set=CET pattern len=28
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=0 CET=1   

	RDSSPQ inum=5283  iform_input=RDSSPQ_GPR64u64  isa_set=CET pattern len=29
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=1 MODE=2    CET=1

FALLBACK: we can parition on the 1s and 0s at bitpos 21
back_split_graph: based on 21
BACKSPLIT  fake bitpos: 21 real bitpos: 20


BUILD ERROR: more than one leaf when ran out of bits:
   NOP inum=5261  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 0 n n    n REP=3

   NOP inum=5262  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    1 0 n n    n REP=3

   NOP inum=5264  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    0 0 n n    n REP=3

   NOP inum=5266  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 0 n n    n REP=3




FALLBACK: we can parition on the 1s and 0s at bitpos 20
NEED TO BACKSPLIT AT POSITION 20
back_split_graph: based on 20
BACKSPLIT  fake bitpos: 20 real bitpos: 19


BUILD ERROR: more than one leaf when ran out of bits:
   NOP inum=5261  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 0 n n    n REP=3

   NOP inum=5264  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    0 0 n n    n REP=3




FALLBACK: we can parition on the 1s and 0s at bitpos 19
NEED TO BACKSPLIT AT POSITION 19
back_split_graph: based on 19
BACKSPLIT  fake bitpos: 19 real bitpos: 18


BUILD ERROR: more than one leaf when ran out of bits:
   NOP inum=5262  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    1 0 n n    n REP=3

   NOP inum=5266  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 0 n n    n REP=3




FALLBACK: we can parition on the 1s and 0s at bitpos 19
NEED TO BACKSPLIT AT POSITION 19
back_split_graph: based on 19
BACKSPLIT  fake bitpos: 19 real bitpos: 18

Length error: some instructions done and some are not done simultaneously
ilist len = 16


ILIST:
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27
bitpos:26  len-pattern:28
bitpos:26  len-pattern:29
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27
bitpos:26  len-pattern:28
bitpos:26  len-pattern:29


NODE:
	NOP inum=5263  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    1 1 n n    n REP=3

	NOP inum=5265  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    0 1 n n    n REP=3

	NOP inum=5267  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    0 REP=3

	NOP inum=5268  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    1 REP=3

	NOP inum=5269  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    0 REP=3

	NOP inum=5270  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    1 REP=3

	NOP inum=5271  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    0 REP=3

	NOP inum=5272  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    1 REP=3

	NOP inum=5273  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=0

	NOP inum=5274  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=0

	NOP inum=5275  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=28
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=0 CET=0   

	NOP inum=5276  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=29
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=1 MODE=2    CET=0

	ENDBR32 inum=5278  iform_input=ENDBR32  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=1

	ENDBR64 inum=5279  iform_input=ENDBR64  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=1

	RDSSPD inum=5282  iform_input=RDSSPD_GPR32u32  isa_set=CET pattern len=28
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=0 CET=1   

	RDSSPQ inum=5283  iform_input=RDSSPQ_GPR64u64  isa_set=CET pattern len=29
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=1 MODE=2    CET=1

FALLBACK: we can parition on the 1s and 0s at bitpos 20
back_split_graph: based on 20
BACKSPLIT  fake bitpos: 20 real bitpos: 19

Length error: some instructions done and some are not done simultaneously
ilist len = 5


ILIST:
bitpos:26  len-pattern:26
bitpos:26  len-pattern:28
bitpos:26  len-pattern:29
bitpos:26  len-pattern:28
bitpos:26  len-pattern:29


NODE:
	NOP inum=5265  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    0 1 n n    n REP=3

	NOP inum=5275  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=28
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=0 CET=0   

	NOP inum=5276  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=29
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=1 MODE=2    CET=0

	RDSSPD inum=5282  iform_input=RDSSPD_GPR32u32  isa_set=CET pattern len=28
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=0 CET=1   

	RDSSPQ inum=5283  iform_input=RDSSPQ_GPR64u64  isa_set=CET pattern len=29
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    0 1 n n    n REP=3 REXW=1 MODE=2    CET=1

FALLBACK: we can parition on the 1s and 0s at bitpos 19
back_split_graph: based on 19
BACKSPLIT  fake bitpos: 19 real bitpos: 18

Length error: some instructions done and some are not done simultaneously
ilist len = 11


ILIST:
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27


NODE:
	NOP inum=5263  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 0    1 1 n n    n REP=3

	NOP inum=5267  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    0 REP=3

	NOP inum=5268  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    1 REP=3

	NOP inum=5269  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    0 REP=3

	NOP inum=5270  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    1 REP=3

	NOP inum=5271  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    0 REP=3

	NOP inum=5272  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    1 REP=3

	NOP inum=5273  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=0

	NOP inum=5274  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=0

	ENDBR32 inum=5278  iform_input=ENDBR32  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=1

	ENDBR64 inum=5279  iform_input=ENDBR64  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=1

FALLBACK: we can parition on the 1s and 0s at bitpos 19
back_split_graph: based on 19
BACKSPLIT  fake bitpos: 19 real bitpos: 18

Length error: some instructions done and some are not done simultaneously
ilist len = 10


ILIST:
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27


NODE:
	NOP inum=5267  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    0 REP=3

	NOP inum=5268  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    1 REP=3

	NOP inum=5269  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    0 REP=3

	NOP inum=5270  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    1 REP=3

	NOP inum=5271  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    0 REP=3

	NOP inum=5272  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    1 REP=3

	NOP inum=5273  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=0

	NOP inum=5274  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=0

	ENDBR32 inum=5278  iform_input=ENDBR32  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=1

	ENDBR64 inum=5279  iform_input=ENDBR64  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=1

FALLBACK: we can parition on the 1s and 0s at bitpos 24
back_split_graph: based on 24
BACKSPLIT  fake bitpos: 24 real bitpos: 23

Length error: some instructions done and some are not done simultaneously
ilist len = 5


ILIST:
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27


NODE:
	NOP inum=5267  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    0 REP=3

	NOP inum=5269  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    0 REP=3

	NOP inum=5271  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    0 REP=3

	NOP inum=5273  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=0

	ENDBR64 inum=5279  iform_input=ENDBR64  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=1

FALLBACK: we can parition on the 1s and 0s at bitpos 23
back_split_graph: based on 23
BACKSPLIT  fake bitpos: 23 real bitpos: 22


BUILD ERROR: more than one leaf when ran out of bits:
   NOP inum=5267  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    0 REP=3

   NOP inum=5269  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    0 REP=3




FALLBACK: we can parition on the 1s and 0s at bitpos 22
NEED TO BACKSPLIT AT POSITION 22
back_split_graph: based on 22
BACKSPLIT  fake bitpos: 22 real bitpos: 21

Length error: some instructions done and some are not done simultaneously
ilist len = 3


ILIST:
bitpos:26  len-pattern:26
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27


NODE:
	NOP inum=5271  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    0 REP=3

	NOP inum=5273  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=0

	ENDBR64 inum=5279  iform_input=ENDBR64  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    0 REP=3 CET=1

FALLBACK: we can parition on the 1s and 0s at bitpos 22
back_split_graph: based on 22
BACKSPLIT  fake bitpos: 22 real bitpos: 21

Length error: some instructions done and some are not done simultaneously
ilist len = 5


ILIST:
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:26
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27


NODE:
	NOP inum=5268  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    1 REP=3

	NOP inum=5270  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    1 REP=3

	NOP inum=5272  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    1 REP=3

	NOP inum=5274  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=0

	ENDBR32 inum=5278  iform_input=ENDBR32  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=1

FALLBACK: we can parition on the 1s and 0s at bitpos 23
back_split_graph: based on 23
BACKSPLIT  fake bitpos: 23 real bitpos: 22


BUILD ERROR: more than one leaf when ran out of bits:
   NOP inum=5268  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 0    1 REP=3

   NOP inum=5270  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
     ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 0    1 REP=3




FALLBACK: we can parition on the 1s and 0s at bitpos 22
NEED TO BACKSPLIT AT POSITION 22
back_split_graph: based on 22
BACKSPLIT  fake bitpos: 22 real bitpos: 21

Length error: some instructions done and some are not done simultaneously
ilist len = 3


ILIST:
bitpos:26  len-pattern:26
bitpos:26  len-pattern:27
bitpos:26  len-pattern:27


NODE:
	NOP inum=5272  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=26
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 1 1    1 REP=3

	NOP inum=5274  iform_input=NOP_GPRv_GPRv_0F1E  isa_set=PPRO pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=0

	ENDBR32 inum=5278  iform_input=ENDBR32  isa_set=CET pattern len=27
  ipattern: 0 0 0 0    1 1 1 1    0 0 0 1    1 1 1 0    1 1 MOD=3 1    1 1 0 1    1 REP=3 CET=1

FALLBACK: we can parition on the 1s and 0s at bitpos 22
back_split_graph: based on 22
BACKSPLIT  fake bitpos: 22 real bitpos: 21

FUNKY SPOT: bitpos 36
Others: 
MOVDIRI inum=5330  iform_input=MOVDIRI_MEMu32_GPR32u32  isa_set=MOVDIRI pattern len=37
  ipattern: 0 0 0 0    1 1 1 1    0 0 1 1    1 0 0 0    1 1 1 1    1 0 0 1    m m MOD!=3 r    r r n n    n MODRM() REP=0 OSZ=0    REXW=0

MOVDIRI inum=5331  iform_input=MOVDIRI_MEMu64_GPR64u64  isa_set=MOVDIRI pattern len=38
  ipattern: 0 0 0 0    1 1 1 1    0 0 1 1    1 0 0 0    1 1 1 1    1 0 0 1    m m MOD!=3 r    r r n n    n MODRM() REP=0 OSZ=0    MODE=2 REXW=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING MOVDIRI inum 5330 -- already fine
	REARRANGE needs to juggle: MOVDIRI inum 5331
	REARRANGE one pattern worked for MOVDIRI inum 5331
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 36
FUNKY SPOT: bitpos 36
Others: 
AADD inum=13070  iform_input=AADD_MEM32_GPR32  isa_set=RAO_INT pattern len=37
  ipattern: 0 0 0 0    1 1 1 1    0 0 1 1    1 0 0 0    1 1 1 1    1 1 0 0    m m MOD!=3 r    r r n n    n MODRM() REP=0 OSZ=0    REXW=0

AADD inum=13071  iform_input=AADD_MEM64_GPR64  isa_set=RAO_INT pattern len=38
  ipattern: 0 0 0 0    1 1 1 1    0 0 1 1    1 0 0 0    1 1 1 1    1 1 0 0    m m MOD!=3 r    r r n n    n MODRM() REP=0 OSZ=0    MODE=2 REXW=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING AADD inum 13070 -- already fine
	REARRANGE needs to juggle: AADD inum 13071
	REARRANGE one pattern worked for AADD inum 13071
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 36
FUNKY SPOT: bitpos 36
Others: 
AAND inum=13072  iform_input=AAND_MEM32_GPR32  isa_set=RAO_INT pattern len=37
  ipattern: 0 0 0 0    1 1 1 1    0 0 1 1    1 0 0 0    1 1 1 1    1 1 0 0    m m MOD!=3 r    r r n n    n MODRM() REP=0 OSZ=1    REXW=0

AAND inum=13073  iform_input=AAND_MEM64_GPR64  isa_set=RAO_INT pattern len=38
  ipattern: 0 0 0 0    1 1 1 1    0 0 1 1    1 0 0 0    1 1 1 1    1 1 0 0    m m MOD!=3 r    r r n n    n MODRM() REP=0 OSZ=1    MODE=2 REXW=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING AAND inum 13072 -- already fine
	REARRANGE needs to juggle: AAND inum 13073
	REARRANGE one pattern worked for AAND inum 13073
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 36
FUNKY SPOT: bitpos 35
Others: 
AOR inum=13074  iform_input=AOR_MEM32_GPR32  isa_set=RAO_INT pattern len=36
  ipattern: 0 0 0 0    1 1 1 1    0 0 1 1    1 0 0 0    1 1 1 1    1 1 0 0    m m MOD!=3 r    r r n n    n MODRM() REP=2 REXW=0   

AOR inum=13075  iform_input=AOR_MEM64_GPR64  isa_set=RAO_INT pattern len=37
  ipattern: 0 0 0 0    1 1 1 1    0 0 1 1    1 0 0 0    1 1 1 1    1 1 0 0    m m MOD!=3 r    r r n n    n MODRM() REP=2 MODE=2    REXW=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING AOR inum 13074 -- already fine
	REARRANGE needs to juggle: AOR inum 13075
	REARRANGE one pattern worked for AOR inum 13075
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 35
FUNKY SPOT: bitpos 35
Others: 
AXOR inum=13076  iform_input=AXOR_MEM32_GPR32  isa_set=RAO_INT pattern len=36
  ipattern: 0 0 0 0    1 1 1 1    0 0 1 1    1 0 0 0    1 1 1 1    1 1 0 0    m m MOD!=3 r    r r n n    n MODRM() REP=3 REXW=0   

AXOR inum=13077  iform_input=AXOR_MEM64_GPR64  isa_set=RAO_INT pattern len=37
  ipattern: 0 0 0 0    1 1 1 1    0 0 1 1    1 0 0 0    1 1 1 1    1 1 0 0    m m MOD!=3 r    r r n n    n MODRM() REP=3 MODE=2    REXW=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING AXOR inum 13076 -- already fine
	REARRANGE needs to juggle: AXOR inum 13077
	REARRANGE one pattern worked for AXOR inum 13077
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 35
FUNKY SPOT: bitpos 8
Others: 
POP inum=3515  iform_input=POP_GPRv_58  isa_set=I86 pattern len=10
  ipattern: 0 1 0 1    1 r r r    REX2=0 DF64()

POP inum=3516  iform_input=POP_GPRv_58  isa_set=I86 pattern len=11
  ipattern: 0 1 0 1    1 r r r    REX2=1 REXW=0 DF64()

POPP inum=13069  iform_input=POPP_GPR64  isa_set=APX_F pattern len=11
  ipattern: 0 1 0 1    1 r r r    MODE=2 REX2=1 REXW=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REX2
	SKIPPING POP inum 3515 -- already fine
	SKIPPING POP inum 3516 -- already fine
	REARRANGE needs to juggle: POPP inum 13069
	REARRANGE one pattern worked for POPP inum 13069
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 8
FUNKY SPOT: bitpos 9
Others: 
POP inum=3516  iform_input=POP_GPRv_58  isa_set=I86 pattern len=11
  ipattern: 0 1 0 1    1 r r r    REX2=1 REXW=0 DF64()

POPP inum=13069  iform_input=POPP_GPR64  isa_set=APX_F pattern len=11
  ipattern: 0 1 0 1    1 r r r    REX2=1 MODE=2 REXW=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING POP inum 3516 -- already fine
	REARRANGE needs to juggle: POPP inum 13069
	REARRANGE one pattern worked for POPP inum 13069
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 8
Others: 
MOV inum=3682  isa_set=I86 pattern len=11
  ipattern: 1 0 1 0    0 0 0 1    REX2=0 MEMDISPv() OVERRIDE_SEG0()

JMPABS inum=13062  iform_input=JMPABS_ABSBRu64_APX  isa_set=APX_F pattern len=15
  ipattern: 1 0 1 0    0 0 0 1    REXW=0 OSZ=0 ASZ=0 REP=0    REX2=1 MODE=2 BRDISP64()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REX2
	SKIPPING MOV inum 3682 -- already fine
	REARRANGE needs to juggle: JMPABS inum 13062
	REARRANGE one pattern worked for JMPABS inum 13062
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 8
FUNKY SPOT: bitpos 11
Others: 
REP_MOVSW inum=3690  isa_set=I86 pattern len=14
  ipattern: 1 0 1 0    0 1 0 1    MODE=2 REXW=0 OSZ=1 REX2=0    REP=3 OVERRIDE_SEG1()

REP_MOVSW inum=3693  isa_set=I86 pattern len=14
  ipattern: 1 0 1 0    0 1 0 1    MODE=2 REXW=0 OSZ=1 REP=2    REX2=0 OVERRIDE_SEG1()

MOVSW inum=3696  isa_set=I86 pattern len=14
  ipattern: 1 0 1 0    0 1 0 1    MODE=2 REXW=0 OSZ=1 REP=0    REX2=0 OVERRIDE_SEG1()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REX2
	SKIPPING REP_MOVSW inum 3690 -- already fine
	REARRANGE needs to juggle: REP_MOVSW inum 3693
	REARRANGE one pattern worked for REP_MOVSW inum 3693
	REARRANGE needs to juggle: MOVSW inum 3696
	REARRANGE one pattern worked for MOVSW inum 3696
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 10
Others: 
REP_MOVSQ inum=3706  isa_set=LONGMODE pattern len=13
  ipattern: 1 0 1 0    0 1 0 1    MODE=2 REXW=1 REX2=0 REP=3    OVERRIDE_SEG1()

REP_MOVSQ inum=3707  isa_set=LONGMODE pattern len=13
  ipattern: 1 0 1 0    0 1 0 1    MODE=2 REXW=1 REX2=0 REP=2    OVERRIDE_SEG1()

MOVSQ inum=3708  isa_set=LONGMODE pattern len=13
  ipattern: 1 0 1 0    0 1 0 1    MODE=2 REXW=1 REP=0 REX2=0    OVERRIDE_SEG1()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REX2
	SKIPPING REP_MOVSQ inum 3706 -- already fine
	SKIPPING REP_MOVSQ inum 3707 -- already fine
	REARRANGE needs to juggle: MOVSQ inum 3708
	REARRANGE one pattern worked for MOVSQ inum 3708
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 11
Others: 
LLWPCB inum=5074  isa_set=LWP pattern len=23
  ipattern: VEXVALID=3 0 0 0    1 0 0 1    0 VEX_PREFIX=0 VL=0 VEXDEST3=0b1    VEXDEST210=0b111 MAP=9 1 1    MOD=3 0 0 0    n n n

SLWPCB inum=5075  isa_set=LWP pattern len=23
  ipattern: VEXVALID=3 0 0 0    1 0 0 1    0 VEX_PREFIX=0 VL=0 VEXDEST3=0b1    VEXDEST210=0b111 MAP=9 1 1    MOD=3 0 0 1    n n n

LWPINS inum=5076  isa_set=LWP pattern len=23
  ipattern: VEXVALID=3 0 0 0    1 0 0 1    0 VEX_PREFIX=0 VL=0 MAP=10    m m MOD!=3 0    0 0 n n    n MODRM() UIMM32()

LWPINS inum=5077  isa_set=LWP pattern len=22
  ipattern: VEXVALID=3 0 0 0    1 0 0 1    0 VEX_PREFIX=0 VL=0 MAP=10    1 1 MOD=3 0    0 0 n n    n UIMM32()

LWPVAL inum=5078  isa_set=LWP pattern len=23
  ipattern: VEXVALID=3 0 0 0    1 0 0 1    0 VEX_PREFIX=0 VL=0 MAP=10    m m MOD!=3 0    0 1 n n    n MODRM() UIMM32()

LWPVAL inum=5079  isa_set=LWP pattern len=22
  ipattern: VEXVALID=3 0 0 0    1 0 0 1    0 VEX_PREFIX=0 VL=0 MAP=10    1 1 MOD=3 0    0 1 n n    n UIMM32()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEXDEST3
	SKIPPING LLWPCB inum 5074 -- already fine
	SKIPPING SLWPCB inum 5075 -- already fine
	REARRANGE needs to juggle: LWPINS inum 5076
	REARRANGE FAILED for VEXDEST3. Trying again...
REARRANGE ATTEMPT  using VEXDEST210
	REARRANGE needs to juggle: LLWPCB inum 5074
	REARRANGE one pattern worked for LLWPCB inum 5074
	REARRANGE needs to juggle: SLWPCB inum 5075
	REARRANGE one pattern worked for SLWPCB inum 5075
	REARRANGE needs to juggle: LWPINS inum 5076
	REARRANGE FAILED for VEXDEST210. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: LLWPCB inum 5074
	REARRANGE one pattern worked for LLWPCB inum 5074
	REARRANGE needs to juggle: SLWPCB inum 5075
	REARRANGE one pattern worked for SLWPCB inum 5075
	SKIPPING LWPINS inum 5076 -- already fine
	SKIPPING LWPINS inum 5077 -- already fine
	SKIPPING LWPVAL inum 5078 -- already fine
	SKIPPING LWPVAL inum 5079 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 10
Others: 
VPSHUFB inum=6426  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 0 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    m m MOD!=3 r    r r n n    n MODRM()

VPSHUFB inum=6427  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 0 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    1 1 MOD=3 r    r r n n    n

VPERMQ inum=6537  isa_set=AVX2 pattern len=26
  ipattern: VEXVALID=1 0 0 0    0 0 0 0    0 VL=1 MAP=3 VEX_PREFIX=1    REXW=1 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM() UIMM8()

VPERMQ inum=6538  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 0 0    0 0 0 0    0 VL=1 MAP=3 VEX_PREFIX=1    REXW=1 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n    UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VPSHUFB inum 6426 -- already fine
	SKIPPING VPSHUFB inum 6427 -- already fine
	REARRANGE needs to juggle: VPERMQ inum 6537
	REARRANGE one pattern worked for VPERMQ inum 6537
	REARRANGE needs to juggle: VPERMQ inum 6538
	REARRANGE one pattern worked for VPERMQ inum 6538
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 10
Others: 
VPHADDW inum=6370  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 0 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    m m MOD!=3 r    r r n n    n MODRM()

VPHADDW inum=6371  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 0 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    1 1 MOD=3 r    r r n n    n

VPERMPD inum=6539  isa_set=AVX2 pattern len=26
  ipattern: VEXVALID=1 0 0 0    0 0 0 0    1 VL=1 MAP=3 VEX_PREFIX=1    REXW=1 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM() UIMM8()

VPERMPD inum=6540  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 0 0    0 0 0 0    1 VL=1 MAP=3 VEX_PREFIX=1    REXW=1 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n    UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VPHADDW inum 6370 -- already fine
	SKIPPING VPHADDW inum 6371 -- already fine
	REARRANGE needs to juggle: VPERMPD inum 6539
	REARRANGE one pattern worked for VPERMPD inum 6539
	REARRANGE needs to juggle: VPERMPD inum 6540
	REARRANGE one pattern worked for VPERMPD inum 6540
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VPSIGND inum=5768  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VL=0 VEX_PREFIX=1 MAP=2    m m MOD!=3 r    r r n n    n MODRM()

VPSIGND inum=5769  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VL=0 VEX_PREFIX=1 MAP=2    1 1 MOD=3 r    r r n n    n

VPSIGND inum=6432  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VL=1 VEX_PREFIX=1 MAP=2    m m MOD!=3 r    r r n n    n MODRM()

VPSIGND inum=6433  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VL=1 VEX_PREFIX=1 MAP=2    1 1 MOD=3 r    r r n n    n

VROUNDSS inum=5820  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VEX_PREFIX=1 MAP=3 m    m MOD!=3 r r    r n n n    MODRM() UIMM8()

VROUNDSS inum=5821  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VEX_PREFIX=1 MAP=3 1    1 MOD=3 r r    r n n n    UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPSIGND inum 5768 -- already fine
	SKIPPING VPSIGND inum 5769 -- already fine
	SKIPPING VPSIGND inum 6432 -- already fine
	SKIPPING VPSIGND inum 6433 -- already fine
	REARRANGE needs to juggle: VROUNDSS inum 5820
	REARRANGE FAILED for VL. Trying again...
REARRANGE ATTEMPT  using VEX_PREFIX
	REARRANGE needs to juggle: VPSIGND inum 5768
	REARRANGE one pattern worked for VPSIGND inum 5768
	REARRANGE needs to juggle: VPSIGND inum 5769
	REARRANGE one pattern worked for VPSIGND inum 5769
	REARRANGE needs to juggle: VPSIGND inum 6432
	REARRANGE one pattern worked for VPSIGND inum 6432
	REARRANGE needs to juggle: VPSIGND inum 6433
	REARRANGE one pattern worked for VPSIGND inum 6433
	SKIPPING VROUNDSS inum 5820 -- already fine
	SKIPPING VROUNDSS inum 5821 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VPSIGND inum=5768  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VEX_PREFIX=1 VL=0 MAP=2    m m MOD!=3 r    r r n n    n MODRM()

VPSIGND inum=5769  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VEX_PREFIX=1 VL=0 MAP=2    1 1 MOD=3 r    r r n n    n

VPSIGND inum=6432  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VEX_PREFIX=1 VL=1 MAP=2    m m MOD!=3 r    r r n n    n MODRM()

VPSIGND inum=6433  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VEX_PREFIX=1 VL=1 MAP=2    1 1 MOD=3 r    r r n n    n

VROUNDSS inum=5820  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VEX_PREFIX=1 MAP=3 m    m MOD!=3 r r    r n n n    MODRM() UIMM8()

VROUNDSS inum=5821  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    0 VEX_PREFIX=1 MAP=3 1    1 MOD=3 r r    r n n n    UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPSIGND inum 5768 -- already fine
	SKIPPING VPSIGND inum 5769 -- already fine
	SKIPPING VPSIGND inum 6432 -- already fine
	SKIPPING VPSIGND inum 6433 -- already fine
	REARRANGE needs to juggle: VROUNDSS inum 5820
	REARRANGE FAILED for VL. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VPSIGND inum 5768
	REARRANGE one pattern worked for VPSIGND inum 5768
	REARRANGE needs to juggle: VPSIGND inum 5769
	REARRANGE one pattern worked for VPSIGND inum 5769
	REARRANGE needs to juggle: VPSIGND inum 6432
	REARRANGE one pattern worked for VPSIGND inum 6432
	REARRANGE needs to juggle: VPSIGND inum 6433
	REARRANGE one pattern worked for VPSIGND inum 6433
	SKIPPING VROUNDSS inum 5820 -- already fine
	SKIPPING VROUNDSS inum 5821 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VPMULHRSW inum=5748  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VL=0 VEX_PREFIX=1 MAP=2    m m MOD!=3 r    r r n n    n MODRM()

VPMULHRSW inum=5749  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VL=0 VEX_PREFIX=1 MAP=2    1 1 MOD=3 r    r r n n    n

VPMULHRSW inum=6412  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VL=1 VEX_PREFIX=1 MAP=2    m m MOD!=3 r    r r n n    n MODRM()

VPMULHRSW inum=6413  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VL=1 VEX_PREFIX=1 MAP=2    1 1 MOD=3 r    r r n n    n

VROUNDSD inum=5818  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VEX_PREFIX=1 MAP=3 m    m MOD!=3 r r    r n n n    MODRM() UIMM8()

VROUNDSD inum=5819  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VEX_PREFIX=1 MAP=3 1    1 MOD=3 r r    r n n n    UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPMULHRSW inum 5748 -- already fine
	SKIPPING VPMULHRSW inum 5749 -- already fine
	SKIPPING VPMULHRSW inum 6412 -- already fine
	SKIPPING VPMULHRSW inum 6413 -- already fine
	REARRANGE needs to juggle: VROUNDSD inum 5818
	REARRANGE FAILED for VL. Trying again...
REARRANGE ATTEMPT  using VEX_PREFIX
	REARRANGE needs to juggle: VPMULHRSW inum 5748
	REARRANGE one pattern worked for VPMULHRSW inum 5748
	REARRANGE needs to juggle: VPMULHRSW inum 5749
	REARRANGE one pattern worked for VPMULHRSW inum 5749
	REARRANGE needs to juggle: VPMULHRSW inum 6412
	REARRANGE one pattern worked for VPMULHRSW inum 6412
	REARRANGE needs to juggle: VPMULHRSW inum 6413
	REARRANGE one pattern worked for VPMULHRSW inum 6413
	SKIPPING VROUNDSD inum 5818 -- already fine
	SKIPPING VROUNDSD inum 5819 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VPMULHRSW inum=5748  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VEX_PREFIX=1 VL=0 MAP=2    m m MOD!=3 r    r r n n    n MODRM()

VPMULHRSW inum=5749  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VEX_PREFIX=1 VL=0 MAP=2    1 1 MOD=3 r    r r n n    n

VPMULHRSW inum=6412  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VEX_PREFIX=1 VL=1 MAP=2    m m MOD!=3 r    r r n n    n MODRM()

VPMULHRSW inum=6413  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VEX_PREFIX=1 VL=1 MAP=2    1 1 MOD=3 r    r r n n    n

VROUNDSD inum=5818  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VEX_PREFIX=1 MAP=3 m    m MOD!=3 r r    r n n n    MODRM() UIMM8()

VROUNDSD inum=5819  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 0 0    0 1 0 1    1 VEX_PREFIX=1 MAP=3 1    1 MOD=3 r r    r n n n    UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPMULHRSW inum 5748 -- already fine
	SKIPPING VPMULHRSW inum 5749 -- already fine
	SKIPPING VPMULHRSW inum 6412 -- already fine
	SKIPPING VPMULHRSW inum 6413 -- already fine
	REARRANGE needs to juggle: VROUNDSD inum 5818
	REARRANGE FAILED for VL. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VPMULHRSW inum 5748
	REARRANGE one pattern worked for VPMULHRSW inum 5748
	REARRANGE needs to juggle: VPMULHRSW inum 5749
	REARRANGE one pattern worked for VPMULHRSW inum 5749
	REARRANGE needs to juggle: VPMULHRSW inum 6412
	REARRANGE one pattern worked for VPMULHRSW inum 6412
	REARRANGE needs to juggle: VPMULHRSW inum 6413
	REARRANGE one pattern worked for VPMULHRSW inum 6413
	SKIPPING VROUNDSD inum 5818 -- already fine
	SKIPPING VROUNDSD inum 5819 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VBROADCASTSS inum=5538  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 0 0    1 1 0 0    0 REXW=0 VL=0 VEX_PREFIX=1    MAP=2 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VBROADCASTSS inum=5539  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 0 0    1 1 0 0    0 REXW=0 VL=1 VEX_PREFIX=1    MAP=2 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VBROADCASTSS inum=6565  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VBROADCASTSS inum=6566  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VINSERTF128 inum=5542  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 0 0    0 REXW=0 VL=1 VEX_PREFIX=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() UIMM8()   

VINSERTF128 inum=5543  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 0 0    0 REXW=0 VL=1 VEX_PREFIX=1    MAP=3 1 1 MOD=3    r r r n    n n UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VBROADCASTSS inum 5538 -- already fine
	SKIPPING VBROADCASTSS inum 5539 -- already fine
	REARRANGE needs to juggle: VBROADCASTSS inum 6565
	REARRANGE one pattern worked for VBROADCASTSS inum 6565
	REARRANGE needs to juggle: VBROADCASTSS inum 6566
	REARRANGE one pattern worked for VBROADCASTSS inum 6566
	SKIPPING VINSERTF128 inum 5542 -- already fine
	SKIPPING VINSERTF128 inum 5543 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VEXTRACTF128 inum=5492  isa_set=AVX pattern len=26
  ipattern: VEXVALID=1 0 0 0    1 1 0 0    1 REXW=0 VL=1 VEX_PREFIX=1    MAP=3 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM() UIMM8()

VEXTRACTF128 inum=5493  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 0 0    1 1 0 0    1 REXW=0 VL=1 VEX_PREFIX=1    MAP=3 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n    UIMM8()

VBROADCASTSD inum=5540  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 0 0    1 1 0 0    1 REXW=0 VL=1 VEX_PREFIX=1    MAP=2 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VBROADCASTSD inum=6567  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VEXTRACTF128 inum 5492 -- already fine
	SKIPPING VEXTRACTF128 inum 5493 -- already fine
	SKIPPING VBROADCASTSD inum 5540 -- already fine
	REARRANGE needs to juggle: VBROADCASTSD inum 6567
	REARRANGE one pattern worked for VBROADCASTSD inum 6567
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VPABSB inum=5660  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    0 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSB inum=5661  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    0 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPABSB inum=6304  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    0 VL=1 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSB inum=6305  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    0 VL=1 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VPABSB inum 5660 -- already fine
	SKIPPING VPABSB inum 5661 -- already fine
	REARRANGE needs to juggle: VPABSB inum 6304
	REARRANGE one pattern worked for VPABSB inum 6304
	REARRANGE needs to juggle: VPABSB inum 6305
	REARRANGE one pattern worked for VPABSB inum 6305
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VPABSB inum=5660  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    0 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSB inum=5661  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    0 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPABSB inum=6304  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    0 VEX_PREFIX=1 VL=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSB inum=6305  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    0 VEX_PREFIX=1 VL=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING VPABSB inum 5660 -- already fine
	SKIPPING VPABSB inum 5661 -- already fine
	REARRANGE needs to juggle: VPABSB inum 6304
	REARRANGE one pattern worked for VPABSB inum 6304
	REARRANGE needs to juggle: VPABSB inum 6305
	REARRANGE one pattern worked for VPABSB inum 6305
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VPABSW inum=5662  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSW inum=5663  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPABSW inum=6306  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSW inum=6307  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VCVTPS2PH inum=6092  isa_set=F16C pattern len=26
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VL=0 VEX_PREFIX=1 MAP=3    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()    UIMM8() REXW=0

VCVTPS2PH inum=6093  isa_set=F16C pattern len=25
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VL=0 VEX_PREFIX=1 MAP=3    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n UIMM8()    REXW=0

VCVTPS2PH inum=6094  isa_set=F16C pattern len=26
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=3    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()    UIMM8() REXW=0

VCVTPS2PH inum=6095  isa_set=F16C pattern len=25
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=3    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n UIMM8()    REXW=0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VPABSW inum 5662 -- already fine
	SKIPPING VPABSW inum 5663 -- already fine
	REARRANGE needs to juggle: VPABSW inum 6306
	REARRANGE one pattern worked for VPABSW inum 6306
	REARRANGE needs to juggle: VPABSW inum 6307
	REARRANGE one pattern worked for VPABSW inum 6307
	REARRANGE needs to juggle: VCVTPS2PH inum 6092
	REARRANGE one pattern worked for VCVTPS2PH inum 6092
	REARRANGE needs to juggle: VCVTPS2PH inum 6093
	REARRANGE one pattern worked for VCVTPS2PH inum 6093
	REARRANGE needs to juggle: VCVTPS2PH inum 6094
	REARRANGE one pattern worked for VCVTPS2PH inum 6094
	REARRANGE needs to juggle: VCVTPS2PH inum 6095
	REARRANGE one pattern worked for VCVTPS2PH inum 6095
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VPABSW inum=5662  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSW inum=5663  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPABSW inum=6306  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VEX_PREFIX=1 VL=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSW inum=6307  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VEX_PREFIX=1 VL=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VCVTPS2PH inum=6092  isa_set=F16C pattern len=26
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VEX_PREFIX=1 VL=0 MAP=3    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()    UIMM8() REXW=0

VCVTPS2PH inum=6093  isa_set=F16C pattern len=25
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VEX_PREFIX=1 VL=0 MAP=3    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n UIMM8()    REXW=0

VCVTPS2PH inum=6094  isa_set=F16C pattern len=26
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VEX_PREFIX=1 VL=1 MAP=3    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()    UIMM8() REXW=0

VCVTPS2PH inum=6095  isa_set=F16C pattern len=25
  ipattern: VEXVALID=1 0 0 0    1 1 1 0    1 VEX_PREFIX=1 VL=1 MAP=3    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n UIMM8()    REXW=0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING VPABSW inum 5662 -- already fine
	SKIPPING VPABSW inum 5663 -- already fine
	REARRANGE needs to juggle: VPABSW inum 6306
	REARRANGE one pattern worked for VPABSW inum 6306
	REARRANGE needs to juggle: VPABSW inum 6307
	REARRANGE one pattern worked for VPABSW inum 6307
	REARRANGE needs to juggle: VCVTPS2PH inum 6092
	REARRANGE one pattern worked for VCVTPS2PH inum 6092
	REARRANGE needs to juggle: VCVTPS2PH inum 6093
	REARRANGE one pattern worked for VCVTPS2PH inum 6093
	REARRANGE needs to juggle: VCVTPS2PH inum 6094
	REARRANGE one pattern worked for VCVTPS2PH inum 6094
	REARRANGE needs to juggle: VCVTPS2PH inum 6095
	REARRANGE one pattern worked for VCVTPS2PH inum 6095
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VPABSD inum=5664  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 1    0 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSD inum=5665  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 1    0 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPABSD inum=6308  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 1    0 VL=1 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSD inum=6309  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 1    0 VL=1 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VPABSD inum 5664 -- already fine
	SKIPPING VPABSD inum 5665 -- already fine
	REARRANGE needs to juggle: VPABSD inum 6308
	REARRANGE one pattern worked for VPABSD inum 6308
	REARRANGE needs to juggle: VPABSD inum 6309
	REARRANGE one pattern worked for VPABSD inum 6309
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VPABSD inum=5664  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 1    0 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSD inum=5665  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 1    0 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPABSD inum=6308  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 0    1 1 1 1    0 VEX_PREFIX=1 VL=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPABSD inum=6309  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 0 0    1 1 1 1    0 VEX_PREFIX=1 VL=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING VPABSD inum 5664 -- already fine
	SKIPPING VPABSD inum 5665 -- already fine
	REARRANGE needs to juggle: VPABSD inum 6308
	REARRANGE one pattern worked for VPABSD inum 6308
	REARRANGE needs to juggle: VPABSD inum 6309
	REARRANGE one pattern worked for VPABSD inum 6309
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VPMOVZXBW inum=6001  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPMOVZXBW inum=6002  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPMOVZXBW inum=6511  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPMOVZXBW inum=6512  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

KSHIFTRW inum=7731  iform_input=KSHIFTRW_MASKmskw_MASKmskw_IMM8_AVX512  isa_set=AVX512F_KOPW pattern len=25
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    0 VEX_PREFIX=1 MAP=3 1    1 MOD=3 r r    r n n n    VL=0 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111    UIMM8()

KSHIFTRB inum=9590  iform_input=KSHIFTRB_MASKmskw_MASKmskw_IMM8_AVX512  isa_set=AVX512DQ_KOPB pattern len=25
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    0 VEX_PREFIX=1 MAP=3 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111    UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPMOVZXBW inum 6001 -- already fine
	SKIPPING VPMOVZXBW inum 6002 -- already fine
	SKIPPING VPMOVZXBW inum 6511 -- already fine
	SKIPPING VPMOVZXBW inum 6512 -- already fine
	REARRANGE needs to juggle: KSHIFTRW inum 7731
	REARRANGE one pattern worked for KSHIFTRW inum 7731
	REARRANGE needs to juggle: KSHIFTRB inum 9590
	REARRANGE one pattern worked for KSHIFTRB inum 9590
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VPMOVZXBD inum=6003  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    1 VL=0 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPMOVZXBD inum=6004  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    1 VL=0 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPMOVZXBD inum=6513  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPMOVZXBD inum=6514  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

KSHIFTRD inum=9591  iform_input=KSHIFTRD_MASKmskw_MASKmskw_IMM8_AVX512  isa_set=AVX512BW_KOPD pattern len=25
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    1 VEX_PREFIX=1 MAP=3 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111    UIMM8()

KSHIFTRQ inum=9592  iform_input=KSHIFTRQ_MASKmskw_MASKmskw_IMM8_AVX512  isa_set=AVX512BW_KOPQ pattern len=25
  ipattern: VEXVALID=1 0 0 1    1 0 0 0    1 VEX_PREFIX=1 MAP=3 1    1 MOD=3 r r    r n n n    VL=0 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111    UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPMOVZXBD inum 6003 -- already fine
	SKIPPING VPMOVZXBD inum 6004 -- already fine
	SKIPPING VPMOVZXBD inum 6513 -- already fine
	SKIPPING VPMOVZXBD inum 6514 -- already fine
	REARRANGE needs to juggle: KSHIFTRD inum 9591
	REARRANGE one pattern worked for KSHIFTRD inum 9591
	REARRANGE needs to juggle: KSHIFTRQ inum 9592
	REARRANGE one pattern worked for KSHIFTRQ inum 9592
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VDPPD inum=5494  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 0 0    1 VL=0 VEX_PREFIX=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() UIMM8()

VDPPD inum=5495  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 0    1 VL=0 VEX_PREFIX=1 MAP=3    1 1 MOD=3 r    r r n n    n UIMM8()

VPHMINPOSUW inum=5666  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    0 0 0 0    1 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VPHMINPOSUW inum=5667  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 0 0    1 VEX_PREFIX=1 MAP=2 VL=0    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

KANDW inum=7721  iform_input=KANDW_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512F_KOPW pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 0    1 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KANDB inum=9555  iform_input=KANDB_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512DQ_KOPB pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 0    1 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KANDD inum=9556  iform_input=KANDD_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOPD pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 0    1 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

KANDQ inum=9560  iform_input=KANDQ_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOPQ pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 0    1 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VDPPD inum 5494 -- already fine
	SKIPPING VDPPD inum 5495 -- already fine
	REARRANGE needs to juggle: VPHMINPOSUW inum 5666
	REARRANGE one pattern worked for VPHMINPOSUW inum 5666
	REARRANGE needs to juggle: VPHMINPOSUW inum 5667
	REARRANGE one pattern worked for VPHMINPOSUW inum 5667
	REARRANGE needs to juggle: KANDW inum 7721
	REARRANGE one pattern worked for KANDW inum 7721
	REARRANGE needs to juggle: KANDB inum 9555
	REARRANGE one pattern worked for KANDB inum 9555
	REARRANGE needs to juggle: KANDD inum 9556
	REARRANGE one pattern worked for KANDD inum 9556
	REARRANGE needs to juggle: KANDQ inum 9560
	REARRANGE one pattern worked for KANDQ inum 9560
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VMPSADBW inum=5922  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 0 1    0 VL=0 VEX_PREFIX=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() UIMM8()

VMPSADBW inum=5923  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 1    0 VL=0 VEX_PREFIX=1 MAP=3    1 1 MOD=3 r    r r n n    n UIMM8()

VMPSADBW inum=6470  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 0 1    0 VL=1 VEX_PREFIX=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() UIMM8()

VMPSADBW inum=6471  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 1    0 VL=1 VEX_PREFIX=1 MAP=3    1 1 MOD=3 r    r r n n    n UIMM8()

KANDNW inum=7720  iform_input=KANDNW_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512F_KOPW pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 1    0 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KANDNB inum=9557  iform_input=KANDNB_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512DQ_KOPB pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KANDND inum=9558  iform_input=KANDND_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOPD pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

KANDNQ inum=9559  iform_input=KANDNQ_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOPQ pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 0 1    0 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VMPSADBW inum 5922 -- already fine
	SKIPPING VMPSADBW inum 5923 -- already fine
	SKIPPING VMPSADBW inum 6470 -- already fine
	SKIPPING VMPSADBW inum 6471 -- already fine
	REARRANGE needs to juggle: KANDNW inum 7720
	REARRANGE one pattern worked for KANDNW inum 7720
	REARRANGE needs to juggle: KANDNB inum 9557
	REARRANGE one pattern worked for KANDNB inum 9557
	REARRANGE needs to juggle: KANDND inum 9558
	REARRANGE one pattern worked for KANDND inum 9558
	REARRANGE needs to juggle: KANDNQ inum 9559
	REARRANGE one pattern worked for KANDNQ inum 9559
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VPSRLVD inum=6577  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=1    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VPSRLVD inum=6578  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=1    REXW=0 1 1 MOD=3    r r r n    n n

VPSRLVD inum=6579  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VPSRLVD inum=6580  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=0 1 1 MOD=3    r r r n    n n

VPSRLVQ inum=6581  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=1    REXW=1 m m MOD!=3    r r r n    n n MODRM()

VPSRLVQ inum=6582  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=1    REXW=1 1 1 MOD=3    r r r n    n n

VPSRLVQ inum=6583  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=1 m m MOD!=3    r r r n    n n MODRM()

VPSRLVQ inum=6584  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=1 1 1 MOD=3    r r r n    n n

KORW inum=7729  iform_input=KORW_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512F_KOPW pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KORB inum=9581  iform_input=KORB_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512DQ_KOPB pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KORD inum=9582  iform_input=KORD_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOPD pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

KORQ inum=9583  iform_input=KORQ_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOPQ pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPSRLVD inum 6577 -- already fine
	SKIPPING VPSRLVD inum 6578 -- already fine
	SKIPPING VPSRLVD inum 6579 -- already fine
	SKIPPING VPSRLVD inum 6580 -- already fine
	SKIPPING VPSRLVQ inum 6581 -- already fine
	SKIPPING VPSRLVQ inum 6582 -- already fine
	SKIPPING VPSRLVQ inum 6583 -- already fine
	SKIPPING VPSRLVQ inum 6584 -- already fine
	REARRANGE needs to juggle: KORW inum 7729
	REARRANGE one pattern worked for KORW inum 7729
	REARRANGE needs to juggle: KORB inum 9581
	REARRANGE one pattern worked for KORB inum 9581
	REARRANGE needs to juggle: KORD inum 9582
	REARRANGE one pattern worked for KORD inum 9582
	REARRANGE needs to juggle: KORQ inum 9583
	REARRANGE one pattern worked for KORQ inum 9583
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VPSRLVD inum=6579  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VPSRLVD inum=6580  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=0 1 1 MOD=3    r r r n    n n

VPSRLVQ inum=6583  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=1 m m MOD!=3    r r r n    n n MODRM()

VPSRLVQ inum=6584  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=1 1 1 MOD=3    r r r n    n n

KORW inum=7729  iform_input=KORW_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512F_KOPW pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=1 VEX_PREFIX=0 MAP=1    1 1 MOD=3 r    r r n n    n REXW=0

KORB inum=9581  iform_input=KORB_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512DQ_KOPB pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n REXW=0

KORD inum=9582  iform_input=KORD_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOPD pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n REXW=1

KORQ inum=9583  iform_input=KORQ_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOPQ pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 0    1 VL=1 VEX_PREFIX=0 MAP=1    1 1 MOD=3 r    r r n n    n REXW=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING VPSRLVD inum 6579 -- already fine
	SKIPPING VPSRLVD inum 6580 -- already fine
	SKIPPING VPSRLVQ inum 6583 -- already fine
	SKIPPING VPSRLVQ inum 6584 -- already fine
	REARRANGE needs to juggle: KORW inum 7729
	REARRANGE one pattern worked for KORW inum 7729
	REARRANGE needs to juggle: KORB inum 9581
	REARRANGE one pattern worked for KORB inum 9581
	REARRANGE needs to juggle: KORD inum 9582
	REARRANGE one pattern worked for KORD inum 9582
	REARRANGE needs to juggle: KORQ inum 9583
	REARRANGE one pattern worked for KORQ inum 9583
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VPERM2I128 inum=6535  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VL=1 VEX_PREFIX=1 MAP=3    REXW=0 m m MOD!=3    r r r n    n n MODRM() UIMM8()   

VPERM2I128 inum=6536  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VL=1 VEX_PREFIX=1 MAP=3    REXW=0 1 1 MOD=3    r r r n    n n UIMM8()

VPSRAVD inum=6585  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 MAP=2 VEX_PREFIX=1 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=0

VPSRAVD inum=6586  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 MAP=2 VEX_PREFIX=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0

VPSRAVD inum=6587  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 MAP=2 VEX_PREFIX=1 m    m MOD!=3 r r    r n n n    MODRM() VL=1 REXW=0

VPSRAVD inum=6588  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 MAP=2 VEX_PREFIX=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KXNORW inum=7733  iform_input=KXNORW_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512F_KOPW pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KXNORB inum=9599  iform_input=KXNORB_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512DQ_KOPB pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KXNORD inum=9600  iform_input=KXNORD_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOPD pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

KXNORQ inum=9601  iform_input=KXNORQ_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOPQ pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPERM2I128 inum 6535 -- already fine
	SKIPPING VPERM2I128 inum 6536 -- already fine
	REARRANGE needs to juggle: VPSRAVD inum 6585
	REARRANGE one pattern worked for VPSRAVD inum 6585
	REARRANGE needs to juggle: VPSRAVD inum 6586
	REARRANGE one pattern worked for VPSRAVD inum 6586
	REARRANGE needs to juggle: VPSRAVD inum 6587
	REARRANGE one pattern worked for VPSRAVD inum 6587
	REARRANGE needs to juggle: VPSRAVD inum 6588
	REARRANGE one pattern worked for VPSRAVD inum 6588
	REARRANGE needs to juggle: KXNORW inum 7733
	REARRANGE one pattern worked for KXNORW inum 7733
	REARRANGE needs to juggle: KXNORB inum 9599
	REARRANGE one pattern worked for KXNORB inum 9599
	REARRANGE needs to juggle: KXNORD inum 9600
	REARRANGE one pattern worked for KXNORD inum 9600
	REARRANGE needs to juggle: KXNORQ inum 9601
	REARRANGE one pattern worked for KXNORQ inum 9601
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VPERM2I128 inum=6535  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VL=1 VEX_PREFIX=1 MAP=3    REXW=0 m m MOD!=3    r r r n    n n MODRM() UIMM8()   

VPERM2I128 inum=6536  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VL=1 VEX_PREFIX=1 MAP=3    REXW=0 1 1 MOD=3    r r r n    n n UIMM8()

VPSRAVD inum=6587  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VL=1 MAP=2 VEX_PREFIX=1    m m MOD!=3 r    r r n n    n MODRM() REXW=0

VPSRAVD inum=6588  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VL=1 MAP=2 VEX_PREFIX=1    1 1 MOD=3 r    r r n n    n REXW=0

KXNORW inum=7733  iform_input=KXNORW_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512F_KOPW pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VL=1 VEX_PREFIX=0 MAP=1    1 1 MOD=3 r    r r n n    n REXW=0

KXNORB inum=9599  iform_input=KXNORB_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512DQ_KOPB pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n REXW=0

KXNORD inum=9600  iform_input=KXNORD_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOPD pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n REXW=1

KXNORQ inum=9601  iform_input=KXNORQ_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOPQ pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    0 VL=1 VEX_PREFIX=0 MAP=1    1 1 MOD=3 r    r r n n    n REXW=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VPERM2I128 inum 6535 -- already fine
	SKIPPING VPERM2I128 inum 6536 -- already fine
	REARRANGE needs to juggle: VPSRAVD inum 6587
	REARRANGE one pattern worked for VPSRAVD inum 6587
	REARRANGE needs to juggle: VPSRAVD inum 6588
	REARRANGE one pattern worked for VPSRAVD inum 6588
	SKIPPING KXNORW inum 7733 -- already fine
	SKIPPING KXNORB inum 9599 -- already fine
	SKIPPING KXNORD inum 9600 -- already fine
	SKIPPING KXNORQ inum 9601 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VPSLLVD inum=6569  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=0 MAP=2 VEX_PREFIX=1    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VPSLLVD inum=6570  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=0 MAP=2 VEX_PREFIX=1    REXW=0 1 1 MOD=3    r r r n    n n

VPSLLVD inum=6571  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VPSLLVD inum=6572  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=0 1 1 MOD=3    r r r n    n n

VPSLLVQ inum=6573  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=0 MAP=2 VEX_PREFIX=1    REXW=1 m m MOD!=3    r r r n    n n MODRM()

VPSLLVQ inum=6574  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=0 MAP=2 VEX_PREFIX=1    REXW=1 1 1 MOD=3    r r r n    n n

VPSLLVQ inum=6575  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=1 m m MOD!=3    r r r n    n n MODRM()

VPSLLVQ inum=6576  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=1 1 1 MOD=3    r r r n    n n

KXORW inum=7734  iform_input=KXORW_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512F_KOPW pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KXORB inum=9602  iform_input=KXORB_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512DQ_KOPB pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

KXORD inum=9603  iform_input=KXORD_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOPD pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

KXORQ inum=9604  iform_input=KXORQ_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOPQ pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=1 REXW=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPSLLVD inum 6569 -- already fine
	SKIPPING VPSLLVD inum 6570 -- already fine
	SKIPPING VPSLLVD inum 6571 -- already fine
	SKIPPING VPSLLVD inum 6572 -- already fine
	SKIPPING VPSLLVQ inum 6573 -- already fine
	SKIPPING VPSLLVQ inum 6574 -- already fine
	SKIPPING VPSLLVQ inum 6575 -- already fine
	SKIPPING VPSLLVQ inum 6576 -- already fine
	REARRANGE needs to juggle: KXORW inum 7734
	REARRANGE one pattern worked for KXORW inum 7734
	REARRANGE needs to juggle: KXORB inum 9602
	REARRANGE one pattern worked for KXORB inum 9602
	REARRANGE needs to juggle: KXORD inum 9603
	REARRANGE one pattern worked for KXORD inum 9603
	REARRANGE needs to juggle: KXORQ inum 9604
	REARRANGE one pattern worked for KXORQ inum 9604
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VPSLLVD inum=6571  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VPSLLVD inum=6572  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=0 1 1 MOD=3    r r r n    n n

VPSLLVQ inum=6575  isa_set=AVX2 pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=1 m m MOD!=3    r r r n    n n MODRM()

VPSLLVQ inum=6576  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=1 MAP=2 VEX_PREFIX=1    REXW=1 1 1 MOD=3    r r r n    n n

KXORW inum=7734  iform_input=KXORW_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512F_KOPW pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=1 VEX_PREFIX=0 MAP=1    1 1 MOD=3 r    r r n n    n REXW=0

KXORB inum=9602  iform_input=KXORB_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512DQ_KOPB pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n REXW=0

KXORD inum=9603  iform_input=KXORD_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOPD pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n REXW=1

KXORQ inum=9604  iform_input=KXORQ_MASKmskw_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOPQ pattern len=22
  ipattern: VEXVALID=1 0 1 0    0 0 1 1    1 VL=1 VEX_PREFIX=0 MAP=1    1 1 MOD=3 r    r r n n    n REXW=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MAP
	SKIPPING VPSLLVD inum 6571 -- already fine
	SKIPPING VPSLLVD inum 6572 -- already fine
	SKIPPING VPSLLVQ inum 6575 -- already fine
	SKIPPING VPSLLVQ inum 6576 -- already fine
	REARRANGE needs to juggle: KXORW inum 7734
	REARRANGE one pattern worked for KXORW inum 7734
	REARRANGE needs to juggle: KXORB inum 9602
	REARRANGE one pattern worked for KXORB inum 9602
	REARRANGE needs to juggle: KXORD inum 9603
	REARRANGE one pattern worked for KXORD inum 9603
	REARRANGE needs to juggle: KXORQ inum 9604
	REARRANGE one pattern worked for KXORQ inum 9604
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VPERMIL2PD inum=5216  isa_set=XOP pattern len=24
  ipattern: VEXVALID=1 0 1 0    0 1 0 0    1 VL=0 VEX_PREFIX=1 MAP=3    REXW=0 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VPERMIL2PD inum=5217  isa_set=XOP pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 1 0 0    1 VL=0 VEX_PREFIX=1 MAP=3    REXW=0 1 1 MOD=3    r r r n    n n SE_IMM8()

VPERMIL2PD inum=5218  isa_set=XOP pattern len=24
  ipattern: VEXVALID=1 0 1 0    0 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=3    REXW=0 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VPERMIL2PD inum=5219  isa_set=XOP pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=3    REXW=0 1 1 MOD=3    r r r n    n n SE_IMM8()

VPERMIL2PD inum=5220  isa_set=XOP pattern len=24
  ipattern: VEXVALID=1 0 1 0    0 1 0 0    1 VL=0 VEX_PREFIX=1 MAP=3    REXW=1 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VPERMIL2PD inum=5221  isa_set=XOP pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 1 0 0    1 VL=0 VEX_PREFIX=1 MAP=3    REXW=1 1 1 MOD=3    r r r n    n n SE_IMM8()

VPERMIL2PD inum=5222  isa_set=XOP pattern len=24
  ipattern: VEXVALID=1 0 1 0    0 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=3    REXW=1 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VPERMIL2PD inum=5223  isa_set=XOP pattern len=23
  ipattern: VEXVALID=1 0 1 0    0 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=3    REXW=1 1 1 MOD=3    r r r n    n n SE_IMM8()

LDTILECFG inum=9890  iform_input=LDTILECFG_MEM  isa_set=AMX_TILE pattern len=26
  ipattern: VEXVALID=1 0 1 0    0 1 0 0    1 VEX_PREFIX=0 MAP=2 m    m MOD!=3 0 0    0 n n n    MODRM() REXW=0 VL=0 MODE=2    VEXDEST3=0b1 VEXDEST210=0b111

STTILECFG inum=9891  iform_input=STTILECFG_MEM  isa_set=AMX_TILE pattern len=26
  ipattern: VEXVALID=1 0 1 0    0 1 0 0    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 0 0    0 n n n    MODRM() REXW=0 VL=0 MODE=2    VEXDEST3=0b1 VEXDEST210=0b111

TILERELEASE inum=9899  iform_input=TILERELEASE  isa_set=AMX_TILE pattern len=25
  ipattern: VEXVALID=1 0 1 0    0 1 0 0    1 VEX_PREFIX=0 MAP=2 1    1 MOD=3 0 0    0 0 0 0    REXW=0 VL=0 MODE=2 VEXDEST3=0b1    VEXDEST210=0b111

TILEZERO inum=9901  iform_input=TILEZERO_TMMu32  isa_set=AMX_TILE pattern len=25
  ipattern: VEXVALID=1 0 1 0    0 1 0 0    1 VEX_PREFIX=2 MAP=2 1    1 MOD=3 r r    r 0 0 0    REXW=0 VL=0 MODE=2 VEXDEST3=0b1    VEXDEST210=0b111

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPERMIL2PD inum 5216 -- already fine
	SKIPPING VPERMIL2PD inum 5217 -- already fine
	SKIPPING VPERMIL2PD inum 5218 -- already fine
	SKIPPING VPERMIL2PD inum 5219 -- already fine
	SKIPPING VPERMIL2PD inum 5220 -- already fine
	SKIPPING VPERMIL2PD inum 5221 -- already fine
	SKIPPING VPERMIL2PD inum 5222 -- already fine
	SKIPPING VPERMIL2PD inum 5223 -- already fine
	REARRANGE needs to juggle: LDTILECFG inum 9890
	REARRANGE one pattern worked for LDTILECFG inum 9890
	REARRANGE needs to juggle: STTILECFG inum 9891
	REARRANGE one pattern worked for STTILECFG inum 9891
	REARRANGE needs to juggle: TILERELEASE inum 9899
	REARRANGE one pattern worked for TILERELEASE inum 9899
	REARRANGE needs to juggle: TILEZERO inum 9901
	REARRANGE one pattern worked for TILEZERO inum 9901
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VMOVMSKPD inum=5984  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    0 VL=0 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VMOVMSKPD inum=5985  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    0 VL=1 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VMOVMSKPS inum=5986  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    0 VL=0 VEX_PREFIX=0 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VMOVMSKPS inum=5987  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    0 VL=1 VEX_PREFIX=0 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPDPBUSD inum=9869  iform_input=VPDPBUSD_XMMi32_XMMu32_XMMu32  isa_set=AVX_VNNI pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=0 REXW=0

VPDPBUSD inum=9870  iform_input=VPDPBUSD_XMMi32_XMMu32_MEMu32  isa_set=AVX_VNNI pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=0

VPDPBUSD inum=9871  iform_input=VPDPBUSD_YMMi32_YMMu32_YMMu32  isa_set=AVX_VNNI pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

VPDPBUSD inum=9872  iform_input=VPDPBUSD_YMMi32_YMMu32_MEMu32  isa_set=AVX_VNNI pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=1 REXW=0

VPDPBSSD inum=10531  iform_input=VPDPBSSD_XMMi32_XMM4i8_XMM4i8  isa_set=AVX_VNNI_INT8 pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    0 VEX_PREFIX=2 MAP=2 1    1 MOD=3 r r    r n n n    REXW=0 VL=0

VPDPBSSD inum=10532  iform_input=VPDPBSSD_XMMi32_XMM4i8_MEM4i8  isa_set=AVX_VNNI_INT8 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    0 VEX_PREFIX=2 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() REXW=0 VL=0

VPDPBSSD inum=10533  iform_input=VPDPBSSD_YMMi32_YMM4i8_YMM4i8  isa_set=AVX_VNNI_INT8 pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    0 VEX_PREFIX=2 MAP=2 1    1 MOD=3 r r    r n n n    REXW=0 VL=1

VPDPBSSD inum=10534  iform_input=VPDPBSSD_YMMi32_YMM4i8_MEM4i8  isa_set=AVX_VNNI_INT8 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    0 VEX_PREFIX=2 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() REXW=0 VL=1

VPDPBSUD inum=10539  iform_input=VPDPBSUD_XMMi32_XMM4i8_XMM4u8  isa_set=AVX_VNNI_INT8 pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    0 VEX_PREFIX=3 MAP=2 1    1 MOD=3 r r    r n n n    REXW=0 VL=0

VPDPBSUD inum=10540  iform_input=VPDPBSUD_XMMi32_XMM4i8_MEM4u8  isa_set=AVX_VNNI_INT8 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    0 VEX_PREFIX=3 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() REXW=0 VL=0

VPDPBSUD inum=10541  iform_input=VPDPBSUD_YMMi32_YMM4i8_YMM4u8  isa_set=AVX_VNNI_INT8 pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    0 VEX_PREFIX=3 MAP=2 1    1 MOD=3 r r    r n n n    REXW=0 VL=1

VPDPBSUD inum=10542  iform_input=VPDPBSUD_YMMi32_YMM4i8_MEM4u8  isa_set=AVX_VNNI_INT8 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    0 VEX_PREFIX=3 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() REXW=0 VL=1

VPDPBUUD inum=10547  iform_input=VPDPBUUD_XMMu32_XMM4u8_XMM4u8  isa_set=AVX_VNNI_INT8 pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    0 VEX_PREFIX=0 MAP=2 1    1 MOD=3 r r    r n n n    REXW=0 VL=0

VPDPBUUD inum=10548  iform_input=VPDPBUUD_XMMu32_XMM4u8_MEM4u8  isa_set=AVX_VNNI_INT8 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    0 VEX_PREFIX=0 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() REXW=0 VL=0

VPDPBUUD inum=10549  iform_input=VPDPBUUD_YMMu32_YMM4u8_YMM4u8  isa_set=AVX_VNNI_INT8 pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    0 VEX_PREFIX=0 MAP=2 1    1 MOD=3 r r    r n n n    REXW=0 VL=1

VPDPBUUD inum=10550  iform_input=VPDPBUUD_YMMu32_YMM4u8_MEM4u8  isa_set=AVX_VNNI_INT8 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    0 VEX_PREFIX=0 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() REXW=0 VL=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VMOVMSKPD inum 5984 -- already fine
	SKIPPING VMOVMSKPD inum 5985 -- already fine
	SKIPPING VMOVMSKPS inum 5986 -- already fine
	SKIPPING VMOVMSKPS inum 5987 -- already fine
	REARRANGE needs to juggle: VPDPBUSD inum 9869
	REARRANGE one pattern worked for VPDPBUSD inum 9869
	REARRANGE needs to juggle: VPDPBUSD inum 9870
	REARRANGE one pattern worked for VPDPBUSD inum 9870
	REARRANGE needs to juggle: VPDPBUSD inum 9871
	REARRANGE one pattern worked for VPDPBUSD inum 9871
	REARRANGE needs to juggle: VPDPBUSD inum 9872
	REARRANGE one pattern worked for VPDPBUSD inum 9872
	REARRANGE needs to juggle: VPDPBSSD inum 10531
	REARRANGE one pattern worked for VPDPBSSD inum 10531
	REARRANGE needs to juggle: VPDPBSSD inum 10532
	REARRANGE one pattern worked for VPDPBSSD inum 10532
	REARRANGE needs to juggle: VPDPBSSD inum 10533
	REARRANGE one pattern worked for VPDPBSSD inum 10533
	REARRANGE needs to juggle: VPDPBSSD inum 10534
	REARRANGE one pattern worked for VPDPBSSD inum 10534
	REARRANGE needs to juggle: VPDPBSUD inum 10539
	REARRANGE one pattern worked for VPDPBSUD inum 10539
	REARRANGE needs to juggle: VPDPBSUD inum 10540
	REARRANGE one pattern worked for VPDPBSUD inum 10540
	REARRANGE needs to juggle: VPDPBSUD inum 10541
	REARRANGE one pattern worked for VPDPBSUD inum 10541
	REARRANGE needs to juggle: VPDPBSUD inum 10542
	REARRANGE one pattern worked for VPDPBSUD inum 10542
	REARRANGE needs to juggle: VPDPBUUD inum 10547
	REARRANGE one pattern worked for VPDPBUUD inum 10547
	REARRANGE needs to juggle: VPDPBUUD inum 10548
	REARRANGE one pattern worked for VPDPBUUD inum 10548
	REARRANGE needs to juggle: VPDPBUUD inum 10549
	REARRANGE one pattern worked for VPDPBUUD inum 10549
	REARRANGE needs to juggle: VPDPBUUD inum 10550
	REARRANGE one pattern worked for VPDPBUUD inum 10550
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VSQRTPD inum=5842  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VL=0 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VSQRTPD inum=5843  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VL=0 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VSQRTPD inum=5844  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VL=1 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VSQRTPD inum=5845  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VL=1 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VSQRTPS inum=5846  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VL=0 VEX_PREFIX=0 VEXDEST3=0b1    VEXDEST210=0b111 MAP=1 m m    MOD!=3 r r r    n n n MODRM()   

VSQRTPS inum=5847  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VL=0 VEX_PREFIX=0 VEXDEST3=0b1    VEXDEST210=0b111 MAP=1 1 1    MOD=3 r r r    n n n

VSQRTPS inum=5848  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VL=1 VEX_PREFIX=0 VEXDEST3=0b1    VEXDEST210=0b111 MAP=1 m m    MOD!=3 r r r    n n n MODRM()   

VSQRTPS inum=5849  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VL=1 VEX_PREFIX=0 VEXDEST3=0b1    VEXDEST210=0b111 MAP=1 1 1    MOD=3 r r r    n n n

VSQRTSD inum=5850  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=2 MAP=1 m    m MOD!=3 r r    r n n n    MODRM()

VSQRTSD inum=5851  isa_set=AVX pattern len=20
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n   

VSQRTSS inum=5852  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=3 MAP=1 m    m MOD!=3 r r    r n n n    MODRM()

VSQRTSS inum=5853  isa_set=AVX pattern len=20
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=3 MAP=1 1    1 MOD=3 r r    r n n n   

VPDPBUSDS inum=9873  iform_input=VPDPBUSDS_XMMi32_XMMu32_XMMu32  isa_set=AVX_VNNI pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=0 REXW=0

VPDPBUSDS inum=9874  iform_input=VPDPBUSDS_XMMi32_XMMu32_MEMu32  isa_set=AVX_VNNI pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=0

VPDPBUSDS inum=9875  iform_input=VPDPBUSDS_YMMi32_YMMu32_YMMu32  isa_set=AVX_VNNI pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

VPDPBUSDS inum=9876  iform_input=VPDPBUSDS_YMMi32_YMMu32_MEMu32  isa_set=AVX_VNNI pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=1 REXW=0

VPDPBSSDS inum=10535  iform_input=VPDPBSSDS_XMMi32_XMM4i8_XMM4i8  isa_set=AVX_VNNI_INT8 pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=2 MAP=2 1    1 MOD=3 r r    r n n n    REXW=0 VL=0

VPDPBSSDS inum=10536  iform_input=VPDPBSSDS_XMMi32_XMM4i8_MEM4i8  isa_set=AVX_VNNI_INT8 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=2 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() REXW=0 VL=0

VPDPBSSDS inum=10537  iform_input=VPDPBSSDS_YMMi32_YMM4i8_YMM4i8  isa_set=AVX_VNNI_INT8 pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=2 MAP=2 1    1 MOD=3 r r    r n n n    REXW=0 VL=1

VPDPBSSDS inum=10538  iform_input=VPDPBSSDS_YMMi32_YMM4i8_MEM4i8  isa_set=AVX_VNNI_INT8 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=2 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() REXW=0 VL=1

VPDPBSUDS inum=10543  iform_input=VPDPBSUDS_XMMi32_XMM4i8_XMM4u8  isa_set=AVX_VNNI_INT8 pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=3 MAP=2 1    1 MOD=3 r r    r n n n    REXW=0 VL=0

VPDPBSUDS inum=10544  iform_input=VPDPBSUDS_XMMi32_XMM4i8_MEM4u8  isa_set=AVX_VNNI_INT8 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=3 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() REXW=0 VL=0

VPDPBSUDS inum=10545  iform_input=VPDPBSUDS_YMMi32_YMM4i8_YMM4u8  isa_set=AVX_VNNI_INT8 pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=3 MAP=2 1    1 MOD=3 r r    r n n n    REXW=0 VL=1

VPDPBSUDS inum=10546  iform_input=VPDPBSUDS_YMMi32_YMM4i8_MEM4u8  isa_set=AVX_VNNI_INT8 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=3 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() REXW=0 VL=1

VPDPBUUDS inum=10551  iform_input=VPDPBUUDS_XMMu32_XMM4u8_XMM4u8  isa_set=AVX_VNNI_INT8 pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=0 MAP=2 1    1 MOD=3 r r    r n n n    REXW=0 VL=0

VPDPBUUDS inum=10552  iform_input=VPDPBUUDS_XMMu32_XMM4u8_MEM4u8  isa_set=AVX_VNNI_INT8 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=0 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() REXW=0 VL=0

VPDPBUUDS inum=10553  iform_input=VPDPBUUDS_YMMu32_YMM4u8_YMM4u8  isa_set=AVX_VNNI_INT8 pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=0 MAP=2 1    1 MOD=3 r r    r n n n    REXW=0 VL=1

VPDPBUUDS inum=10554  iform_input=VPDPBUUDS_YMMu32_YMM4u8_MEM4u8  isa_set=AVX_VNNI_INT8 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=0 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() REXW=0 VL=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VSQRTPD inum 5842 -- already fine
	SKIPPING VSQRTPD inum 5843 -- already fine
	SKIPPING VSQRTPD inum 5844 -- already fine
	SKIPPING VSQRTPD inum 5845 -- already fine
	SKIPPING VSQRTPS inum 5846 -- already fine
	SKIPPING VSQRTPS inum 5847 -- already fine
	SKIPPING VSQRTPS inum 5848 -- already fine
	SKIPPING VSQRTPS inum 5849 -- already fine
	REARRANGE needs to juggle: VSQRTSD inum 5850
	REARRANGE FAILED for VL. Trying again...
REARRANGE ATTEMPT  using VEX_PREFIX
	REARRANGE needs to juggle: VSQRTPD inum 5842
	REARRANGE one pattern worked for VSQRTPD inum 5842
	REARRANGE needs to juggle: VSQRTPD inum 5843
	REARRANGE one pattern worked for VSQRTPD inum 5843
	REARRANGE needs to juggle: VSQRTPD inum 5844
	REARRANGE one pattern worked for VSQRTPD inum 5844
	REARRANGE needs to juggle: VSQRTPD inum 5845
	REARRANGE one pattern worked for VSQRTPD inum 5845
	REARRANGE needs to juggle: VSQRTPS inum 5846
	REARRANGE one pattern worked for VSQRTPS inum 5846
	REARRANGE needs to juggle: VSQRTPS inum 5847
	REARRANGE one pattern worked for VSQRTPS inum 5847
	REARRANGE needs to juggle: VSQRTPS inum 5848
	REARRANGE one pattern worked for VSQRTPS inum 5848
	REARRANGE needs to juggle: VSQRTPS inum 5849
	REARRANGE one pattern worked for VSQRTPS inum 5849
	SKIPPING VSQRTSD inum 5850 -- already fine
	SKIPPING VSQRTSD inum 5851 -- already fine
	SKIPPING VSQRTSS inum 5852 -- already fine
	SKIPPING VSQRTSS inum 5853 -- already fine
	SKIPPING VPDPBUSDS inum 9873 -- already fine
	SKIPPING VPDPBUSDS inum 9874 -- already fine
	SKIPPING VPDPBUSDS inum 9875 -- already fine
	SKIPPING VPDPBUSDS inum 9876 -- already fine
	SKIPPING VPDPBSSDS inum 10535 -- already fine
	SKIPPING VPDPBSSDS inum 10536 -- already fine
	SKIPPING VPDPBSSDS inum 10537 -- already fine
	SKIPPING VPDPBSSDS inum 10538 -- already fine
	SKIPPING VPDPBSUDS inum 10543 -- already fine
	SKIPPING VPDPBSUDS inum 10544 -- already fine
	SKIPPING VPDPBSUDS inum 10545 -- already fine
	SKIPPING VPDPBSUDS inum 10546 -- already fine
	SKIPPING VPDPBUUDS inum 10551 -- already fine
	SKIPPING VPDPBUUDS inum 10552 -- already fine
	SKIPPING VPDPBUUDS inum 10553 -- already fine
	SKIPPING VPDPBUUDS inum 10554 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VSQRTPD inum=5842  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=1 VL=0 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VSQRTPD inum=5843  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=1 VL=0 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VSQRTPD inum=5844  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=1 VL=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VSQRTPD inum=5845  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=1 VL=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VPDPBUSDS inum=9873  iform_input=VPDPBUSDS_XMMi32_XMMu32_XMMu32  isa_set=AVX_VNNI pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=0 REXW=0

VPDPBUSDS inum=9874  iform_input=VPDPBUSDS_XMMi32_XMMu32_MEMu32  isa_set=AVX_VNNI pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=0

VPDPBUSDS inum=9875  iform_input=VPDPBUSDS_YMMi32_YMMu32_YMMu32  isa_set=AVX_VNNI pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=1 REXW=0

VPDPBUSDS inum=9876  iform_input=VPDPBUSDS_YMMi32_YMMu32_MEMu32  isa_set=AVX_VNNI pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=1 REXW=0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VSQRTPD inum 5842 -- already fine
	SKIPPING VSQRTPD inum 5843 -- already fine
	SKIPPING VSQRTPD inum 5844 -- already fine
	SKIPPING VSQRTPD inum 5845 -- already fine
	REARRANGE needs to juggle: VPDPBUSDS inum 9873
	REARRANGE one pattern worked for VPDPBUSDS inum 9873
	REARRANGE needs to juggle: VPDPBUSDS inum 9874
	REARRANGE one pattern worked for VPDPBUSDS inum 9874
	REARRANGE needs to juggle: VPDPBUSDS inum 9875
	REARRANGE one pattern worked for VPDPBUSDS inum 9875
	REARRANGE needs to juggle: VPDPBUSDS inum 9876
	REARRANGE one pattern worked for VPDPBUSDS inum 9876
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 10
Others: 
VSQRTPS inum=5846  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=0 VL=0 VEXDEST3=0b1    VEXDEST210=0b111 MAP=1 m m    MOD!=3 r r r    n n n MODRM()   

VSQRTPS inum=5847  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=0 VL=0 VEXDEST3=0b1    VEXDEST210=0b111 MAP=1 1 1    MOD=3 r r r    n n n

VSQRTPS inum=5848  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=0 VL=1 VEXDEST3=0b1    VEXDEST210=0b111 MAP=1 m m    MOD!=3 r r r    n n n MODRM()   

VSQRTPS inum=5849  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=0 VL=1 VEXDEST3=0b1    VEXDEST210=0b111 MAP=1 1 1    MOD=3 r r r    n n n

VPDPBUUDS inum=10551  iform_input=VPDPBUUDS_XMMu32_XMM4u8_XMM4u8  isa_set=AVX_VNNI_INT8 pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=0 MAP=2 1    1 MOD=3 r r    r n n n    REXW=0 VL=0

VPDPBUUDS inum=10552  iform_input=VPDPBUUDS_XMMu32_XMM4u8_MEM4u8  isa_set=AVX_VNNI_INT8 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=0 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() REXW=0 VL=0

VPDPBUUDS inum=10553  iform_input=VPDPBUUDS_YMMu32_YMM4u8_YMM4u8  isa_set=AVX_VNNI_INT8 pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=0 MAP=2 1    1 MOD=3 r r    r n n n    REXW=0 VL=1

VPDPBUUDS inum=10554  iform_input=VPDPBUUDS_YMMu32_YMM4u8_MEM4u8  isa_set=AVX_VNNI_INT8 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=0 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() REXW=0 VL=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VSQRTPS inum 5846 -- already fine
	SKIPPING VSQRTPS inum 5847 -- already fine
	SKIPPING VSQRTPS inum 5848 -- already fine
	SKIPPING VSQRTPS inum 5849 -- already fine
	REARRANGE needs to juggle: VPDPBUUDS inum 10551
	REARRANGE one pattern worked for VPDPBUUDS inum 10551
	REARRANGE needs to juggle: VPDPBUUDS inum 10552
	REARRANGE one pattern worked for VPDPBUUDS inum 10552
	REARRANGE needs to juggle: VPDPBUUDS inum 10553
	REARRANGE one pattern worked for VPDPBUUDS inum 10553
	REARRANGE needs to juggle: VPDPBUUDS inum 10554
	REARRANGE one pattern worked for VPDPBUUDS inum 10554
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 11
Others: 
VSQRTPS inum=5846  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=0 VL=0 VEXDEST3=0b1    VEXDEST210=0b111 MAP=1 m m    MOD!=3 r r r    n n n MODRM()   

VSQRTPS inum=5847  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=0 VL=0 VEXDEST3=0b1    VEXDEST210=0b111 MAP=1 1 1    MOD=3 r r r    n n n

VPDPBUUDS inum=10551  iform_input=VPDPBUUDS_XMMu32_XMM4u8_XMM4u8  isa_set=AVX_VNNI_INT8 pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=0 VL=0 MAP=2    1 1 MOD=3 r    r r n n    n REXW=0

VPDPBUUDS inum=10552  iform_input=VPDPBUUDS_XMMu32_XMM4u8_MEM4u8  isa_set=AVX_VNNI_INT8 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=0 VL=0 MAP=2    m m MOD!=3 r    r r n n    n MODRM() REXW=0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEXDEST3
	SKIPPING VSQRTPS inum 5846 -- already fine
	SKIPPING VSQRTPS inum 5847 -- already fine
	REARRANGE needs to juggle: VPDPBUUDS inum 10551
	REARRANGE FAILED for VEXDEST3. Trying again...
REARRANGE ATTEMPT  using VEXDEST210
	REARRANGE needs to juggle: VSQRTPS inum 5846
	REARRANGE one pattern worked for VSQRTPS inum 5846
	REARRANGE needs to juggle: VSQRTPS inum 5847
	REARRANGE one pattern worked for VSQRTPS inum 5847
	REARRANGE needs to juggle: VPDPBUUDS inum 10551
	REARRANGE FAILED for VEXDEST210. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VSQRTPS inum 5846
	REARRANGE one pattern worked for VSQRTPS inum 5846
	REARRANGE needs to juggle: VSQRTPS inum 5847
	REARRANGE one pattern worked for VSQRTPS inum 5847
	SKIPPING VPDPBUUDS inum 10551 -- already fine
	SKIPPING VPDPBUUDS inum 10552 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
VSQRTPS inum=5848  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=0 VL=1 VEXDEST3=0b1    VEXDEST210=0b111 MAP=1 m m    MOD!=3 r r r    n n n MODRM()   

VSQRTPS inum=5849  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=0 VL=1 VEXDEST3=0b1    VEXDEST210=0b111 MAP=1 1 1    MOD=3 r r r    n n n

VPDPBUUDS inum=10553  iform_input=VPDPBUUDS_YMMu32_YMM4u8_YMM4u8  isa_set=AVX_VNNI_INT8 pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=0 VL=1 MAP=2    1 1 MOD=3 r    r r n n    n REXW=0

VPDPBUUDS inum=10554  iform_input=VPDPBUUDS_YMMu32_YMM4u8_MEM4u8  isa_set=AVX_VNNI_INT8 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 0 0 0    1 VEX_PREFIX=0 VL=1 MAP=2    m m MOD!=3 r    r r n n    n MODRM() REXW=0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEXDEST3
	SKIPPING VSQRTPS inum 5848 -- already fine
	SKIPPING VSQRTPS inum 5849 -- already fine
	REARRANGE needs to juggle: VPDPBUUDS inum 10553
	REARRANGE FAILED for VEXDEST3. Trying again...
REARRANGE ATTEMPT  using VEXDEST210
	REARRANGE needs to juggle: VSQRTPS inum 5848
	REARRANGE one pattern worked for VSQRTPS inum 5848
	REARRANGE needs to juggle: VSQRTPS inum 5849
	REARRANGE one pattern worked for VSQRTPS inum 5849
	REARRANGE needs to juggle: VPDPBUUDS inum 10553
	REARRANGE FAILED for VEXDEST210. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VSQRTPS inum 5848
	REARRANGE one pattern worked for VSQRTPS inum 5848
	REARRANGE needs to juggle: VSQRTPS inum 5849
	REARRANGE one pattern worked for VSQRTPS inum 5849
	SKIPPING VPDPBUUDS inum 10553 -- already fine
	SKIPPING VPDPBUUDS inum 10554 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 9
Others: 
VORPD inum=5886  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VORPD inum=5887  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 0 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VORPD inum=5888  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 1 1    0 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VORPD inum=5889  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 0 1 1    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VORPS inum=5890  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 1 1    0 VEX_PREFIX=0 MAP=1 VL=0    m m MOD!=3 r    r r n n    n MODRM()

VORPS inum=5891  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 0 1 1    0 VEX_PREFIX=0 MAP=1 VL=0    1 1 MOD=3 r    r r n n    n

VORPS inum=5892  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 0 1 1    0 VEX_PREFIX=0 MAP=1 VL=1    m m MOD!=3 r    r r n n    n MODRM()

VORPS inum=5893  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 0 1 1    0 VEX_PREFIX=0 MAP=1 VL=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VORPD inum 5886 -- already fine
	SKIPPING VORPD inum 5887 -- already fine
	SKIPPING VORPD inum 5888 -- already fine
	SKIPPING VORPD inum 5889 -- already fine
	REARRANGE needs to juggle: VORPS inum 5890
	REARRANGE one pattern worked for VORPS inum 5890
	REARRANGE needs to juggle: VORPS inum 5891
	REARRANGE one pattern worked for VORPS inum 5891
	REARRANGE needs to juggle: VORPS inum 5892
	REARRANGE one pattern worked for VORPS inum 5892
	REARRANGE needs to juggle: VORPS inum 5893
	REARRANGE one pattern worked for VORPS inum 5893
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VADDPD inum=5348  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VADDPD inum=5349  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

VADDPD inum=5350  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VADDPD inum=5351  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

VADDPS inum=5352  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=0 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VADDPS inum=5353  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=0 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

VADDPS inum=5354  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=0 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VADDPS inum=5355  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=0 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

VADDSD inum=5356  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=2 MAP=1 m    m MOD!=3 r r    r n n n    MODRM()

VADDSD inum=5357  isa_set=AVX pattern len=20
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n   

VADDSS inum=5358  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=3 MAP=1 m    m MOD!=3 r r    r n n n    MODRM()

VADDSS inum=5359  isa_set=AVX pattern len=20
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VEX_PREFIX=3 MAP=1 1    1 MOD=3 r r    r n n n   

VPBROADCASTD inum=6557  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VPBROADCASTD inum=6558  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VPBROADCASTD inum=6559  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VPBROADCASTD inum=6560  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VADDPD inum 5348 -- already fine
	SKIPPING VADDPD inum 5349 -- already fine
	SKIPPING VADDPD inum 5350 -- already fine
	SKIPPING VADDPD inum 5351 -- already fine
	SKIPPING VADDPS inum 5352 -- already fine
	SKIPPING VADDPS inum 5353 -- already fine
	SKIPPING VADDPS inum 5354 -- already fine
	SKIPPING VADDPS inum 5355 -- already fine
	SKIPPING VADDSD inum 5356 -- already fine
	SKIPPING VADDSD inum 5357 -- already fine
	SKIPPING VADDSS inum 5358 -- already fine
	SKIPPING VADDSS inum 5359 -- already fine
	REARRANGE needs to juggle: VPBROADCASTD inum 6557
	REARRANGE one pattern worked for VPBROADCASTD inum 6557
	REARRANGE needs to juggle: VPBROADCASTD inum 6558
	REARRANGE one pattern worked for VPBROADCASTD inum 6558
	REARRANGE needs to juggle: VPBROADCASTD inum 6559
	REARRANGE one pattern worked for VPBROADCASTD inum 6559
	REARRANGE needs to juggle: VPBROADCASTD inum 6560
	REARRANGE one pattern worked for VPBROADCASTD inum 6560
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VMULPD inum=5874  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VMULPD inum=5875  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VMULPD inum=5876  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VMULPD inum=5877  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VMULPS inum=5878  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=0 VEX_PREFIX=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VMULPS inum=5879  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=0 VEX_PREFIX=0 MAP=1    1 1 MOD=3 r    r r n n    n

VMULPS inum=5880  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=1 VEX_PREFIX=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VMULPS inum=5881  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=1 VEX_PREFIX=0 MAP=1    1 1 MOD=3 r    r r n n    n

VMULSD inum=5882  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VEX_PREFIX=2 MAP=1 m    m MOD!=3 r r    r n n n    MODRM()

VMULSD inum=5883  isa_set=AVX pattern len=20
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n   

VMULSS inum=5884  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VEX_PREFIX=3 MAP=1 m    m MOD!=3 r r    r n n n    MODRM()

VMULSS inum=5885  isa_set=AVX pattern len=20
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VEX_PREFIX=3 MAP=1 1    1 MOD=3 r r    r n n n   

VPBROADCASTQ inum=6561  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VPBROADCASTQ inum=6562  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VPBROADCASTQ inum=6563  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VPBROADCASTQ inum=6564  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VMULPD inum 5874 -- already fine
	SKIPPING VMULPD inum 5875 -- already fine
	SKIPPING VMULPD inum 5876 -- already fine
	SKIPPING VMULPD inum 5877 -- already fine
	SKIPPING VMULPS inum 5878 -- already fine
	SKIPPING VMULPS inum 5879 -- already fine
	SKIPPING VMULPS inum 5880 -- already fine
	SKIPPING VMULPS inum 5881 -- already fine
	REARRANGE needs to juggle: VMULSD inum 5882
	REARRANGE FAILED for VL. Trying again...
REARRANGE ATTEMPT  using VEX_PREFIX
	REARRANGE needs to juggle: VMULPD inum 5874
	REARRANGE one pattern worked for VMULPD inum 5874
	REARRANGE needs to juggle: VMULPD inum 5875
	REARRANGE one pattern worked for VMULPD inum 5875
	REARRANGE needs to juggle: VMULPD inum 5876
	REARRANGE one pattern worked for VMULPD inum 5876
	REARRANGE needs to juggle: VMULPD inum 5877
	REARRANGE one pattern worked for VMULPD inum 5877
	REARRANGE needs to juggle: VMULPS inum 5878
	REARRANGE one pattern worked for VMULPS inum 5878
	REARRANGE needs to juggle: VMULPS inum 5879
	REARRANGE one pattern worked for VMULPS inum 5879
	REARRANGE needs to juggle: VMULPS inum 5880
	REARRANGE one pattern worked for VMULPS inum 5880
	REARRANGE needs to juggle: VMULPS inum 5881
	REARRANGE one pattern worked for VMULPS inum 5881
	SKIPPING VMULSD inum 5882 -- already fine
	SKIPPING VMULSD inum 5883 -- already fine
	SKIPPING VMULSS inum 5884 -- already fine
	SKIPPING VMULSS inum 5885 -- already fine
	REARRANGE needs to juggle: VPBROADCASTQ inum 6561
	REARRANGE one pattern worked for VPBROADCASTQ inum 6561
	REARRANGE needs to juggle: VPBROADCASTQ inum 6562
	REARRANGE one pattern worked for VPBROADCASTQ inum 6562
	REARRANGE needs to juggle: VPBROADCASTQ inum 6563
	REARRANGE one pattern worked for VPBROADCASTQ inum 6563
	REARRANGE needs to juggle: VPBROADCASTQ inum 6564
	REARRANGE one pattern worked for VPBROADCASTQ inum 6564
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VCVTPD2PS inum=5424  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=1 VL=0 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VCVTPD2PS inum=5425  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=1 VL=0 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VCVTPD2PS inum=5426  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=1 VL=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VCVTPD2PS inum=5427  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=1 VL=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VCVTPS2PD inum=5436  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=0 VL=0 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VCVTPS2PD inum=5437  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=0 VL=0 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VCVTPS2PD inum=5438  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=0 VL=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VCVTPS2PD inum=5439  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=0 VL=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VCVTSD2SS inum=5464  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=2 MAP=1 m    m MOD!=3 r r    r n n n    MODRM()

VCVTSD2SS inum=5465  isa_set=AVX pattern len=20
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n   

VCVTSS2SD inum=5478  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=3 MAP=1 m    m MOD!=3 r r    r n n n    MODRM()

VCVTSS2SD inum=5479  isa_set=AVX pattern len=20
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VEX_PREFIX=3 MAP=1 1    1 MOD=3 r r    r n n n   

VBROADCASTI128 inum=6568  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 0    1 1 0 1    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VCVTPD2PS inum 5424 -- already fine
	SKIPPING VCVTPD2PS inum 5425 -- already fine
	SKIPPING VCVTPD2PS inum 5426 -- already fine
	SKIPPING VCVTPD2PS inum 5427 -- already fine
	SKIPPING VCVTPS2PD inum 5436 -- already fine
	SKIPPING VCVTPS2PD inum 5437 -- already fine
	SKIPPING VCVTPS2PD inum 5438 -- already fine
	SKIPPING VCVTPS2PD inum 5439 -- already fine
	SKIPPING VCVTSD2SS inum 5464 -- already fine
	SKIPPING VCVTSD2SS inum 5465 -- already fine
	SKIPPING VCVTSS2SD inum 5478 -- already fine
	SKIPPING VCVTSS2SD inum 5479 -- already fine
	REARRANGE needs to juggle: VBROADCASTI128 inum 6568
	REARRANGE one pattern worked for VBROADCASTI128 inum 6568
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VFMADDSUBPS inum=5080  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPS inum=5081  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDSUBPS inum=5082  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPS inum=5083  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDSUBPS inum=5084  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPS inum=5085  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDSUBPS inum=5086  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPS inum=5087  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VSUBPD inum=5862  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=1 VL=0    m m MOD!=3 r    r r n n    n MODRM()

VSUBPD inum=5863  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=1 VL=0    1 1 MOD=3 r    r r n n    n

VSUBPD inum=5864  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=1 VL=1    m m MOD!=3 r    r r n n    n MODRM()

VSUBPD inum=5865  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=1 VL=1    1 1 MOD=3 r    r r n n    n

VSUBPS inum=5866  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VL=0 VEX_PREFIX=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VSUBPS inum=5867  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VL=0 VEX_PREFIX=0 MAP=1    1 1 MOD=3 r    r r n n    n

VSUBPS inum=5868  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VL=1 VEX_PREFIX=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VSUBPS inum=5869  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VL=1 VEX_PREFIX=0 MAP=1    1 1 MOD=3 r    r r n n    n

VSUBSD inum=5870  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=2 MAP=1 m    m MOD!=3 r r    r n n n    MODRM()

VSUBSD inum=5871  isa_set=AVX pattern len=20
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n   

VSUBSS inum=5872  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=3 MAP=1 m    m MOD!=3 r r    r n n n    MODRM()

VSUBSS inum=5873  isa_set=AVX pattern len=20
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=3 MAP=1 1    1 MOD=3 r r    r n n n   

TDPBF16PS inum=9892  iform_input=TDPBF16PS_TMMf32_TMM2bf16_TMM2bf16  isa_set=AMX_BF16 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=3 MAP=2 1    1 MOD=3 r r    r n n n    REXW=0 VL=0 MODE=2

TDPFP16PS inum=10502  iform_input=TDPFP16PS_TMMf32_TMM2f16_TMM2f16  isa_set=AMX_FP16 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=2 MAP=2 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 MODE=2

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VFMADDSUBPS inum 5080 -- already fine
	SKIPPING VFMADDSUBPS inum 5081 -- already fine
	SKIPPING VFMADDSUBPS inum 5082 -- already fine
	SKIPPING VFMADDSUBPS inum 5083 -- already fine
	SKIPPING VFMADDSUBPS inum 5084 -- already fine
	SKIPPING VFMADDSUBPS inum 5085 -- already fine
	SKIPPING VFMADDSUBPS inum 5086 -- already fine
	SKIPPING VFMADDSUBPS inum 5087 -- already fine
	SKIPPING VSUBPD inum 5862 -- already fine
	SKIPPING VSUBPD inum 5863 -- already fine
	SKIPPING VSUBPD inum 5864 -- already fine
	SKIPPING VSUBPD inum 5865 -- already fine
	REARRANGE needs to juggle: VSUBPS inum 5866
	REARRANGE one pattern worked for VSUBPS inum 5866
	REARRANGE needs to juggle: VSUBPS inum 5867
	REARRANGE one pattern worked for VSUBPS inum 5867
	REARRANGE needs to juggle: VSUBPS inum 5868
	REARRANGE one pattern worked for VSUBPS inum 5868
	REARRANGE needs to juggle: VSUBPS inum 5869
	REARRANGE one pattern worked for VSUBPS inum 5869
	SKIPPING VSUBSD inum 5870 -- already fine
	SKIPPING VSUBSD inum 5871 -- already fine
	SKIPPING VSUBSS inum 5872 -- already fine
	SKIPPING VSUBSS inum 5873 -- already fine
	SKIPPING TDPBF16PS inum 9892 -- already fine
	SKIPPING TDPFP16PS inum 10502 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VFMADDSUBPS inum=5080  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPS inum=5081  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDSUBPS inum=5082  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPS inum=5083  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDSUBPS inum=5084  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPS inum=5085  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDSUBPS inum=5086  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPS inum=5087  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VSUBPD inum=5862  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=1 VL=0    m m MOD!=3 r    r r n n    n MODRM()

VSUBPD inum=5863  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=1 VL=0    1 1 MOD=3 r    r r n n    n

VSUBPD inum=5864  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=1 VL=1    m m MOD!=3 r    r r n n    n MODRM()

VSUBPD inum=5865  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=1 VL=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMADDSUBPS inum 5080 -- already fine
	SKIPPING VFMADDSUBPS inum 5081 -- already fine
	SKIPPING VFMADDSUBPS inum 5082 -- already fine
	SKIPPING VFMADDSUBPS inum 5083 -- already fine
	SKIPPING VFMADDSUBPS inum 5084 -- already fine
	SKIPPING VFMADDSUBPS inum 5085 -- already fine
	SKIPPING VFMADDSUBPS inum 5086 -- already fine
	SKIPPING VFMADDSUBPS inum 5087 -- already fine
	REARRANGE needs to juggle: VSUBPD inum 5862
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using VL
	REARRANGE needs to juggle: VFMADDSUBPS inum 5080
	REARRANGE one pattern worked for VFMADDSUBPS inum 5080
	REARRANGE needs to juggle: VFMADDSUBPS inum 5081
	REARRANGE one pattern worked for VFMADDSUBPS inum 5081
	REARRANGE needs to juggle: VFMADDSUBPS inum 5082
	REARRANGE one pattern worked for VFMADDSUBPS inum 5082
	REARRANGE needs to juggle: VFMADDSUBPS inum 5083
	REARRANGE one pattern worked for VFMADDSUBPS inum 5083
	REARRANGE needs to juggle: VFMADDSUBPS inum 5084
	REARRANGE one pattern worked for VFMADDSUBPS inum 5084
	REARRANGE needs to juggle: VFMADDSUBPS inum 5085
	REARRANGE one pattern worked for VFMADDSUBPS inum 5085
	REARRANGE needs to juggle: VFMADDSUBPS inum 5086
	REARRANGE one pattern worked for VFMADDSUBPS inum 5086
	REARRANGE needs to juggle: VFMADDSUBPS inum 5087
	REARRANGE one pattern worked for VFMADDSUBPS inum 5087
	REARRANGE needs to juggle: VSUBPD inum 5862
	REARRANGE one pattern worked for VSUBPD inum 5862
	REARRANGE needs to juggle: VSUBPD inum 5863
	REARRANGE one pattern worked for VSUBPD inum 5863
	REARRANGE needs to juggle: VSUBPD inum 5864
	REARRANGE one pattern worked for VSUBPD inum 5864
	REARRANGE needs to juggle: VSUBPD inum 5865
	REARRANGE one pattern worked for VSUBPD inum 5865
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 11
Others: 
VFMADDSUBPS inum=5080  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPS inum=5081  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDSUBPS inum=5082  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPS inum=5083  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VSUBPD inum=5862  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VSUBPD inum=5863  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMADDSUBPS inum 5080 -- already fine
	SKIPPING VFMADDSUBPS inum 5081 -- already fine
	SKIPPING VFMADDSUBPS inum 5082 -- already fine
	SKIPPING VFMADDSUBPS inum 5083 -- already fine
	REARRANGE needs to juggle: VSUBPD inum 5862
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMADDSUBPS inum 5080
	REARRANGE one pattern worked for VFMADDSUBPS inum 5080
	REARRANGE needs to juggle: VFMADDSUBPS inum 5081
	REARRANGE one pattern worked for VFMADDSUBPS inum 5081
	REARRANGE needs to juggle: VFMADDSUBPS inum 5082
	REARRANGE one pattern worked for VFMADDSUBPS inum 5082
	REARRANGE needs to juggle: VFMADDSUBPS inum 5083
	REARRANGE one pattern worked for VFMADDSUBPS inum 5083
	SKIPPING VSUBPD inum 5862 -- already fine
	SKIPPING VSUBPD inum 5863 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
VFMADDSUBPS inum=5084  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPS inum=5085  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDSUBPS inum=5086  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPS inum=5087  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VSUBPD inum=5864  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VSUBPD inum=5865  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    0 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMADDSUBPS inum 5084 -- already fine
	SKIPPING VFMADDSUBPS inum 5085 -- already fine
	SKIPPING VFMADDSUBPS inum 5086 -- already fine
	SKIPPING VFMADDSUBPS inum 5087 -- already fine
	REARRANGE needs to juggle: VSUBPD inum 5864
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMADDSUBPS inum 5084
	REARRANGE one pattern worked for VFMADDSUBPS inum 5084
	REARRANGE needs to juggle: VFMADDSUBPS inum 5085
	REARRANGE one pattern worked for VFMADDSUBPS inum 5085
	REARRANGE needs to juggle: VFMADDSUBPS inum 5086
	REARRANGE one pattern worked for VFMADDSUBPS inum 5086
	REARRANGE needs to juggle: VFMADDSUBPS inum 5087
	REARRANGE one pattern worked for VFMADDSUBPS inum 5087
	SKIPPING VSUBPD inum 5864 -- already fine
	SKIPPING VSUBPD inum 5865 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 10
Others: 
VFMADDSUBPD inum=5088  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPD inum=5089  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDSUBPD inum=5090  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPD inum=5091  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDSUBPD inum=5092  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPD inum=5093  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDSUBPD inum=5094  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPD inum=5095  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VMINPD inum=5580  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 MAP=1 VL=0    m m MOD!=3 r    r r n n    n MODRM()

VMINPD inum=5581  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 MAP=1 VL=0    1 1 MOD=3 r    r r n n    n

VMINPD inum=5582  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 MAP=1 VL=1    m m MOD!=3 r    r r n n    n MODRM()

VMINPD inum=5583  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 MAP=1 VL=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMADDSUBPD inum 5088 -- already fine
	SKIPPING VFMADDSUBPD inum 5089 -- already fine
	SKIPPING VFMADDSUBPD inum 5090 -- already fine
	SKIPPING VFMADDSUBPD inum 5091 -- already fine
	SKIPPING VFMADDSUBPD inum 5092 -- already fine
	SKIPPING VFMADDSUBPD inum 5093 -- already fine
	SKIPPING VFMADDSUBPD inum 5094 -- already fine
	SKIPPING VFMADDSUBPD inum 5095 -- already fine
	REARRANGE needs to juggle: VMINPD inum 5580
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using VL
	REARRANGE needs to juggle: VFMADDSUBPD inum 5088
	REARRANGE one pattern worked for VFMADDSUBPD inum 5088
	REARRANGE needs to juggle: VFMADDSUBPD inum 5089
	REARRANGE one pattern worked for VFMADDSUBPD inum 5089
	REARRANGE needs to juggle: VFMADDSUBPD inum 5090
	REARRANGE one pattern worked for VFMADDSUBPD inum 5090
	REARRANGE needs to juggle: VFMADDSUBPD inum 5091
	REARRANGE one pattern worked for VFMADDSUBPD inum 5091
	REARRANGE needs to juggle: VFMADDSUBPD inum 5092
	REARRANGE one pattern worked for VFMADDSUBPD inum 5092
	REARRANGE needs to juggle: VFMADDSUBPD inum 5093
	REARRANGE one pattern worked for VFMADDSUBPD inum 5093
	REARRANGE needs to juggle: VFMADDSUBPD inum 5094
	REARRANGE one pattern worked for VFMADDSUBPD inum 5094
	REARRANGE needs to juggle: VFMADDSUBPD inum 5095
	REARRANGE one pattern worked for VFMADDSUBPD inum 5095
	REARRANGE needs to juggle: VMINPD inum 5580
	REARRANGE one pattern worked for VMINPD inum 5580
	REARRANGE needs to juggle: VMINPD inum 5581
	REARRANGE one pattern worked for VMINPD inum 5581
	REARRANGE needs to juggle: VMINPD inum 5582
	REARRANGE one pattern worked for VMINPD inum 5582
	REARRANGE needs to juggle: VMINPD inum 5583
	REARRANGE one pattern worked for VMINPD inum 5583
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 11
Others: 
VFMADDSUBPD inum=5088  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPD inum=5089  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDSUBPD inum=5090  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPD inum=5091  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VMINPD inum=5580  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VMINPD inum=5581  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMADDSUBPD inum 5088 -- already fine
	SKIPPING VFMADDSUBPD inum 5089 -- already fine
	SKIPPING VFMADDSUBPD inum 5090 -- already fine
	SKIPPING VFMADDSUBPD inum 5091 -- already fine
	REARRANGE needs to juggle: VMINPD inum 5580
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMADDSUBPD inum 5088
	REARRANGE one pattern worked for VFMADDSUBPD inum 5088
	REARRANGE needs to juggle: VFMADDSUBPD inum 5089
	REARRANGE one pattern worked for VFMADDSUBPD inum 5089
	REARRANGE needs to juggle: VFMADDSUBPD inum 5090
	REARRANGE one pattern worked for VFMADDSUBPD inum 5090
	REARRANGE needs to juggle: VFMADDSUBPD inum 5091
	REARRANGE one pattern worked for VFMADDSUBPD inum 5091
	SKIPPING VMINPD inum 5580 -- already fine
	SKIPPING VMINPD inum 5581 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
VFMADDSUBPD inum=5092  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPD inum=5093  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDSUBPD inum=5094  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDSUBPD inum=5095  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VMINPD inum=5582  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VMINPD inum=5583  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 0    1 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMADDSUBPD inum 5092 -- already fine
	SKIPPING VFMADDSUBPD inum 5093 -- already fine
	SKIPPING VFMADDSUBPD inum 5094 -- already fine
	SKIPPING VFMADDSUBPD inum 5095 -- already fine
	REARRANGE needs to juggle: VMINPD inum 5582
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMADDSUBPD inum 5092
	REARRANGE one pattern worked for VFMADDSUBPD inum 5092
	REARRANGE needs to juggle: VFMADDSUBPD inum 5093
	REARRANGE one pattern worked for VFMADDSUBPD inum 5093
	REARRANGE needs to juggle: VFMADDSUBPD inum 5094
	REARRANGE one pattern worked for VFMADDSUBPD inum 5094
	REARRANGE needs to juggle: VFMADDSUBPD inum 5095
	REARRANGE one pattern worked for VFMADDSUBPD inum 5095
	SKIPPING VMINPD inum 5582 -- already fine
	SKIPPING VMINPD inum 5583 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 10
Others: 
VFMSUBADDPS inum=5096  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBADDPS inum=5097  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBADDPS inum=5098  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBADDPS inum=5099  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBADDPS inum=5100  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBADDPS inum=5101  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBADDPS inum=5102  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBADDPS inum=5103  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VDIVPD inum=5480  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 MAP=1 VL=0    m m MOD!=3 r    r r n n    n MODRM()

VDIVPD inum=5481  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 MAP=1 VL=0    1 1 MOD=3 r    r r n n    n

VDIVPD inum=5482  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 MAP=1 VL=1    m m MOD!=3 r    r r n n    n MODRM()

VDIVPD inum=5483  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 MAP=1 VL=1    1 1 MOD=3 r    r r n n    n

TDPBUSD inum=9895  iform_input=TDPBUSD_TMMi32_TMM4u8_TMM4i8  isa_set=AMX_INT8 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    REXW=0 VL=0 MODE=2

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMSUBADDPS inum 5096 -- already fine
	SKIPPING VFMSUBADDPS inum 5097 -- already fine
	SKIPPING VFMSUBADDPS inum 5098 -- already fine
	SKIPPING VFMSUBADDPS inum 5099 -- already fine
	SKIPPING VFMSUBADDPS inum 5100 -- already fine
	SKIPPING VFMSUBADDPS inum 5101 -- already fine
	SKIPPING VFMSUBADDPS inum 5102 -- already fine
	SKIPPING VFMSUBADDPS inum 5103 -- already fine
	REARRANGE needs to juggle: VDIVPD inum 5480
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using VL
	REARRANGE needs to juggle: VFMSUBADDPS inum 5096
	REARRANGE one pattern worked for VFMSUBADDPS inum 5096
	REARRANGE needs to juggle: VFMSUBADDPS inum 5097
	REARRANGE one pattern worked for VFMSUBADDPS inum 5097
	REARRANGE needs to juggle: VFMSUBADDPS inum 5098
	REARRANGE one pattern worked for VFMSUBADDPS inum 5098
	REARRANGE needs to juggle: VFMSUBADDPS inum 5099
	REARRANGE one pattern worked for VFMSUBADDPS inum 5099
	REARRANGE needs to juggle: VFMSUBADDPS inum 5100
	REARRANGE one pattern worked for VFMSUBADDPS inum 5100
	REARRANGE needs to juggle: VFMSUBADDPS inum 5101
	REARRANGE one pattern worked for VFMSUBADDPS inum 5101
	REARRANGE needs to juggle: VFMSUBADDPS inum 5102
	REARRANGE one pattern worked for VFMSUBADDPS inum 5102
	REARRANGE needs to juggle: VFMSUBADDPS inum 5103
	REARRANGE one pattern worked for VFMSUBADDPS inum 5103
	REARRANGE needs to juggle: VDIVPD inum 5480
	REARRANGE one pattern worked for VDIVPD inum 5480
	REARRANGE needs to juggle: VDIVPD inum 5481
	REARRANGE one pattern worked for VDIVPD inum 5481
	REARRANGE needs to juggle: VDIVPD inum 5482
	REARRANGE one pattern worked for VDIVPD inum 5482
	REARRANGE needs to juggle: VDIVPD inum 5483
	REARRANGE one pattern worked for VDIVPD inum 5483
	REARRANGE needs to juggle: TDPBUSD inum 9895
	REARRANGE one pattern worked for TDPBUSD inum 9895
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 11
Others: 
VFMSUBADDPS inum=5096  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBADDPS inum=5097  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBADDPS inum=5098  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBADDPS inum=5099  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VDIVPD inum=5480  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VDIVPD inum=5481  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

TDPBUSD inum=9895  iform_input=TDPBUSD_TMMi32_TMM4u8_TMM4i8  isa_set=AMX_INT8 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=2    1 1 MOD=3 r    r r n n    n REXW=0 MODE=2

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMSUBADDPS inum 5096 -- already fine
	SKIPPING VFMSUBADDPS inum 5097 -- already fine
	SKIPPING VFMSUBADDPS inum 5098 -- already fine
	SKIPPING VFMSUBADDPS inum 5099 -- already fine
	REARRANGE needs to juggle: VDIVPD inum 5480
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMSUBADDPS inum 5096
	REARRANGE one pattern worked for VFMSUBADDPS inum 5096
	REARRANGE needs to juggle: VFMSUBADDPS inum 5097
	REARRANGE one pattern worked for VFMSUBADDPS inum 5097
	REARRANGE needs to juggle: VFMSUBADDPS inum 5098
	REARRANGE one pattern worked for VFMSUBADDPS inum 5098
	REARRANGE needs to juggle: VFMSUBADDPS inum 5099
	REARRANGE one pattern worked for VFMSUBADDPS inum 5099
	SKIPPING VDIVPD inum 5480 -- already fine
	SKIPPING VDIVPD inum 5481 -- already fine
	SKIPPING TDPBUSD inum 9895 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
VFMSUBADDPS inum=5100  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBADDPS inum=5101  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBADDPS inum=5102  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBADDPS inum=5103  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VDIVPD inum=5482  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VDIVPD inum=5483  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    0 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMSUBADDPS inum 5100 -- already fine
	SKIPPING VFMSUBADDPS inum 5101 -- already fine
	SKIPPING VFMSUBADDPS inum 5102 -- already fine
	SKIPPING VFMSUBADDPS inum 5103 -- already fine
	REARRANGE needs to juggle: VDIVPD inum 5482
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMSUBADDPS inum 5100
	REARRANGE one pattern worked for VFMSUBADDPS inum 5100
	REARRANGE needs to juggle: VFMSUBADDPS inum 5101
	REARRANGE one pattern worked for VFMSUBADDPS inum 5101
	REARRANGE needs to juggle: VFMSUBADDPS inum 5102
	REARRANGE one pattern worked for VFMSUBADDPS inum 5102
	REARRANGE needs to juggle: VFMSUBADDPS inum 5103
	REARRANGE one pattern worked for VFMSUBADDPS inum 5103
	SKIPPING VDIVPD inum 5482 -- already fine
	SKIPPING VDIVPD inum 5483 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 10
Others: 
VFMSUBADDPD inum=5104  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBADDPD inum=5105  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBADDPD inum=5106  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBADDPD inum=5107  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBADDPD inum=5108  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBADDPD inum=5109  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBADDPD inum=5110  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBADDPD inum=5111  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VMAXPD inum=5568  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 MAP=1 VL=0    m m MOD!=3 r    r r n n    n MODRM()

VMAXPD inum=5569  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 MAP=1 VL=0    1 1 MOD=3 r    r r n n    n

VMAXPD inum=5570  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 MAP=1 VL=1    m m MOD!=3 r    r r n n    n MODRM()

VMAXPD inum=5571  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 MAP=1 VL=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMSUBADDPD inum 5104 -- already fine
	SKIPPING VFMSUBADDPD inum 5105 -- already fine
	SKIPPING VFMSUBADDPD inum 5106 -- already fine
	SKIPPING VFMSUBADDPD inum 5107 -- already fine
	SKIPPING VFMSUBADDPD inum 5108 -- already fine
	SKIPPING VFMSUBADDPD inum 5109 -- already fine
	SKIPPING VFMSUBADDPD inum 5110 -- already fine
	SKIPPING VFMSUBADDPD inum 5111 -- already fine
	REARRANGE needs to juggle: VMAXPD inum 5568
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using VL
	REARRANGE needs to juggle: VFMSUBADDPD inum 5104
	REARRANGE one pattern worked for VFMSUBADDPD inum 5104
	REARRANGE needs to juggle: VFMSUBADDPD inum 5105
	REARRANGE one pattern worked for VFMSUBADDPD inum 5105
	REARRANGE needs to juggle: VFMSUBADDPD inum 5106
	REARRANGE one pattern worked for VFMSUBADDPD inum 5106
	REARRANGE needs to juggle: VFMSUBADDPD inum 5107
	REARRANGE one pattern worked for VFMSUBADDPD inum 5107
	REARRANGE needs to juggle: VFMSUBADDPD inum 5108
	REARRANGE one pattern worked for VFMSUBADDPD inum 5108
	REARRANGE needs to juggle: VFMSUBADDPD inum 5109
	REARRANGE one pattern worked for VFMSUBADDPD inum 5109
	REARRANGE needs to juggle: VFMSUBADDPD inum 5110
	REARRANGE one pattern worked for VFMSUBADDPD inum 5110
	REARRANGE needs to juggle: VFMSUBADDPD inum 5111
	REARRANGE one pattern worked for VFMSUBADDPD inum 5111
	REARRANGE needs to juggle: VMAXPD inum 5568
	REARRANGE one pattern worked for VMAXPD inum 5568
	REARRANGE needs to juggle: VMAXPD inum 5569
	REARRANGE one pattern worked for VMAXPD inum 5569
	REARRANGE needs to juggle: VMAXPD inum 5570
	REARRANGE one pattern worked for VMAXPD inum 5570
	REARRANGE needs to juggle: VMAXPD inum 5571
	REARRANGE one pattern worked for VMAXPD inum 5571
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 11
Others: 
VFMSUBADDPD inum=5104  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBADDPD inum=5105  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBADDPD inum=5106  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBADDPD inum=5107  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VMAXPD inum=5568  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VMAXPD inum=5569  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMSUBADDPD inum 5104 -- already fine
	SKIPPING VFMSUBADDPD inum 5105 -- already fine
	SKIPPING VFMSUBADDPD inum 5106 -- already fine
	SKIPPING VFMSUBADDPD inum 5107 -- already fine
	REARRANGE needs to juggle: VMAXPD inum 5568
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMSUBADDPD inum 5104
	REARRANGE one pattern worked for VFMSUBADDPD inum 5104
	REARRANGE needs to juggle: VFMSUBADDPD inum 5105
	REARRANGE one pattern worked for VFMSUBADDPD inum 5105
	REARRANGE needs to juggle: VFMSUBADDPD inum 5106
	REARRANGE one pattern worked for VFMSUBADDPD inum 5106
	REARRANGE needs to juggle: VFMSUBADDPD inum 5107
	REARRANGE one pattern worked for VFMSUBADDPD inum 5107
	SKIPPING VMAXPD inum 5568 -- already fine
	SKIPPING VMAXPD inum 5569 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
VFMSUBADDPD inum=5108  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBADDPD inum=5109  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBADDPD inum=5110  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBADDPD inum=5111  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VMAXPD inum=5570  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VMAXPD inum=5571  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 0    1 1 1 1    1 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMSUBADDPD inum 5108 -- already fine
	SKIPPING VFMSUBADDPD inum 5109 -- already fine
	SKIPPING VFMSUBADDPD inum 5110 -- already fine
	SKIPPING VFMSUBADDPD inum 5111 -- already fine
	REARRANGE needs to juggle: VMAXPD inum 5570
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMSUBADDPD inum 5108
	REARRANGE one pattern worked for VFMSUBADDPD inum 5108
	REARRANGE needs to juggle: VFMSUBADDPD inum 5109
	REARRANGE one pattern worked for VFMSUBADDPD inum 5109
	REARRANGE needs to juggle: VFMSUBADDPD inum 5110
	REARRANGE one pattern worked for VFMSUBADDPD inum 5110
	REARRANGE needs to juggle: VFMSUBADDPD inum 5111
	REARRANGE one pattern worked for VFMSUBADDPD inum 5111
	SKIPPING VMAXPD inum 5570 -- already fine
	SKIPPING VMAXPD inum 5571 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 9
Others: 
VFMADDPS inum=5112  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPS inum=5113  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPS inum=5114  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPS inum=5115  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPS inum=5116  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPS inum=5117  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPS inum=5118  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPS inum=5119  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPUNPCKHBW inum=5786  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHBW inum=5787  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPUNPCKHBW inum=6450  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHBW inum=6451  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VFMADDPS inum 5112 -- already fine
	SKIPPING VFMADDPS inum 5113 -- already fine
	SKIPPING VFMADDPS inum 5114 -- already fine
	SKIPPING VFMADDPS inum 5115 -- already fine
	SKIPPING VFMADDPS inum 5116 -- already fine
	SKIPPING VFMADDPS inum 5117 -- already fine
	SKIPPING VFMADDPS inum 5118 -- already fine
	SKIPPING VFMADDPS inum 5119 -- already fine
	REARRANGE needs to juggle: VPUNPCKHBW inum 5786
	REARRANGE one pattern worked for VPUNPCKHBW inum 5786
	REARRANGE needs to juggle: VPUNPCKHBW inum 5787
	REARRANGE one pattern worked for VPUNPCKHBW inum 5787
	REARRANGE needs to juggle: VPUNPCKHBW inum 6450
	REARRANGE one pattern worked for VPUNPCKHBW inum 6450
	REARRANGE needs to juggle: VPUNPCKHBW inum 6451
	REARRANGE one pattern worked for VPUNPCKHBW inum 6451
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VFMADDPS inum=5112  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPS inum=5113  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPS inum=5114  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPS inum=5115  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPS inum=5116  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPS inum=5117  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPS inum=5118  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPS inum=5119  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPUNPCKHBW inum=5786  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHBW inum=5787  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

VPUNPCKHBW inum=6450  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHBW inum=6451  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMADDPS inum 5112 -- already fine
	SKIPPING VFMADDPS inum 5113 -- already fine
	SKIPPING VFMADDPS inum 5114 -- already fine
	SKIPPING VFMADDPS inum 5115 -- already fine
	SKIPPING VFMADDPS inum 5116 -- already fine
	SKIPPING VFMADDPS inum 5117 -- already fine
	SKIPPING VFMADDPS inum 5118 -- already fine
	SKIPPING VFMADDPS inum 5119 -- already fine
	REARRANGE needs to juggle: VPUNPCKHBW inum 5786
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using VL
	REARRANGE needs to juggle: VFMADDPS inum 5112
	REARRANGE one pattern worked for VFMADDPS inum 5112
	REARRANGE needs to juggle: VFMADDPS inum 5113
	REARRANGE one pattern worked for VFMADDPS inum 5113
	REARRANGE needs to juggle: VFMADDPS inum 5114
	REARRANGE one pattern worked for VFMADDPS inum 5114
	REARRANGE needs to juggle: VFMADDPS inum 5115
	REARRANGE one pattern worked for VFMADDPS inum 5115
	REARRANGE needs to juggle: VFMADDPS inum 5116
	REARRANGE one pattern worked for VFMADDPS inum 5116
	REARRANGE needs to juggle: VFMADDPS inum 5117
	REARRANGE one pattern worked for VFMADDPS inum 5117
	REARRANGE needs to juggle: VFMADDPS inum 5118
	REARRANGE one pattern worked for VFMADDPS inum 5118
	REARRANGE needs to juggle: VFMADDPS inum 5119
	REARRANGE one pattern worked for VFMADDPS inum 5119
	SKIPPING VPUNPCKHBW inum 5786 -- already fine
	SKIPPING VPUNPCKHBW inum 5787 -- already fine
	SKIPPING VPUNPCKHBW inum 6450 -- already fine
	SKIPPING VPUNPCKHBW inum 6451 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 11
Others: 
VFMADDPS inum=5112  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPS inum=5113  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPS inum=5114  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPS inum=5115  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPUNPCKHBW inum=5786  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHBW inum=5787  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMADDPS inum 5112 -- already fine
	SKIPPING VFMADDPS inum 5113 -- already fine
	SKIPPING VFMADDPS inum 5114 -- already fine
	SKIPPING VFMADDPS inum 5115 -- already fine
	REARRANGE needs to juggle: VPUNPCKHBW inum 5786
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMADDPS inum 5112
	REARRANGE one pattern worked for VFMADDPS inum 5112
	REARRANGE needs to juggle: VFMADDPS inum 5113
	REARRANGE one pattern worked for VFMADDPS inum 5113
	REARRANGE needs to juggle: VFMADDPS inum 5114
	REARRANGE one pattern worked for VFMADDPS inum 5114
	REARRANGE needs to juggle: VFMADDPS inum 5115
	REARRANGE one pattern worked for VFMADDPS inum 5115
	SKIPPING VPUNPCKHBW inum 5786 -- already fine
	SKIPPING VPUNPCKHBW inum 5787 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
VFMADDPS inum=5116  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPS inum=5117  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPS inum=5118  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPS inum=5119  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPUNPCKHBW inum=6450  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHBW inum=6451  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    0 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMADDPS inum 5116 -- already fine
	SKIPPING VFMADDPS inum 5117 -- already fine
	SKIPPING VFMADDPS inum 5118 -- already fine
	SKIPPING VFMADDPS inum 5119 -- already fine
	REARRANGE needs to juggle: VPUNPCKHBW inum 6450
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMADDPS inum 5116
	REARRANGE one pattern worked for VFMADDPS inum 5116
	REARRANGE needs to juggle: VFMADDPS inum 5117
	REARRANGE one pattern worked for VFMADDPS inum 5117
	REARRANGE needs to juggle: VFMADDPS inum 5118
	REARRANGE one pattern worked for VFMADDPS inum 5118
	REARRANGE needs to juggle: VFMADDPS inum 5119
	REARRANGE one pattern worked for VFMADDPS inum 5119
	SKIPPING VPUNPCKHBW inum 6450 -- already fine
	SKIPPING VPUNPCKHBW inum 6451 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 9
Others: 
VFMADDPD inum=5120  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPD inum=5121  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPD inum=5122  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPD inum=5123  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPD inum=5124  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPD inum=5125  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPD inum=5126  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPD inum=5127  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPUNPCKHWD inum=5788  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHWD inum=5789  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPUNPCKHWD inum=6452  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHWD inum=6453  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VFMADDPD inum 5120 -- already fine
	SKIPPING VFMADDPD inum 5121 -- already fine
	SKIPPING VFMADDPD inum 5122 -- already fine
	SKIPPING VFMADDPD inum 5123 -- already fine
	SKIPPING VFMADDPD inum 5124 -- already fine
	SKIPPING VFMADDPD inum 5125 -- already fine
	SKIPPING VFMADDPD inum 5126 -- already fine
	SKIPPING VFMADDPD inum 5127 -- already fine
	REARRANGE needs to juggle: VPUNPCKHWD inum 5788
	REARRANGE one pattern worked for VPUNPCKHWD inum 5788
	REARRANGE needs to juggle: VPUNPCKHWD inum 5789
	REARRANGE one pattern worked for VPUNPCKHWD inum 5789
	REARRANGE needs to juggle: VPUNPCKHWD inum 6452
	REARRANGE one pattern worked for VPUNPCKHWD inum 6452
	REARRANGE needs to juggle: VPUNPCKHWD inum 6453
	REARRANGE one pattern worked for VPUNPCKHWD inum 6453
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VFMADDPD inum=5120  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPD inum=5121  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPD inum=5122  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPD inum=5123  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPD inum=5124  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPD inum=5125  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPD inum=5126  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPD inum=5127  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPUNPCKHWD inum=5788  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHWD inum=5789  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

VPUNPCKHWD inum=6452  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHWD inum=6453  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMADDPD inum 5120 -- already fine
	SKIPPING VFMADDPD inum 5121 -- already fine
	SKIPPING VFMADDPD inum 5122 -- already fine
	SKIPPING VFMADDPD inum 5123 -- already fine
	SKIPPING VFMADDPD inum 5124 -- already fine
	SKIPPING VFMADDPD inum 5125 -- already fine
	SKIPPING VFMADDPD inum 5126 -- already fine
	SKIPPING VFMADDPD inum 5127 -- already fine
	REARRANGE needs to juggle: VPUNPCKHWD inum 5788
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using VL
	REARRANGE needs to juggle: VFMADDPD inum 5120
	REARRANGE one pattern worked for VFMADDPD inum 5120
	REARRANGE needs to juggle: VFMADDPD inum 5121
	REARRANGE one pattern worked for VFMADDPD inum 5121
	REARRANGE needs to juggle: VFMADDPD inum 5122
	REARRANGE one pattern worked for VFMADDPD inum 5122
	REARRANGE needs to juggle: VFMADDPD inum 5123
	REARRANGE one pattern worked for VFMADDPD inum 5123
	REARRANGE needs to juggle: VFMADDPD inum 5124
	REARRANGE one pattern worked for VFMADDPD inum 5124
	REARRANGE needs to juggle: VFMADDPD inum 5125
	REARRANGE one pattern worked for VFMADDPD inum 5125
	REARRANGE needs to juggle: VFMADDPD inum 5126
	REARRANGE one pattern worked for VFMADDPD inum 5126
	REARRANGE needs to juggle: VFMADDPD inum 5127
	REARRANGE one pattern worked for VFMADDPD inum 5127
	SKIPPING VPUNPCKHWD inum 5788 -- already fine
	SKIPPING VPUNPCKHWD inum 5789 -- already fine
	SKIPPING VPUNPCKHWD inum 6452 -- already fine
	SKIPPING VPUNPCKHWD inum 6453 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 11
Others: 
VFMADDPD inum=5120  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPD inum=5121  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPD inum=5122  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPD inum=5123  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPUNPCKHWD inum=5788  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHWD inum=5789  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMADDPD inum 5120 -- already fine
	SKIPPING VFMADDPD inum 5121 -- already fine
	SKIPPING VFMADDPD inum 5122 -- already fine
	SKIPPING VFMADDPD inum 5123 -- already fine
	REARRANGE needs to juggle: VPUNPCKHWD inum 5788
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMADDPD inum 5120
	REARRANGE one pattern worked for VFMADDPD inum 5120
	REARRANGE needs to juggle: VFMADDPD inum 5121
	REARRANGE one pattern worked for VFMADDPD inum 5121
	REARRANGE needs to juggle: VFMADDPD inum 5122
	REARRANGE one pattern worked for VFMADDPD inum 5122
	REARRANGE needs to juggle: VFMADDPD inum 5123
	REARRANGE one pattern worked for VFMADDPD inum 5123
	SKIPPING VPUNPCKHWD inum 5788 -- already fine
	SKIPPING VPUNPCKHWD inum 5789 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
VFMADDPD inum=5124  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPD inum=5125  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMADDPD inum=5126  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMADDPD inum=5127  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPUNPCKHWD inum=6452  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHWD inum=6453  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 0    1 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMADDPD inum 5124 -- already fine
	SKIPPING VFMADDPD inum 5125 -- already fine
	SKIPPING VFMADDPD inum 5126 -- already fine
	SKIPPING VFMADDPD inum 5127 -- already fine
	REARRANGE needs to juggle: VPUNPCKHWD inum 6452
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMADDPD inum 5124
	REARRANGE one pattern worked for VFMADDPD inum 5124
	REARRANGE needs to juggle: VFMADDPD inum 5125
	REARRANGE one pattern worked for VFMADDPD inum 5125
	REARRANGE needs to juggle: VFMADDPD inum 5126
	REARRANGE one pattern worked for VFMADDPD inum 5126
	REARRANGE needs to juggle: VFMADDPD inum 5127
	REARRANGE one pattern worked for VFMADDPD inum 5127
	SKIPPING VPUNPCKHWD inum 6452 -- already fine
	SKIPPING VPUNPCKHWD inum 6453 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 9
Others: 
VFMADDSS inum=5128  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VEX_PREFIX=1 REXW=0 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMADDSS inum=5129  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VEX_PREFIX=1 REXW=0 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VFMADDSS inum=5130  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VEX_PREFIX=1 REXW=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMADDSS inum=5131  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VEX_PREFIX=1 REXW=1 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VPUNPCKHDQ inum=5790  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHDQ inum=5791  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPUNPCKHDQ inum=6454  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHDQ inum=6455  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VFMADDSS inum 5128 -- already fine
	SKIPPING VFMADDSS inum 5129 -- already fine
	SKIPPING VFMADDSS inum 5130 -- already fine
	SKIPPING VFMADDSS inum 5131 -- already fine
	REARRANGE needs to juggle: VPUNPCKHDQ inum 5790
	REARRANGE one pattern worked for VPUNPCKHDQ inum 5790
	REARRANGE needs to juggle: VPUNPCKHDQ inum 5791
	REARRANGE one pattern worked for VPUNPCKHDQ inum 5791
	REARRANGE needs to juggle: VPUNPCKHDQ inum 6454
	REARRANGE one pattern worked for VPUNPCKHDQ inum 6454
	REARRANGE needs to juggle: VPUNPCKHDQ inum 6455
	REARRANGE one pattern worked for VPUNPCKHDQ inum 6455
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VFMADDSS inum=5128  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VEX_PREFIX=1 REXW=0 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMADDSS inum=5129  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VEX_PREFIX=1 REXW=0 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VFMADDSS inum=5130  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VEX_PREFIX=1 REXW=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMADDSS inum=5131  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VEX_PREFIX=1 REXW=1 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VPUNPCKHDQ inum=5790  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHDQ inum=5791  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

VPUNPCKHDQ inum=6454  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHDQ inum=6455  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    0 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMADDSS inum 5128 -- already fine
	SKIPPING VFMADDSS inum 5129 -- already fine
	SKIPPING VFMADDSS inum 5130 -- already fine
	SKIPPING VFMADDSS inum 5131 -- already fine
	REARRANGE needs to juggle: VPUNPCKHDQ inum 5790
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMADDSS inum 5128
	REARRANGE one pattern worked for VFMADDSS inum 5128
	REARRANGE needs to juggle: VFMADDSS inum 5129
	REARRANGE one pattern worked for VFMADDSS inum 5129
	REARRANGE needs to juggle: VFMADDSS inum 5130
	REARRANGE one pattern worked for VFMADDSS inum 5130
	REARRANGE needs to juggle: VFMADDSS inum 5131
	REARRANGE one pattern worked for VFMADDSS inum 5131
	REARRANGE needs to juggle: VPUNPCKHDQ inum 5790
	REARRANGE one pattern worked for VPUNPCKHDQ inum 5790
	REARRANGE needs to juggle: VPUNPCKHDQ inum 5791
	REARRANGE one pattern worked for VPUNPCKHDQ inum 5791
	REARRANGE needs to juggle: VPUNPCKHDQ inum 6454
	REARRANGE one pattern worked for VPUNPCKHDQ inum 6454
	REARRANGE needs to juggle: VPUNPCKHDQ inum 6455
	REARRANGE one pattern worked for VPUNPCKHDQ inum 6455
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VFMADDSD inum=5132  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VEX_PREFIX=1 REXW=0 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMADDSD inum=5133  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VEX_PREFIX=1 REXW=0 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VFMADDSD inum=5134  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VEX_PREFIX=1 REXW=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMADDSD inum=5135  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VEX_PREFIX=1 REXW=1 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VPACKSSDW inum=5676  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPACKSSDW inum=5677  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPACKSSDW inum=6312  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPACKSSDW inum=6313  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VFMADDSD inum 5132 -- already fine
	SKIPPING VFMADDSD inum 5133 -- already fine
	SKIPPING VFMADDSD inum 5134 -- already fine
	SKIPPING VFMADDSD inum 5135 -- already fine
	REARRANGE needs to juggle: VPACKSSDW inum 5676
	REARRANGE one pattern worked for VPACKSSDW inum 5676
	REARRANGE needs to juggle: VPACKSSDW inum 5677
	REARRANGE one pattern worked for VPACKSSDW inum 5677
	REARRANGE needs to juggle: VPACKSSDW inum 6312
	REARRANGE one pattern worked for VPACKSSDW inum 6312
	REARRANGE needs to juggle: VPACKSSDW inum 6313
	REARRANGE one pattern worked for VPACKSSDW inum 6313
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VFMADDSD inum=5132  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VEX_PREFIX=1 REXW=0 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMADDSD inum=5133  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VEX_PREFIX=1 REXW=0 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VFMADDSD inum=5134  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VEX_PREFIX=1 REXW=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMADDSD inum=5135  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VEX_PREFIX=1 REXW=1 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VPACKSSDW inum=5676  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPACKSSDW inum=5677  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

VPACKSSDW inum=6312  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPACKSSDW inum=6313  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 0 1    1 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMADDSD inum 5132 -- already fine
	SKIPPING VFMADDSD inum 5133 -- already fine
	SKIPPING VFMADDSD inum 5134 -- already fine
	SKIPPING VFMADDSD inum 5135 -- already fine
	REARRANGE needs to juggle: VPACKSSDW inum 5676
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMADDSD inum 5132
	REARRANGE one pattern worked for VFMADDSD inum 5132
	REARRANGE needs to juggle: VFMADDSD inum 5133
	REARRANGE one pattern worked for VFMADDSD inum 5133
	REARRANGE needs to juggle: VFMADDSD inum 5134
	REARRANGE one pattern worked for VFMADDSD inum 5134
	REARRANGE needs to juggle: VFMADDSD inum 5135
	REARRANGE one pattern worked for VFMADDSD inum 5135
	REARRANGE needs to juggle: VPACKSSDW inum 5676
	REARRANGE one pattern worked for VPACKSSDW inum 5676
	REARRANGE needs to juggle: VPACKSSDW inum 5677
	REARRANGE one pattern worked for VPACKSSDW inum 5677
	REARRANGE needs to juggle: VPACKSSDW inum 6312
	REARRANGE one pattern worked for VPACKSSDW inum 6312
	REARRANGE needs to juggle: VPACKSSDW inum 6313
	REARRANGE one pattern worked for VPACKSSDW inum 6313
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VFMSUBPS inum=5136  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPS inum=5137  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPS inum=5138  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPS inum=5139  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPS inum=5140  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPS inum=5141  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPS inum=5142  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPS inum=5143  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPUNPCKLQDQ inum=5800  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKLQDQ inum=5801  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPUNPCKLQDQ inum=6464  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKLQDQ inum=6465  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

TCMMIMFP16PS inum=10503  iform_input=TCMMIMFP16PS_TMMf32_TMM2f16_TMM2f16  isa_set=AMX_COMPLEX pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    REXW=0 VL=0 MODE=2

TCMMRLFP16PS inum=10504  iform_input=TCMMRLFP16PS_TMMf32_TMM2f16_TMM2f16  isa_set=AMX_COMPLEX pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=0 MAP=2 1    1 MOD=3 r r    r n n n    REXW=0 VL=0 MODE=2

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VFMSUBPS inum 5136 -- already fine
	SKIPPING VFMSUBPS inum 5137 -- already fine
	SKIPPING VFMSUBPS inum 5138 -- already fine
	SKIPPING VFMSUBPS inum 5139 -- already fine
	SKIPPING VFMSUBPS inum 5140 -- already fine
	SKIPPING VFMSUBPS inum 5141 -- already fine
	SKIPPING VFMSUBPS inum 5142 -- already fine
	SKIPPING VFMSUBPS inum 5143 -- already fine
	REARRANGE needs to juggle: VPUNPCKLQDQ inum 5800
	REARRANGE one pattern worked for VPUNPCKLQDQ inum 5800
	REARRANGE needs to juggle: VPUNPCKLQDQ inum 5801
	REARRANGE one pattern worked for VPUNPCKLQDQ inum 5801
	REARRANGE needs to juggle: VPUNPCKLQDQ inum 6464
	REARRANGE one pattern worked for VPUNPCKLQDQ inum 6464
	REARRANGE needs to juggle: VPUNPCKLQDQ inum 6465
	REARRANGE one pattern worked for VPUNPCKLQDQ inum 6465
	SKIPPING TCMMIMFP16PS inum 10503 -- already fine
	SKIPPING TCMMRLFP16PS inum 10504 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VFMSUBPS inum=5136  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPS inum=5137  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPS inum=5138  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPS inum=5139  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPS inum=5140  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPS inum=5141  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPS inum=5142  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPS inum=5143  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPUNPCKLQDQ inum=5800  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKLQDQ inum=5801  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

VPUNPCKLQDQ inum=6464  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKLQDQ inum=6465  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

TCMMIMFP16PS inum=10503  iform_input=TCMMIMFP16PS_TMMf32_TMM2f16_TMM2f16  isa_set=AMX_COMPLEX pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    REXW=0 VL=0 MODE=2

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMSUBPS inum 5136 -- already fine
	SKIPPING VFMSUBPS inum 5137 -- already fine
	SKIPPING VFMSUBPS inum 5138 -- already fine
	SKIPPING VFMSUBPS inum 5139 -- already fine
	SKIPPING VFMSUBPS inum 5140 -- already fine
	SKIPPING VFMSUBPS inum 5141 -- already fine
	SKIPPING VFMSUBPS inum 5142 -- already fine
	SKIPPING VFMSUBPS inum 5143 -- already fine
	REARRANGE needs to juggle: VPUNPCKLQDQ inum 5800
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using VL
	REARRANGE needs to juggle: VFMSUBPS inum 5136
	REARRANGE one pattern worked for VFMSUBPS inum 5136
	REARRANGE needs to juggle: VFMSUBPS inum 5137
	REARRANGE one pattern worked for VFMSUBPS inum 5137
	REARRANGE needs to juggle: VFMSUBPS inum 5138
	REARRANGE one pattern worked for VFMSUBPS inum 5138
	REARRANGE needs to juggle: VFMSUBPS inum 5139
	REARRANGE one pattern worked for VFMSUBPS inum 5139
	REARRANGE needs to juggle: VFMSUBPS inum 5140
	REARRANGE one pattern worked for VFMSUBPS inum 5140
	REARRANGE needs to juggle: VFMSUBPS inum 5141
	REARRANGE one pattern worked for VFMSUBPS inum 5141
	REARRANGE needs to juggle: VFMSUBPS inum 5142
	REARRANGE one pattern worked for VFMSUBPS inum 5142
	REARRANGE needs to juggle: VFMSUBPS inum 5143
	REARRANGE one pattern worked for VFMSUBPS inum 5143
	SKIPPING VPUNPCKLQDQ inum 5800 -- already fine
	SKIPPING VPUNPCKLQDQ inum 5801 -- already fine
	SKIPPING VPUNPCKLQDQ inum 6464 -- already fine
	SKIPPING VPUNPCKLQDQ inum 6465 -- already fine
	REARRANGE needs to juggle: TCMMIMFP16PS inum 10503
	REARRANGE one pattern worked for TCMMIMFP16PS inum 10503
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 11
Others: 
VFMSUBPS inum=5136  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPS inum=5137  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPS inum=5138  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPS inum=5139  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPUNPCKLQDQ inum=5800  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKLQDQ inum=5801  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

TCMMIMFP16PS inum=10503  iform_input=TCMMIMFP16PS_TMMf32_TMM2f16_TMM2f16  isa_set=AMX_COMPLEX pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=0 MAP=2    1 1 MOD=3 r    r r n n    n REXW=0 MODE=2

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMSUBPS inum 5136 -- already fine
	SKIPPING VFMSUBPS inum 5137 -- already fine
	SKIPPING VFMSUBPS inum 5138 -- already fine
	SKIPPING VFMSUBPS inum 5139 -- already fine
	REARRANGE needs to juggle: VPUNPCKLQDQ inum 5800
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMSUBPS inum 5136
	REARRANGE one pattern worked for VFMSUBPS inum 5136
	REARRANGE needs to juggle: VFMSUBPS inum 5137
	REARRANGE one pattern worked for VFMSUBPS inum 5137
	REARRANGE needs to juggle: VFMSUBPS inum 5138
	REARRANGE one pattern worked for VFMSUBPS inum 5138
	REARRANGE needs to juggle: VFMSUBPS inum 5139
	REARRANGE one pattern worked for VFMSUBPS inum 5139
	SKIPPING VPUNPCKLQDQ inum 5800 -- already fine
	SKIPPING VPUNPCKLQDQ inum 5801 -- already fine
	SKIPPING TCMMIMFP16PS inum 10503 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
VFMSUBPS inum=5140  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPS inum=5141  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPS inum=5142  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPS inum=5143  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPUNPCKLQDQ inum=6464  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKLQDQ inum=6465  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    0 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMSUBPS inum 5140 -- already fine
	SKIPPING VFMSUBPS inum 5141 -- already fine
	SKIPPING VFMSUBPS inum 5142 -- already fine
	SKIPPING VFMSUBPS inum 5143 -- already fine
	REARRANGE needs to juggle: VPUNPCKLQDQ inum 6464
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMSUBPS inum 5140
	REARRANGE one pattern worked for VFMSUBPS inum 5140
	REARRANGE needs to juggle: VFMSUBPS inum 5141
	REARRANGE one pattern worked for VFMSUBPS inum 5141
	REARRANGE needs to juggle: VFMSUBPS inum 5142
	REARRANGE one pattern worked for VFMSUBPS inum 5142
	REARRANGE needs to juggle: VFMSUBPS inum 5143
	REARRANGE one pattern worked for VFMSUBPS inum 5143
	SKIPPING VPUNPCKLQDQ inum 6464 -- already fine
	SKIPPING VPUNPCKLQDQ inum 6465 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 9
Others: 
VFMSUBPD inum=5144  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPD inum=5145  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPD inum=5146  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPD inum=5147  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPD inum=5148  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPD inum=5149  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPD inum=5150  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPD inum=5151  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPUNPCKHQDQ inum=5792  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHQDQ inum=5793  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPUNPCKHQDQ inum=6456  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHQDQ inum=6457  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VFMSUBPD inum 5144 -- already fine
	SKIPPING VFMSUBPD inum 5145 -- already fine
	SKIPPING VFMSUBPD inum 5146 -- already fine
	SKIPPING VFMSUBPD inum 5147 -- already fine
	SKIPPING VFMSUBPD inum 5148 -- already fine
	SKIPPING VFMSUBPD inum 5149 -- already fine
	SKIPPING VFMSUBPD inum 5150 -- already fine
	SKIPPING VFMSUBPD inum 5151 -- already fine
	REARRANGE needs to juggle: VPUNPCKHQDQ inum 5792
	REARRANGE one pattern worked for VPUNPCKHQDQ inum 5792
	REARRANGE needs to juggle: VPUNPCKHQDQ inum 5793
	REARRANGE one pattern worked for VPUNPCKHQDQ inum 5793
	REARRANGE needs to juggle: VPUNPCKHQDQ inum 6456
	REARRANGE one pattern worked for VPUNPCKHQDQ inum 6456
	REARRANGE needs to juggle: VPUNPCKHQDQ inum 6457
	REARRANGE one pattern worked for VPUNPCKHQDQ inum 6457
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VFMSUBPD inum=5144  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPD inum=5145  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPD inum=5146  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPD inum=5147  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPD inum=5148  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPD inum=5149  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPD inum=5150  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPD inum=5151  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPUNPCKHQDQ inum=5792  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHQDQ inum=5793  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

VPUNPCKHQDQ inum=6456  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHQDQ inum=6457  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMSUBPD inum 5144 -- already fine
	SKIPPING VFMSUBPD inum 5145 -- already fine
	SKIPPING VFMSUBPD inum 5146 -- already fine
	SKIPPING VFMSUBPD inum 5147 -- already fine
	SKIPPING VFMSUBPD inum 5148 -- already fine
	SKIPPING VFMSUBPD inum 5149 -- already fine
	SKIPPING VFMSUBPD inum 5150 -- already fine
	SKIPPING VFMSUBPD inum 5151 -- already fine
	REARRANGE needs to juggle: VPUNPCKHQDQ inum 5792
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using VL
	REARRANGE needs to juggle: VFMSUBPD inum 5144
	REARRANGE one pattern worked for VFMSUBPD inum 5144
	REARRANGE needs to juggle: VFMSUBPD inum 5145
	REARRANGE one pattern worked for VFMSUBPD inum 5145
	REARRANGE needs to juggle: VFMSUBPD inum 5146
	REARRANGE one pattern worked for VFMSUBPD inum 5146
	REARRANGE needs to juggle: VFMSUBPD inum 5147
	REARRANGE one pattern worked for VFMSUBPD inum 5147
	REARRANGE needs to juggle: VFMSUBPD inum 5148
	REARRANGE one pattern worked for VFMSUBPD inum 5148
	REARRANGE needs to juggle: VFMSUBPD inum 5149
	REARRANGE one pattern worked for VFMSUBPD inum 5149
	REARRANGE needs to juggle: VFMSUBPD inum 5150
	REARRANGE one pattern worked for VFMSUBPD inum 5150
	REARRANGE needs to juggle: VFMSUBPD inum 5151
	REARRANGE one pattern worked for VFMSUBPD inum 5151
	SKIPPING VPUNPCKHQDQ inum 5792 -- already fine
	SKIPPING VPUNPCKHQDQ inum 5793 -- already fine
	SKIPPING VPUNPCKHQDQ inum 6456 -- already fine
	SKIPPING VPUNPCKHQDQ inum 6457 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 11
Others: 
VFMSUBPD inum=5144  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPD inum=5145  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPD inum=5146  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPD inum=5147  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPUNPCKHQDQ inum=5792  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHQDQ inum=5793  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMSUBPD inum 5144 -- already fine
	SKIPPING VFMSUBPD inum 5145 -- already fine
	SKIPPING VFMSUBPD inum 5146 -- already fine
	SKIPPING VFMSUBPD inum 5147 -- already fine
	REARRANGE needs to juggle: VPUNPCKHQDQ inum 5792
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMSUBPD inum 5144
	REARRANGE one pattern worked for VFMSUBPD inum 5144
	REARRANGE needs to juggle: VFMSUBPD inum 5145
	REARRANGE one pattern worked for VFMSUBPD inum 5145
	REARRANGE needs to juggle: VFMSUBPD inum 5146
	REARRANGE one pattern worked for VFMSUBPD inum 5146
	REARRANGE needs to juggle: VFMSUBPD inum 5147
	REARRANGE one pattern worked for VFMSUBPD inum 5147
	SKIPPING VPUNPCKHQDQ inum 5792 -- already fine
	SKIPPING VPUNPCKHQDQ inum 5793 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
VFMSUBPD inum=5148  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPD inum=5149  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFMSUBPD inum=5150  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFMSUBPD inum=5151  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPUNPCKHQDQ inum=6456  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPUNPCKHQDQ inum=6457  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 0 1 1    0 1 1 0    1 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMSUBPD inum 5148 -- already fine
	SKIPPING VFMSUBPD inum 5149 -- already fine
	SKIPPING VFMSUBPD inum 5150 -- already fine
	SKIPPING VFMSUBPD inum 5151 -- already fine
	REARRANGE needs to juggle: VPUNPCKHQDQ inum 6456
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMSUBPD inum 5148
	REARRANGE one pattern worked for VFMSUBPD inum 5148
	REARRANGE needs to juggle: VFMSUBPD inum 5149
	REARRANGE one pattern worked for VFMSUBPD inum 5149
	REARRANGE needs to juggle: VFMSUBPD inum 5150
	REARRANGE one pattern worked for VFMSUBPD inum 5150
	REARRANGE needs to juggle: VFMSUBPD inum 5151
	REARRANGE one pattern worked for VFMSUBPD inum 5151
	SKIPPING VPUNPCKHQDQ inum 6456 -- already fine
	SKIPPING VPUNPCKHQDQ inum 6457 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 9
Others: 
VFMSUBSS inum=5152  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 REXW=0 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMSUBSS inum=5153  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 REXW=0 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VFMSUBSS inum=5154  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 REXW=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMSUBSS inum=5155  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 REXW=1 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VMOVD inum=5608  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VMOVD inum=5609  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VMOVD inum=5612  isa_set=AVX pattern len=26
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    MODE=2 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111    m m MOD!=3 r    r r n n    n MODRM()

VMOVD inum=5613  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    MODE=2 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111    1 1 MOD=3 r    r r n n    n

VMOVQ inum=5616  iform_input=VMOVQ_XMMdq_MEMq_6E  isa_set=AVX pattern len=26
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    MODE=2 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111    m m MOD!=3 r    r r n n    n MODRM()

VMOVQ inum=5617  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    MODE=2 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VFMSUBSS inum 5152 -- already fine
	SKIPPING VFMSUBSS inum 5153 -- already fine
	SKIPPING VFMSUBSS inum 5154 -- already fine
	SKIPPING VFMSUBSS inum 5155 -- already fine
	REARRANGE needs to juggle: VMOVD inum 5608
	REARRANGE one pattern worked for VMOVD inum 5608
	REARRANGE needs to juggle: VMOVD inum 5609
	REARRANGE one pattern worked for VMOVD inum 5609
	REARRANGE needs to juggle: VMOVD inum 5612
	REARRANGE one pattern worked for VMOVD inum 5612
	REARRANGE needs to juggle: VMOVD inum 5613
	REARRANGE one pattern worked for VMOVD inum 5613
	REARRANGE needs to juggle: VMOVQ inum 5616
	REARRANGE one pattern worked for VMOVQ inum 5616
	REARRANGE needs to juggle: VMOVQ inum 5617
	REARRANGE one pattern worked for VMOVQ inum 5617
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VFMSUBSS inum=5152  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 REXW=0 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMSUBSS inum=5153  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 REXW=0 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VFMSUBSS inum=5154  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 REXW=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMSUBSS inum=5155  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 REXW=1 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VMOVD inum=5608  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VMOVD inum=5609  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VMOVD inum=5612  isa_set=AVX pattern len=26
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    MODE=2 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111    m m MOD!=3 r    r r n n    n MODRM()

VMOVD inum=5613  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    MODE=2 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111    1 1 MOD=3 r    r r n n    n

VMOVQ inum=5616  iform_input=VMOVQ_XMMdq_MEMq_6E  isa_set=AVX pattern len=26
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    MODE=2 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111    m m MOD!=3 r    r r n n    n MODRM()

VMOVQ inum=5617  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    MODE=2 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMSUBSS inum 5152 -- already fine
	SKIPPING VFMSUBSS inum 5153 -- already fine
	SKIPPING VFMSUBSS inum 5154 -- already fine
	SKIPPING VFMSUBSS inum 5155 -- already fine
	REARRANGE needs to juggle: VMOVD inum 5608
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMSUBSS inum 5152
	REARRANGE one pattern worked for VFMSUBSS inum 5152
	REARRANGE needs to juggle: VFMSUBSS inum 5153
	REARRANGE one pattern worked for VFMSUBSS inum 5153
	REARRANGE needs to juggle: VFMSUBSS inum 5154
	REARRANGE one pattern worked for VFMSUBSS inum 5154
	REARRANGE needs to juggle: VFMSUBSS inum 5155
	REARRANGE one pattern worked for VFMSUBSS inum 5155
	REARRANGE needs to juggle: VMOVD inum 5608
	REARRANGE one pattern worked for VMOVD inum 5608
	REARRANGE needs to juggle: VMOVD inum 5609
	REARRANGE one pattern worked for VMOVD inum 5609
	REARRANGE needs to juggle: VMOVD inum 5612
	REARRANGE one pattern worked for VMOVD inum 5612
	REARRANGE needs to juggle: VMOVD inum 5613
	REARRANGE one pattern worked for VMOVD inum 5613
	REARRANGE needs to juggle: VMOVQ inum 5616
	REARRANGE one pattern worked for VMOVQ inum 5616
	REARRANGE needs to juggle: VMOVQ inum 5617
	REARRANGE one pattern worked for VMOVQ inum 5617
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VFMSUBSD inum=5156  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VEX_PREFIX=1 REXW=0 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMSUBSD inum=5157  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VEX_PREFIX=1 REXW=0 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VFMSUBSD inum=5158  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VEX_PREFIX=1 REXW=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMSUBSD inum=5159  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VEX_PREFIX=1 REXW=1 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VMOVDQA inum=5628  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VL=0 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VMOVDQA inum=5629  iform_input=VMOVDQA_XMMdq_XMMdq_6F  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VL=0 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VMOVDQA inum=5632  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VL=1 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VMOVDQA inum=5633  iform_input=VMOVDQA_YMMqq_YMMqq_6F  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VL=1 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VMOVDQU inum=5636  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VL=0 VEX_PREFIX=3 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VMOVDQU inum=5637  iform_input=VMOVDQU_XMMdq_XMMdq_6F  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VL=0 VEX_PREFIX=3 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VMOVDQU inum=5638  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VL=1 VEX_PREFIX=3 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VMOVDQU inum=5639  iform_input=VMOVDQU_YMMqq_YMMqq_6F  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VL=1 VEX_PREFIX=3 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VFMSUBSD inum 5156 -- already fine
	SKIPPING VFMSUBSD inum 5157 -- already fine
	SKIPPING VFMSUBSD inum 5158 -- already fine
	SKIPPING VFMSUBSD inum 5159 -- already fine
	REARRANGE needs to juggle: VMOVDQA inum 5628
	REARRANGE one pattern worked for VMOVDQA inum 5628
	REARRANGE needs to juggle: VMOVDQA inum 5629
	REARRANGE one pattern worked for VMOVDQA inum 5629
	REARRANGE needs to juggle: VMOVDQA inum 5632
	REARRANGE one pattern worked for VMOVDQA inum 5632
	REARRANGE needs to juggle: VMOVDQA inum 5633
	REARRANGE one pattern worked for VMOVDQA inum 5633
	REARRANGE needs to juggle: VMOVDQU inum 5636
	REARRANGE one pattern worked for VMOVDQU inum 5636
	REARRANGE needs to juggle: VMOVDQU inum 5637
	REARRANGE one pattern worked for VMOVDQU inum 5637
	REARRANGE needs to juggle: VMOVDQU inum 5638
	REARRANGE one pattern worked for VMOVDQU inum 5638
	REARRANGE needs to juggle: VMOVDQU inum 5639
	REARRANGE one pattern worked for VMOVDQU inum 5639
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VFMSUBSD inum=5156  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VEX_PREFIX=1 REXW=0 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMSUBSD inum=5157  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VEX_PREFIX=1 REXW=0 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VFMSUBSD inum=5158  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VEX_PREFIX=1 REXW=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFMSUBSD inum=5159  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VEX_PREFIX=1 REXW=1 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VMOVDQA inum=5628  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VEX_PREFIX=1 VL=0 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VMOVDQA inum=5629  iform_input=VMOVDQA_XMMdq_XMMdq_6F  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VEX_PREFIX=1 VL=0 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VMOVDQA inum=5632  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VEX_PREFIX=1 VL=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VMOVDQA inum=5633  iform_input=VMOVDQA_YMMqq_YMMqq_6F  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 1    0 1 1 1    1 VEX_PREFIX=1 VL=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFMSUBSD inum 5156 -- already fine
	SKIPPING VFMSUBSD inum 5157 -- already fine
	SKIPPING VFMSUBSD inum 5158 -- already fine
	SKIPPING VFMSUBSD inum 5159 -- already fine
	REARRANGE needs to juggle: VMOVDQA inum 5628
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFMSUBSD inum 5156
	REARRANGE one pattern worked for VFMSUBSD inum 5156
	REARRANGE needs to juggle: VFMSUBSD inum 5157
	REARRANGE one pattern worked for VFMSUBSD inum 5157
	REARRANGE needs to juggle: VFMSUBSD inum 5158
	REARRANGE one pattern worked for VFMSUBSD inum 5158
	REARRANGE needs to juggle: VFMSUBSD inum 5159
	REARRANGE one pattern worked for VFMSUBSD inum 5159
	REARRANGE needs to juggle: VMOVDQA inum 5628
	REARRANGE one pattern worked for VMOVDQA inum 5628
	REARRANGE needs to juggle: VMOVDQA inum 5629
	REARRANGE one pattern worked for VMOVDQA inum 5629
	REARRANGE needs to juggle: VMOVDQA inum 5632
	REARRANGE one pattern worked for VMOVDQA inum 5632
	REARRANGE needs to juggle: VMOVDQA inum 5633
	REARRANGE one pattern worked for VMOVDQA inum 5633
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VPSLLD inum=5925  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 1    1 0 n n    n UIMM8()

VPSLLD inum=6492  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 0 0 1    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 1    1 0 n n    n UIMM8()

VPSRLD inum=5930  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 0    1 0 n n    n UIMM8()

VPSRLD inum=6497  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 0 0 1    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 0    1 0 n n    n UIMM8()

VPSRAD inum=5928  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 1    0 0 n n    n UIMM8()

VPSRAD inum=6495  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 0 0 1    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 1    0 0 n n    n UIMM8()

VCVTNEPS2BF16 inum=10527  iform_input=VCVTNEPS2BF16_XMMbf16_XMMf32  isa_set=AVX_NE_CONVERT pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 0 0 1    0 VEX_PREFIX=3 MAP=2 1    1 MOD=3 r r    r n n n    REXW=0 VL=0 VEXDEST3=0b1 VEXDEST210=0b111   

VCVTNEPS2BF16 inum=10528  iform_input=VCVTNEPS2BF16_XMMbf16_MEMf32_VL128  isa_set=AVX_NE_CONVERT pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 0 0 1    0 VEX_PREFIX=3 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() REXW=0 VL=0 VEXDEST3=0b1    VEXDEST210=0b111

VCVTNEPS2BF16 inum=10529  iform_input=VCVTNEPS2BF16_XMMbf16_YMMf32  isa_set=AVX_NE_CONVERT pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 0 0 1    0 VEX_PREFIX=3 MAP=2 1    1 MOD=3 r r    r n n n    REXW=0 VL=1 VEXDEST3=0b1 VEXDEST210=0b111   

VCVTNEPS2BF16 inum=10530  iform_input=VCVTNEPS2BF16_XMMbf16_MEMf32_VL256  isa_set=AVX_NE_CONVERT pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 0 0 1    0 VEX_PREFIX=3 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() REXW=0 VL=1 VEXDEST3=0b1    VEXDEST210=0b111

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPSLLD inum 5925 -- already fine
	SKIPPING VPSLLD inum 6492 -- already fine
	SKIPPING VPSRLD inum 5930 -- already fine
	SKIPPING VPSRLD inum 6497 -- already fine
	SKIPPING VPSRAD inum 5928 -- already fine
	SKIPPING VPSRAD inum 6495 -- already fine
	REARRANGE needs to juggle: VCVTNEPS2BF16 inum 10527
	REARRANGE one pattern worked for VCVTNEPS2BF16 inum 10527
	REARRANGE needs to juggle: VCVTNEPS2BF16 inum 10528
	REARRANGE one pattern worked for VCVTNEPS2BF16 inum 10528
	REARRANGE needs to juggle: VCVTNEPS2BF16 inum 10529
	REARRANGE one pattern worked for VCVTNEPS2BF16 inum 10529
	REARRANGE needs to juggle: VCVTNEPS2BF16 inum 10530
	REARRANGE one pattern worked for VCVTNEPS2BF16 inum 10530
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VFNMADDPS inum=5160  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPS inum=5161  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMADDPS inum=5162  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPS inum=5163  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMADDPS inum=5164  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPS inum=5165  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMADDPS inum=5166  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPS inum=5167  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPBROADCASTB inum=6549  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VPBROADCASTB inum=6550  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VPBROADCASTB inum=6551  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VPBROADCASTB inum=6552  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VFNMADDPS inum 5160 -- already fine
	SKIPPING VFNMADDPS inum 5161 -- already fine
	SKIPPING VFNMADDPS inum 5162 -- already fine
	SKIPPING VFNMADDPS inum 5163 -- already fine
	SKIPPING VFNMADDPS inum 5164 -- already fine
	SKIPPING VFNMADDPS inum 5165 -- already fine
	SKIPPING VFNMADDPS inum 5166 -- already fine
	SKIPPING VFNMADDPS inum 5167 -- already fine
	REARRANGE needs to juggle: VPBROADCASTB inum 6549
	REARRANGE one pattern worked for VPBROADCASTB inum 6549
	REARRANGE needs to juggle: VPBROADCASTB inum 6550
	REARRANGE one pattern worked for VPBROADCASTB inum 6550
	REARRANGE needs to juggle: VPBROADCASTB inum 6551
	REARRANGE one pattern worked for VPBROADCASTB inum 6551
	REARRANGE needs to juggle: VPBROADCASTB inum 6552
	REARRANGE one pattern worked for VPBROADCASTB inum 6552
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VFNMADDPS inum=5160  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPS inum=5161  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMADDPS inum=5162  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPS inum=5163  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMADDPS inum=5164  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPS inum=5165  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMADDPS inum=5166  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPS inum=5167  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPBROADCASTB inum=6549  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 VL=0 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VPBROADCASTB inum=6550  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 VL=0 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VPBROADCASTB inum=6551  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 VL=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VPBROADCASTB inum=6552  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    0 VEX_PREFIX=1 VL=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFNMADDPS inum 5160 -- already fine
	SKIPPING VFNMADDPS inum 5161 -- already fine
	SKIPPING VFNMADDPS inum 5162 -- already fine
	SKIPPING VFNMADDPS inum 5163 -- already fine
	SKIPPING VFNMADDPS inum 5164 -- already fine
	SKIPPING VFNMADDPS inum 5165 -- already fine
	SKIPPING VFNMADDPS inum 5166 -- already fine
	SKIPPING VFNMADDPS inum 5167 -- already fine
	REARRANGE needs to juggle: VPBROADCASTB inum 6549
	REARRANGE one pattern worked for VPBROADCASTB inum 6549
	REARRANGE needs to juggle: VPBROADCASTB inum 6550
	REARRANGE one pattern worked for VPBROADCASTB inum 6550
	REARRANGE needs to juggle: VPBROADCASTB inum 6551
	REARRANGE one pattern worked for VPBROADCASTB inum 6551
	REARRANGE needs to juggle: VPBROADCASTB inum 6552
	REARRANGE one pattern worked for VPBROADCASTB inum 6552
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VFNMADDPD inum=5168  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPD inum=5169  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMADDPD inum=5170  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPD inum=5171  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMADDPD inum=5172  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPD inum=5173  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMADDPD inum=5174  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPD inum=5175  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPBROADCASTW inum=6553  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VPBROADCASTW inum=6554  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VPBROADCASTW inum=6555  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VPBROADCASTW inum=6556  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VFNMADDPD inum 5168 -- already fine
	SKIPPING VFNMADDPD inum 5169 -- already fine
	SKIPPING VFNMADDPD inum 5170 -- already fine
	SKIPPING VFNMADDPD inum 5171 -- already fine
	SKIPPING VFNMADDPD inum 5172 -- already fine
	SKIPPING VFNMADDPD inum 5173 -- already fine
	SKIPPING VFNMADDPD inum 5174 -- already fine
	SKIPPING VFNMADDPD inum 5175 -- already fine
	REARRANGE needs to juggle: VPBROADCASTW inum 6553
	REARRANGE one pattern worked for VPBROADCASTW inum 6553
	REARRANGE needs to juggle: VPBROADCASTW inum 6554
	REARRANGE one pattern worked for VPBROADCASTW inum 6554
	REARRANGE needs to juggle: VPBROADCASTW inum 6555
	REARRANGE one pattern worked for VPBROADCASTW inum 6555
	REARRANGE needs to juggle: VPBROADCASTW inum 6556
	REARRANGE one pattern worked for VPBROADCASTW inum 6556
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VFNMADDPD inum=5168  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPD inum=5169  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMADDPD inum=5170  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPD inum=5171  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMADDPD inum=5172  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPD inum=5173  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMADDPD inum=5174  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMADDPD inum=5175  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VPBROADCASTW inum=6553  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 VL=0 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VPBROADCASTW inum=6554  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 VL=0 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VPBROADCASTW inum=6555  isa_set=AVX2 pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 VL=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VPBROADCASTW inum=6556  isa_set=AVX2 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 0 0    1 VEX_PREFIX=1 VL=1 MAP=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFNMADDPD inum 5168 -- already fine
	SKIPPING VFNMADDPD inum 5169 -- already fine
	SKIPPING VFNMADDPD inum 5170 -- already fine
	SKIPPING VFNMADDPD inum 5171 -- already fine
	SKIPPING VFNMADDPD inum 5172 -- already fine
	SKIPPING VFNMADDPD inum 5173 -- already fine
	SKIPPING VFNMADDPD inum 5174 -- already fine
	SKIPPING VFNMADDPD inum 5175 -- already fine
	REARRANGE needs to juggle: VPBROADCASTW inum 6553
	REARRANGE one pattern worked for VPBROADCASTW inum 6553
	REARRANGE needs to juggle: VPBROADCASTW inum 6554
	REARRANGE one pattern worked for VPBROADCASTW inum 6554
	REARRANGE needs to juggle: VPBROADCASTW inum 6555
	REARRANGE one pattern worked for VPBROADCASTW inum 6555
	REARRANGE needs to juggle: VPBROADCASTW inum 6556
	REARRANGE one pattern worked for VPBROADCASTW inum 6556
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VFNMSUBPS inum=5184  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPS inum=5185  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPS inum=5186  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPS inum=5187  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPS inum=5188  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPS inum=5189  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPS inum=5190  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPS inum=5191  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VHADDPD inum=5504  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHADDPD inum=5505  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VHADDPD inum=5506  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHADDPD inum=5507  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VHADDPS inum=5508  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VL=0 VEX_PREFIX=2 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHADDPS inum=5509  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VL=0 VEX_PREFIX=2 MAP=1    1 1 MOD=3 r    r r n n    n

VHADDPS inum=5510  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VL=1 VEX_PREFIX=2 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHADDPS inum=5511  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VL=1 VEX_PREFIX=2 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VFNMSUBPS inum 5184 -- already fine
	SKIPPING VFNMSUBPS inum 5185 -- already fine
	SKIPPING VFNMSUBPS inum 5186 -- already fine
	SKIPPING VFNMSUBPS inum 5187 -- already fine
	SKIPPING VFNMSUBPS inum 5188 -- already fine
	SKIPPING VFNMSUBPS inum 5189 -- already fine
	SKIPPING VFNMSUBPS inum 5190 -- already fine
	SKIPPING VFNMSUBPS inum 5191 -- already fine
	REARRANGE needs to juggle: VHADDPD inum 5504
	REARRANGE one pattern worked for VHADDPD inum 5504
	REARRANGE needs to juggle: VHADDPD inum 5505
	REARRANGE one pattern worked for VHADDPD inum 5505
	REARRANGE needs to juggle: VHADDPD inum 5506
	REARRANGE one pattern worked for VHADDPD inum 5506
	REARRANGE needs to juggle: VHADDPD inum 5507
	REARRANGE one pattern worked for VHADDPD inum 5507
	REARRANGE needs to juggle: VHADDPS inum 5508
	REARRANGE one pattern worked for VHADDPS inum 5508
	REARRANGE needs to juggle: VHADDPS inum 5509
	REARRANGE one pattern worked for VHADDPS inum 5509
	REARRANGE needs to juggle: VHADDPS inum 5510
	REARRANGE one pattern worked for VHADDPS inum 5510
	REARRANGE needs to juggle: VHADDPS inum 5511
	REARRANGE one pattern worked for VHADDPS inum 5511
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VFNMSUBPS inum=5184  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPS inum=5185  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPS inum=5186  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPS inum=5187  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPS inum=5188  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPS inum=5189  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPS inum=5190  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPS inum=5191  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VHADDPD inum=5504  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHADDPD inum=5505  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

VHADDPD inum=5506  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHADDPD inum=5507  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFNMSUBPS inum 5184 -- already fine
	SKIPPING VFNMSUBPS inum 5185 -- already fine
	SKIPPING VFNMSUBPS inum 5186 -- already fine
	SKIPPING VFNMSUBPS inum 5187 -- already fine
	SKIPPING VFNMSUBPS inum 5188 -- already fine
	SKIPPING VFNMSUBPS inum 5189 -- already fine
	SKIPPING VFNMSUBPS inum 5190 -- already fine
	SKIPPING VFNMSUBPS inum 5191 -- already fine
	REARRANGE needs to juggle: VHADDPD inum 5504
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using VL
	REARRANGE needs to juggle: VFNMSUBPS inum 5184
	REARRANGE one pattern worked for VFNMSUBPS inum 5184
	REARRANGE needs to juggle: VFNMSUBPS inum 5185
	REARRANGE one pattern worked for VFNMSUBPS inum 5185
	REARRANGE needs to juggle: VFNMSUBPS inum 5186
	REARRANGE one pattern worked for VFNMSUBPS inum 5186
	REARRANGE needs to juggle: VFNMSUBPS inum 5187
	REARRANGE one pattern worked for VFNMSUBPS inum 5187
	REARRANGE needs to juggle: VFNMSUBPS inum 5188
	REARRANGE one pattern worked for VFNMSUBPS inum 5188
	REARRANGE needs to juggle: VFNMSUBPS inum 5189
	REARRANGE one pattern worked for VFNMSUBPS inum 5189
	REARRANGE needs to juggle: VFNMSUBPS inum 5190
	REARRANGE one pattern worked for VFNMSUBPS inum 5190
	REARRANGE needs to juggle: VFNMSUBPS inum 5191
	REARRANGE one pattern worked for VFNMSUBPS inum 5191
	SKIPPING VHADDPD inum 5504 -- already fine
	SKIPPING VHADDPD inum 5505 -- already fine
	SKIPPING VHADDPD inum 5506 -- already fine
	SKIPPING VHADDPD inum 5507 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 11
Others: 
VFNMSUBPS inum=5184  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPS inum=5185  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPS inum=5186  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPS inum=5187  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VHADDPD inum=5504  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHADDPD inum=5505  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFNMSUBPS inum 5184 -- already fine
	SKIPPING VFNMSUBPS inum 5185 -- already fine
	SKIPPING VFNMSUBPS inum 5186 -- already fine
	SKIPPING VFNMSUBPS inum 5187 -- already fine
	REARRANGE needs to juggle: VHADDPD inum 5504
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFNMSUBPS inum 5184
	REARRANGE one pattern worked for VFNMSUBPS inum 5184
	REARRANGE needs to juggle: VFNMSUBPS inum 5185
	REARRANGE one pattern worked for VFNMSUBPS inum 5185
	REARRANGE needs to juggle: VFNMSUBPS inum 5186
	REARRANGE one pattern worked for VFNMSUBPS inum 5186
	REARRANGE needs to juggle: VFNMSUBPS inum 5187
	REARRANGE one pattern worked for VFNMSUBPS inum 5187
	SKIPPING VHADDPD inum 5504 -- already fine
	SKIPPING VHADDPD inum 5505 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
VFNMSUBPS inum=5188  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPS inum=5189  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPS inum=5190  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPS inum=5191  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VHADDPD inum=5506  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHADDPD inum=5507  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    0 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFNMSUBPS inum 5188 -- already fine
	SKIPPING VFNMSUBPS inum 5189 -- already fine
	SKIPPING VFNMSUBPS inum 5190 -- already fine
	SKIPPING VFNMSUBPS inum 5191 -- already fine
	REARRANGE needs to juggle: VHADDPD inum 5506
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFNMSUBPS inum 5188
	REARRANGE one pattern worked for VFNMSUBPS inum 5188
	REARRANGE needs to juggle: VFNMSUBPS inum 5189
	REARRANGE one pattern worked for VFNMSUBPS inum 5189
	REARRANGE needs to juggle: VFNMSUBPS inum 5190
	REARRANGE one pattern worked for VFNMSUBPS inum 5190
	REARRANGE needs to juggle: VFNMSUBPS inum 5191
	REARRANGE one pattern worked for VFNMSUBPS inum 5191
	SKIPPING VHADDPD inum 5506 -- already fine
	SKIPPING VHADDPD inum 5507 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 9
Others: 
VFNMSUBPD inum=5192  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPD inum=5193  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPD inum=5194  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPD inum=5195  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPD inum=5196  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPD inum=5197  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPD inum=5198  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPD inum=5199  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VHSUBPD inum=5512  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHSUBPD inum=5513  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VHSUBPD inum=5514  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHSUBPD inum=5515  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VHSUBPS inum=5516  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=0 VEX_PREFIX=2 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHSUBPS inum=5517  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=0 VEX_PREFIX=2 MAP=1    1 1 MOD=3 r    r r n n    n

VHSUBPS inum=5518  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=1 VEX_PREFIX=2 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHSUBPS inum=5519  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VL=1 VEX_PREFIX=2 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VFNMSUBPD inum 5192 -- already fine
	SKIPPING VFNMSUBPD inum 5193 -- already fine
	SKIPPING VFNMSUBPD inum 5194 -- already fine
	SKIPPING VFNMSUBPD inum 5195 -- already fine
	SKIPPING VFNMSUBPD inum 5196 -- already fine
	SKIPPING VFNMSUBPD inum 5197 -- already fine
	SKIPPING VFNMSUBPD inum 5198 -- already fine
	SKIPPING VFNMSUBPD inum 5199 -- already fine
	REARRANGE needs to juggle: VHSUBPD inum 5512
	REARRANGE one pattern worked for VHSUBPD inum 5512
	REARRANGE needs to juggle: VHSUBPD inum 5513
	REARRANGE one pattern worked for VHSUBPD inum 5513
	REARRANGE needs to juggle: VHSUBPD inum 5514
	REARRANGE one pattern worked for VHSUBPD inum 5514
	REARRANGE needs to juggle: VHSUBPD inum 5515
	REARRANGE one pattern worked for VHSUBPD inum 5515
	REARRANGE needs to juggle: VHSUBPS inum 5516
	REARRANGE one pattern worked for VHSUBPS inum 5516
	REARRANGE needs to juggle: VHSUBPS inum 5517
	REARRANGE one pattern worked for VHSUBPS inum 5517
	REARRANGE needs to juggle: VHSUBPS inum 5518
	REARRANGE one pattern worked for VHSUBPS inum 5518
	REARRANGE needs to juggle: VHSUBPS inum 5519
	REARRANGE one pattern worked for VHSUBPS inum 5519
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VFNMSUBPD inum=5192  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPD inum=5193  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPD inum=5194  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPD inum=5195  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPD inum=5196  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPD inum=5197  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 REXW=0 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPD inum=5198  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPD inum=5199  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 REXW=1 VL=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VHSUBPD inum=5512  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHSUBPD inum=5513  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

VHSUBPD inum=5514  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHSUBPD inum=5515  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFNMSUBPD inum 5192 -- already fine
	SKIPPING VFNMSUBPD inum 5193 -- already fine
	SKIPPING VFNMSUBPD inum 5194 -- already fine
	SKIPPING VFNMSUBPD inum 5195 -- already fine
	SKIPPING VFNMSUBPD inum 5196 -- already fine
	SKIPPING VFNMSUBPD inum 5197 -- already fine
	SKIPPING VFNMSUBPD inum 5198 -- already fine
	SKIPPING VFNMSUBPD inum 5199 -- already fine
	REARRANGE needs to juggle: VHSUBPD inum 5512
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using VL
	REARRANGE needs to juggle: VFNMSUBPD inum 5192
	REARRANGE one pattern worked for VFNMSUBPD inum 5192
	REARRANGE needs to juggle: VFNMSUBPD inum 5193
	REARRANGE one pattern worked for VFNMSUBPD inum 5193
	REARRANGE needs to juggle: VFNMSUBPD inum 5194
	REARRANGE one pattern worked for VFNMSUBPD inum 5194
	REARRANGE needs to juggle: VFNMSUBPD inum 5195
	REARRANGE one pattern worked for VFNMSUBPD inum 5195
	REARRANGE needs to juggle: VFNMSUBPD inum 5196
	REARRANGE one pattern worked for VFNMSUBPD inum 5196
	REARRANGE needs to juggle: VFNMSUBPD inum 5197
	REARRANGE one pattern worked for VFNMSUBPD inum 5197
	REARRANGE needs to juggle: VFNMSUBPD inum 5198
	REARRANGE one pattern worked for VFNMSUBPD inum 5198
	REARRANGE needs to juggle: VFNMSUBPD inum 5199
	REARRANGE one pattern worked for VFNMSUBPD inum 5199
	SKIPPING VHSUBPD inum 5512 -- already fine
	SKIPPING VHSUBPD inum 5513 -- already fine
	SKIPPING VHSUBPD inum 5514 -- already fine
	SKIPPING VHSUBPD inum 5515 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 11
Others: 
VFNMSUBPD inum=5192  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPD inum=5193  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 VL=0 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPD inum=5194  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPD inum=5195  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 VL=0 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VHSUBPD inum=5512  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 VL=0 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHSUBPD inum=5513  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 VL=0 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFNMSUBPD inum 5192 -- already fine
	SKIPPING VFNMSUBPD inum 5193 -- already fine
	SKIPPING VFNMSUBPD inum 5194 -- already fine
	SKIPPING VFNMSUBPD inum 5195 -- already fine
	REARRANGE needs to juggle: VHSUBPD inum 5512
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFNMSUBPD inum 5192
	REARRANGE one pattern worked for VFNMSUBPD inum 5192
	REARRANGE needs to juggle: VFNMSUBPD inum 5193
	REARRANGE one pattern worked for VFNMSUBPD inum 5193
	REARRANGE needs to juggle: VFNMSUBPD inum 5194
	REARRANGE one pattern worked for VFNMSUBPD inum 5194
	REARRANGE needs to juggle: VFNMSUBPD inum 5195
	REARRANGE one pattern worked for VFNMSUBPD inum 5195
	SKIPPING VHSUBPD inum 5512 -- already fine
	SKIPPING VHSUBPD inum 5513 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
VFNMSUBPD inum=5196  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPD inum=5197  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 VL=1 REXW=0    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VFNMSUBPD inum=5198  isa_set=FMA4 pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 m m MOD!=3    r r r n    n n MODRM() SE_IMM8()   

VFNMSUBPD inum=5199  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 VL=1 REXW=1    MAP=3 1 1 MOD=3    r r r n    n n SE_IMM8()

VHSUBPD inum=5514  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 VL=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VHSUBPD inum=5515  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 0 1 1    1 1 1 0    1 VEX_PREFIX=1 VL=1 MAP=1    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFNMSUBPD inum 5196 -- already fine
	SKIPPING VFNMSUBPD inum 5197 -- already fine
	SKIPPING VFNMSUBPD inum 5198 -- already fine
	SKIPPING VFNMSUBPD inum 5199 -- already fine
	REARRANGE needs to juggle: VHSUBPD inum 5514
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFNMSUBPD inum 5196
	REARRANGE one pattern worked for VFNMSUBPD inum 5196
	REARRANGE needs to juggle: VFNMSUBPD inum 5197
	REARRANGE one pattern worked for VFNMSUBPD inum 5197
	REARRANGE needs to juggle: VFNMSUBPD inum 5198
	REARRANGE one pattern worked for VFNMSUBPD inum 5198
	REARRANGE needs to juggle: VFNMSUBPD inum 5199
	REARRANGE one pattern worked for VFNMSUBPD inum 5199
	SKIPPING VHSUBPD inum 5514 -- already fine
	SKIPPING VHSUBPD inum 5515 -- already fine
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 9
Others: 
VFNMSUBSS inum=5200  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 REXW=0 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFNMSUBSS inum=5201  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 REXW=0 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VFNMSUBSS inum=5202  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 REXW=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFNMSUBSS inum=5203  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 REXW=1 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VMOVD inum=5610  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VMOVD inum=5611  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VMOVD inum=5614  isa_set=AVX pattern len=26
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    MODE=2 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111    m m MOD!=3 r    r r n n    n MODRM()

VMOVD inum=5615  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    MODE=2 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111    1 1 MOD=3 r    r r n n    n

VMOVQ inum=5618  iform_input=VMOVQ_MEMq_XMMq_7E  isa_set=AVX pattern len=26
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    MODE=2 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111    m m MOD!=3 r    r r n n    n MODRM()

VMOVQ inum=5619  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    MODE=2 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111    1 1 MOD=3 r    r r n n    n

VMOVQ inum=5620  iform_input=VMOVQ_XMMdq_MEMq_7E  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VL=0 VEX_PREFIX=3 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VMOVQ inum=5621  iform_input=VMOVQ_XMMdq_XMMq_7E  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VL=0 VEX_PREFIX=3 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VFNMSUBSS inum 5200 -- already fine
	SKIPPING VFNMSUBSS inum 5201 -- already fine
	SKIPPING VFNMSUBSS inum 5202 -- already fine
	SKIPPING VFNMSUBSS inum 5203 -- already fine
	REARRANGE needs to juggle: VMOVD inum 5610
	REARRANGE one pattern worked for VMOVD inum 5610
	REARRANGE needs to juggle: VMOVD inum 5611
	REARRANGE one pattern worked for VMOVD inum 5611
	REARRANGE needs to juggle: VMOVD inum 5614
	REARRANGE one pattern worked for VMOVD inum 5614
	REARRANGE needs to juggle: VMOVD inum 5615
	REARRANGE one pattern worked for VMOVD inum 5615
	REARRANGE needs to juggle: VMOVQ inum 5618
	REARRANGE one pattern worked for VMOVQ inum 5618
	REARRANGE needs to juggle: VMOVQ inum 5619
	REARRANGE one pattern worked for VMOVQ inum 5619
	REARRANGE needs to juggle: VMOVQ inum 5620
	REARRANGE one pattern worked for VMOVQ inum 5620
	REARRANGE needs to juggle: VMOVQ inum 5621
	REARRANGE one pattern worked for VMOVQ inum 5621
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VFNMSUBSS inum=5200  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 REXW=0 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFNMSUBSS inum=5201  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 REXW=0 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VFNMSUBSS inum=5202  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 REXW=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFNMSUBSS inum=5203  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 REXW=1 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VMOVD inum=5610  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM()

VMOVD inum=5611  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n   

VMOVD inum=5614  isa_set=AVX pattern len=26
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    MODE=2 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111    m m MOD!=3 r    r r n n    n MODRM()

VMOVD inum=5615  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    MODE=2 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111    1 1 MOD=3 r    r r n n    n

VMOVQ inum=5618  iform_input=VMOVQ_MEMq_XMMq_7E  isa_set=AVX pattern len=26
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    MODE=2 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111    m m MOD!=3 r    r r n n    n MODRM()

VMOVQ inum=5619  isa_set=AVX pattern len=25
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    0 VEX_PREFIX=1 VL=0 MAP=1    MODE=2 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111    1 1 MOD=3 r    r r n n    n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFNMSUBSS inum 5200 -- already fine
	SKIPPING VFNMSUBSS inum 5201 -- already fine
	SKIPPING VFNMSUBSS inum 5202 -- already fine
	SKIPPING VFNMSUBSS inum 5203 -- already fine
	REARRANGE needs to juggle: VMOVD inum 5610
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFNMSUBSS inum 5200
	REARRANGE one pattern worked for VFNMSUBSS inum 5200
	REARRANGE needs to juggle: VFNMSUBSS inum 5201
	REARRANGE one pattern worked for VFNMSUBSS inum 5201
	REARRANGE needs to juggle: VFNMSUBSS inum 5202
	REARRANGE one pattern worked for VFNMSUBSS inum 5202
	REARRANGE needs to juggle: VFNMSUBSS inum 5203
	REARRANGE one pattern worked for VFNMSUBSS inum 5203
	REARRANGE needs to juggle: VMOVD inum 5610
	REARRANGE one pattern worked for VMOVD inum 5610
	REARRANGE needs to juggle: VMOVD inum 5611
	REARRANGE one pattern worked for VMOVD inum 5611
	REARRANGE needs to juggle: VMOVD inum 5614
	REARRANGE one pattern worked for VMOVD inum 5614
	REARRANGE needs to juggle: VMOVD inum 5615
	REARRANGE one pattern worked for VMOVD inum 5615
	REARRANGE needs to juggle: VMOVQ inum 5618
	REARRANGE one pattern worked for VMOVQ inum 5618
	REARRANGE needs to juggle: VMOVQ inum 5619
	REARRANGE one pattern worked for VMOVQ inum 5619
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VFNMSUBSD inum=5204  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VEX_PREFIX=1 REXW=0 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFNMSUBSD inum=5205  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VEX_PREFIX=1 REXW=0 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VFNMSUBSD inum=5206  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VEX_PREFIX=1 REXW=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFNMSUBSD inum=5207  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VEX_PREFIX=1 REXW=1 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VMOVDQA inum=5630  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VL=0 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VMOVDQA inum=5631  iform_input=VMOVDQA_XMMdq_XMMdq_7F  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VL=0 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VMOVDQA inum=5634  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VL=1 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VMOVDQA inum=5635  iform_input=VMOVDQA_YMMqq_YMMqq_7F  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VL=1 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VMOVDQU inum=5640  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VL=0 VEX_PREFIX=3 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VMOVDQU inum=5641  iform_input=VMOVDQU_XMMdq_XMMdq_7F  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VL=0 VEX_PREFIX=3 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VMOVDQU inum=5642  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VL=1 VEX_PREFIX=3 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VMOVDQU inum=5643  iform_input=VMOVDQU_YMMqq_YMMqq_7F  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VL=1 VEX_PREFIX=3 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VFNMSUBSD inum 5204 -- already fine
	SKIPPING VFNMSUBSD inum 5205 -- already fine
	SKIPPING VFNMSUBSD inum 5206 -- already fine
	SKIPPING VFNMSUBSD inum 5207 -- already fine
	REARRANGE needs to juggle: VMOVDQA inum 5630
	REARRANGE one pattern worked for VMOVDQA inum 5630
	REARRANGE needs to juggle: VMOVDQA inum 5631
	REARRANGE one pattern worked for VMOVDQA inum 5631
	REARRANGE needs to juggle: VMOVDQA inum 5634
	REARRANGE one pattern worked for VMOVDQA inum 5634
	REARRANGE needs to juggle: VMOVDQA inum 5635
	REARRANGE one pattern worked for VMOVDQA inum 5635
	REARRANGE needs to juggle: VMOVDQU inum 5640
	REARRANGE one pattern worked for VMOVDQU inum 5640
	REARRANGE needs to juggle: VMOVDQU inum 5641
	REARRANGE one pattern worked for VMOVDQU inum 5641
	REARRANGE needs to juggle: VMOVDQU inum 5642
	REARRANGE one pattern worked for VMOVDQU inum 5642
	REARRANGE needs to juggle: VMOVDQU inum 5643
	REARRANGE one pattern worked for VMOVDQU inum 5643
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VFNMSUBSD inum=5204  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VEX_PREFIX=1 REXW=0 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFNMSUBSD inum=5205  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VEX_PREFIX=1 REXW=0 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VFNMSUBSD inum=5206  isa_set=FMA4 pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VEX_PREFIX=1 REXW=1 MAP=3    m m MOD!=3 r    r r n n    n MODRM() SE_IMM8()

VFNMSUBSD inum=5207  isa_set=FMA4 pattern len=22
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VEX_PREFIX=1 REXW=1 MAP=3    1 1 MOD=3 r    r r n n    n SE_IMM8()

VMOVDQA inum=5630  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VEX_PREFIX=1 VL=0 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VMOVDQA inum=5631  iform_input=VMOVDQA_XMMdq_XMMdq_7F  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VEX_PREFIX=1 VL=0 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VMOVDQA inum=5634  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VEX_PREFIX=1 VL=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VMOVDQA inum=5635  iform_input=VMOVDQA_YMMqq_YMMqq_7F  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 0 1 1    1 1 1 1    1 VEX_PREFIX=1 VL=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VFNMSUBSD inum 5204 -- already fine
	SKIPPING VFNMSUBSD inum 5205 -- already fine
	SKIPPING VFNMSUBSD inum 5206 -- already fine
	SKIPPING VFNMSUBSD inum 5207 -- already fine
	REARRANGE needs to juggle: VMOVDQA inum 5630
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MAP
	REARRANGE needs to juggle: VFNMSUBSD inum 5204
	REARRANGE one pattern worked for VFNMSUBSD inum 5204
	REARRANGE needs to juggle: VFNMSUBSD inum 5205
	REARRANGE one pattern worked for VFNMSUBSD inum 5205
	REARRANGE needs to juggle: VFNMSUBSD inum 5206
	REARRANGE one pattern worked for VFNMSUBSD inum 5206
	REARRANGE needs to juggle: VFNMSUBSD inum 5207
	REARRANGE one pattern worked for VFNMSUBSD inum 5207
	REARRANGE needs to juggle: VMOVDQA inum 5630
	REARRANGE one pattern worked for VMOVDQA inum 5630
	REARRANGE needs to juggle: VMOVDQA inum 5631
	REARRANGE one pattern worked for VMOVDQA inum 5631
	REARRANGE needs to juggle: VMOVDQA inum 5634
	REARRANGE one pattern worked for VMOVDQA inum 5634
	REARRANGE needs to juggle: VMOVDQA inum 5635
	REARRANGE one pattern worked for VMOVDQA inum 5635
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 9
Others: 
VPGATHERDQ inum=6296  iform_input=VPGATHERDQ_YMMu64_MEMq_YMMi64_VL256  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

VPGATHERDQ inum=6297  iform_input=VPGATHERDQ_XMMu64_MEMq_XMMi64_VL128  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

VPGATHERDD inum=6298  iform_input=VPGATHERDD_YMMu32_MEMd_YMMi32_VL256  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n RM=4 VMODRM_YMM()    EASZ!=1

VPGATHERDD inum=6299  iform_input=VPGATHERDD_XMMu32_MEMd_XMMi32_VL128  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

KMOVW inum=7722  iform_input=KMOVW_MASKmskw_MASKu16_AVX512  isa_set=AVX512F_KOPW pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVW inum=7723  iform_input=KMOVW_MASKmskw_MEMu16_AVX512  isa_set=AVX512F_KOPW pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VEX_PREFIX=0 MAP=1 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=0 VEXDEST3=0b1    VEXDEST210=0b111

KMOVB inum=9561  iform_input=KMOVB_MASKmskw_MASKu8_AVX512  isa_set=AVX512DQ_KOPB pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVB inum=9562  iform_input=KMOVB_MASKmskw_MEMu8_AVX512  isa_set=AVX512DQ_KOPB pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VEX_PREFIX=1 MAP=1 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=0 VEXDEST3=0b1    VEXDEST210=0b111

KMOVD inum=9566  iform_input=KMOVD_MASKmskw_MASKu32_AVX512  isa_set=AVX512BW_KOPD pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVD inum=9567  iform_input=KMOVD_MASKmskw_MEMu32_AVX512  isa_set=AVX512BW_KOPD pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VEX_PREFIX=1 MAP=1 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=1 VEXDEST3=0b1    VEXDEST210=0b111

KMOVQ inum=9573  iform_input=KMOVQ_MASKmskw_MASKu64_AVX512  isa_set=AVX512BW_KOPQ pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVQ inum=9574  iform_input=KMOVQ_MASKmskw_MEMu64_AVX512  isa_set=AVX512BW_KOPQ pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    0 VEX_PREFIX=0 MAP=1 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=1 VEXDEST3=0b1    VEXDEST210=0b111

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPGATHERDQ inum 6296 -- already fine
	SKIPPING VPGATHERDQ inum 6297 -- already fine
	SKIPPING VPGATHERDD inum 6298 -- already fine
	SKIPPING VPGATHERDD inum 6299 -- already fine
	REARRANGE needs to juggle: KMOVW inum 7722
	REARRANGE one pattern worked for KMOVW inum 7722
	REARRANGE needs to juggle: KMOVW inum 7723
	REARRANGE one pattern worked for KMOVW inum 7723
	REARRANGE needs to juggle: KMOVB inum 9561
	REARRANGE one pattern worked for KMOVB inum 9561
	REARRANGE needs to juggle: KMOVB inum 9562
	REARRANGE one pattern worked for KMOVB inum 9562
	REARRANGE needs to juggle: KMOVD inum 9566
	REARRANGE one pattern worked for KMOVD inum 9566
	REARRANGE needs to juggle: KMOVD inum 9567
	REARRANGE one pattern worked for KMOVD inum 9567
	REARRANGE needs to juggle: KMOVQ inum 9573
	REARRANGE one pattern worked for KMOVQ inum 9573
	REARRANGE needs to juggle: KMOVQ inum 9574
	REARRANGE one pattern worked for KMOVQ inum 9574
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VPGATHERQQ inum=6300  iform_input=VPGATHERQQ_YMMu64_MEMq_YMMi64_VL256  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n RM=4 VMODRM_YMM()    EASZ!=1

VPGATHERQQ inum=6301  iform_input=VPGATHERQQ_XMMu64_MEMq_XMMi64_VL128  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    1 VL=0 VEX_PREFIX=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

VPGATHERQD inum=6302  iform_input=VPGATHERQD_XMMu32_MEMd_XMMi32_VL256  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    1 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n RM=4 VMODRM_YMM()    EASZ!=1

VPGATHERQD inum=6303  iform_input=VPGATHERQD_XMMu32_MEMd_XMMi32_VL128  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    1 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

KMOVW inum=7724  iform_input=KMOVW_MEMu16_MASKmskw_AVX512  isa_set=AVX512F_KOPW pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    1 VEX_PREFIX=0 MAP=1 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=0 VEXDEST3=0b1    VEXDEST210=0b111

KMOVB inum=9563  iform_input=KMOVB_MEMu8_MASKmskw_AVX512  isa_set=AVX512DQ_KOPB pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    1 VEX_PREFIX=1 MAP=1 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=0 VEXDEST3=0b1    VEXDEST210=0b111

KMOVD inum=9568  iform_input=KMOVD_MEMu32_MASKmskw_AVX512  isa_set=AVX512BW_KOPD pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    1 VEX_PREFIX=1 MAP=1 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=1 VEXDEST3=0b1    VEXDEST210=0b111

KMOVQ inum=9575  iform_input=KMOVQ_MEMu64_MASKmskw_AVX512  isa_set=AVX512BW_KOPQ pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 0    1 VEX_PREFIX=0 MAP=1 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=1 VEXDEST3=0b1    VEXDEST210=0b111

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPGATHERQQ inum 6300 -- already fine
	SKIPPING VPGATHERQQ inum 6301 -- already fine
	SKIPPING VPGATHERQD inum 6302 -- already fine
	SKIPPING VPGATHERQD inum 6303 -- already fine
	REARRANGE needs to juggle: KMOVW inum 7724
	REARRANGE one pattern worked for KMOVW inum 7724
	REARRANGE needs to juggle: KMOVB inum 9563
	REARRANGE one pattern worked for KMOVB inum 9563
	REARRANGE needs to juggle: KMOVD inum 9568
	REARRANGE one pattern worked for KMOVD inum 9568
	REARRANGE needs to juggle: KMOVQ inum 9575
	REARRANGE one pattern worked for KMOVQ inum 9575
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VGATHERDPD inum=6288  iform_input=VGATHERDPD_YMMf64_MEMf64_YMMi64_VL256  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

VGATHERDPD inum=6289  iform_input=VGATHERDPD_XMMf64_MEMf64_XMMi64_VL128  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

VGATHERDPS inum=6290  iform_input=VGATHERDPS_YMMf32_MEMf32_YMMi32_VL256  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n RM=4 VMODRM_YMM()    EASZ!=1

VGATHERDPS inum=6291  iform_input=VGATHERDPS_XMMf32_MEMf32_XMMi32_VL128  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

KMOVW inum=7725  iform_input=KMOVW_MASKmskw_GPR32u32_AVX512  isa_set=AVX512F_KOPW pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVB inum=9564  iform_input=KMOVB_MASKmskw_GPR32u32_AVX512  isa_set=AVX512DQ_KOPB pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVD inum=9569  iform_input=KMOVD_MASKmskw_GPR32u32_AVX512  isa_set=AVX512BW_KOPD pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 MODE=2 VEXDEST3=0b1    VEXDEST210=0b111

KMOVD inum=9570  iform_input=KMOVD_MASKmskw_GPR32u32_AVX512  isa_set=AVX512BW_KOPD pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVQ inum=9576  iform_input=KMOVQ_MASKmskw_GPR64u64_AVX512  isa_set=AVX512BW_KOPQ pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=1 MODE=2 VEXDEST3=0b1    VEXDEST210=0b111

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VGATHERDPD inum 6288 -- already fine
	SKIPPING VGATHERDPD inum 6289 -- already fine
	SKIPPING VGATHERDPS inum 6290 -- already fine
	SKIPPING VGATHERDPS inum 6291 -- already fine
	REARRANGE needs to juggle: KMOVW inum 7725
	REARRANGE one pattern worked for KMOVW inum 7725
	REARRANGE needs to juggle: KMOVB inum 9564
	REARRANGE one pattern worked for KMOVB inum 9564
	REARRANGE needs to juggle: KMOVD inum 9569
	REARRANGE one pattern worked for KMOVD inum 9569
	REARRANGE needs to juggle: KMOVD inum 9570
	REARRANGE one pattern worked for KMOVD inum 9570
	REARRANGE needs to juggle: KMOVQ inum 9576
	REARRANGE one pattern worked for KMOVQ inum 9576
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 21
Others: 
KMOVD inum=9569  iform_input=KMOVD_MASKmskw_GPR32u32_AVX512  isa_set=AVX512BW_KOPD pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VL=0 VEX_PREFIX=2 MAP=1    1 1 MOD=3 r    r r n n    n REXW=0 MODE=2 VEXDEST3=0b1    VEXDEST210=0b111

KMOVD inum=9570  iform_input=KMOVD_MASKmskw_GPR32u32_AVX512  isa_set=AVX512BW_KOPD pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VL=0 VEX_PREFIX=2 MAP=1    1 1 MOD=3 r    r r n n    n MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVQ inum=9576  iform_input=KMOVQ_MASKmskw_GPR64u64_AVX512  isa_set=AVX512BW_KOPQ pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    0 VL=0 VEX_PREFIX=2 MAP=1    1 1 MOD=3 r    r r n n    n REXW=1 MODE=2 VEXDEST3=0b1    VEXDEST210=0b111

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING KMOVD inum 9569 -- already fine
	REARRANGE needs to juggle: KMOVD inum 9570
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MODE
	REARRANGE needs to juggle: KMOVD inum 9569
	REARRANGE one pattern worked for KMOVD inum 9569
	SKIPPING KMOVD inum 9570 -- already fine
	REARRANGE needs to juggle: KMOVQ inum 9576
	REARRANGE one pattern worked for KMOVQ inum 9576
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 21
FUNKY SPOT: bitpos 9
Others: 
VGATHERQPD inum=6292  iform_input=VGATHERQPD_YMMf64_MEMf64_YMMi64_VL256  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VL=1 VEX_PREFIX=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n RM=4 VMODRM_YMM()    EASZ!=1

VGATHERQPD inum=6293  iform_input=VGATHERQPD_XMMf64_MEMf64_XMMi64_VL128  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VL=0 VEX_PREFIX=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

VGATHERQPS inum=6294  iform_input=VGATHERQPS_XMMf32_MEMf32_XMMi32_VL256  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n RM=4 VMODRM_YMM()    EASZ!=1

VGATHERQPS inum=6295  iform_input=VGATHERQPS_XMMf32_MEMf32_XMMi32_VL128  isa_set=AVX2GATHER pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n RM=4 VMODRM_XMM()    EASZ!=1

KMOVW inum=7726  iform_input=KMOVW_GPR32u32_MASKmskw_AVX512  isa_set=AVX512F_KOPW pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVB inum=9565  iform_input=KMOVB_GPR32u32_MASKmskw_AVX512  isa_set=AVX512DQ_KOPB pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVD inum=9571  iform_input=KMOVD_GPR32u32_MASKmskw_AVX512  isa_set=AVX512BW_KOPD pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 MODE=2 VEXDEST3=0b1    VEXDEST210=0b111

KMOVD inum=9572  iform_input=KMOVD_GPR32u32_MASKmskw_AVX512  isa_set=AVX512BW_KOPD pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVQ inum=9577  iform_input=KMOVQ_GPR64u64_MASKmskw_AVX512  isa_set=AVX512BW_KOPQ pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VEX_PREFIX=2 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=1 MODE=2 VEXDEST3=0b1    VEXDEST210=0b111

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VGATHERQPD inum 6292 -- already fine
	SKIPPING VGATHERQPD inum 6293 -- already fine
	SKIPPING VGATHERQPS inum 6294 -- already fine
	SKIPPING VGATHERQPS inum 6295 -- already fine
	REARRANGE needs to juggle: KMOVW inum 7726
	REARRANGE one pattern worked for KMOVW inum 7726
	REARRANGE needs to juggle: KMOVB inum 9565
	REARRANGE one pattern worked for KMOVB inum 9565
	REARRANGE needs to juggle: KMOVD inum 9571
	REARRANGE one pattern worked for KMOVD inum 9571
	REARRANGE needs to juggle: KMOVD inum 9572
	REARRANGE one pattern worked for KMOVD inum 9572
	REARRANGE needs to juggle: KMOVQ inum 9577
	REARRANGE one pattern worked for KMOVQ inum 9577
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 21
Others: 
KMOVD inum=9571  iform_input=KMOVD_GPR32u32_MASKmskw_AVX512  isa_set=AVX512BW_KOPD pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VL=0 VEX_PREFIX=2 MAP=1    1 1 MOD=3 r    r r n n    n REXW=0 MODE=2 VEXDEST3=0b1    VEXDEST210=0b111

KMOVD inum=9572  iform_input=KMOVD_GPR32u32_MASKmskw_AVX512  isa_set=AVX512BW_KOPD pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VL=0 VEX_PREFIX=2 MAP=1    1 1 MOD=3 r    r r n n    n MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111   

KMOVQ inum=9577  iform_input=KMOVQ_GPR64u64_MASKmskw_AVX512  isa_set=AVX512BW_KOPQ pattern len=25
  ipattern: VEXVALID=1 1 0 0    1 0 0 1    1 VL=0 VEX_PREFIX=2 MAP=1    1 1 MOD=3 r    r r n n    n REXW=1 MODE=2 VEXDEST3=0b1    VEXDEST210=0b111

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING KMOVD inum 9571 -- already fine
	REARRANGE needs to juggle: KMOVD inum 9572
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MODE
	REARRANGE needs to juggle: KMOVD inum 9571
	REARRANGE one pattern worked for KMOVD inum 9571
	SKIPPING KMOVD inum 9572 -- already fine
	REARRANGE needs to juggle: KMOVQ inum 9577
	REARRANGE one pattern worked for KMOVQ inum 9577
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 21
FUNKY SPOT: bitpos 9
Others: 
VFMADD132PD inum=6096  isa_set=FMA pattern len=23
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n MODRM()

VFMADD132PD inum=6097  isa_set=FMA pattern len=22
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=1 1 1 MOD=3    r r r n    n n

VFMADD132PD inum=6098  isa_set=FMA pattern len=23
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=1 m m MOD!=3    r r r n    n n MODRM()

VFMADD132PD inum=6099  isa_set=FMA pattern len=22
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=1 1 1 MOD=3    r r r n    n n

VFMADD132PS inum=6100  isa_set=FMA pattern len=23
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VFMADD132PS inum=6101  isa_set=FMA pattern len=22
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=2    REXW=0 1 1 MOD=3    r r r n    n n

VFMADD132PS inum=6102  isa_set=FMA pattern len=23
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 m m MOD!=3    r r r n    n n MODRM()

VFMADD132PS inum=6103  isa_set=FMA pattern len=22
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=2    REXW=0 1 1 MOD=3    r r r n    n n

KORTESTW inum=7728  iform_input=KORTESTW_MASKmskw_MASKmskw_AVX512  isa_set=AVX512F_KOPW pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111   

KORTESTB inum=9584  iform_input=KORTESTB_MASKmskw_MASKmskw_AVX512  isa_set=AVX512DQ_KOPB pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111   

KORTESTD inum=9585  iform_input=KORTESTD_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOPD pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111   

KORTESTQ inum=9586  iform_input=KORTESTQ_MASKmskw_MASKmskw_AVX512  isa_set=AVX512BW_KOPQ pattern len=24
  ipattern: VEXVALID=1 1 0 0    1 1 0 0    0 VEX_PREFIX=0 MAP=1 1    1 MOD=3 r r    r n n n    VL=0 REXW=1 VEXDEST3=0b1 VEXDEST210=0b111   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VFMADD132PD inum 6096 -- already fine
	SKIPPING VFMADD132PD inum 6097 -- already fine
	SKIPPING VFMADD132PD inum 6098 -- already fine
	SKIPPING VFMADD132PD inum 6099 -- already fine
	SKIPPING VFMADD132PS inum 6100 -- already fine
	SKIPPING VFMADD132PS inum 6101 -- already fine
	SKIPPING VFMADD132PS inum 6102 -- already fine
	SKIPPING VFMADD132PS inum 6103 -- already fine
	REARRANGE needs to juggle: KORTESTW inum 7728
	REARRANGE one pattern worked for KORTESTW inum 7728
	REARRANGE needs to juggle: KORTESTB inum 9584
	REARRANGE one pattern worked for KORTESTB inum 9584
	REARRANGE needs to juggle: KORTESTD inum 9585
	REARRANGE one pattern worked for KORTESTD inum 9585
	REARRANGE needs to juggle: KORTESTQ inum 9586
	REARRANGE one pattern worked for KORTESTQ inum 9586
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VPSRLD inum=5690  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 0 0 1    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSRLD inum=5691  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 0 0 1    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPSRLD inum=6326  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 0 0 1    0 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSRLD inum=6327  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 0 0 1    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPDPWSUD inum=10594  iform_input=VPDPWSUD_XMMi32_XMM2i16_XMM2u16  isa_set=AVX_VNNI_INT16 pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 0 0 1    0 VEX_PREFIX=3 MAP=2 1    1 MOD=3 r r    r n n n    REXW=0 VL=0

VPDPWSUD inum=10595  iform_input=VPDPWSUD_XMMi32_XMM2i16_MEM2u16  isa_set=AVX_VNNI_INT16 pattern len=23
  ipattern: VEXVALID=1 1 1 0    1 0 0 1    0 VEX_PREFIX=3 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() REXW=0 VL=0

VPDPWSUD inum=10596  iform_input=VPDPWSUD_YMMi32_YMM2i16_YMM2u16  isa_set=AVX_VNNI_INT16 pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 0 0 1    0 VEX_PREFIX=3 MAP=2 1    1 MOD=3 r r    r n n n    REXW=0 VL=1

VPDPWSUD inum=10597  iform_input=VPDPWSUD_YMMi32_YMM2i16_MEM2u16  isa_set=AVX_VNNI_INT16 pattern len=23
  ipattern: VEXVALID=1 1 1 0    1 0 0 1    0 VEX_PREFIX=3 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() REXW=0 VL=1

VPDPWUSD inum=10602  iform_input=VPDPWUSD_XMMi32_XMM2u16_XMM2i16  isa_set=AVX_VNNI_INT16 pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 0 0 1    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    REXW=0 VL=0

VPDPWUSD inum=10603  iform_input=VPDPWUSD_XMMi32_XMM2u16_MEM2i16  isa_set=AVX_VNNI_INT16 pattern len=23
  ipattern: VEXVALID=1 1 1 0    1 0 0 1    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() REXW=0 VL=0

VPDPWUSD inum=10604  iform_input=VPDPWUSD_YMMi32_YMM2u16_YMM2i16  isa_set=AVX_VNNI_INT16 pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 0 0 1    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    REXW=0 VL=1

VPDPWUSD inum=10605  iform_input=VPDPWUSD_YMMi32_YMM2u16_MEM2i16  isa_set=AVX_VNNI_INT16 pattern len=23
  ipattern: VEXVALID=1 1 1 0    1 0 0 1    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() REXW=0 VL=1

VPDPWUUD inum=10610  iform_input=VPDPWUUD_XMMu32_XMM2u16_XMM2u16  isa_set=AVX_VNNI_INT16 pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 0 0 1    0 VEX_PREFIX=0 MAP=2 1    1 MOD=3 r r    r n n n    REXW=0 VL=0

VPDPWUUD inum=10611  iform_input=VPDPWUUD_XMMu32_XMM2u16_MEM2u16  isa_set=AVX_VNNI_INT16 pattern len=23
  ipattern: VEXVALID=1 1 1 0    1 0 0 1    0 VEX_PREFIX=0 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() REXW=0 VL=0

VPDPWUUD inum=10612  iform_input=VPDPWUUD_YMMu32_YMM2u16_YMM2u16  isa_set=AVX_VNNI_INT16 pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 0 0 1    0 VEX_PREFIX=0 MAP=2 1    1 MOD=3 r r    r n n n    REXW=0 VL=1

VPDPWUUD inum=10613  iform_input=VPDPWUUD_YMMu32_YMM2u16_MEM2u16  isa_set=AVX_VNNI_INT16 pattern len=23
  ipattern: VEXVALID=1 1 1 0    1 0 0 1    0 VEX_PREFIX=0 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() REXW=0 VL=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPSRLD inum 5690 -- already fine
	SKIPPING VPSRLD inum 5691 -- already fine
	SKIPPING VPSRLD inum 6326 -- already fine
	SKIPPING VPSRLD inum 6327 -- already fine
	REARRANGE needs to juggle: VPDPWSUD inum 10594
	REARRANGE one pattern worked for VPDPWSUD inum 10594
	REARRANGE needs to juggle: VPDPWSUD inum 10595
	REARRANGE one pattern worked for VPDPWSUD inum 10595
	REARRANGE needs to juggle: VPDPWSUD inum 10596
	REARRANGE one pattern worked for VPDPWSUD inum 10596
	REARRANGE needs to juggle: VPDPWSUD inum 10597
	REARRANGE one pattern worked for VPDPWSUD inum 10597
	REARRANGE needs to juggle: VPDPWUSD inum 10602
	REARRANGE one pattern worked for VPDPWUSD inum 10602
	REARRANGE needs to juggle: VPDPWUSD inum 10603
	REARRANGE one pattern worked for VPDPWUSD inum 10603
	REARRANGE needs to juggle: VPDPWUSD inum 10604
	REARRANGE one pattern worked for VPDPWUSD inum 10604
	REARRANGE needs to juggle: VPDPWUSD inum 10605
	REARRANGE one pattern worked for VPDPWUSD inum 10605
	REARRANGE needs to juggle: VPDPWUUD inum 10610
	REARRANGE one pattern worked for VPDPWUUD inum 10610
	REARRANGE needs to juggle: VPDPWUUD inum 10611
	REARRANGE one pattern worked for VPDPWUUD inum 10611
	REARRANGE needs to juggle: VPDPWUUD inum 10612
	REARRANGE one pattern worked for VPDPWUUD inum 10612
	REARRANGE needs to juggle: VPDPWUUD inum 10613
	REARRANGE one pattern worked for VPDPWUUD inum 10613
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VPSRLQ inum=5692  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 0 0 1    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSRLQ inum=5693  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 0 0 1    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPSRLQ inum=6328  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 0 0 1    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSRLQ inum=6329  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 0 0 1    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPDPWSUDS inum=10598  iform_input=VPDPWSUDS_XMMi32_XMM2i16_XMM2u16  isa_set=AVX_VNNI_INT16 pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 0 0 1    1 VEX_PREFIX=3 MAP=2 1    1 MOD=3 r r    r n n n    REXW=0 VL=0

VPDPWSUDS inum=10599  iform_input=VPDPWSUDS_XMMi32_XMM2i16_MEM2u16  isa_set=AVX_VNNI_INT16 pattern len=23
  ipattern: VEXVALID=1 1 1 0    1 0 0 1    1 VEX_PREFIX=3 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() REXW=0 VL=0

VPDPWSUDS inum=10600  iform_input=VPDPWSUDS_YMMi32_YMM2i16_YMM2u16  isa_set=AVX_VNNI_INT16 pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 0 0 1    1 VEX_PREFIX=3 MAP=2 1    1 MOD=3 r r    r n n n    REXW=0 VL=1

VPDPWSUDS inum=10601  iform_input=VPDPWSUDS_YMMi32_YMM2i16_MEM2u16  isa_set=AVX_VNNI_INT16 pattern len=23
  ipattern: VEXVALID=1 1 1 0    1 0 0 1    1 VEX_PREFIX=3 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() REXW=0 VL=1

VPDPWUSDS inum=10606  iform_input=VPDPWUSDS_XMMi32_XMM2u16_XMM2i16  isa_set=AVX_VNNI_INT16 pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 0 0 1    1 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    REXW=0 VL=0

VPDPWUSDS inum=10607  iform_input=VPDPWUSDS_XMMi32_XMM2u16_MEM2i16  isa_set=AVX_VNNI_INT16 pattern len=23
  ipattern: VEXVALID=1 1 1 0    1 0 0 1    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() REXW=0 VL=0

VPDPWUSDS inum=10608  iform_input=VPDPWUSDS_YMMi32_YMM2u16_YMM2i16  isa_set=AVX_VNNI_INT16 pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 0 0 1    1 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    REXW=0 VL=1

VPDPWUSDS inum=10609  iform_input=VPDPWUSDS_YMMi32_YMM2u16_MEM2i16  isa_set=AVX_VNNI_INT16 pattern len=23
  ipattern: VEXVALID=1 1 1 0    1 0 0 1    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() REXW=0 VL=1

VPDPWUUDS inum=10614  iform_input=VPDPWUUDS_XMMu32_XMM2u16_XMM2u16  isa_set=AVX_VNNI_INT16 pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 0 0 1    1 VEX_PREFIX=0 MAP=2 1    1 MOD=3 r r    r n n n    REXW=0 VL=0

VPDPWUUDS inum=10615  iform_input=VPDPWUUDS_XMMu32_XMM2u16_MEM2u16  isa_set=AVX_VNNI_INT16 pattern len=23
  ipattern: VEXVALID=1 1 1 0    1 0 0 1    1 VEX_PREFIX=0 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() REXW=0 VL=0

VPDPWUUDS inum=10616  iform_input=VPDPWUUDS_YMMu32_YMM2u16_YMM2u16  isa_set=AVX_VNNI_INT16 pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 0 0 1    1 VEX_PREFIX=0 MAP=2 1    1 MOD=3 r r    r n n n    REXW=0 VL=1

VPDPWUUDS inum=10617  iform_input=VPDPWUUDS_YMMu32_YMM2u16_MEM2u16  isa_set=AVX_VNNI_INT16 pattern len=23
  ipattern: VEXVALID=1 1 1 0    1 0 0 1    1 VEX_PREFIX=0 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() REXW=0 VL=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPSRLQ inum 5692 -- already fine
	SKIPPING VPSRLQ inum 5693 -- already fine
	SKIPPING VPSRLQ inum 6328 -- already fine
	SKIPPING VPSRLQ inum 6329 -- already fine
	REARRANGE needs to juggle: VPDPWSUDS inum 10598
	REARRANGE one pattern worked for VPDPWSUDS inum 10598
	REARRANGE needs to juggle: VPDPWSUDS inum 10599
	REARRANGE one pattern worked for VPDPWSUDS inum 10599
	REARRANGE needs to juggle: VPDPWSUDS inum 10600
	REARRANGE one pattern worked for VPDPWSUDS inum 10600
	REARRANGE needs to juggle: VPDPWSUDS inum 10601
	REARRANGE one pattern worked for VPDPWSUDS inum 10601
	REARRANGE needs to juggle: VPDPWUSDS inum 10606
	REARRANGE one pattern worked for VPDPWUSDS inum 10606
	REARRANGE needs to juggle: VPDPWUSDS inum 10607
	REARRANGE one pattern worked for VPDPWUSDS inum 10607
	REARRANGE needs to juggle: VPDPWUSDS inum 10608
	REARRANGE one pattern worked for VPDPWUSDS inum 10608
	REARRANGE needs to juggle: VPDPWUSDS inum 10609
	REARRANGE one pattern worked for VPDPWUSDS inum 10609
	REARRANGE needs to juggle: VPDPWUUDS inum 10614
	REARRANGE one pattern worked for VPDPWUUDS inum 10614
	REARRANGE needs to juggle: VPDPWUUDS inum 10615
	REARRANGE one pattern worked for VPDPWUUDS inum 10615
	REARRANGE needs to juggle: VPDPWUUDS inum 10616
	REARRANGE one pattern worked for VPDPWUUDS inum 10616
	REARRANGE needs to juggle: VPDPWUUDS inum 10617
	REARRANGE one pattern worked for VPDPWUUDS inum 10617
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VPMINUB inum=5912  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 0 1    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPMINUB inum=5913  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 0 1    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPMINUB inum=6404  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 0 1    0 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPMINUB inum=6405  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 0 1    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VSM3MSG1 inum=10621  iform_input=VSM3MSG1_XMMu32_XMMu32_XMMu32  isa_set=SM3 pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 0 1    0 VEX_PREFIX=0 MAP=2 1    1 MOD=3 r r    r n n n    REXW=0 VL=0

VSM3MSG1 inum=10622  iform_input=VSM3MSG1_XMMu32_XMMu32_MEMu32  isa_set=SM3 pattern len=23
  ipattern: VEXVALID=1 1 1 0    1 1 0 1    0 VEX_PREFIX=0 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() REXW=0 VL=0

VSM3MSG2 inum=10623  iform_input=VSM3MSG2_XMMu32_XMMu32_XMMu32  isa_set=SM3 pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 0 1    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    REXW=0 VL=0

VSM3MSG2 inum=10624  iform_input=VSM3MSG2_XMMu32_XMMu32_MEMu32  isa_set=SM3 pattern len=23
  ipattern: VEXVALID=1 1 1 0    1 1 0 1    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() REXW=0 VL=0

VSM4KEY4 inum=10627  iform_input=VSM4KEY4_XMMu32_XMMu32_XMMu32  isa_set=SM4 pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 0 1    0 VEX_PREFIX=3 MAP=2 1    1 MOD=3 r r    r n n n    REXW=0 VL=0

VSM4KEY4 inum=10628  iform_input=VSM4KEY4_XMMu32_XMMu32_MEMu32  isa_set=SM4 pattern len=23
  ipattern: VEXVALID=1 1 1 0    1 1 0 1    0 VEX_PREFIX=3 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() REXW=0 VL=0

VSM4KEY4 inum=10629  iform_input=VSM4KEY4_YMMu32_YMMu32_YMMu32  isa_set=SM4 pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 0 1    0 VEX_PREFIX=3 MAP=2 1    1 MOD=3 r r    r n n n    REXW=0 VL=1

VSM4KEY4 inum=10630  iform_input=VSM4KEY4_YMMu32_YMMu32_MEMu32  isa_set=SM4 pattern len=23
  ipattern: VEXVALID=1 1 1 0    1 1 0 1    0 VEX_PREFIX=3 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() REXW=0 VL=1

VSM4RNDS4 inum=10631  iform_input=VSM4RNDS4_XMMu32_XMMu32_XMMu32  isa_set=SM4 pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 0 1    0 VEX_PREFIX=2 MAP=2 1    1 MOD=3 r r    r n n n    REXW=0 VL=0

VSM4RNDS4 inum=10632  iform_input=VSM4RNDS4_XMMu32_XMMu32_MEMu32  isa_set=SM4 pattern len=23
  ipattern: VEXVALID=1 1 1 0    1 1 0 1    0 VEX_PREFIX=2 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() REXW=0 VL=0

VSM4RNDS4 inum=10633  iform_input=VSM4RNDS4_YMMu32_YMMu32_YMMu32  isa_set=SM4 pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 0 1    0 VEX_PREFIX=2 MAP=2 1    1 MOD=3 r r    r n n n    REXW=0 VL=1

VSM4RNDS4 inum=10634  iform_input=VSM4RNDS4_YMMu32_YMMu32_MEMu32  isa_set=SM4 pattern len=23
  ipattern: VEXVALID=1 1 1 0    1 1 0 1    0 VEX_PREFIX=2 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() REXW=0 VL=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPMINUB inum 5912 -- already fine
	SKIPPING VPMINUB inum 5913 -- already fine
	SKIPPING VPMINUB inum 6404 -- already fine
	SKIPPING VPMINUB inum 6405 -- already fine
	REARRANGE needs to juggle: VSM3MSG1 inum 10621
	REARRANGE one pattern worked for VSM3MSG1 inum 10621
	REARRANGE needs to juggle: VSM3MSG1 inum 10622
	REARRANGE one pattern worked for VSM3MSG1 inum 10622
	REARRANGE needs to juggle: VSM3MSG2 inum 10623
	REARRANGE one pattern worked for VSM3MSG2 inum 10623
	REARRANGE needs to juggle: VSM3MSG2 inum 10624
	REARRANGE one pattern worked for VSM3MSG2 inum 10624
	REARRANGE needs to juggle: VSM4KEY4 inum 10627
	REARRANGE one pattern worked for VSM4KEY4 inum 10627
	REARRANGE needs to juggle: VSM4KEY4 inum 10628
	REARRANGE one pattern worked for VSM4KEY4 inum 10628
	REARRANGE needs to juggle: VSM4KEY4 inum 10629
	REARRANGE one pattern worked for VSM4KEY4 inum 10629
	REARRANGE needs to juggle: VSM4KEY4 inum 10630
	REARRANGE one pattern worked for VSM4KEY4 inum 10630
	REARRANGE needs to juggle: VSM4RNDS4 inum 10631
	REARRANGE one pattern worked for VSM4RNDS4 inum 10631
	REARRANGE needs to juggle: VSM4RNDS4 inum 10632
	REARRANGE one pattern worked for VSM4RNDS4 inum 10632
	REARRANGE needs to juggle: VSM4RNDS4 inum 10633
	REARRANGE one pattern worked for VSM4RNDS4 inum 10633
	REARRANGE needs to juggle: VSM4RNDS4 inum 10634
	REARRANGE one pattern worked for VSM4RNDS4 inum 10634
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VPADDUSB inum=5710  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPADDUSB inum=5711  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPADDUSB inum=6346  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPADDUSB inum=6347  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VAESENC inum=6076  isa_set=AVXAES pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=0

VAESENC inum=6077  isa_set=AVXAES pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0

VAESENC inum=9831  iform_input=VAESENC_YMMu128_YMMu128_YMMu128  isa_set=VAES pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=1

VAESENC inum=9832  iform_input=VAESENC_YMMu128_YMMu128_MEMu128  isa_set=VAES pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPADDUSB inum 5710 -- already fine
	SKIPPING VPADDUSB inum 5711 -- already fine
	SKIPPING VPADDUSB inum 6346 -- already fine
	SKIPPING VPADDUSB inum 6347 -- already fine
	REARRANGE needs to juggle: VAESENC inum 6076
	REARRANGE one pattern worked for VAESENC inum 6076
	REARRANGE needs to juggle: VAESENC inum 6077
	REARRANGE one pattern worked for VAESENC inum 6077
	REARRANGE needs to juggle: VAESENC inum 9831
	REARRANGE one pattern worked for VAESENC inum 9831
	REARRANGE needs to juggle: VAESENC inum 9832
	REARRANGE one pattern worked for VAESENC inum 9832
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VPADDUSW inum=5712  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPADDUSW inum=5713  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPADDUSW inum=6348  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPADDUSW inum=6349  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VAESENCLAST inum=6078  isa_set=AVXAES pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    1 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=0

VAESENCLAST inum=6079  isa_set=AVXAES pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0

VAESENCLAST inum=9833  iform_input=VAESENCLAST_YMMu128_YMMu128_YMMu128  isa_set=VAES pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    1 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=1

VAESENCLAST inum=9834  iform_input=VAESENCLAST_YMMu128_YMMu128_MEMu128  isa_set=VAES pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 0    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPADDUSW inum 5712 -- already fine
	SKIPPING VPADDUSW inum 5713 -- already fine
	SKIPPING VPADDUSW inum 6348 -- already fine
	SKIPPING VPADDUSW inum 6349 -- already fine
	REARRANGE needs to juggle: VAESENCLAST inum 6078
	REARRANGE one pattern worked for VAESENCLAST inum 6078
	REARRANGE needs to juggle: VAESENCLAST inum 6079
	REARRANGE one pattern worked for VAESENCLAST inum 6079
	REARRANGE needs to juggle: VAESENCLAST inum 9833
	REARRANGE one pattern worked for VAESENCLAST inum 9833
	REARRANGE needs to juggle: VAESENCLAST inum 9834
	REARRANGE one pattern worked for VAESENCLAST inum 9834
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VPMAXUB inum=5900  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPMAXUB inum=5901  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPMAXUB inum=6392  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPMAXUB inum=6393  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VAESDEC inum=6080  isa_set=AVXAES pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=0

VAESDEC inum=6081  isa_set=AVXAES pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0

VAESDEC inum=9827  iform_input=VAESDEC_YMMu128_YMMu128_YMMu128  isa_set=VAES pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=1

VAESDEC inum=9828  iform_input=VAESDEC_YMMu128_YMMu128_MEMu128  isa_set=VAES pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=1

VSM3RNDS2 inum=10625  iform_input=VSM3RNDS2_XMMu32_XMMu32_XMMu32_IMM8  isa_set=SM3 pattern len=23
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VEX_PREFIX=1 MAP=3 1    1 MOD=3 r r    r n n n    REXW=0 VL=0 UIMM8()

VSM3RNDS2 inum=10626  iform_input=VSM3RNDS2_XMMu32_XMMu32_MEMu32_IMM8  isa_set=SM3 pattern len=24
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    0 VEX_PREFIX=1 MAP=3 m    m MOD!=3 r r    r n n n    MODRM() REXW=0 VL=0 UIMM8()   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPMAXUB inum 5900 -- already fine
	SKIPPING VPMAXUB inum 5901 -- already fine
	SKIPPING VPMAXUB inum 6392 -- already fine
	SKIPPING VPMAXUB inum 6393 -- already fine
	REARRANGE needs to juggle: VAESDEC inum 6080
	REARRANGE one pattern worked for VAESDEC inum 6080
	REARRANGE needs to juggle: VAESDEC inum 6081
	REARRANGE one pattern worked for VAESDEC inum 6081
	REARRANGE needs to juggle: VAESDEC inum 9827
	REARRANGE one pattern worked for VAESDEC inum 9827
	REARRANGE needs to juggle: VAESDEC inum 9828
	REARRANGE one pattern worked for VAESDEC inum 9828
	REARRANGE needs to juggle: VSM3RNDS2 inum 10625
	REARRANGE one pattern worked for VSM3RNDS2 inum 10625
	REARRANGE needs to juggle: VSM3RNDS2 inum 10626
	REARRANGE one pattern worked for VSM3RNDS2 inum 10626
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VPANDN inum=5656  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPANDN inum=5657  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPANDN inum=6476  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPANDN inum=6477  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VAESKEYGENASSIST inum=6074  isa_set=AVXAES pattern len=24
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VL=0 VEX_PREFIX=1 MAP=3    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n UIMM8()   

VAESKEYGENASSIST inum=6075  isa_set=AVXAES pattern len=25
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VL=0 VEX_PREFIX=1 MAP=3    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()    UIMM8()

VAESDECLAST inum=6082  isa_set=AVXAES pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=0

VAESDECLAST inum=6083  isa_set=AVXAES pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0

VAESDECLAST inum=9829  iform_input=VAESDECLAST_YMMu128_YMMu128_YMMu128  isa_set=VAES pattern len=21
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VEX_PREFIX=1 MAP=2 1    1 MOD=3 r r    r n n n    VL=1

VAESDECLAST inum=9830  iform_input=VAESDECLAST_YMMu128_YMMu128_MEMu128  isa_set=VAES pattern len=22
  ipattern: VEXVALID=1 1 1 0    1 1 1 1    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=1

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPANDN inum 5656 -- already fine
	SKIPPING VPANDN inum 5657 -- already fine
	SKIPPING VPANDN inum 6476 -- already fine
	SKIPPING VPANDN inum 6477 -- already fine
	SKIPPING VAESKEYGENASSIST inum 6074 -- already fine
	SKIPPING VAESKEYGENASSIST inum 6075 -- already fine
	REARRANGE needs to juggle: VAESDECLAST inum 6082
	REARRANGE one pattern worked for VAESDECLAST inum 6082
	REARRANGE needs to juggle: VAESDECLAST inum 6083
	REARRANGE one pattern worked for VAESDECLAST inum 6083
	REARRANGE needs to juggle: VAESDECLAST inum 9829
	REARRANGE one pattern worked for VAESDECLAST inum 9829
	REARRANGE needs to juggle: VAESDECLAST inum 9830
	REARRANGE one pattern worked for VAESDECLAST inum 9830
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VPAVGB inum=5714  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 1    0 0 0 0    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPAVGB inum=5715  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 1    0 0 0 0    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPAVGB inum=6350  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    0 0 0 0    0 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPAVGB inum=6351  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 1    0 0 0 0    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

CMPOXADD inum=10579  iform_input=CMPOXADD_MEMu32_GPR32u32_GPR32u32  isa_set=CMPCCXADD pattern len=24
  ipattern: VEXVALID=1 1 1 1    0 0 0 0    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=0 MODE=2   

CMPOXADD inum=10580  iform_input=CMPOXADD_MEMu64_GPR64u64_GPR64u64  isa_set=CMPCCXADD pattern len=24
  ipattern: VEXVALID=1 1 1 1    0 0 0 0    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=1 MODE=2   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPAVGB inum 5714 -- already fine
	SKIPPING VPAVGB inum 5715 -- already fine
	SKIPPING VPAVGB inum 6350 -- already fine
	SKIPPING VPAVGB inum 6351 -- already fine
	REARRANGE needs to juggle: CMPOXADD inum 10579
	REARRANGE one pattern worked for CMPOXADD inum 10579
	REARRANGE needs to juggle: CMPOXADD inum 10580
	REARRANGE one pattern worked for CMPOXADD inum 10580
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VPSRAW inum=5694  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 1    0 0 0 0    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSRAW inum=5695  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 1    0 0 0 0    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPSRAW inum=6330  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    0 0 0 0    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSRAW inum=6331  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 1    0 0 0 0    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

CMPNOXADD inum=10571  iform_input=CMPNOXADD_MEMu32_GPR32u32_GPR32u32  isa_set=CMPCCXADD pattern len=24
  ipattern: VEXVALID=1 1 1 1    0 0 0 0    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=0 MODE=2   

CMPNOXADD inum=10572  iform_input=CMPNOXADD_MEMu64_GPR64u64_GPR64u64  isa_set=CMPCCXADD pattern len=24
  ipattern: VEXVALID=1 1 1 1    0 0 0 0    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=1 MODE=2   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPSRAW inum 5694 -- already fine
	SKIPPING VPSRAW inum 5695 -- already fine
	SKIPPING VPSRAW inum 6330 -- already fine
	SKIPPING VPSRAW inum 6331 -- already fine
	REARRANGE needs to juggle: CMPNOXADD inum 10571
	REARRANGE one pattern worked for CMPNOXADD inum 10571
	REARRANGE needs to juggle: CMPNOXADD inum 10572
	REARRANGE one pattern worked for CMPNOXADD inum 10572
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VPSRAD inum=5696  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 1    0 0 0 1    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSRAD inum=5697  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 1    0 0 0 1    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPSRAD inum=6332  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    0 0 0 1    0 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSRAD inum=6333  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 1    0 0 0 1    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

CMPBXADD inum=10557  iform_input=CMPBXADD_MEMu32_GPR32u32_GPR32u32  isa_set=CMPCCXADD pattern len=24
  ipattern: VEXVALID=1 1 1 1    0 0 0 1    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=0 MODE=2   

CMPBXADD inum=10558  iform_input=CMPBXADD_MEMu64_GPR64u64_GPR64u64  isa_set=CMPCCXADD pattern len=24
  ipattern: VEXVALID=1 1 1 1    0 0 0 1    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=1 MODE=2   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPSRAD inum 5696 -- already fine
	SKIPPING VPSRAD inum 5697 -- already fine
	SKIPPING VPSRAD inum 6332 -- already fine
	SKIPPING VPSRAD inum 6333 -- already fine
	REARRANGE needs to juggle: CMPBXADD inum 10557
	REARRANGE one pattern worked for CMPBXADD inum 10557
	REARRANGE needs to juggle: CMPBXADD inum 10558
	REARRANGE one pattern worked for CMPBXADD inum 10558
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VPAVGW inum=5716  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 1    0 0 0 1    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPAVGW inum=5717  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 1    0 0 0 1    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPAVGW inum=6352  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    0 0 0 1    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPAVGW inum=6353  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 1    0 0 0 1    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

CMPNBXADD inum=10565  iform_input=CMPNBXADD_MEMu32_GPR32u32_GPR32u32  isa_set=CMPCCXADD pattern len=24
  ipattern: VEXVALID=1 1 1 1    0 0 0 1    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=0 MODE=2   

CMPNBXADD inum=10566  iform_input=CMPNBXADD_MEMu64_GPR64u64_GPR64u64  isa_set=CMPCCXADD pattern len=24
  ipattern: VEXVALID=1 1 1 1    0 0 0 1    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=1 MODE=2   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPAVGW inum 5716 -- already fine
	SKIPPING VPAVGW inum 5717 -- already fine
	SKIPPING VPAVGW inum 6352 -- already fine
	SKIPPING VPAVGW inum 6353 -- already fine
	REARRANGE needs to juggle: CMPNBXADD inum 10565
	REARRANGE one pattern worked for CMPNBXADD inum 10565
	REARRANGE needs to juggle: CMPNBXADD inum 10566
	REARRANGE one pattern worked for CMPNBXADD inum 10566
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VPMULHUW inum=5746  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 1    0 0 1 0    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPMULHUW inum=5747  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 1    0 0 1 0    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPMULHUW inum=6410  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    0 0 1 0    0 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPMULHUW inum=6411  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 1    0 0 1 0    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

CMPZXADD inum=10585  iform_input=CMPZXADD_MEMu32_GPR32u32_GPR32u32  isa_set=CMPCCXADD pattern len=24
  ipattern: VEXVALID=1 1 1 1    0 0 1 0    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=0 MODE=2   

CMPZXADD inum=10586  iform_input=CMPZXADD_MEMu64_GPR64u64_GPR64u64  isa_set=CMPCCXADD pattern len=24
  ipattern: VEXVALID=1 1 1 1    0 0 1 0    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=1 MODE=2   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPMULHUW inum 5746 -- already fine
	SKIPPING VPMULHUW inum 5747 -- already fine
	SKIPPING VPMULHUW inum 6410 -- already fine
	SKIPPING VPMULHUW inum 6411 -- already fine
	REARRANGE needs to juggle: CMPZXADD inum 10585
	REARRANGE one pattern worked for CMPZXADD inum 10585
	REARRANGE needs to juggle: CMPZXADD inum 10586
	REARRANGE one pattern worked for CMPZXADD inum 10586
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VPMULHW inum=5750  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 1    0 0 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPMULHW inum=5751  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 1    0 0 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPMULHW inum=6414  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    0 0 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPMULHW inum=6415  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 1    0 0 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

CMPNZXADD inum=10577  iform_input=CMPNZXADD_MEMu32_GPR32u32_GPR32u32  isa_set=CMPCCXADD pattern len=24
  ipattern: VEXVALID=1 1 1 1    0 0 1 0    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=0 MODE=2   

CMPNZXADD inum=10578  iform_input=CMPNZXADD_MEMu64_GPR64u64_GPR64u64  isa_set=CMPCCXADD pattern len=24
  ipattern: VEXVALID=1 1 1 1    0 0 1 0    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=1 MODE=2   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPMULHW inum 5750 -- already fine
	SKIPPING VPMULHW inum 5751 -- already fine
	SKIPPING VPMULHW inum 6414 -- already fine
	SKIPPING VPMULHW inum 6415 -- already fine
	REARRANGE needs to juggle: CMPNZXADD inum 10577
	REARRANGE one pattern worked for CMPNZXADD inum 10577
	REARRANGE needs to juggle: CMPNZXADD inum 10578
	REARRANGE one pattern worked for CMPNZXADD inum 10578
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VCVTDQ2PD inum=5408  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 1 1 1    0 0 1 1    0 VL=0 VEX_PREFIX=3 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VCVTDQ2PD inum=5409  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 1 1 1    0 0 1 1    0 VL=0 VEX_PREFIX=3 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VCVTDQ2PD inum=5410  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 1 1 1    0 0 1 1    0 VL=1 VEX_PREFIX=3 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VCVTDQ2PD inum=5411  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 1 1 1    0 0 1 1    0 VL=1 VEX_PREFIX=3 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VCVTPD2DQ inum=5416  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 1 1 1    0 0 1 1    0 VL=0 VEX_PREFIX=2 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VCVTPD2DQ inum=5417  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 1 1 1    0 0 1 1    0 VL=0 VEX_PREFIX=2 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VCVTPD2DQ inum=5418  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 1 1 1    0 0 1 1    0 VL=1 VEX_PREFIX=2 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VCVTPD2DQ inum=5419  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 1 1 1    0 0 1 1    0 VL=1 VEX_PREFIX=2 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VCVTTPD2DQ inum=5420  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 1 1 1    0 0 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VCVTTPD2DQ inum=5421  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 1 1 1    0 0 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

VCVTTPD2DQ inum=5422  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 1 1 1    0 0 1 1    0 VL=1 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VCVTTPD2DQ inum=5423  isa_set=AVX pattern len=23
  ipattern: VEXVALID=1 1 1 1    0 0 1 1    0 VL=1 VEX_PREFIX=1 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 1 1    MOD=3 r r r    n n n

CMPBEXADD inum=10555  iform_input=CMPBEXADD_MEMu32_GPR32u32_GPR32u32  isa_set=CMPCCXADD pattern len=24
  ipattern: VEXVALID=1 1 1 1    0 0 1 1    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=0 MODE=2   

CMPBEXADD inum=10556  iform_input=CMPBEXADD_MEMu64_GPR64u64_GPR64u64  isa_set=CMPCCXADD pattern len=24
  ipattern: VEXVALID=1 1 1 1    0 0 1 1    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=1 MODE=2   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VCVTDQ2PD inum 5408 -- already fine
	SKIPPING VCVTDQ2PD inum 5409 -- already fine
	SKIPPING VCVTDQ2PD inum 5410 -- already fine
	SKIPPING VCVTDQ2PD inum 5411 -- already fine
	SKIPPING VCVTPD2DQ inum 5416 -- already fine
	SKIPPING VCVTPD2DQ inum 5417 -- already fine
	SKIPPING VCVTPD2DQ inum 5418 -- already fine
	SKIPPING VCVTPD2DQ inum 5419 -- already fine
	SKIPPING VCVTTPD2DQ inum 5420 -- already fine
	SKIPPING VCVTTPD2DQ inum 5421 -- already fine
	SKIPPING VCVTTPD2DQ inum 5422 -- already fine
	SKIPPING VCVTTPD2DQ inum 5423 -- already fine
	REARRANGE needs to juggle: CMPBEXADD inum 10555
	REARRANGE one pattern worked for CMPBEXADD inum 10555
	REARRANGE needs to juggle: CMPBEXADD inum 10556
	REARRANGE one pattern worked for CMPBEXADD inum 10556
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VPSUBSB inum=5770  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 1    0 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSUBSB inum=5771  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 1    0 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPSUBSB inum=6434  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    0 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSUBSB inum=6435  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 1    0 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

CMPSXADD inum=10583  iform_input=CMPSXADD_MEMu32_GPR32u32_GPR32u32  isa_set=CMPCCXADD pattern len=24
  ipattern: VEXVALID=1 1 1 1    0 1 0 0    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=0 MODE=2   

CMPSXADD inum=10584  iform_input=CMPSXADD_MEMu64_GPR64u64_GPR64u64  isa_set=CMPCCXADD pattern len=24
  ipattern: VEXVALID=1 1 1 1    0 1 0 0    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=1 MODE=2   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPSUBSB inum 5770 -- already fine
	SKIPPING VPSUBSB inum 5771 -- already fine
	SKIPPING VPSUBSB inum 6434 -- already fine
	SKIPPING VPSUBSB inum 6435 -- already fine
	REARRANGE needs to juggle: CMPSXADD inum 10583
	REARRANGE one pattern worked for CMPSXADD inum 10583
	REARRANGE needs to juggle: CMPSXADD inum 10584
	REARRANGE one pattern worked for CMPSXADD inum 10584
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VPSUBSW inum=5772  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 1    0 1 0 0    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSUBSW inum=5773  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 1    0 1 0 0    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPSUBSW inum=6436  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    0 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSUBSW inum=6437  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 1    0 1 0 0    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

CMPNSXADD inum=10575  iform_input=CMPNSXADD_MEMu32_GPR32u32_GPR32u32  isa_set=CMPCCXADD pattern len=24
  ipattern: VEXVALID=1 1 1 1    0 1 0 0    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=0 MODE=2   

CMPNSXADD inum=10576  iform_input=CMPNSXADD_MEMu64_GPR64u64_GPR64u64  isa_set=CMPCCXADD pattern len=24
  ipattern: VEXVALID=1 1 1 1    0 1 0 0    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=1 MODE=2   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPSUBSW inum 5772 -- already fine
	SKIPPING VPSUBSW inum 5773 -- already fine
	SKIPPING VPSUBSW inum 6436 -- already fine
	SKIPPING VPSUBSW inum 6437 -- already fine
	REARRANGE needs to juggle: CMPNSXADD inum 10575
	REARRANGE one pattern worked for CMPNSXADD inum 10575
	REARRANGE needs to juggle: CMPNSXADD inum 10576
	REARRANGE one pattern worked for CMPNSXADD inum 10576
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VPMINSW inum=5908  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 1    0 1 0 1    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPMINSW inum=5909  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 1    0 1 0 1    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPMINSW inum=6400  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    0 1 0 1    0 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPMINSW inum=6401  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 1    0 1 0 1    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

CMPPXADD inum=10581  iform_input=CMPPXADD_MEMu32_GPR32u32_GPR32u32  isa_set=CMPCCXADD pattern len=24
  ipattern: VEXVALID=1 1 1 1    0 1 0 1    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=0 MODE=2   

CMPPXADD inum=10582  iform_input=CMPPXADD_MEMu64_GPR64u64_GPR64u64  isa_set=CMPCCXADD pattern len=24
  ipattern: VEXVALID=1 1 1 1    0 1 0 1    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=1 MODE=2   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPMINSW inum 5908 -- already fine
	SKIPPING VPMINSW inum 5909 -- already fine
	SKIPPING VPMINSW inum 6400 -- already fine
	SKIPPING VPMINSW inum 6401 -- already fine
	REARRANGE needs to juggle: CMPPXADD inum 10581
	REARRANGE one pattern worked for CMPPXADD inum 10581
	REARRANGE needs to juggle: CMPPXADD inum 10582
	REARRANGE one pattern worked for CMPPXADD inum 10582
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VPOR inum=5652  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 1    0 1 0 1    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPOR inum=5653  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 1    0 1 0 1    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPOR inum=6472  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    0 1 0 1    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPOR inum=6473  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 1    0 1 0 1    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

CMPNPXADD inum=10573  iform_input=CMPNPXADD_MEMu32_GPR32u32_GPR32u32  isa_set=CMPCCXADD pattern len=24
  ipattern: VEXVALID=1 1 1 1    0 1 0 1    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=0 MODE=2   

CMPNPXADD inum=10574  iform_input=CMPNPXADD_MEMu64_GPR64u64_GPR64u64  isa_set=CMPCCXADD pattern len=24
  ipattern: VEXVALID=1 1 1 1    0 1 0 1    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=1 MODE=2   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPOR inum 5652 -- already fine
	SKIPPING VPOR inum 5653 -- already fine
	SKIPPING VPOR inum 6472 -- already fine
	SKIPPING VPOR inum 6473 -- already fine
	REARRANGE needs to juggle: CMPNPXADD inum 10573
	REARRANGE one pattern worked for CMPNPXADD inum 10573
	REARRANGE needs to juggle: CMPNPXADD inum 10574
	REARRANGE one pattern worked for CMPNPXADD inum 10574
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VPADDSB inum=5706  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 1    0 1 1 0    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPADDSB inum=5707  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 1    0 1 1 0    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPADDSB inum=6342  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    0 1 1 0    0 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPADDSB inum=6343  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 1    0 1 1 0    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

CMPLXADD inum=10561  iform_input=CMPLXADD_MEMu32_GPR32u32_GPR32u32  isa_set=CMPCCXADD pattern len=24
  ipattern: VEXVALID=1 1 1 1    0 1 1 0    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=0 MODE=2   

CMPLXADD inum=10562  iform_input=CMPLXADD_MEMu64_GPR64u64_GPR64u64  isa_set=CMPCCXADD pattern len=24
  ipattern: VEXVALID=1 1 1 1    0 1 1 0    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=1 MODE=2   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPADDSB inum 5706 -- already fine
	SKIPPING VPADDSB inum 5707 -- already fine
	SKIPPING VPADDSB inum 6342 -- already fine
	SKIPPING VPADDSB inum 6343 -- already fine
	REARRANGE needs to juggle: CMPLXADD inum 10561
	REARRANGE one pattern worked for CMPLXADD inum 10561
	REARRANGE needs to juggle: CMPLXADD inum 10562
	REARRANGE one pattern worked for CMPLXADD inum 10562
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VPADDSW inum=5708  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 1    0 1 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPADDSW inum=5709  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 1    0 1 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPADDSW inum=6344  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    0 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPADDSW inum=6345  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 1    0 1 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

CMPNLXADD inum=10569  iform_input=CMPNLXADD_MEMu32_GPR32u32_GPR32u32  isa_set=CMPCCXADD pattern len=24
  ipattern: VEXVALID=1 1 1 1    0 1 1 0    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=0 MODE=2   

CMPNLXADD inum=10570  iform_input=CMPNLXADD_MEMu64_GPR64u64_GPR64u64  isa_set=CMPCCXADD pattern len=24
  ipattern: VEXVALID=1 1 1 1    0 1 1 0    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=1 MODE=2   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPADDSW inum 5708 -- already fine
	SKIPPING VPADDSW inum 5709 -- already fine
	SKIPPING VPADDSW inum 6344 -- already fine
	SKIPPING VPADDSW inum 6345 -- already fine
	REARRANGE needs to juggle: CMPNLXADD inum 10569
	REARRANGE one pattern worked for CMPNLXADD inum 10569
	REARRANGE needs to juggle: CMPNLXADD inum 10570
	REARRANGE one pattern worked for CMPNLXADD inum 10570
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VPMAXSW inum=5896  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 1    0 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPMAXSW inum=5897  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 1    0 1 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPMAXSW inum=6388  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    0 1 1 1    0 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPMAXSW inum=6389  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 1    0 1 1 1    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

CMPLEXADD inum=10559  iform_input=CMPLEXADD_MEMu32_GPR32u32_GPR32u32  isa_set=CMPCCXADD pattern len=24
  ipattern: VEXVALID=1 1 1 1    0 1 1 1    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=0 MODE=2   

CMPLEXADD inum=10560  iform_input=CMPLEXADD_MEMu64_GPR64u64_GPR64u64  isa_set=CMPCCXADD pattern len=24
  ipattern: VEXVALID=1 1 1 1    0 1 1 1    0 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=1 MODE=2   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPMAXSW inum 5896 -- already fine
	SKIPPING VPMAXSW inum 5897 -- already fine
	SKIPPING VPMAXSW inum 6388 -- already fine
	SKIPPING VPMAXSW inum 6389 -- already fine
	REARRANGE needs to juggle: CMPLEXADD inum 10559
	REARRANGE one pattern worked for CMPLEXADD inum 10559
	REARRANGE needs to juggle: CMPLEXADD inum 10560
	REARRANGE one pattern worked for CMPLEXADD inum 10560
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VPXOR inum=5658  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 1    0 1 1 1    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPXOR inum=5659  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 1    0 1 1 1    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPXOR inum=6478  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    0 1 1 1    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPXOR inum=6479  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 1    0 1 1 1    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

CMPNLEXADD inum=10567  iform_input=CMPNLEXADD_MEMu32_GPR32u32_GPR32u32  isa_set=CMPCCXADD pattern len=24
  ipattern: VEXVALID=1 1 1 1    0 1 1 1    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=0 MODE=2   

CMPNLEXADD inum=10568  iform_input=CMPNLEXADD_MEMu64_GPR64u64_GPR64u64  isa_set=CMPCCXADD pattern len=24
  ipattern: VEXVALID=1 1 1 1    0 1 1 1    1 VEX_PREFIX=1 MAP=2 m    m MOD!=3 r r    r n n n    MODRM() VL=0 REXW=1 MODE=2   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPXOR inum 5658 -- already fine
	SKIPPING VPXOR inum 5659 -- already fine
	SKIPPING VPXOR inum 6478 -- already fine
	SKIPPING VPXOR inum 6479 -- already fine
	REARRANGE needs to juggle: CMPNLEXADD inum 10567
	REARRANGE one pattern worked for CMPNLEXADD inum 10567
	REARRANGE needs to juggle: CMPNLEXADD inum 10568
	REARRANGE one pattern worked for CMPNLEXADD inum 10568
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 9
Others: 
VLDDQU inum=5546  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VL=0 VEX_PREFIX=2 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

VLDDQU inum=5547  isa_set=AVX pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VL=1 VEX_PREFIX=2 MAP=1    VEXDEST3=0b1 VEXDEST210=0b111 m m    MOD!=3 r r r    n n n MODRM()   

RORX inum=6662  isa_set=BMI2 pattern len=25
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VEX_PREFIX=2 MAP=3 MODE!=2    VL=0 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n    UIMM8()

RORX inum=6663  isa_set=BMI2 pattern len=26
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VEX_PREFIX=2 MAP=3 REXW=0    MODE=2 VL=0 VEXDEST3=0b1 VEXDEST210=0b111    1 1 MOD=3 r    r r n n    n UIMM8()

RORX inum=6664  isa_set=BMI2 pattern len=26
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VEX_PREFIX=2 MAP=3 MODE!=2    VL=0 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM() UIMM8()

RORX inum=6665  isa_set=BMI2 pattern len=27
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VEX_PREFIX=2 MAP=3 REXW=0    MODE=2 VL=0 VEXDEST3=0b1 VEXDEST210=0b111    m m MOD!=3 r    r r n n    n MODRM() UIMM8()

RORX inum=6666  isa_set=BMI2 pattern len=26
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VEX_PREFIX=2 MAP=3 REXW=1    VL=0 VEXDEST3=0b1 VEXDEST210=0b111 MODE=2    1 1 MOD=3 r    r r n n    n UIMM8()

RORX inum=6667  isa_set=BMI2 pattern len=27
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VEX_PREFIX=2 MAP=3 REXW=1    VL=0 VEXDEST3=0b1 VEXDEST210=0b111 MODE=2    m m MOD!=3 r    r r n n    n MODRM() UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VLDDQU inum 5546 -- already fine
	SKIPPING VLDDQU inum 5547 -- already fine
	REARRANGE needs to juggle: RORX inum 6662
	REARRANGE one pattern worked for RORX inum 6662
	REARRANGE needs to juggle: RORX inum 6663
	REARRANGE one pattern worked for RORX inum 6663
	REARRANGE needs to juggle: RORX inum 6664
	REARRANGE one pattern worked for RORX inum 6664
	REARRANGE needs to juggle: RORX inum 6665
	REARRANGE one pattern worked for RORX inum 6665
	REARRANGE needs to juggle: RORX inum 6666
	REARRANGE one pattern worked for RORX inum 6666
	REARRANGE needs to juggle: RORX inum 6667
	REARRANGE one pattern worked for RORX inum 6667
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 12
Others: 
RORX inum=6662  isa_set=BMI2 pattern len=25
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VL=0 VEX_PREFIX=2 MAP=3    MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111 1    1 MOD=3 r r    r n n n    UIMM8()

RORX inum=6663  isa_set=BMI2 pattern len=26
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VL=0 VEX_PREFIX=2 MAP=3    REXW=0 MODE=2 VEXDEST3=0b1 VEXDEST210=0b111    1 1 MOD=3 r    r r n n    n UIMM8()

RORX inum=6664  isa_set=BMI2 pattern len=26
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VL=0 VEX_PREFIX=2 MAP=3    MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111 m    m MOD!=3 r r    r n n n    MODRM() UIMM8()

RORX inum=6665  isa_set=BMI2 pattern len=27
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VL=0 VEX_PREFIX=2 MAP=3    REXW=0 MODE=2 VEXDEST3=0b1 VEXDEST210=0b111    m m MOD!=3 r    r r n n    n MODRM() UIMM8()

RORX inum=6666  isa_set=BMI2 pattern len=26
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VL=0 VEX_PREFIX=2 MAP=3    REXW=1 VEXDEST3=0b1 VEXDEST210=0b111 MODE=2    1 1 MOD=3 r    r r n n    n UIMM8()

RORX inum=6667  isa_set=BMI2 pattern len=27
  ipattern: VEXVALID=1 1 1 1    1 0 0 0    0 VL=0 VEX_PREFIX=2 MAP=3    REXW=1 VEXDEST3=0b1 VEXDEST210=0b111 MODE=2    m m MOD!=3 r    r r n n    n MODRM() UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING RORX inum 6662 -- already fine
	REARRANGE needs to juggle: RORX inum 6663
	REARRANGE one pattern worked for RORX inum 6663
	SKIPPING RORX inum 6664 -- already fine
	REARRANGE needs to juggle: RORX inum 6665
	REARRANGE one pattern worked for RORX inum 6665
	REARRANGE needs to juggle: RORX inum 6666
	REARRANGE one pattern worked for RORX inum 6666
	REARRANGE needs to juggle: RORX inum 6667
	REARRANGE one pattern worked for RORX inum 6667
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 12
FUNKY SPOT: bitpos 9
Others: 
VPSLLD inum=5684  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSLLD inum=5685  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPSLLD inum=6320  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSLLD inum=6321  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

ANDN inum=6602  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

ANDN inum=6603  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

ANDN inum=6604  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

ANDN inum=6605  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

ANDN inum=6606  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

ANDN inum=6607  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPSLLD inum 5684 -- already fine
	SKIPPING VPSLLD inum 5685 -- already fine
	SKIPPING VPSLLD inum 6320 -- already fine
	SKIPPING VPSLLD inum 6321 -- already fine
	REARRANGE needs to juggle: ANDN inum 6602
	REARRANGE one pattern worked for ANDN inum 6602
	REARRANGE needs to juggle: ANDN inum 6603
	REARRANGE one pattern worked for ANDN inum 6603
	REARRANGE needs to juggle: ANDN inum 6604
	REARRANGE one pattern worked for ANDN inum 6604
	REARRANGE needs to juggle: ANDN inum 6605
	REARRANGE one pattern worked for ANDN inum 6605
	REARRANGE needs to juggle: ANDN inum 6606
	REARRANGE one pattern worked for ANDN inum 6606
	REARRANGE needs to juggle: ANDN inum 6607
	REARRANGE one pattern worked for ANDN inum 6607
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VPSLLD inum=5684  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSLLD inum=5685  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

ANDN inum=6602  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 MAP=2 VEX_PREFIX=0    MODE!=2 m m MOD!=3    r r r n    n n MODRM()

ANDN inum=6603  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 MAP=2 VEX_PREFIX=0    REXW=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

ANDN inum=6604  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 MAP=2 VEX_PREFIX=0    MODE!=2 1 1 MOD=3    r r r n    n n

ANDN inum=6605  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 MAP=2 VEX_PREFIX=0    REXW=0 MODE=2 1 1    MOD=3 r r r    n n n

ANDN inum=6606  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 MAP=2 VEX_PREFIX=0    REXW=1 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

ANDN inum=6607  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 MAP=2 VEX_PREFIX=0    REXW=1 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VPSLLD inum 5684 -- already fine
	SKIPPING VPSLLD inum 5685 -- already fine
	REARRANGE needs to juggle: ANDN inum 6602
	REARRANGE one pattern worked for ANDN inum 6602
	REARRANGE needs to juggle: ANDN inum 6603
	REARRANGE one pattern worked for ANDN inum 6603
	REARRANGE needs to juggle: ANDN inum 6604
	REARRANGE one pattern worked for ANDN inum 6604
	REARRANGE needs to juggle: ANDN inum 6605
	REARRANGE one pattern worked for ANDN inum 6605
	REARRANGE needs to juggle: ANDN inum 6606
	REARRANGE one pattern worked for ANDN inum 6606
	REARRANGE needs to juggle: ANDN inum 6607
	REARRANGE one pattern worked for ANDN inum 6607
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 12
Others: 
ANDN inum=6602  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=0 MAP=2    MODE!=2 m m MOD!=3    r r r n    n n MODRM()

ANDN inum=6603  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=0 MAP=2    REXW=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

ANDN inum=6604  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=0 MAP=2    MODE!=2 1 1 MOD=3    r r r n    n n

ANDN inum=6605  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=0 MAP=2    REXW=0 MODE=2 1 1    MOD=3 r r r    n n n

ANDN inum=6606  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=0 MAP=2    REXW=1 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

ANDN inum=6607  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    0 VL=0 VEX_PREFIX=0 MAP=2    REXW=1 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING ANDN inum 6602 -- already fine
	REARRANGE needs to juggle: ANDN inum 6603
	REARRANGE one pattern worked for ANDN inum 6603
	SKIPPING ANDN inum 6604 -- already fine
	REARRANGE needs to juggle: ANDN inum 6605
	REARRANGE one pattern worked for ANDN inum 6605
	REARRANGE needs to juggle: ANDN inum 6606
	REARRANGE one pattern worked for ANDN inum 6606
	REARRANGE needs to juggle: ANDN inum 6607
	REARRANGE one pattern worked for ANDN inum 6607
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 12
FUNKY SPOT: bitpos 9
Others: 
VPSLLQ inum=5686  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSLLQ inum=5687  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPSLLQ inum=6322  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSLLQ inum=6323  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

BLSR inum=6608  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 m m MOD!=3    0 0 1 n    n n MODRM()

BLSR inum=6609  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 m m    MOD!=3 0 0 1    n n n MODRM()   

BLSR inum=6610  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 1 1 MOD=3    0 0 1 n    n n

BLSR inum=6611  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 1 1    MOD=3 0 0 1    n n n

BLSR inum=6612  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 m m    MOD!=3 0 0 1    n n n MODRM()   

BLSR inum=6613  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 1 1    MOD=3 0 0 1    n n n

BLSMSK inum=6614  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 m m MOD!=3    0 1 0 n    n n MODRM()

BLSMSK inum=6615  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 m m    MOD!=3 0 1 0    n n n MODRM()   

BLSMSK inum=6616  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 1 1 MOD=3    0 1 0 n    n n

BLSMSK inum=6617  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 1 1    MOD=3 0 1 0    n n n

BLSMSK inum=6618  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 m m    MOD!=3 0 1 0    n n n MODRM()   

BLSMSK inum=6619  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 1 1    MOD=3 0 1 0    n n n

BLSI inum=6620  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 m m MOD!=3    0 1 1 n    n n MODRM()

BLSI inum=6621  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 m m    MOD!=3 0 1 1    n n n MODRM()   

BLSI inum=6622  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 1 1 MOD=3    0 1 1 n    n n

BLSI inum=6623  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 1 1    MOD=3 0 1 1    n n n

BLSI inum=6624  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 m m    MOD!=3 0 1 1    n n n MODRM()   

BLSI inum=6625  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 1 1    MOD=3 0 1 1    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPSLLQ inum 5686 -- already fine
	SKIPPING VPSLLQ inum 5687 -- already fine
	SKIPPING VPSLLQ inum 6322 -- already fine
	SKIPPING VPSLLQ inum 6323 -- already fine
	REARRANGE needs to juggle: BLSR inum 6608
	REARRANGE one pattern worked for BLSR inum 6608
	REARRANGE needs to juggle: BLSR inum 6609
	REARRANGE one pattern worked for BLSR inum 6609
	REARRANGE needs to juggle: BLSR inum 6610
	REARRANGE one pattern worked for BLSR inum 6610
	REARRANGE needs to juggle: BLSR inum 6611
	REARRANGE one pattern worked for BLSR inum 6611
	REARRANGE needs to juggle: BLSR inum 6612
	REARRANGE one pattern worked for BLSR inum 6612
	REARRANGE needs to juggle: BLSR inum 6613
	REARRANGE one pattern worked for BLSR inum 6613
	REARRANGE needs to juggle: BLSMSK inum 6614
	REARRANGE one pattern worked for BLSMSK inum 6614
	REARRANGE needs to juggle: BLSMSK inum 6615
	REARRANGE one pattern worked for BLSMSK inum 6615
	REARRANGE needs to juggle: BLSMSK inum 6616
	REARRANGE one pattern worked for BLSMSK inum 6616
	REARRANGE needs to juggle: BLSMSK inum 6617
	REARRANGE one pattern worked for BLSMSK inum 6617
	REARRANGE needs to juggle: BLSMSK inum 6618
	REARRANGE one pattern worked for BLSMSK inum 6618
	REARRANGE needs to juggle: BLSMSK inum 6619
	REARRANGE one pattern worked for BLSMSK inum 6619
	REARRANGE needs to juggle: BLSI inum 6620
	REARRANGE one pattern worked for BLSI inum 6620
	REARRANGE needs to juggle: BLSI inum 6621
	REARRANGE one pattern worked for BLSI inum 6621
	REARRANGE needs to juggle: BLSI inum 6622
	REARRANGE one pattern worked for BLSI inum 6622
	REARRANGE needs to juggle: BLSI inum 6623
	REARRANGE one pattern worked for BLSI inum 6623
	REARRANGE needs to juggle: BLSI inum 6624
	REARRANGE one pattern worked for BLSI inum 6624
	REARRANGE needs to juggle: BLSI inum 6625
	REARRANGE one pattern worked for BLSI inum 6625
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VPSLLQ inum=5686  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSLLQ inum=5687  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

BLSR inum=6608  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    MODE!=2 m m MOD!=3    0 0 1 n    n n MODRM()

BLSR inum=6609  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=0 MODE=2 m m    MOD!=3 0 0 1    n n n MODRM()   

BLSR inum=6610  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    MODE!=2 1 1 MOD=3    0 0 1 n    n n

BLSR inum=6611  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=0 MODE=2 1 1    MOD=3 0 0 1    n n n

BLSR inum=6612  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=1 MODE=2 m m    MOD!=3 0 0 1    n n n MODRM()   

BLSR inum=6613  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=1 MODE=2 1 1    MOD=3 0 0 1    n n n

BLSMSK inum=6614  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    MODE!=2 m m MOD!=3    0 1 0 n    n n MODRM()

BLSMSK inum=6615  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=0 MODE=2 m m    MOD!=3 0 1 0    n n n MODRM()   

BLSMSK inum=6616  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    MODE!=2 1 1 MOD=3    0 1 0 n    n n

BLSMSK inum=6617  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=0 MODE=2 1 1    MOD=3 0 1 0    n n n

BLSMSK inum=6618  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=1 MODE=2 m m    MOD!=3 0 1 0    n n n MODRM()   

BLSMSK inum=6619  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=1 MODE=2 1 1    MOD=3 0 1 0    n n n

BLSI inum=6620  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    MODE!=2 m m MOD!=3    0 1 1 n    n n MODRM()

BLSI inum=6621  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=0 MODE=2 m m    MOD!=3 0 1 1    n n n MODRM()   

BLSI inum=6622  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    MODE!=2 1 1 MOD=3    0 1 1 n    n n

BLSI inum=6623  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=0 MODE=2 1 1    MOD=3 0 1 1    n n n

BLSI inum=6624  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=1 MODE=2 m m    MOD!=3 0 1 1    n n n MODRM()   

BLSI inum=6625  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=1 MODE=2 1 1    MOD=3 0 1 1    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VPSLLQ inum 5686 -- already fine
	SKIPPING VPSLLQ inum 5687 -- already fine
	REARRANGE needs to juggle: BLSR inum 6608
	REARRANGE one pattern worked for BLSR inum 6608
	REARRANGE needs to juggle: BLSR inum 6609
	REARRANGE one pattern worked for BLSR inum 6609
	REARRANGE needs to juggle: BLSR inum 6610
	REARRANGE one pattern worked for BLSR inum 6610
	REARRANGE needs to juggle: BLSR inum 6611
	REARRANGE one pattern worked for BLSR inum 6611
	REARRANGE needs to juggle: BLSR inum 6612
	REARRANGE one pattern worked for BLSR inum 6612
	REARRANGE needs to juggle: BLSR inum 6613
	REARRANGE one pattern worked for BLSR inum 6613
	REARRANGE needs to juggle: BLSMSK inum 6614
	REARRANGE one pattern worked for BLSMSK inum 6614
	REARRANGE needs to juggle: BLSMSK inum 6615
	REARRANGE one pattern worked for BLSMSK inum 6615
	REARRANGE needs to juggle: BLSMSK inum 6616
	REARRANGE one pattern worked for BLSMSK inum 6616
	REARRANGE needs to juggle: BLSMSK inum 6617
	REARRANGE one pattern worked for BLSMSK inum 6617
	REARRANGE needs to juggle: BLSMSK inum 6618
	REARRANGE one pattern worked for BLSMSK inum 6618
	REARRANGE needs to juggle: BLSMSK inum 6619
	REARRANGE one pattern worked for BLSMSK inum 6619
	REARRANGE needs to juggle: BLSI inum 6620
	REARRANGE one pattern worked for BLSI inum 6620
	REARRANGE needs to juggle: BLSI inum 6621
	REARRANGE one pattern worked for BLSI inum 6621
	REARRANGE needs to juggle: BLSI inum 6622
	REARRANGE one pattern worked for BLSI inum 6622
	REARRANGE needs to juggle: BLSI inum 6623
	REARRANGE one pattern worked for BLSI inum 6623
	REARRANGE needs to juggle: BLSI inum 6624
	REARRANGE one pattern worked for BLSI inum 6624
	REARRANGE needs to juggle: BLSI inum 6625
	REARRANGE one pattern worked for BLSI inum 6625
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 12
Others: 
BLSR inum=6608  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    MODE!=2 m m MOD!=3    0 0 1 n    n n MODRM()

BLSR inum=6609  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=0 MODE=2 m m    MOD!=3 0 0 1    n n n MODRM()   

BLSR inum=6610  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    MODE!=2 1 1 MOD=3    0 0 1 n    n n

BLSR inum=6611  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=0 MODE=2 1 1    MOD=3 0 0 1    n n n

BLSR inum=6612  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=1 MODE=2 m m    MOD!=3 0 0 1    n n n MODRM()   

BLSR inum=6613  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=1 MODE=2 1 1    MOD=3 0 0 1    n n n

BLSMSK inum=6614  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    MODE!=2 m m MOD!=3    0 1 0 n    n n MODRM()

BLSMSK inum=6615  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=0 MODE=2 m m    MOD!=3 0 1 0    n n n MODRM()   

BLSMSK inum=6616  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    MODE!=2 1 1 MOD=3    0 1 0 n    n n

BLSMSK inum=6617  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=0 MODE=2 1 1    MOD=3 0 1 0    n n n

BLSMSK inum=6618  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=1 MODE=2 m m    MOD!=3 0 1 0    n n n MODRM()   

BLSMSK inum=6619  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=1 MODE=2 1 1    MOD=3 0 1 0    n n n

BLSI inum=6620  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    MODE!=2 m m MOD!=3    0 1 1 n    n n MODRM()

BLSI inum=6621  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=0 MODE=2 m m    MOD!=3 0 1 1    n n n MODRM()   

BLSI inum=6622  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    MODE!=2 1 1 MOD=3    0 1 1 n    n n

BLSI inum=6623  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=0 MODE=2 1 1    MOD=3 0 1 1    n n n

BLSI inum=6624  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=1 MODE=2 m m    MOD!=3 0 1 1    n n n MODRM()   

BLSI inum=6625  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 0 1    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=1 MODE=2 1 1    MOD=3 0 1 1    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING BLSR inum 6608 -- already fine
	REARRANGE needs to juggle: BLSR inum 6609
	REARRANGE one pattern worked for BLSR inum 6609
	SKIPPING BLSR inum 6610 -- already fine
	REARRANGE needs to juggle: BLSR inum 6611
	REARRANGE one pattern worked for BLSR inum 6611
	REARRANGE needs to juggle: BLSR inum 6612
	REARRANGE one pattern worked for BLSR inum 6612
	REARRANGE needs to juggle: BLSR inum 6613
	REARRANGE one pattern worked for BLSR inum 6613
	SKIPPING BLSMSK inum 6614 -- already fine
	REARRANGE needs to juggle: BLSMSK inum 6615
	REARRANGE one pattern worked for BLSMSK inum 6615
	SKIPPING BLSMSK inum 6616 -- already fine
	REARRANGE needs to juggle: BLSMSK inum 6617
	REARRANGE one pattern worked for BLSMSK inum 6617
	REARRANGE needs to juggle: BLSMSK inum 6618
	REARRANGE one pattern worked for BLSMSK inum 6618
	REARRANGE needs to juggle: BLSMSK inum 6619
	REARRANGE one pattern worked for BLSMSK inum 6619
	SKIPPING BLSI inum 6620 -- already fine
	REARRANGE needs to juggle: BLSI inum 6621
	REARRANGE one pattern worked for BLSI inum 6621
	SKIPPING BLSI inum 6622 -- already fine
	REARRANGE needs to juggle: BLSI inum 6623
	REARRANGE one pattern worked for BLSI inum 6623
	REARRANGE needs to juggle: BLSI inum 6624
	REARRANGE one pattern worked for BLSI inum 6624
	REARRANGE needs to juggle: BLSI inum 6625
	REARRANGE one pattern worked for BLSI inum 6625
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 12
FUNKY SPOT: bitpos 9
Others: 
VPMADDWD inum=5918  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPMADDWD inum=5919  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPMADDWD inum=6382  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPMADDWD inum=6383  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

PDEP inum=6590  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=2 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

PDEP inum=6591  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=2 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

PDEP inum=6592  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=2 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

PDEP inum=6593  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=2 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

PDEP inum=6594  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=2 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

PDEP inum=6595  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=2 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

PEXT inum=6596  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=3 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

PEXT inum=6597  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=3 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

PEXT inum=6598  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=3 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

PEXT inum=6599  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=3 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

PEXT inum=6600  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=3 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

PEXT inum=6601  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=3 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

BZHI inum=6626  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

BZHI inum=6627  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

BZHI inum=6628  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

BZHI inum=6629  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

BZHI inum=6630  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

BZHI inum=6631  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPMADDWD inum 5918 -- already fine
	SKIPPING VPMADDWD inum 5919 -- already fine
	SKIPPING VPMADDWD inum 6382 -- already fine
	SKIPPING VPMADDWD inum 6383 -- already fine
	REARRANGE needs to juggle: PDEP inum 6590
	REARRANGE one pattern worked for PDEP inum 6590
	REARRANGE needs to juggle: PDEP inum 6591
	REARRANGE one pattern worked for PDEP inum 6591
	REARRANGE needs to juggle: PDEP inum 6592
	REARRANGE one pattern worked for PDEP inum 6592
	REARRANGE needs to juggle: PDEP inum 6593
	REARRANGE one pattern worked for PDEP inum 6593
	REARRANGE needs to juggle: PDEP inum 6594
	REARRANGE one pattern worked for PDEP inum 6594
	REARRANGE needs to juggle: PDEP inum 6595
	REARRANGE one pattern worked for PDEP inum 6595
	REARRANGE needs to juggle: PEXT inum 6596
	REARRANGE one pattern worked for PEXT inum 6596
	REARRANGE needs to juggle: PEXT inum 6597
	REARRANGE one pattern worked for PEXT inum 6597
	REARRANGE needs to juggle: PEXT inum 6598
	REARRANGE one pattern worked for PEXT inum 6598
	REARRANGE needs to juggle: PEXT inum 6599
	REARRANGE one pattern worked for PEXT inum 6599
	REARRANGE needs to juggle: PEXT inum 6600
	REARRANGE one pattern worked for PEXT inum 6600
	REARRANGE needs to juggle: PEXT inum 6601
	REARRANGE one pattern worked for PEXT inum 6601
	REARRANGE needs to juggle: BZHI inum 6626
	REARRANGE one pattern worked for BZHI inum 6626
	REARRANGE needs to juggle: BZHI inum 6627
	REARRANGE one pattern worked for BZHI inum 6627
	REARRANGE needs to juggle: BZHI inum 6628
	REARRANGE one pattern worked for BZHI inum 6628
	REARRANGE needs to juggle: BZHI inum 6629
	REARRANGE one pattern worked for BZHI inum 6629
	REARRANGE needs to juggle: BZHI inum 6630
	REARRANGE one pattern worked for BZHI inum 6630
	REARRANGE needs to juggle: BZHI inum 6631
	REARRANGE one pattern worked for BZHI inum 6631
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 10
Others: 
VPMADDWD inum=5918  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPMADDWD inum=5919  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

PDEP inum=6590  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=2    MODE!=2 m m MOD!=3    r r r n    n n MODRM()

PDEP inum=6591  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=2    REXW=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

PDEP inum=6592  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=2    MODE!=2 1 1 MOD=3    r r r n    n n

PDEP inum=6593  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=2    REXW=0 MODE=2 1 1    MOD=3 r r r    n n n

PDEP inum=6594  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=2    REXW=1 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

PDEP inum=6595  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=2    REXW=1 MODE=2 1 1    MOD=3 r r r    n n n

PEXT inum=6596  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=3    MODE!=2 m m MOD!=3    r r r n    n n MODRM()

PEXT inum=6597  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=3    REXW=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

PEXT inum=6598  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=3    MODE!=2 1 1 MOD=3    r r r n    n n

PEXT inum=6599  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=3    REXW=0 MODE=2 1 1    MOD=3 r r r    n n n

PEXT inum=6600  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=3    REXW=1 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

PEXT inum=6601  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=3    REXW=1 MODE=2 1 1    MOD=3 r r r    n n n

BZHI inum=6626  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=0    MODE!=2 m m MOD!=3    r r r n    n n MODRM()

BZHI inum=6627  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

BZHI inum=6628  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=0    MODE!=2 1 1 MOD=3    r r r n    n n

BZHI inum=6629  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=0 MODE=2 1 1    MOD=3 r r r    n n n

BZHI inum=6630  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=1 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

BZHI inum=6631  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 MAP=2 VEX_PREFIX=0    REXW=1 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VEX_PREFIX
	SKIPPING VPMADDWD inum 5918 -- already fine
	SKIPPING VPMADDWD inum 5919 -- already fine
	REARRANGE needs to juggle: PDEP inum 6590
	REARRANGE one pattern worked for PDEP inum 6590
	REARRANGE needs to juggle: PDEP inum 6591
	REARRANGE one pattern worked for PDEP inum 6591
	REARRANGE needs to juggle: PDEP inum 6592
	REARRANGE one pattern worked for PDEP inum 6592
	REARRANGE needs to juggle: PDEP inum 6593
	REARRANGE one pattern worked for PDEP inum 6593
	REARRANGE needs to juggle: PDEP inum 6594
	REARRANGE one pattern worked for PDEP inum 6594
	REARRANGE needs to juggle: PDEP inum 6595
	REARRANGE one pattern worked for PDEP inum 6595
	REARRANGE needs to juggle: PEXT inum 6596
	REARRANGE one pattern worked for PEXT inum 6596
	REARRANGE needs to juggle: PEXT inum 6597
	REARRANGE one pattern worked for PEXT inum 6597
	REARRANGE needs to juggle: PEXT inum 6598
	REARRANGE one pattern worked for PEXT inum 6598
	REARRANGE needs to juggle: PEXT inum 6599
	REARRANGE one pattern worked for PEXT inum 6599
	REARRANGE needs to juggle: PEXT inum 6600
	REARRANGE one pattern worked for PEXT inum 6600
	REARRANGE needs to juggle: PEXT inum 6601
	REARRANGE one pattern worked for PEXT inum 6601
	REARRANGE needs to juggle: BZHI inum 6626
	REARRANGE one pattern worked for BZHI inum 6626
	REARRANGE needs to juggle: BZHI inum 6627
	REARRANGE one pattern worked for BZHI inum 6627
	REARRANGE needs to juggle: BZHI inum 6628
	REARRANGE one pattern worked for BZHI inum 6628
	REARRANGE needs to juggle: BZHI inum 6629
	REARRANGE one pattern worked for BZHI inum 6629
	REARRANGE needs to juggle: BZHI inum 6630
	REARRANGE one pattern worked for BZHI inum 6630
	REARRANGE needs to juggle: BZHI inum 6631
	REARRANGE one pattern worked for BZHI inum 6631
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 10
FUNKY SPOT: bitpos 12
Others: 
PDEP inum=6590  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=2 MAP=2    MODE!=2 m m MOD!=3    r r r n    n n MODRM()

PDEP inum=6591  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=2 MAP=2    REXW=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

PDEP inum=6592  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=2 MAP=2    MODE!=2 1 1 MOD=3    r r r n    n n

PDEP inum=6593  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=2 MAP=2    REXW=0 MODE=2 1 1    MOD=3 r r r    n n n

PDEP inum=6594  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=2 MAP=2    REXW=1 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

PDEP inum=6595  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=2 MAP=2    REXW=1 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING PDEP inum 6590 -- already fine
	REARRANGE needs to juggle: PDEP inum 6591
	REARRANGE one pattern worked for PDEP inum 6591
	SKIPPING PDEP inum 6592 -- already fine
	REARRANGE needs to juggle: PDEP inum 6593
	REARRANGE one pattern worked for PDEP inum 6593
	REARRANGE needs to juggle: PDEP inum 6594
	REARRANGE one pattern worked for PDEP inum 6594
	REARRANGE needs to juggle: PDEP inum 6595
	REARRANGE one pattern worked for PDEP inum 6595
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 12
FUNKY SPOT: bitpos 12
Others: 
PEXT inum=6596  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=3 MAP=2    MODE!=2 m m MOD!=3    r r r n    n n MODRM()

PEXT inum=6597  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=3 MAP=2    REXW=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

PEXT inum=6598  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=3 MAP=2    MODE!=2 1 1 MOD=3    r r r n    n n

PEXT inum=6599  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=3 MAP=2    REXW=0 MODE=2 1 1    MOD=3 r r r    n n n

PEXT inum=6600  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=3 MAP=2    REXW=1 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

PEXT inum=6601  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=3 MAP=2    REXW=1 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING PEXT inum 6596 -- already fine
	REARRANGE needs to juggle: PEXT inum 6597
	REARRANGE one pattern worked for PEXT inum 6597
	SKIPPING PEXT inum 6598 -- already fine
	REARRANGE needs to juggle: PEXT inum 6599
	REARRANGE one pattern worked for PEXT inum 6599
	REARRANGE needs to juggle: PEXT inum 6600
	REARRANGE one pattern worked for PEXT inum 6600
	REARRANGE needs to juggle: PEXT inum 6601
	REARRANGE one pattern worked for PEXT inum 6601
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 12
FUNKY SPOT: bitpos 12
Others: 
BZHI inum=6626  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=0 MAP=2    MODE!=2 m m MOD!=3    r r r n    n n MODRM()

BZHI inum=6627  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

BZHI inum=6628  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=0 MAP=2    MODE!=2 1 1 MOD=3    r r r n    n n

BZHI inum=6629  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=0 MODE=2 1 1    MOD=3 r r r    n n n

BZHI inum=6630  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=1 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

BZHI inum=6631  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 0    1 VL=0 VEX_PREFIX=0 MAP=2    REXW=1 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING BZHI inum 6626 -- already fine
	REARRANGE needs to juggle: BZHI inum 6627
	REARRANGE one pattern worked for BZHI inum 6627
	SKIPPING BZHI inum 6628 -- already fine
	REARRANGE needs to juggle: BZHI inum 6629
	REARRANGE one pattern worked for BZHI inum 6629
	REARRANGE needs to juggle: BZHI inum 6630
	REARRANGE one pattern worked for BZHI inum 6630
	REARRANGE needs to juggle: BZHI inum 6631
	REARRANGE one pattern worked for BZHI inum 6631
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 12
FUNKY SPOT: bitpos 9
Others: 
VPSADBW inum=5760  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSADBW inum=5761  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPSADBW inum=6424  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSADBW inum=6425  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

MULX inum=6656  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VEX_PREFIX=2 MAP=2 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

MULX inum=6657  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VEX_PREFIX=2 MAP=2 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

MULX inum=6658  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VEX_PREFIX=2 MAP=2 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

MULX inum=6659  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VEX_PREFIX=2 MAP=2 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

MULX inum=6660  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VEX_PREFIX=2 MAP=2 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

MULX inum=6661  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VEX_PREFIX=2 MAP=2 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPSADBW inum 5760 -- already fine
	SKIPPING VPSADBW inum 5761 -- already fine
	SKIPPING VPSADBW inum 6424 -- already fine
	SKIPPING VPSADBW inum 6425 -- already fine
	REARRANGE needs to juggle: MULX inum 6656
	REARRANGE one pattern worked for MULX inum 6656
	REARRANGE needs to juggle: MULX inum 6657
	REARRANGE one pattern worked for MULX inum 6657
	REARRANGE needs to juggle: MULX inum 6658
	REARRANGE one pattern worked for MULX inum 6658
	REARRANGE needs to juggle: MULX inum 6659
	REARRANGE one pattern worked for MULX inum 6659
	REARRANGE needs to juggle: MULX inum 6660
	REARRANGE one pattern worked for MULX inum 6660
	REARRANGE needs to juggle: MULX inum 6661
	REARRANGE one pattern worked for MULX inum 6661
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 12
Others: 
MULX inum=6656  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VL=0 VEX_PREFIX=2 MAP=2    MODE!=2 1 1 MOD=3    r r r n    n n

MULX inum=6657  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VL=0 VEX_PREFIX=2 MAP=2    REXW=0 MODE=2 1 1    MOD=3 r r r    n n n

MULX inum=6658  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VL=0 VEX_PREFIX=2 MAP=2    MODE!=2 m m MOD!=3    r r r n    n n MODRM()

MULX inum=6659  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VL=0 VEX_PREFIX=2 MAP=2    REXW=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

MULX inum=6660  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VL=0 VEX_PREFIX=2 MAP=2    REXW=1 MODE=2 1 1    MOD=3 r r r    n n n

MULX inum=6661  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    0 VL=0 VEX_PREFIX=2 MAP=2    REXW=1 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING MULX inum 6656 -- already fine
	REARRANGE needs to juggle: MULX inum 6657
	REARRANGE one pattern worked for MULX inum 6657
	SKIPPING MULX inum 6658 -- already fine
	REARRANGE needs to juggle: MULX inum 6659
	REARRANGE one pattern worked for MULX inum 6659
	REARRANGE needs to juggle: MULX inum 6660
	REARRANGE one pattern worked for MULX inum 6660
	REARRANGE needs to juggle: MULX inum 6661
	REARRANGE one pattern worked for MULX inum 6661
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 12
FUNKY SPOT: bitpos 11
Others: 
BEXTR inum=6632  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

BEXTR inum=6633  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

BEXTR inum=6634  isa_set=BMI1 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=0 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

BEXTR inum=6635  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=0 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

BEXTR inum=6636  isa_set=BMI1 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

BEXTR inum=6637  isa_set=BMI1 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=0 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING BEXTR inum 6632 -- already fine
	REARRANGE needs to juggle: BEXTR inum 6633
	REARRANGE one pattern worked for BEXTR inum 6633
	SKIPPING BEXTR inum 6634 -- already fine
	REARRANGE needs to juggle: BEXTR inum 6635
	REARRANGE one pattern worked for BEXTR inum 6635
	REARRANGE needs to juggle: BEXTR inum 6636
	REARRANGE one pattern worked for BEXTR inum 6636
	REARRANGE needs to juggle: BEXTR inum 6637
	REARRANGE one pattern worked for BEXTR inum 6637
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
SHLX inum=6638  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=1 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

SHLX inum=6639  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=1 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

SHLX inum=6640  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=1 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

SHLX inum=6641  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=1 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

SHLX inum=6642  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=1 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

SHLX inum=6643  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=1 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING SHLX inum 6638 -- already fine
	REARRANGE needs to juggle: SHLX inum 6639
	REARRANGE one pattern worked for SHLX inum 6639
	SKIPPING SHLX inum 6640 -- already fine
	REARRANGE needs to juggle: SHLX inum 6641
	REARRANGE one pattern worked for SHLX inum 6641
	REARRANGE needs to juggle: SHLX inum 6642
	REARRANGE one pattern worked for SHLX inum 6642
	REARRANGE needs to juggle: SHLX inum 6643
	REARRANGE one pattern worked for SHLX inum 6643
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
SARX inum=6644  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=3 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

SARX inum=6645  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=3 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

SARX inum=6646  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=3 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

SARX inum=6647  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=3 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

SARX inum=6648  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=3 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

SARX inum=6649  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=3 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING SARX inum 6644 -- already fine
	REARRANGE needs to juggle: SARX inum 6645
	REARRANGE one pattern worked for SARX inum 6645
	SKIPPING SARX inum 6646 -- already fine
	REARRANGE needs to juggle: SARX inum 6647
	REARRANGE one pattern worked for SARX inum 6647
	REARRANGE needs to juggle: SARX inum 6648
	REARRANGE one pattern worked for SARX inum 6648
	REARRANGE needs to juggle: SARX inum 6649
	REARRANGE one pattern worked for SARX inum 6649
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 11
Others: 
SHRX inum=6650  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=2 MODE!=2    VL=0 m m MOD!=3    r r r n    n n MODRM()

SHRX inum=6651  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=2 REXW=0    MODE=2 VL=0 m m    MOD!=3 r r r    n n n MODRM()   

SHRX inum=6652  isa_set=BMI2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=2 MODE!=2    VL=0 1 1 MOD=3    r r r n    n n

SHRX inum=6653  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=2 REXW=0    MODE=2 VL=0 1 1    MOD=3 r r r    n n n

SHRX inum=6654  isa_set=BMI2 pattern len=24
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=2 REXW=1    VL=0 MODE=2 m m    MOD!=3 r r r    n n n MODRM()   

SHRX inum=6655  isa_set=BMI2 pattern len=23
  ipattern: VEXVALID=1 1 1 1    1 0 1 1    1 MAP=2 VEX_PREFIX=2 REXW=1    VL=0 MODE=2 1 1    MOD=3 r r r    n n n

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING SHRX inum 6650 -- already fine
	REARRANGE needs to juggle: SHRX inum 6651
	REARRANGE one pattern worked for SHRX inum 6651
	SKIPPING SHRX inum 6652 -- already fine
	REARRANGE needs to juggle: SHRX inum 6653
	REARRANGE one pattern worked for SHRX inum 6653
	REARRANGE needs to juggle: SHRX inum 6654
	REARRANGE one pattern worked for SHRX inum 6654
	REARRANGE needs to juggle: SHRX inum 6655
	REARRANGE one pattern worked for SHRX inum 6655
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 11
FUNKY SPOT: bitpos 9
Others: 
VPSUBB inum=5778  isa_set=AVX pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSUBB inum=5779  isa_set=AVX pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 1 0 0    0 VL=0 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

VPSUBB inum=6442  isa_set=AVX2 pattern len=22
  ipattern: VEXVALID=1 1 1 1    1 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=1    m m MOD!=3 r    r r n n    n MODRM()

VPSUBB inum=6443  isa_set=AVX2 pattern len=21
  ipattern: VEXVALID=1 1 1 1    1 1 0 0    0 VL=1 VEX_PREFIX=1 MAP=1    1 1 MOD=3 r    r r n n    n

URDMSR inum=10590  iform_input=URDMSR_GPR64u64_IMM32  isa_set=USER_MSR pattern len=26
  ipattern: VEXVALID=1 1 1 1    1 1 0 0    0 VEX_PREFIX=2 MAP=7 1    1 MOD=3 0 0    0 n n n    REXW=0 VL=0 MODE=2 VEXDEST3=0b1    VEXDEST210=0b111 UIMM32()

UWRMSR inum=10591  iform_input=UWRMSR_IMM32_GPR64u64  isa_set=USER_MSR pattern len=26
  ipattern: VEXVALID=1 1 1 1    1 1 0 0    0 VEX_PREFIX=3 MAP=7 1    1 MOD=3 0 0    0 n n n    REXW=0 VL=0 MODE=2 VEXDEST3=0b1    VEXDEST210=0b111 UIMM32()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using VL
	SKIPPING VPSUBB inum 5778 -- already fine
	SKIPPING VPSUBB inum 5779 -- already fine
	SKIPPING VPSUBB inum 6442 -- already fine
	SKIPPING VPSUBB inum 6443 -- already fine
	REARRANGE needs to juggle: URDMSR inum 10590
	REARRANGE one pattern worked for URDMSR inum 10590
	REARRANGE needs to juggle: UWRMSR inum 10591
	REARRANGE one pattern worked for UWRMSR inum 10591
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 9
FUNKY SPOT: bitpos 23
Others: 
VPEXTRD inum=8733  iform_input=VPEXTRD_GPR32u32_XMMu32_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=30
  ipattern: VEXVALID=2 0 0 0    1 0 1 1    0 VEX_PREFIX=1 MAP=3 1    1 MOD=3 BCRC=0 UBIT=1    r r r n    n n VL=0 MODE!=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0 UIMM8()

VPEXTRD inum=8734  iform_input=VPEXTRD_GPR32u32_XMMu32_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=31
  ipattern: VEXVALID=2 0 0 0    1 0 1 1    0 VEX_PREFIX=1 MAP=3 1    1 MOD=3 BCRC=0 UBIT=1    r r r n    n n VL=0 MODE=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 UIMM8()

VPEXTRQ inum=8737  iform_input=VPEXTRQ_GPR64u64_XMMu64_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=31
  ipattern: VEXVALID=2 0 0 0    1 0 1 1    0 VEX_PREFIX=1 MAP=3 1    1 MOD=3 BCRC=0 UBIT=1    r r r n    n n VL=0 REXW=1    MODE=2 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 UIMM8()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING VPEXTRD inum 8733 -- already fine
	SKIPPING VPEXTRD inum 8734 -- already fine
	REARRANGE needs to juggle: VPEXTRQ inum 8737
	REARRANGE one pattern worked for VPEXTRQ inum 8737
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 23
FUNKY SPOT: bitpos 24
Others: 
VPEXTRD inum=8735  iform_input=VPEXTRD_MEMu32_XMMu32_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=33
  ipattern: VEXVALID=2 0 0 0    1 0 1 1    0 VEX_PREFIX=1 MAP=3 m    m MOD!=3 r r    r n n n    MODRM() BCRC=0 UBIT=1 VL=0    MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 UIMM8() ESIZE_32_BITS()    NELEM_GPR_WRITER_STORE()

VPEXTRD inum=8736  iform_input=VPEXTRD_MEMu32_XMMu32_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=34
  ipattern: VEXVALID=2 0 0 0    1 0 1 1    0 VEX_PREFIX=1 MAP=3 m    m MOD!=3 r r    r n n n    MODRM() BCRC=0 UBIT=1 VL=0    MODE=2 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111    VEXDEST4=0b0 ZEROING=0 MASK=0 UIMM8()    ESIZE_32_BITS() NELEM_GPR_WRITER_STORE()

VPEXTRQ inum=8738  iform_input=VPEXTRQ_MEMu64_XMMu64_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=34
  ipattern: VEXVALID=2 0 0 0    1 0 1 1    0 VEX_PREFIX=1 MAP=3 m    m MOD!=3 r r    r n n n    MODRM() BCRC=0 UBIT=1 VL=0    REXW=1 MODE=2 VEXDEST3=0b1 VEXDEST210=0b111    VEXDEST4=0b0 ZEROING=0 MASK=0 UIMM8()    ESIZE_64_BITS() NELEM_GPR_WRITER_STORE()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING VPEXTRD inum 8735 -- already fine
	SKIPPING VPEXTRD inum 8736 -- already fine
	REARRANGE needs to juggle: VPEXTRQ inum 8738
	REARRANGE one pattern worked for VPEXTRQ inum 8738
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 24
FUNKY SPOT: bitpos 23
Others: 
VPINSRD inum=8753  iform_input=VPINSRD_XMMu32_XMMu32_GPR32u32_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=27
  ipattern: VEXVALID=2 0 0 1    0 0 0 1    0 VEX_PREFIX=1 MAP=3 1    1 MOD=3 BCRC=0 UBIT=1    r r r n    n n VL=0 MODE!=2    ZEROING=0 MASK=0 UIMM8()

VPINSRD inum=8754  iform_input=VPINSRD_XMMu32_XMMu32_GPR32u32_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=28
  ipattern: VEXVALID=2 0 0 1    0 0 0 1    0 VEX_PREFIX=1 MAP=3 1    1 MOD=3 BCRC=0 UBIT=1    r r r n    n n VL=0 MODE=2    REXW=0 ZEROING=0 MASK=0 UIMM8()   

VPINSRQ inum=8757  iform_input=VPINSRQ_XMMu64_XMMu64_GPR64u64_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=28
  ipattern: VEXVALID=2 0 0 1    0 0 0 1    0 VEX_PREFIX=1 MAP=3 1    1 MOD=3 BCRC=0 UBIT=1    r r r n    n n VL=0 REXW=1    MODE=2 ZEROING=0 MASK=0 UIMM8()   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING VPINSRD inum 8753 -- already fine
	SKIPPING VPINSRD inum 8754 -- already fine
	REARRANGE needs to juggle: VPINSRQ inum 8757
	REARRANGE one pattern worked for VPINSRQ inum 8757
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 23
FUNKY SPOT: bitpos 24
Others: 
VPINSRD inum=8755  iform_input=VPINSRD_XMMu32_XMMu32_MEMu32_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=30
  ipattern: VEXVALID=2 0 0 1    0 0 0 1    0 VEX_PREFIX=1 MAP=3 m    m MOD!=3 r r    r n n n    MODRM() BCRC=0 UBIT=1 VL=0    MODE!=2 ZEROING=0 MASK=0 UIMM8()    ESIZE_32_BITS() NELEM_GPR_READER()

VPINSRD inum=8756  iform_input=VPINSRD_XMMu32_XMMu32_MEMu32_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=31
  ipattern: VEXVALID=2 0 0 1    0 0 0 1    0 VEX_PREFIX=1 MAP=3 m    m MOD!=3 r r    r n n n    MODRM() BCRC=0 UBIT=1 VL=0    MODE=2 REXW=0 ZEROING=0 MASK=0    UIMM8() ESIZE_32_BITS() NELEM_GPR_READER()

VPINSRQ inum=8758  iform_input=VPINSRQ_XMMu64_XMMu64_MEMu64_IMM8_AVX512  isa_set=AVX512DQ_128N pattern len=31
  ipattern: VEXVALID=2 0 0 1    0 0 0 1    0 VEX_PREFIX=1 MAP=3 m    m MOD!=3 r r    r n n n    MODRM() BCRC=0 UBIT=1 VL=0    REXW=1 MODE=2 ZEROING=0 MASK=0    UIMM8() ESIZE_64_BITS() NELEM_GPR_READER()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING VPINSRD inum 8755 -- already fine
	SKIPPING VPINSRD inum 8756 -- already fine
	REARRANGE needs to juggle: VPINSRQ inum 8758
	REARRANGE one pattern worked for VPINSRQ inum 8758
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 24
FUNKY SPOT: bitpos 23
Others: 
VCVTSI2SH inum=10041  iform_input=VCVTSI2SH_XMMf16_XMMf16_GPR32i32_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=27
  ipattern: VEXVALID=2 0 0 1    0 1 0 1    0 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=0 UBIT=1    r r r n    n n FIX_ROUND_LEN128() REXW=0    MODE=2 ZEROING=0 MASK=0

VCVTSI2SH inum=10044  iform_input=VCVTSI2SH_XMMf16_XMMf16_GPR32i32_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=26
  ipattern: VEXVALID=2 0 0 1    0 1 0 1    0 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=0 UBIT=1    r r r n    n n FIX_ROUND_LEN128() MODE!=2    ZEROING=0 MASK=0

VCVTSI2SH inum=10047  iform_input=VCVTSI2SH_XMMf16_XMMf16_GPR64i64_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=27
  ipattern: VEXVALID=2 0 0 1    0 1 0 1    0 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=0 UBIT=1    r r r n    n n FIX_ROUND_LEN128() REXW=1    MODE=2 ZEROING=0 MASK=0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VCVTSI2SH inum 10041 -- already fine
	REARRANGE needs to juggle: VCVTSI2SH inum 10044
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MODE
	REARRANGE needs to juggle: VCVTSI2SH inum 10041
	REARRANGE one pattern worked for VCVTSI2SH inum 10041
	SKIPPING VCVTSI2SH inum 10044 -- already fine
	REARRANGE needs to juggle: VCVTSI2SH inum 10047
	REARRANGE one pattern worked for VCVTSI2SH inum 10047
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 23
FUNKY SPOT: bitpos 24
Others: 
VCVTSI2SH inum=10042  iform_input=VCVTSI2SH_XMMf16_XMMf16_GPR32i32_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=28
  ipattern: VEXVALID=2 0 0 1    0 1 0 1    0 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=1 UBIT=1    r r r n    n n FIX_ROUND_LEN128() AVX512_ROUND()    REXW=0 MODE=2 ZEROING=0 MASK=0   

VCVTSI2SH inum=10045  iform_input=VCVTSI2SH_XMMf16_XMMf16_GPR32i32_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=27
  ipattern: VEXVALID=2 0 0 1    0 1 0 1    0 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=1 UBIT=1    r r r n    n n FIX_ROUND_LEN128() AVX512_ROUND()    MODE!=2 ZEROING=0 MASK=0

VCVTSI2SH inum=10048  iform_input=VCVTSI2SH_XMMf16_XMMf16_GPR64i64_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=28
  ipattern: VEXVALID=2 0 0 1    0 1 0 1    0 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=1 UBIT=1    r r r n    n n FIX_ROUND_LEN128() AVX512_ROUND()    REXW=1 MODE=2 ZEROING=0 MASK=0   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VCVTSI2SH inum 10042 -- already fine
	REARRANGE needs to juggle: VCVTSI2SH inum 10045
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MODE
	REARRANGE needs to juggle: VCVTSI2SH inum 10042
	REARRANGE one pattern worked for VCVTSI2SH inum 10042
	SKIPPING VCVTSI2SH inum 10045 -- already fine
	REARRANGE needs to juggle: VCVTSI2SH inum 10048
	REARRANGE one pattern worked for VCVTSI2SH inum 10048
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 24
FUNKY SPOT: bitpos 24
Others: 
VCVTSI2SH inum=10043  iform_input=VCVTSI2SH_XMMf16_XMMf16_MEMi32_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=30
  ipattern: VEXVALID=2 0 0 1    0 1 0 1    0 VEX_PREFIX=3 MAP=5 m    m MOD!=3 UBIT=1 r    r r n n    n BCRC=0 MODRM() FIX_ROUND_LEN128()    REXW=0 MODE=2 ZEROING=0 MASK=0    ESIZE_32_BITS() NELEM_GPR_READER()

VCVTSI2SH inum=10046  iform_input=VCVTSI2SH_XMMf16_XMMf16_MEMi32_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=29
  ipattern: VEXVALID=2 0 0 1    0 1 0 1    0 VEX_PREFIX=3 MAP=5 m    m MOD!=3 UBIT=1 r    r r n n    n BCRC=0 MODRM() FIX_ROUND_LEN128()    MODE!=2 ZEROING=0 MASK=0 ESIZE_32_BITS()    NELEM_GPR_READER()

VCVTSI2SH inum=10049  iform_input=VCVTSI2SH_XMMf16_XMMf16_MEMi64_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=30
  ipattern: VEXVALID=2 0 0 1    0 1 0 1    0 VEX_PREFIX=3 MAP=5 m    m MOD!=3 UBIT=1 r    r r n n    n BCRC=0 MODRM() FIX_ROUND_LEN128()    REXW=1 MODE=2 ZEROING=0 MASK=0    ESIZE_64_BITS() NELEM_GPR_READER()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VCVTSI2SH inum 10043 -- already fine
	REARRANGE needs to juggle: VCVTSI2SH inum 10046
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MODE
	REARRANGE needs to juggle: VCVTSI2SH inum 10043
	REARRANGE one pattern worked for VCVTSI2SH inum 10043
	SKIPPING VCVTSI2SH inum 10046 -- already fine
	REARRANGE needs to juggle: VCVTSI2SH inum 10049
	REARRANGE one pattern worked for VCVTSI2SH inum 10049
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 24
FUNKY SPOT: bitpos 23
Others: 
VCVTTSH2SI inum=10095  iform_input=VCVTTSH2SI_GPR32i32_XMMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=31
  ipattern: VEXVALID=2 0 0 1    0 1 1 0    0 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=0 UBIT=1    r r r n    n n FIX_ROUND_LEN128() REXW=0    MODE=2 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 EVEXR4_ONE()

VCVTTSH2SI inum=10098  iform_input=VCVTTSH2SI_GPR32i32_XMMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=30
  ipattern: VEXVALID=2 0 0 1    0 1 1 0    0 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=0 UBIT=1    r r r n    n n FIX_ROUND_LEN128() MODE!=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0 EVEXR4_ONE()

VCVTTSH2SI inum=10101  iform_input=VCVTTSH2SI_GPR64i64_XMMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=31
  ipattern: VEXVALID=2 0 0 1    0 1 1 0    0 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=0 UBIT=1    r r r n    n n FIX_ROUND_LEN128() REXW=1    MODE=2 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 EVEXR4_ONE()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VCVTTSH2SI inum 10095 -- already fine
	REARRANGE needs to juggle: VCVTTSH2SI inum 10098
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MODE
	REARRANGE needs to juggle: VCVTTSH2SI inum 10095
	REARRANGE one pattern worked for VCVTTSH2SI inum 10095
	SKIPPING VCVTTSH2SI inum 10098 -- already fine
	REARRANGE needs to juggle: VCVTTSH2SI inum 10101
	REARRANGE one pattern worked for VCVTTSH2SI inum 10101
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 23
FUNKY SPOT: bitpos 24
Others: 
VCVTTSH2SI inum=10096  iform_input=VCVTTSH2SI_GPR32i32_XMMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=32
  ipattern: VEXVALID=2 0 0 1    0 1 1 0    0 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=1 UBIT=1    r r r n    n n FIX_ROUND_LEN128() SAE()    REXW=0 MODE=2 VEXDEST3=0b1 VEXDEST210=0b111    VEXDEST4=0b0 ZEROING=0 MASK=0 EVEXR4_ONE()   

VCVTTSH2SI inum=10099  iform_input=VCVTTSH2SI_GPR32i32_XMMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=31
  ipattern: VEXVALID=2 0 0 1    0 1 1 0    0 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=1 UBIT=1    r r r n    n n FIX_ROUND_LEN128() SAE()    MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 EVEXR4_ONE()

VCVTTSH2SI inum=10102  iform_input=VCVTTSH2SI_GPR64i64_XMMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=32
  ipattern: VEXVALID=2 0 0 1    0 1 1 0    0 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=1 UBIT=1    r r r n    n n FIX_ROUND_LEN128() SAE()    REXW=1 MODE=2 VEXDEST3=0b1 VEXDEST210=0b111    VEXDEST4=0b0 ZEROING=0 MASK=0 EVEXR4_ONE()   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VCVTTSH2SI inum 10096 -- already fine
	REARRANGE needs to juggle: VCVTTSH2SI inum 10099
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MODE
	REARRANGE needs to juggle: VCVTTSH2SI inum 10096
	REARRANGE one pattern worked for VCVTTSH2SI inum 10096
	SKIPPING VCVTTSH2SI inum 10099 -- already fine
	REARRANGE needs to juggle: VCVTTSH2SI inum 10102
	REARRANGE one pattern worked for VCVTTSH2SI inum 10102
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 24
FUNKY SPOT: bitpos 24
Others: 
VCVTTSH2SI inum=10097  iform_input=VCVTTSH2SI_GPR32i32_MEMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=34
  ipattern: VEXVALID=2 0 0 1    0 1 1 0    0 VEX_PREFIX=3 MAP=5 m    m MOD!=3 UBIT=1 r    r r n n    n BCRC=0 MODRM() FIX_ROUND_LEN128()    REXW=0 MODE=2 VEXDEST3=0b1 VEXDEST210=0b111    VEXDEST4=0b0 ZEROING=0 MASK=0 ESIZE_16_BITS()    NELEM_GPR_WRITER_LDOP_D() EVEXR4_ONE()

VCVTTSH2SI inum=10100  iform_input=VCVTTSH2SI_GPR32i32_MEMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=33
  ipattern: VEXVALID=2 0 0 1    0 1 1 0    0 VEX_PREFIX=3 MAP=5 m    m MOD!=3 UBIT=1 r    r r n n    n BCRC=0 MODRM() FIX_ROUND_LEN128()    MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 ESIZE_16_BITS() NELEM_GPR_WRITER_LDOP_D()    EVEXR4_ONE()

VCVTTSH2SI inum=10103  iform_input=VCVTTSH2SI_GPR64i64_MEMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=34
  ipattern: VEXVALID=2 0 0 1    0 1 1 0    0 VEX_PREFIX=3 MAP=5 m    m MOD!=3 UBIT=1 r    r r n n    n BCRC=0 MODRM() FIX_ROUND_LEN128()    REXW=1 MODE=2 VEXDEST3=0b1 VEXDEST210=0b111    VEXDEST4=0b0 ZEROING=0 MASK=0 ESIZE_16_BITS()    NELEM_GPR_WRITER_LDOP_D() EVEXR4_ONE()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VCVTTSH2SI inum 10097 -- already fine
	REARRANGE needs to juggle: VCVTTSH2SI inum 10100
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MODE
	REARRANGE needs to juggle: VCVTTSH2SI inum 10097
	REARRANGE one pattern worked for VCVTTSH2SI inum 10097
	SKIPPING VCVTTSH2SI inum 10100 -- already fine
	REARRANGE needs to juggle: VCVTTSH2SI inum 10103
	REARRANGE one pattern worked for VCVTTSH2SI inum 10103
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 24
FUNKY SPOT: bitpos 23
Others: 
VCVTSH2SI inum=10020  iform_input=VCVTSH2SI_GPR32i32_XMMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=31
  ipattern: VEXVALID=2 0 0 1    0 1 1 0    1 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=0 UBIT=1    r r r n    n n FIX_ROUND_LEN128() REXW=0    MODE=2 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 EVEXR4_ONE()

VCVTSH2SI inum=10023  iform_input=VCVTSH2SI_GPR32i32_XMMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=30
  ipattern: VEXVALID=2 0 0 1    0 1 1 0    1 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=0 UBIT=1    r r r n    n n FIX_ROUND_LEN128() MODE!=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0 EVEXR4_ONE()

VCVTSH2SI inum=10026  iform_input=VCVTSH2SI_GPR64i64_XMMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=31
  ipattern: VEXVALID=2 0 0 1    0 1 1 0    1 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=0 UBIT=1    r r r n    n n FIX_ROUND_LEN128() REXW=1    MODE=2 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 EVEXR4_ONE()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VCVTSH2SI inum 10020 -- already fine
	REARRANGE needs to juggle: VCVTSH2SI inum 10023
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MODE
	REARRANGE needs to juggle: VCVTSH2SI inum 10020
	REARRANGE one pattern worked for VCVTSH2SI inum 10020
	SKIPPING VCVTSH2SI inum 10023 -- already fine
	REARRANGE needs to juggle: VCVTSH2SI inum 10026
	REARRANGE one pattern worked for VCVTSH2SI inum 10026
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 23
FUNKY SPOT: bitpos 24
Others: 
VCVTSH2SI inum=10021  iform_input=VCVTSH2SI_GPR32i32_XMMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=32
  ipattern: VEXVALID=2 0 0 1    0 1 1 0    1 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=1 UBIT=1    r r r n    n n FIX_ROUND_LEN128() AVX512_ROUND()    REXW=0 MODE=2 VEXDEST3=0b1 VEXDEST210=0b111    VEXDEST4=0b0 ZEROING=0 MASK=0 EVEXR4_ONE()   

VCVTSH2SI inum=10024  iform_input=VCVTSH2SI_GPR32i32_XMMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=31
  ipattern: VEXVALID=2 0 0 1    0 1 1 0    1 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=1 UBIT=1    r r r n    n n FIX_ROUND_LEN128() AVX512_ROUND()    MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 EVEXR4_ONE()

VCVTSH2SI inum=10027  iform_input=VCVTSH2SI_GPR64i64_XMMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=32
  ipattern: VEXVALID=2 0 0 1    0 1 1 0    1 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=1 UBIT=1    r r r n    n n FIX_ROUND_LEN128() AVX512_ROUND()    REXW=1 MODE=2 VEXDEST3=0b1 VEXDEST210=0b111    VEXDEST4=0b0 ZEROING=0 MASK=0 EVEXR4_ONE()   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VCVTSH2SI inum 10021 -- already fine
	REARRANGE needs to juggle: VCVTSH2SI inum 10024
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MODE
	REARRANGE needs to juggle: VCVTSH2SI inum 10021
	REARRANGE one pattern worked for VCVTSH2SI inum 10021
	SKIPPING VCVTSH2SI inum 10024 -- already fine
	REARRANGE needs to juggle: VCVTSH2SI inum 10027
	REARRANGE one pattern worked for VCVTSH2SI inum 10027
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 24
FUNKY SPOT: bitpos 24
Others: 
VCVTSH2SI inum=10022  iform_input=VCVTSH2SI_GPR32i32_MEMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=34
  ipattern: VEXVALID=2 0 0 1    0 1 1 0    1 VEX_PREFIX=3 MAP=5 m    m MOD!=3 UBIT=1 r    r r n n    n BCRC=0 MODRM() FIX_ROUND_LEN128()    REXW=0 MODE=2 VEXDEST3=0b1 VEXDEST210=0b111    VEXDEST4=0b0 ZEROING=0 MASK=0 ESIZE_16_BITS()    NELEM_GPR_WRITER_LDOP_D() EVEXR4_ONE()

VCVTSH2SI inum=10025  iform_input=VCVTSH2SI_GPR32i32_MEMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=33
  ipattern: VEXVALID=2 0 0 1    0 1 1 0    1 VEX_PREFIX=3 MAP=5 m    m MOD!=3 UBIT=1 r    r r n n    n BCRC=0 MODRM() FIX_ROUND_LEN128()    MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 ESIZE_16_BITS() NELEM_GPR_WRITER_LDOP_D()    EVEXR4_ONE()

VCVTSH2SI inum=10028  iform_input=VCVTSH2SI_GPR64i64_MEMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=34
  ipattern: VEXVALID=2 0 0 1    0 1 1 0    1 VEX_PREFIX=3 MAP=5 m    m MOD!=3 UBIT=1 r    r r n n    n BCRC=0 MODRM() FIX_ROUND_LEN128()    REXW=1 MODE=2 VEXDEST3=0b1 VEXDEST210=0b111    VEXDEST4=0b0 ZEROING=0 MASK=0 ESIZE_16_BITS()    NELEM_GPR_WRITER_LDOP_D() EVEXR4_ONE()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VCVTSH2SI inum 10022 -- already fine
	REARRANGE needs to juggle: VCVTSH2SI inum 10025
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MODE
	REARRANGE needs to juggle: VCVTSH2SI inum 10022
	REARRANGE one pattern worked for VCVTSH2SI inum 10022
	SKIPPING VCVTSH2SI inum 10025 -- already fine
	REARRANGE needs to juggle: VCVTSH2SI inum 10028
	REARRANGE one pattern worked for VCVTSH2SI inum 10028
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 24
FUNKY SPOT: bitpos 23
Others: 
VMOVD inum=7293  iform_input=VMOVD_XMMu32_GPR32u32_AVX512  isa_set=AVX512F_128N pattern len=29
  ipattern: VEXVALID=2 0 1 1    0 1 1 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 BCRC=0 UBIT=1    r r r n    n n VL=0 MODE!=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0

VMOVD inum=7294  iform_input=VMOVD_XMMu32_GPR32u32_AVX512  isa_set=AVX512F_128N pattern len=30
  ipattern: VEXVALID=2 0 1 1    0 1 1 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 BCRC=0 UBIT=1    r r r n    n n VL=0 MODE=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0

VMOVQ inum=7333  iform_input=VMOVQ_XMMu64_GPR64u64_AVX512  isa_set=AVX512F_128N pattern len=30
  ipattern: VEXVALID=2 0 1 1    0 1 1 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 BCRC=0 UBIT=1    r r r n    n n VL=0 REXW=1    MODE=2 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING VMOVD inum 7293 -- already fine
	SKIPPING VMOVD inum 7294 -- already fine
	REARRANGE needs to juggle: VMOVQ inum 7333
	REARRANGE one pattern worked for VMOVQ inum 7333
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 23
FUNKY SPOT: bitpos 24
Others: 
VMOVD inum=7295  iform_input=VMOVD_XMMu32_MEMu32_AVX512  isa_set=AVX512F_128N pattern len=32
  ipattern: VEXVALID=2 0 1 1    0 1 1 1    0 VEX_PREFIX=1 MAP=1 m    m MOD!=3 UBIT=1 r    r r n n    n BCRC=0 MODRM() VL=0    MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 ESIZE_32_BITS() NELEM_GPR_READER()   

VMOVD inum=7296  iform_input=VMOVD_XMMu32_MEMu32_AVX512  isa_set=AVX512F_128N pattern len=33
  ipattern: VEXVALID=2 0 1 1    0 1 1 1    0 VEX_PREFIX=1 MAP=1 m    m MOD!=3 UBIT=1 r    r r n n    n BCRC=0 MODRM() VL=0    MODE=2 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111    VEXDEST4=0b0 ZEROING=0 MASK=0 ESIZE_32_BITS()    NELEM_GPR_READER()

VMOVQ inum=7334  iform_input=VMOVQ_XMMu64_MEMu64_AVX512  isa_set=AVX512F_128N pattern len=33
  ipattern: VEXVALID=2 0 1 1    0 1 1 1    0 VEX_PREFIX=1 MAP=1 m    m MOD!=3 UBIT=1 r    r r n n    n BCRC=0 MODRM() VL=0    REXW=1 MODE=2 VEXDEST3=0b1 VEXDEST210=0b111    VEXDEST4=0b0 ZEROING=0 MASK=0 ESIZE_64_BITS()    NELEM_GPR_READER()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING VMOVD inum 7295 -- already fine
	SKIPPING VMOVD inum 7296 -- already fine
	REARRANGE needs to juggle: VMOVQ inum 7334
	REARRANGE one pattern worked for VMOVQ inum 7334
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 24
FUNKY SPOT: bitpos 23
Others: 
VCVTTSH2USI inum=10104  iform_input=VCVTTSH2USI_GPR32u32_XMMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=31
  ipattern: VEXVALID=2 0 1 1    1 1 0 0    0 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=0 UBIT=1    r r r n    n n FIX_ROUND_LEN128() REXW=0    MODE=2 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 EVEXR4_ONE()

VCVTTSH2USI inum=10107  iform_input=VCVTTSH2USI_GPR32u32_XMMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=30
  ipattern: VEXVALID=2 0 1 1    1 1 0 0    0 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=0 UBIT=1    r r r n    n n FIX_ROUND_LEN128() MODE!=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0 EVEXR4_ONE()

VCVTTSH2USI inum=10110  iform_input=VCVTTSH2USI_GPR64u64_XMMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=31
  ipattern: VEXVALID=2 0 1 1    1 1 0 0    0 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=0 UBIT=1    r r r n    n n FIX_ROUND_LEN128() REXW=1    MODE=2 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 EVEXR4_ONE()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VCVTTSH2USI inum 10104 -- already fine
	REARRANGE needs to juggle: VCVTTSH2USI inum 10107
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MODE
	REARRANGE needs to juggle: VCVTTSH2USI inum 10104
	REARRANGE one pattern worked for VCVTTSH2USI inum 10104
	SKIPPING VCVTTSH2USI inum 10107 -- already fine
	REARRANGE needs to juggle: VCVTTSH2USI inum 10110
	REARRANGE one pattern worked for VCVTTSH2USI inum 10110
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 23
FUNKY SPOT: bitpos 24
Others: 
VCVTTSH2USI inum=10105  iform_input=VCVTTSH2USI_GPR32u32_XMMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=32
  ipattern: VEXVALID=2 0 1 1    1 1 0 0    0 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=1 UBIT=1    r r r n    n n FIX_ROUND_LEN128() SAE()    REXW=0 MODE=2 VEXDEST3=0b1 VEXDEST210=0b111    VEXDEST4=0b0 ZEROING=0 MASK=0 EVEXR4_ONE()   

VCVTTSH2USI inum=10108  iform_input=VCVTTSH2USI_GPR32u32_XMMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=31
  ipattern: VEXVALID=2 0 1 1    1 1 0 0    0 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=1 UBIT=1    r r r n    n n FIX_ROUND_LEN128() SAE()    MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 EVEXR4_ONE()

VCVTTSH2USI inum=10111  iform_input=VCVTTSH2USI_GPR64u64_XMMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=32
  ipattern: VEXVALID=2 0 1 1    1 1 0 0    0 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=1 UBIT=1    r r r n    n n FIX_ROUND_LEN128() SAE()    REXW=1 MODE=2 VEXDEST3=0b1 VEXDEST210=0b111    VEXDEST4=0b0 ZEROING=0 MASK=0 EVEXR4_ONE()   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VCVTTSH2USI inum 10105 -- already fine
	REARRANGE needs to juggle: VCVTTSH2USI inum 10108
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MODE
	REARRANGE needs to juggle: VCVTTSH2USI inum 10105
	REARRANGE one pattern worked for VCVTTSH2USI inum 10105
	SKIPPING VCVTTSH2USI inum 10108 -- already fine
	REARRANGE needs to juggle: VCVTTSH2USI inum 10111
	REARRANGE one pattern worked for VCVTTSH2USI inum 10111
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 24
FUNKY SPOT: bitpos 24
Others: 
VCVTTSH2USI inum=10106  iform_input=VCVTTSH2USI_GPR32u32_MEMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=34
  ipattern: VEXVALID=2 0 1 1    1 1 0 0    0 VEX_PREFIX=3 MAP=5 m    m MOD!=3 UBIT=1 r    r r n n    n BCRC=0 MODRM() FIX_ROUND_LEN128()    REXW=0 MODE=2 VEXDEST3=0b1 VEXDEST210=0b111    VEXDEST4=0b0 ZEROING=0 MASK=0 ESIZE_16_BITS()    NELEM_GPR_WRITER_LDOP_D() EVEXR4_ONE()

VCVTTSH2USI inum=10109  iform_input=VCVTTSH2USI_GPR32u32_MEMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=33
  ipattern: VEXVALID=2 0 1 1    1 1 0 0    0 VEX_PREFIX=3 MAP=5 m    m MOD!=3 UBIT=1 r    r r n n    n BCRC=0 MODRM() FIX_ROUND_LEN128()    MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 ESIZE_16_BITS() NELEM_GPR_WRITER_LDOP_D()    EVEXR4_ONE()

VCVTTSH2USI inum=10112  iform_input=VCVTTSH2USI_GPR64u64_MEMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=34
  ipattern: VEXVALID=2 0 1 1    1 1 0 0    0 VEX_PREFIX=3 MAP=5 m    m MOD!=3 UBIT=1 r    r r n n    n BCRC=0 MODRM() FIX_ROUND_LEN128()    REXW=1 MODE=2 VEXDEST3=0b1 VEXDEST210=0b111    VEXDEST4=0b0 ZEROING=0 MASK=0 ESIZE_16_BITS()    NELEM_GPR_WRITER_LDOP_D() EVEXR4_ONE()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VCVTTSH2USI inum 10106 -- already fine
	REARRANGE needs to juggle: VCVTTSH2USI inum 10109
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MODE
	REARRANGE needs to juggle: VCVTTSH2USI inum 10106
	REARRANGE one pattern worked for VCVTTSH2USI inum 10106
	SKIPPING VCVTTSH2USI inum 10109 -- already fine
	REARRANGE needs to juggle: VCVTTSH2USI inum 10112
	REARRANGE one pattern worked for VCVTTSH2USI inum 10112
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 24
FUNKY SPOT: bitpos 23
Others: 
VCVTSH2USI inum=10032  iform_input=VCVTSH2USI_GPR32u32_XMMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=31
  ipattern: VEXVALID=2 0 1 1    1 1 0 0    1 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=0 UBIT=1    r r r n    n n FIX_ROUND_LEN128() REXW=0    MODE=2 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 EVEXR4_ONE()

VCVTSH2USI inum=10035  iform_input=VCVTSH2USI_GPR32u32_XMMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=30
  ipattern: VEXVALID=2 0 1 1    1 1 0 0    1 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=0 UBIT=1    r r r n    n n FIX_ROUND_LEN128() MODE!=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0 EVEXR4_ONE()

VCVTSH2USI inum=10038  iform_input=VCVTSH2USI_GPR64u64_XMMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=31
  ipattern: VEXVALID=2 0 1 1    1 1 0 0    1 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=0 UBIT=1    r r r n    n n FIX_ROUND_LEN128() REXW=1    MODE=2 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 EVEXR4_ONE()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VCVTSH2USI inum 10032 -- already fine
	REARRANGE needs to juggle: VCVTSH2USI inum 10035
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MODE
	REARRANGE needs to juggle: VCVTSH2USI inum 10032
	REARRANGE one pattern worked for VCVTSH2USI inum 10032
	SKIPPING VCVTSH2USI inum 10035 -- already fine
	REARRANGE needs to juggle: VCVTSH2USI inum 10038
	REARRANGE one pattern worked for VCVTSH2USI inum 10038
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 23
FUNKY SPOT: bitpos 24
Others: 
VCVTSH2USI inum=10033  iform_input=VCVTSH2USI_GPR32u32_XMMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=32
  ipattern: VEXVALID=2 0 1 1    1 1 0 0    1 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=1 UBIT=1    r r r n    n n FIX_ROUND_LEN128() AVX512_ROUND()    REXW=0 MODE=2 VEXDEST3=0b1 VEXDEST210=0b111    VEXDEST4=0b0 ZEROING=0 MASK=0 EVEXR4_ONE()   

VCVTSH2USI inum=10036  iform_input=VCVTSH2USI_GPR32u32_XMMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=31
  ipattern: VEXVALID=2 0 1 1    1 1 0 0    1 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=1 UBIT=1    r r r n    n n FIX_ROUND_LEN128() AVX512_ROUND()    MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 EVEXR4_ONE()

VCVTSH2USI inum=10039  iform_input=VCVTSH2USI_GPR64u64_XMMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=32
  ipattern: VEXVALID=2 0 1 1    1 1 0 0    1 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=1 UBIT=1    r r r n    n n FIX_ROUND_LEN128() AVX512_ROUND()    REXW=1 MODE=2 VEXDEST3=0b1 VEXDEST210=0b111    VEXDEST4=0b0 ZEROING=0 MASK=0 EVEXR4_ONE()   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VCVTSH2USI inum 10033 -- already fine
	REARRANGE needs to juggle: VCVTSH2USI inum 10036
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MODE
	REARRANGE needs to juggle: VCVTSH2USI inum 10033
	REARRANGE one pattern worked for VCVTSH2USI inum 10033
	SKIPPING VCVTSH2USI inum 10036 -- already fine
	REARRANGE needs to juggle: VCVTSH2USI inum 10039
	REARRANGE one pattern worked for VCVTSH2USI inum 10039
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 24
FUNKY SPOT: bitpos 24
Others: 
VCVTSH2USI inum=10034  iform_input=VCVTSH2USI_GPR32u32_MEMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=34
  ipattern: VEXVALID=2 0 1 1    1 1 0 0    1 VEX_PREFIX=3 MAP=5 m    m MOD!=3 UBIT=1 r    r r n n    n BCRC=0 MODRM() FIX_ROUND_LEN128()    REXW=0 MODE=2 VEXDEST3=0b1 VEXDEST210=0b111    VEXDEST4=0b0 ZEROING=0 MASK=0 ESIZE_16_BITS()    NELEM_GPR_WRITER_LDOP_D() EVEXR4_ONE()

VCVTSH2USI inum=10037  iform_input=VCVTSH2USI_GPR32u32_MEMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=33
  ipattern: VEXVALID=2 0 1 1    1 1 0 0    1 VEX_PREFIX=3 MAP=5 m    m MOD!=3 UBIT=1 r    r r n n    n BCRC=0 MODRM() FIX_ROUND_LEN128()    MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 ESIZE_16_BITS() NELEM_GPR_WRITER_LDOP_D()    EVEXR4_ONE()

VCVTSH2USI inum=10040  iform_input=VCVTSH2USI_GPR64u64_MEMf16_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=34
  ipattern: VEXVALID=2 0 1 1    1 1 0 0    1 VEX_PREFIX=3 MAP=5 m    m MOD!=3 UBIT=1 r    r r n n    n BCRC=0 MODRM() FIX_ROUND_LEN128()    REXW=1 MODE=2 VEXDEST3=0b1 VEXDEST210=0b111    VEXDEST4=0b0 ZEROING=0 MASK=0 ESIZE_16_BITS()    NELEM_GPR_WRITER_LDOP_D() EVEXR4_ONE()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VCVTSH2USI inum 10034 -- already fine
	REARRANGE needs to juggle: VCVTSH2USI inum 10037
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MODE
	REARRANGE needs to juggle: VCVTSH2USI inum 10034
	REARRANGE one pattern worked for VCVTSH2USI inum 10034
	SKIPPING VCVTSH2USI inum 10037 -- already fine
	REARRANGE needs to juggle: VCVTSH2USI inum 10040
	REARRANGE one pattern worked for VCVTSH2USI inum 10040
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 24
FUNKY SPOT: bitpos 23
Others: 
VCVTUSI2SH inum=10127  iform_input=VCVTUSI2SH_XMMf16_XMMf16_GPR32u32_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=27
  ipattern: VEXVALID=2 0 1 1    1 1 0 1    1 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=0 UBIT=1    r r r n    n n FIX_ROUND_LEN128() REXW=0    MODE=2 ZEROING=0 MASK=0

VCVTUSI2SH inum=10130  iform_input=VCVTUSI2SH_XMMf16_XMMf16_GPR32u32_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=26
  ipattern: VEXVALID=2 0 1 1    1 1 0 1    1 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=0 UBIT=1    r r r n    n n FIX_ROUND_LEN128() MODE!=2    ZEROING=0 MASK=0

VCVTUSI2SH inum=10133  iform_input=VCVTUSI2SH_XMMf16_XMMf16_GPR64u64_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=27
  ipattern: VEXVALID=2 0 1 1    1 1 0 1    1 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=0 UBIT=1    r r r n    n n FIX_ROUND_LEN128() REXW=1    MODE=2 ZEROING=0 MASK=0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VCVTUSI2SH inum 10127 -- already fine
	REARRANGE needs to juggle: VCVTUSI2SH inum 10130
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MODE
	REARRANGE needs to juggle: VCVTUSI2SH inum 10127
	REARRANGE one pattern worked for VCVTUSI2SH inum 10127
	SKIPPING VCVTUSI2SH inum 10130 -- already fine
	REARRANGE needs to juggle: VCVTUSI2SH inum 10133
	REARRANGE one pattern worked for VCVTUSI2SH inum 10133
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 23
FUNKY SPOT: bitpos 24
Others: 
VCVTUSI2SH inum=10128  iform_input=VCVTUSI2SH_XMMf16_XMMf16_GPR32u32_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=28
  ipattern: VEXVALID=2 0 1 1    1 1 0 1    1 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=1 UBIT=1    r r r n    n n FIX_ROUND_LEN128() AVX512_ROUND()    REXW=0 MODE=2 ZEROING=0 MASK=0   

VCVTUSI2SH inum=10131  iform_input=VCVTUSI2SH_XMMf16_XMMf16_GPR32u32_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=27
  ipattern: VEXVALID=2 0 1 1    1 1 0 1    1 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=1 UBIT=1    r r r n    n n FIX_ROUND_LEN128() AVX512_ROUND()    MODE!=2 ZEROING=0 MASK=0

VCVTUSI2SH inum=10134  iform_input=VCVTUSI2SH_XMMf16_XMMf16_GPR64u64_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=28
  ipattern: VEXVALID=2 0 1 1    1 1 0 1    1 VEX_PREFIX=3 MAP=5 1    1 MOD=3 BCRC=1 UBIT=1    r r r n    n n FIX_ROUND_LEN128() AVX512_ROUND()    REXW=1 MODE=2 ZEROING=0 MASK=0   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VCVTUSI2SH inum 10128 -- already fine
	REARRANGE needs to juggle: VCVTUSI2SH inum 10131
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MODE
	REARRANGE needs to juggle: VCVTUSI2SH inum 10128
	REARRANGE one pattern worked for VCVTUSI2SH inum 10128
	SKIPPING VCVTUSI2SH inum 10131 -- already fine
	REARRANGE needs to juggle: VCVTUSI2SH inum 10134
	REARRANGE one pattern worked for VCVTUSI2SH inum 10134
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 24
FUNKY SPOT: bitpos 24
Others: 
VCVTUSI2SH inum=10129  iform_input=VCVTUSI2SH_XMMf16_XMMf16_MEMu32_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=30
  ipattern: VEXVALID=2 0 1 1    1 1 0 1    1 VEX_PREFIX=3 MAP=5 m    m MOD!=3 UBIT=1 r    r r n n    n BCRC=0 MODRM() FIX_ROUND_LEN128()    REXW=0 MODE=2 ZEROING=0 MASK=0    ESIZE_32_BITS() NELEM_GPR_READER()

VCVTUSI2SH inum=10132  iform_input=VCVTUSI2SH_XMMf16_XMMf16_MEMu32_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=29
  ipattern: VEXVALID=2 0 1 1    1 1 0 1    1 VEX_PREFIX=3 MAP=5 m    m MOD!=3 UBIT=1 r    r r n n    n BCRC=0 MODRM() FIX_ROUND_LEN128()    MODE!=2 ZEROING=0 MASK=0 ESIZE_32_BITS()    NELEM_GPR_READER()

VCVTUSI2SH inum=10135  iform_input=VCVTUSI2SH_XMMf16_XMMf16_MEMu64_AVX512  isa_set=AVX512_FP16_SCALAR pattern len=30
  ipattern: VEXVALID=2 0 1 1    1 1 0 1    1 VEX_PREFIX=3 MAP=5 m    m MOD!=3 UBIT=1 r    r r n n    n BCRC=0 MODRM() FIX_ROUND_LEN128()    REXW=1 MODE=2 ZEROING=0 MASK=0    ESIZE_64_BITS() NELEM_GPR_READER()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using REXW
	SKIPPING VCVTUSI2SH inum 10129 -- already fine
	REARRANGE needs to juggle: VCVTUSI2SH inum 10132
	REARRANGE FAILED for REXW. Trying again...
REARRANGE ATTEMPT  using MODE
	REARRANGE needs to juggle: VCVTUSI2SH inum 10129
	REARRANGE one pattern worked for VCVTUSI2SH inum 10129
	SKIPPING VCVTUSI2SH inum 10132 -- already fine
	REARRANGE needs to juggle: VCVTUSI2SH inum 10135
	REARRANGE one pattern worked for VCVTUSI2SH inum 10135
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 24
FUNKY SPOT: bitpos 23
Others: 
VPBROADCASTD inum=8524  iform_input=VPBROADCASTD_XMMu32_MASKmskw_GPR32u32_AVX512  isa_set=AVX512F_128 pattern len=27
  ipattern: VEXVALID=2 0 1 1    1 1 1 0    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 BCRC=0 UBIT=1    r r r n    n n VL=0 MODE!=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0

VPBROADCASTD inum=8525  iform_input=VPBROADCASTD_XMMu32_MASKmskw_GPR32u32_AVX512  isa_set=AVX512F_128 pattern len=28
  ipattern: VEXVALID=2 0 1 1    1 1 1 0    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 BCRC=0 UBIT=1    r r r n    n n VL=0 MODE=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0   

VPBROADCASTQ inum=8536  iform_input=VPBROADCASTQ_XMMu64_MASKmskw_GPR64u64_AVX512  isa_set=AVX512F_128 pattern len=28
  ipattern: VEXVALID=2 0 1 1    1 1 1 0    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 BCRC=0 UBIT=1    r r r n    n n VL=0 REXW=1    MODE=2 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING VPBROADCASTD inum 8524 -- already fine
	SKIPPING VPBROADCASTD inum 8525 -- already fine
	REARRANGE needs to juggle: VPBROADCASTQ inum 8536
	REARRANGE one pattern worked for VPBROADCASTQ inum 8536
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 23
FUNKY SPOT: bitpos 23
Others: 
VPBROADCASTD inum=8528  iform_input=VPBROADCASTD_YMMu32_MASKmskw_GPR32u32_AVX512  isa_set=AVX512F_256 pattern len=27
  ipattern: VEXVALID=2 0 1 1    1 1 1 0    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 BCRC=0 UBIT=1    r r r n    n n VL=1 MODE!=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0

VPBROADCASTD inum=8529  iform_input=VPBROADCASTD_YMMu32_MASKmskw_GPR32u32_AVX512  isa_set=AVX512F_256 pattern len=28
  ipattern: VEXVALID=2 0 1 1    1 1 1 0    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 BCRC=0 UBIT=1    r r r n    n n VL=1 MODE=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0   

VPBROADCASTQ inum=8539  iform_input=VPBROADCASTQ_YMMu64_MASKmskw_GPR64u64_AVX512  isa_set=AVX512F_256 pattern len=28
  ipattern: VEXVALID=2 0 1 1    1 1 1 0    0 VEX_PREFIX=1 MAP=2 1    1 MOD=3 BCRC=0 UBIT=1    r r r n    n n VL=1 REXW=1    MODE=2 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0   

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING VPBROADCASTD inum 8528 -- already fine
	SKIPPING VPBROADCASTD inum 8529 -- already fine
	REARRANGE needs to juggle: VPBROADCASTQ inum 8539
	REARRANGE one pattern worked for VPBROADCASTQ inum 8539
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 23
FUNKY SPOT: bitpos 23
Others: 
VMOVD inum=7297  iform_input=VMOVD_GPR32u32_XMMu32_AVX512  isa_set=AVX512F_128N pattern len=29
  ipattern: VEXVALID=2 0 1 1    1 1 1 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 BCRC=0 UBIT=1    r r r n    n n VL=0 MODE!=2    VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0 ZEROING=0    MASK=0

VMOVD inum=7298  iform_input=VMOVD_GPR32u32_XMMu32_AVX512  isa_set=AVX512F_128N pattern len=30
  ipattern: VEXVALID=2 0 1 1    1 1 1 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 BCRC=0 UBIT=1    r r r n    n n VL=0 MODE=2    REXW=0 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0

VMOVQ inum=7335  iform_input=VMOVQ_GPR64u64_XMMu64_AVX512  isa_set=AVX512F_128N pattern len=30
  ipattern: VEXVALID=2 0 1 1    1 1 1 1    0 VEX_PREFIX=1 MAP=1 1    1 MOD=3 BCRC=0 UBIT=1    r r r n    n n VL=0 REXW=1    MODE=2 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING VMOVD inum 7297 -- already fine
	SKIPPING VMOVD inum 7298 -- already fine
	REARRANGE needs to juggle: VMOVQ inum 7335
	REARRANGE one pattern worked for VMOVQ inum 7335
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 23
FUNKY SPOT: bitpos 24
Others: 
VMOVD inum=7299  iform_input=VMOVD_MEMu32_XMMu32_AVX512  isa_set=AVX512F_128N pattern len=32
  ipattern: VEXVALID=2 0 1 1    1 1 1 1    0 VEX_PREFIX=1 MAP=1 m    m MOD!=3 UBIT=1 r    r r n n    n BCRC=0 MODRM() VL=0    MODE!=2 VEXDEST3=0b1 VEXDEST210=0b111 VEXDEST4=0b0    ZEROING=0 MASK=0 ESIZE_32_BITS() NELEM_GPR_WRITER_STORE()   

VMOVD inum=7300  iform_input=VMOVD_MEMu32_XMMu32_AVX512  isa_set=AVX512F_128N pattern len=33
  ipattern: VEXVALID=2 0 1 1    1 1 1 1    0 VEX_PREFIX=1 MAP=1 m    m MOD!=3 UBIT=1 r    r r n n    n BCRC=0 MODRM() VL=0    MODE=2 REXW=0 VEXDEST3=0b1 VEXDEST210=0b111    VEXDEST4=0b0 ZEROING=0 MASK=0 ESIZE_32_BITS()    NELEM_GPR_WRITER_STORE()

VMOVQ inum=7336  iform_input=VMOVQ_MEMu64_XMMu64_AVX512  isa_set=AVX512F_128N pattern len=33
  ipattern: VEXVALID=2 0 1 1    1 1 1 1    0 VEX_PREFIX=1 MAP=1 m    m MOD!=3 UBIT=1 r    r r n n    n BCRC=0 MODRM() VL=0    REXW=1 MODE=2 VEXDEST3=0b1 VEXDEST210=0b111    VEXDEST4=0b0 ZEROING=0 MASK=0 ESIZE_64_BITS()    NELEM_GPR_WRITER_STORE()

Ones: 
Zeros: 
REARRANGE ATTEMPT  using MODE
	SKIPPING VMOVD inum 7299 -- already fine
	SKIPPING VMOVD inum 7300 -- already fine
	REARRANGE needs to juggle: VMOVQ inum 7336
	REARRANGE one pattern worked for VMOVQ inum 7336
REARRANGE: FIXED OD CONFLICT!
REARRANGED ODs TO BYPASS PROBLEM at bitpos 24
[NUMBER OF CONVERT PATTERNS] 5
FE:EMIT_FILE obj/xed-operand-convert-init.c
emit_iclass_enum_info
FE:EMIT_FILE obj/xed-iclass-enum.txt
FE:EMIT_FILE obj/xed-iclass-enum.c
FE:EMIT_FILE obj/xed-iclass-enum.h
NOREP KEYS: [0, 162, 163, 165, 167, 361, 362, 365, 472, 473, 474, 475, 528, 529, 533, 535, 570, 571, 572, 843, 844, 845, 846, 901, 902, 903, 904, 1856]
REP KEYS: [778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820]
key - 778
h(x) = linear(x - 778)
FOUND PERFECT HASH FUNCTION FOR repinst
((7*key % 131) % 56)
x = Sigma(Ti << bit_shift)
FKS(x) = (7x mod 131) mod 56
FOUND PERFECT HASH FUNCTION FOR norepinst
FE:EMIT_FILE obj/xed-rep-map.c
FE:EMIT_FILE obj/xed-iform-enum.txt
FE:EMIT_FILE obj/xed-iform-enum.c
FE:EMIT_FILE obj/xed-iform-enum.h
FE:EMIT_FILE obj/xed-iformfl-enum.txt
FE:EMIT_FILE obj/xed-iformfl-enum.c
FE:EMIT_FILE obj/xed-iformfl-enum.h
FE:EMIT_FILE obj/xed-iform-max.c
FE:EMIT_FILE obj/xed-iclass-string.c
[DUPLICATE IFORM] FLDENV_MEMmem14
[DUPLICATE IFORM] FLDENV_MEMmem14
[DUPLICATE IFORM] FLDENV_MEMmem28
[DUPLICATE IFORM] FLDENV_MEMmem28
[DUPLICATE IFORM] FLDENV_MEMmem28
[DUPLICATE IFORM] FNSTENV_MEMmem14
[DUPLICATE IFORM] FNSTENV_MEMmem14
[DUPLICATE IFORM] FNSTENV_MEMmem28
[DUPLICATE IFORM] FNSTENV_MEMmem28
[DUPLICATE IFORM] FNSTENV_MEMmem28
[DUPLICATE IFORM] FRSTOR_MEMmem94
[DUPLICATE IFORM] FRSTOR_MEMmem94
[DUPLICATE IFORM] FRSTOR_MEMmem108
[DUPLICATE IFORM] FRSTOR_MEMmem108
[DUPLICATE IFORM] FRSTOR_MEMmem108
[DUPLICATE IFORM] FNSAVE_MEMmem94
[DUPLICATE IFORM] FNSAVE_MEMmem94
[DUPLICATE IFORM] FNSAVE_MEMmem108
[DUPLICATE IFORM] FNSAVE_MEMmem108
[DUPLICATE IFORM] FNSAVE_MEMmem108
[DUPLICATE IFORM] POP_GPRv_58
[DUPLICATE IFORM] JMP_RELBRb
[DUPLICATE IFORM] PUSH_GPRv_50
[DUPLICATE IFORM] CMPXCHG8B_LOCK_MEMq
[DUPLICATE IFORM] CMPXCHG8B_MEMq
[DUPLICATE IFORM] NOP_90
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1B
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1A
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1B
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_GPRv_GPRv_0F1E
[DUPLICATE IFORM] NOP_MEMv_GPRv_0F1C
[DUPLICATE IFORM] NOP_MEMv_GPRv_0F1C
[DUPLICATE IFORM] NOP_MEMv_GPRv_0F1C
[DUPLICATE IFORM] NOP_MEMv_GPRv_0F1C
[DUPLICATE IFORM] NOP_MEMv_GPRv_0F1C
[DUPLICATE IFORM] NOP_MEMv_GPRv_0F1C
[DUPLICATE IFORM] NOP_MEMv_GPRv_0F1C
[DUPLICATE IFORM] NOP_MEMv_GPRv_0F1C
[DUPLICATE IFORM] NOP_MEMv_GPRv_0F1C
[DUPLICATE IFORM] NOP_MEMv_GPRv_0F1C
[DUPLICATE IFORM] MONITOR
[DUPLICATE IFORM] MONITOR
[DUPLICATE IFORM] MONITOR
[DUPLICATE IFORM] PUSHA
[DUPLICATE IFORM] PUSHAD
[DUPLICATE IFORM] POPA
[DUPLICATE IFORM] POPAD
[DUPLICATE IFORM] BOUND_GPRv_MEMa16
[DUPLICATE IFORM] BOUND_GPRv_MEMa32
[DUPLICATE IFORM] REP_INSB
[DUPLICATE IFORM] REP_INSW
[DUPLICATE IFORM] REP_INSW
[DUPLICATE IFORM] REP_INSW
[DUPLICATE IFORM] REP_INSW
[DUPLICATE IFORM] REP_INSW
[DUPLICATE IFORM] INSW
[DUPLICATE IFORM] INSW
[DUPLICATE IFORM] REP_INSD
[DUPLICATE IFORM] REP_INSD
[DUPLICATE IFORM] REP_INSD
[DUPLICATE IFORM] REP_INSD
[DUPLICATE IFORM] REP_INSD
[DUPLICATE IFORM] REP_INSD
[DUPLICATE IFORM] REP_INSD
[DUPLICATE IFORM] INSD
[DUPLICATE IFORM] INSD
[DUPLICATE IFORM] INSD
[DUPLICATE IFORM] REP_OUTSB
[DUPLICATE IFORM] REP_OUTSW
[DUPLICATE IFORM] REP_OUTSW
[DUPLICATE IFORM] REP_OUTSW
[DUPLICATE IFORM] REP_OUTSW
[DUPLICATE IFORM] REP_OUTSW
[DUPLICATE IFORM] OUTSW
[DUPLICATE IFORM] OUTSW
[DUPLICATE IFORM] REP_OUTSD
[DUPLICATE IFORM] REP_OUTSD
[DUPLICATE IFORM] REP_OUTSD
[DUPLICATE IFORM] REP_OUTSD
[DUPLICATE IFORM] REP_OUTSD
[DUPLICATE IFORM] REP_OUTSD
[DUPLICATE IFORM] REP_OUTSD
[DUPLICATE IFORM] OUTSD
[DUPLICATE IFORM] OUTSD
[DUPLICATE IFORM] OUTSD
[DUPLICATE IFORM] JO_RELBRb
[DUPLICATE IFORM] JNO_RELBRb
[DUPLICATE IFORM] JB_RELBRb
[DUPLICATE IFORM] JNB_RELBRb
[DUPLICATE IFORM] JZ_RELBRb
[DUPLICATE IFORM] JNZ_RELBRb
[DUPLICATE IFORM] JBE_RELBRb
[DUPLICATE IFORM] JNBE_RELBRb
[DUPLICATE IFORM] JS_RELBRb
[DUPLICATE IFORM] JNS_RELBRb
[DUPLICATE IFORM] JP_RELBRb
[DUPLICATE IFORM] JNP_RELBRb
[DUPLICATE IFORM] JL_RELBRb
[DUPLICATE IFORM] JNL_RELBRb
[DUPLICATE IFORM] JLE_RELBRb
[DUPLICATE IFORM] JNLE_RELBRb
[DUPLICATE IFORM] XCHG_MEMb_GPR8
[DUPLICATE IFORM] XCHG_MEMv_GPRv
[DUPLICATE IFORM] XCHG_GPRv_OrAX
[DUPLICATE IFORM] XCHG_GPRv_OrAX
[DUPLICATE IFORM] CBW
[DUPLICATE IFORM] CBW
[DUPLICATE IFORM] CWDE
[DUPLICATE IFORM] CWDE
[DUPLICATE IFORM] CWD
[DUPLICATE IFORM] CWD
[DUPLICATE IFORM] CDQ
[DUPLICATE IFORM] CDQ
[DUPLICATE IFORM] PUSHF
[DUPLICATE IFORM] PUSHF
[DUPLICATE IFORM] PUSHFD
[DUPLICATE IFORM] PUSHFQ
[DUPLICATE IFORM] POPF
[DUPLICATE IFORM] POPF
[DUPLICATE IFORM] POPFD
[DUPLICATE IFORM] POPFQ
[DUPLICATE IFORM] REP_MOVSB
[DUPLICATE IFORM] REP_MOVSW
[DUPLICATE IFORM] REP_MOVSW
[DUPLICATE IFORM] REP_MOVSW
[DUPLICATE IFORM] REP_MOVSW
[DUPLICATE IFORM] REP_MOVSW
[DUPLICATE IFORM] MOVSW
[DUPLICATE IFORM] MOVSW
[DUPLICATE IFORM] REP_MOVSD
[DUPLICATE IFORM] REP_MOVSD
[DUPLICATE IFORM] REP_MOVSD
[DUPLICATE IFORM] REP_MOVSD
[DUPLICATE IFORM] REP_MOVSD
[DUPLICATE IFORM] MOVSD
[DUPLICATE IFORM] MOVSD
[DUPLICATE IFORM] REP_MOVSQ
[DUPLICATE IFORM] REPE_CMPSW
[DUPLICATE IFORM] REPE_CMPSW
[DUPLICATE IFORM] REPNE_CMPSW
[DUPLICATE IFORM] REPNE_CMPSW
[DUPLICATE IFORM] CMPSW
[DUPLICATE IFORM] CMPSW
[DUPLICATE IFORM] REPE_CMPSD
[DUPLICATE IFORM] REPE_CMPSD
[DUPLICATE IFORM] REPNE_CMPSD
[DUPLICATE IFORM] REPNE_CMPSD
[DUPLICATE IFORM] CMPSD
[DUPLICATE IFORM] CMPSD
[DUPLICATE IFORM] REP_STOSB
[DUPLICATE IFORM] REP_STOSW
[DUPLICATE IFORM] REP_STOSW
[DUPLICATE IFORM] REP_STOSW
[DUPLICATE IFORM] REP_STOSW
[DUPLICATE IFORM] REP_STOSW
[DUPLICATE IFORM] STOSW
[DUPLICATE IFORM] STOSW
[DUPLICATE IFORM] REP_STOSD
[DUPLICATE IFORM] REP_STOSD
[DUPLICATE IFORM] REP_STOSD
[DUPLICATE IFORM] REP_STOSD
[DUPLICATE IFORM] REP_STOSD
[DUPLICATE IFORM] STOSD
[DUPLICATE IFORM] STOSD
[DUPLICATE IFORM] REP_STOSQ
[DUPLICATE IFORM] REP_LODSB
[DUPLICATE IFORM] REP_LODSW
[DUPLICATE IFORM] REP_LODSW
[DUPLICATE IFORM] REP_LODSW
[DUPLICATE IFORM] REP_LODSW
[DUPLICATE IFORM] REP_LODSW
[DUPLICATE IFORM] LODSW
[DUPLICATE IFORM] LODSW
[DUPLICATE IFORM] REP_LODSD
[DUPLICATE IFORM] REP_LODSD
[DUPLICATE IFORM] REP_LODSD
[DUPLICATE IFORM] REP_LODSD
[DUPLICATE IFORM] REP_LODSD
[DUPLICATE IFORM] LODSD
[DUPLICATE IFORM] LODSD
[DUPLICATE IFORM] REP_LODSQ
[DUPLICATE IFORM] REPE_SCASW
[DUPLICATE IFORM] REPE_SCASW
[DUPLICATE IFORM] REPNE_SCASW
[DUPLICATE IFORM] REPNE_SCASW
[DUPLICATE IFORM] SCASW
[DUPLICATE IFORM] SCASW
[DUPLICATE IFORM] REPE_SCASD
[DUPLICATE IFORM] REPE_SCASD
[DUPLICATE IFORM] REPNE_SCASD
[DUPLICATE IFORM] REPNE_SCASD
[DUPLICATE IFORM] SCASD
[DUPLICATE IFORM] SCASD
[DUPLICATE IFORM] IRET
[DUPLICATE IFORM] IRET
[DUPLICATE IFORM] IRETD
[DUPLICATE IFORM] IRETD
[DUPLICATE IFORM] LOOPNE_RELBRb
[DUPLICATE IFORM] LOOPNE_RELBRb
[DUPLICATE IFORM] LOOPNE_RELBRb
[DUPLICATE IFORM] LOOPE_RELBRb
[DUPLICATE IFORM] LOOPE_RELBRb
[DUPLICATE IFORM] LOOPE_RELBRb
[DUPLICATE IFORM] JECXZ_RELBRb
[DUPLICATE IFORM] SYSENTER
[DUPLICATE IFORM] SYSEXIT
[DUPLICATE IFORM] MOVNTI_MEMd_GPR32
[DUPLICATE IFORM] MOVD_XMMdq_MEMd
[DUPLICATE IFORM] MOVD_XMMdq_GPR32
[DUPLICATE IFORM] MOVD_MEMd_XMMd
[DUPLICATE IFORM] MOVD_GPR32_XMMd
[DUPLICATE IFORM] MOVD_MMXq_MEMd
[DUPLICATE IFORM] MOVD_MMXq_GPR32
[DUPLICATE IFORM] MOVD_MEMd_MMXd
[DUPLICATE IFORM] MOVD_GPR32_MMXd
[DUPLICATE IFORM] PCMPESTRI_XMMdq_MEMdq_IMMb
[DUPLICATE IFORM] PCMPESTRI_XMMdq_XMMdq_IMMb
[DUPLICATE IFORM] PCMPISTRI_XMMdq_MEMdq_IMMb
[DUPLICATE IFORM] PCMPISTRI_XMMdq_XMMdq_IMMb
[DUPLICATE IFORM] PCMPESTRM_XMMdq_MEMdq_IMMb
[DUPLICATE IFORM] PCMPESTRM_XMMdq_XMMdq_IMMb
[DUPLICATE IFORM] REP_MONTMUL
[DUPLICATE IFORM] MONITORX
[DUPLICATE IFORM] MONITORX
[DUPLICATE IFORM] MONITORX
[DUPLICATE IFORM] BNDMOV_BND_MEMq
[DUPLICATE IFORM] BNDMOV_BND_BND
[DUPLICATE IFORM] BNDMOV_MEMq_BND
[DUPLICATE IFORM] BNDLDX_BND_MEMbnd64
[DUPLICATE IFORM] BNDLDX_BND_MEMbnd64
[DUPLICATE IFORM] BNDSTX_MEMbnd64_BND
[DUPLICATE IFORM] BNDSTX_MEMbnd64_BND
[DUPLICATE IFORM] MOVDIR64B_GPRa_MEM
[DUPLICATE IFORM] BSF_GPRv_MEMv
[DUPLICATE IFORM] BSF_GPRv_GPRv
[DUPLICATE IFORM] BSR_GPRv_MEMv
[DUPLICATE IFORM] BSR_GPRv_GPRv
[DUPLICATE IFORM] WBINVD
[DUPLICATE IFORM] TDCALL
[DUPLICATE IFORM] VPCMOV_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPCMOV_YMMqq_YMMqq_YMMqq_YMMqq
[DUPLICATE IFORM] VPPERM_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPROTB_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPROTW_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPROTD_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPROTQ_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPSHLB_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPSHLW_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPSHLD_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPSHLQ_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPSHAB_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPSHAW_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPSHAD_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VPSHAQ_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VFMADDSUBPS_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VFMADDSUBPS_YMMqq_YMMqq_YMMqq_YMMqq
[DUPLICATE IFORM] VFMADDSUBPD_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VFMADDSUBPD_YMMqq_YMMqq_YMMqq_YMMqq
[DUPLICATE IFORM] VFMSUBADDPS_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VFMSUBADDPS_YMMqq_YMMqq_YMMqq_YMMqq
[DUPLICATE IFORM] VFMSUBADDPD_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VFMSUBADDPD_YMMqq_YMMqq_YMMqq_YMMqq
[DUPLICATE IFORM] VFMADDPS_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VFMADDPS_YMMqq_YMMqq_YMMqq_YMMqq
[DUPLICATE IFORM] VFMADDPD_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VFMADDPD_YMMqq_YMMqq_YMMqq_YMMqq
[DUPLICATE IFORM] VFMADDSS_XMMdq_XMMd_XMMd_XMMd
[DUPLICATE IFORM] VFMADDSD_XMMdq_XMMq_XMMq_XMMq
[DUPLICATE IFORM] VFMSUBPS_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VFMSUBPS_YMMqq_YMMqq_YMMqq_YMMqq
[DUPLICATE IFORM] VFMSUBPD_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VFMSUBPD_YMMqq_YMMqq_YMMqq_YMMqq
[DUPLICATE IFORM] VFMSUBSS_XMMdq_XMMd_XMMd_XMMd
[DUPLICATE IFORM] VFMSUBSD_XMMdq_XMMq_XMMq_XMMq
[DUPLICATE IFORM] VFNMADDPS_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VFNMADDPS_YMMqq_YMMqq_YMMqq_YMMqq
[DUPLICATE IFORM] VFNMADDPD_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VFNMADDPD_YMMqq_YMMqq_YMMqq_YMMqq
[DUPLICATE IFORM] VFNMADDSS_XMMdq_XMMd_XMMd_XMMd
[DUPLICATE IFORM] VFNMADDSD_XMMdq_XMMq_XMMq_XMMq
[DUPLICATE IFORM] VFNMSUBPS_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VFNMSUBPS_YMMqq_YMMqq_YMMqq_YMMqq
[DUPLICATE IFORM] VFNMSUBPD_XMMdq_XMMdq_XMMdq_XMMdq
[DUPLICATE IFORM] VFNMSUBPD_YMMqq_YMMqq_YMMqq_YMMqq
[DUPLICATE IFORM] VFNMSUBSS_XMMdq_XMMd_XMMd_XMMd
[DUPLICATE IFORM] VFNMSUBSD_XMMdq_XMMq_XMMq_XMMq
[DUPLICATE IFORM] VPERMIL2PS_XMMdq_XMMdq_XMMdq_XMMdq_IMMb
[DUPLICATE IFORM] VPERMIL2PS_YMMqq_YMMqq_YMMqq_YMMqq_IMMb
[DUPLICATE IFORM] VPERMIL2PD_XMMdq_XMMdq_XMMdq_XMMdq_IMMb
[DUPLICATE IFORM] VPERMIL2PD_YMMqq_YMMqq_YMMqq_YMMqq_IMMb
[DUPLICATE IFORM] VCVTSD2SI_GPR32d_MEMq
[DUPLICATE IFORM] VCVTSD2SI_GPR32d_XMMq
[DUPLICATE IFORM] VCVTTSD2SI_GPR32d_MEMq
[DUPLICATE IFORM] VCVTTSD2SI_GPR32d_XMMq
[DUPLICATE IFORM] VCVTSS2SI_GPR32d_MEMd
[DUPLICATE IFORM] VCVTSS2SI_GPR32d_XMMd
[DUPLICATE IFORM] VCVTTSS2SI_GPR32d_MEMd
[DUPLICATE IFORM] VCVTTSS2SI_GPR32d_XMMd
[DUPLICATE IFORM] VCVTSI2SD_XMMdq_XMMdq_MEMd
[DUPLICATE IFORM] VCVTSI2SD_XMMdq_XMMdq_GPR32d
[DUPLICATE IFORM] VCVTSI2SS_XMMdq_XMMdq_MEMd
[DUPLICATE IFORM] VCVTSI2SS_XMMdq_XMMdq_GPR32d
[DUPLICATE IFORM] VMOVD_XMMdq_MEMd
[DUPLICATE IFORM] VMOVD_XMMdq_GPR32d
[DUPLICATE IFORM] VMOVD_MEMd_XMMd
[DUPLICATE IFORM] VMOVD_GPR32d_XMMd
[DUPLICATE IFORM] VPEXTRD_MEMd_XMMdq_IMMb
[DUPLICATE IFORM] VPEXTRD_GPR32d_XMMdq_IMMb
[DUPLICATE IFORM] VPINSRD_XMMdq_XMMdq_MEMd_IMMb
[DUPLICATE IFORM] VPINSRD_XMMdq_XMMdq_GPR32d_IMMb
[DUPLICATE IFORM] VPCMPESTRI_XMMdq_MEMdq_IMMb
[DUPLICATE IFORM] VPCMPESTRI_XMMdq_XMMdq_IMMb
[DUPLICATE IFORM] VPCMPISTRI_XMMdq_MEMdq_IMMb
[DUPLICATE IFORM] VPCMPISTRI_XMMdq_XMMdq_IMMb
[DUPLICATE IFORM] VPCMPESTRM_XMMdq_MEMdq_IMMb
[DUPLICATE IFORM] VPCMPESTRM_XMMdq_XMMdq_IMMb
[DUPLICATE IFORM] PDEP_GPR32d_GPR32d_MEMd
[DUPLICATE IFORM] PDEP_GPR32d_GPR32d_GPR32d
[DUPLICATE IFORM] PEXT_GPR32d_GPR32d_MEMd
[DUPLICATE IFORM] PEXT_GPR32d_GPR32d_GPR32d
[DUPLICATE IFORM] ANDN_GPR32d_GPR32d_MEMd
[DUPLICATE IFORM] ANDN_GPR32d_GPR32d_GPR32d
[DUPLICATE IFORM] BLSR_GPR32d_MEMd
[DUPLICATE IFORM] BLSR_GPR32d_GPR32d
[DUPLICATE IFORM] BLSMSK_GPR32d_MEMd
[DUPLICATE IFORM] BLSMSK_GPR32d_GPR32d
[DUPLICATE IFORM] BLSI_GPR32d_MEMd
[DUPLICATE IFORM] BLSI_GPR32d_GPR32d
[DUPLICATE IFORM] BZHI_GPR32d_MEMd_GPR32d
[DUPLICATE IFORM] BZHI_GPR32d_GPR32d_GPR32d
[DUPLICATE IFORM] BEXTR_GPR32d_MEMd_GPR32d
[DUPLICATE IFORM] BEXTR_GPR32d_GPR32d_GPR32d
[DUPLICATE IFORM] SHLX_GPR32d_MEMd_GPR32d
[DUPLICATE IFORM] SHLX_GPR32d_GPR32d_GPR32d
[DUPLICATE IFORM] SARX_GPR32d_MEMd_GPR32d
[DUPLICATE IFORM] SARX_GPR32d_GPR32d_GPR32d
[DUPLICATE IFORM] SHRX_GPR32d_MEMd_GPR32d
[DUPLICATE IFORM] SHRX_GPR32d_GPR32d_GPR32d
[DUPLICATE IFORM] MULX_GPR32d_GPR32d_GPR32d
[DUPLICATE IFORM] MULX_GPR32d_GPR32d_MEMd
[DUPLICATE IFORM] RORX_GPR32d_GPR32d_IMMb
[DUPLICATE IFORM] RORX_GPR32d_MEMd_IMMb
[DUPLICATE IFORM] KMOVD_MASKmskw_GPR32u32_AVX512
[DUPLICATE IFORM] KMOVD_GPR32u32_MASKmskw_AVX512
[DUPLICATE IFORM] VEXP2PD_ZMMf64_MASKmskw_ZMMf64_AVX512ER
[DUPLICATE IFORM] VEXP2PS_ZMMf32_MASKmskw_ZMMf32_AVX512ER
[DUPLICATE IFORM] VRCP28PD_ZMMf64_MASKmskw_ZMMf64_AVX512ER
[DUPLICATE IFORM] VRCP28PS_ZMMf32_MASKmskw_ZMMf32_AVX512ER
[DUPLICATE IFORM] VRCP28SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512ER
[DUPLICATE IFORM] VRCP28SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512ER
[DUPLICATE IFORM] VRSQRT28PD_ZMMf64_MASKmskw_ZMMf64_AVX512ER
[DUPLICATE IFORM] VRSQRT28PS_ZMMf32_MASKmskw_ZMMf32_AVX512ER
[DUPLICATE IFORM] VRSQRT28SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512ER
[DUPLICATE IFORM] VRSQRT28SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512ER
[DUPLICATE IFORM] VADDPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VADDPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VADDSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VADDSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VCMPPD_MASKmskw_MASKmskw_ZMMf64_ZMMf64_IMM8_AVX512
[DUPLICATE IFORM] VCMPPS_MASKmskw_MASKmskw_ZMMf32_ZMMf32_IMM8_AVX512
[DUPLICATE IFORM] VCMPSD_MASKmskw_MASKmskw_XMMf64_XMMf64_IMM8_AVX512
[DUPLICATE IFORM] VCMPSS_MASKmskw_MASKmskw_XMMf32_XMMf32_IMM8_AVX512
[DUPLICATE IFORM] VCOMISD_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VCOMISS_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTDQ2PD_ZMMf64_MASKmskw_YMMi32_AVX512
[DUPLICATE IFORM] VCVTDQ2PS_ZMMf32_MASKmskw_ZMMi32_AVX512
[DUPLICATE IFORM] VCVTPD2DQ_YMMi32_MASKmskw_ZMMf64_AVX512_VL512
[DUPLICATE IFORM] VCVTPD2PS_YMMf32_MASKmskw_ZMMf64_AVX512_VL512
[DUPLICATE IFORM] VCVTPD2UDQ_YMMu32_MASKmskw_ZMMf64_AVX512_VL512
[DUPLICATE IFORM] VCVTPH2PS_ZMMf32_MASKmskw_YMMf16_AVX512
[DUPLICATE IFORM] VCVTPS2DQ_ZMMi32_MASKmskw_ZMMf32_AVX512
[DUPLICATE IFORM] VCVTPS2PD_ZMMf64_MASKmskw_YMMf32_AVX512
[DUPLICATE IFORM] VCVTPS2PH_YMMf16_MASKmskw_ZMMf32_IMM8_AVX512
[DUPLICATE IFORM] VCVTPS2UDQ_ZMMu32_MASKmskw_ZMMf32_AVX512
[DUPLICATE IFORM] VCVTSD2SI_GPR32i32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTSD2SI_GPR32i32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTSD2SI_GPR32i32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTSD2SI_GPR32i32_MEMf64_AVX512
[DUPLICATE IFORM] VCVTSD2SI_GPR64i64_XMMf64_AVX512
[DUPLICATE IFORM] VCVTSD2SS_XMMf32_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VCVTSD2USI_GPR32u32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTSD2USI_GPR32u32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTSD2USI_GPR32u32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTSD2USI_GPR32u32_MEMf64_AVX512
[DUPLICATE IFORM] VCVTSD2USI_GPR64u64_XMMf64_AVX512
[DUPLICATE IFORM] VCVTSI2SD_XMMf64_XMMf64_GPR32i32_AVX512
[DUPLICATE IFORM] VCVTSI2SD_XMMf64_XMMf64_MEMi32_AVX512
[DUPLICATE IFORM] VCVTSI2SD_XMMf64_XMMf64_GPR64i64_AVX512
[DUPLICATE IFORM] VCVTSI2SS_XMMf32_XMMf32_GPR32i32_AVX512
[DUPLICATE IFORM] VCVTSI2SS_XMMf32_XMMf32_GPR32i32_AVX512
[DUPLICATE IFORM] VCVTSI2SS_XMMf32_XMMf32_GPR32i32_AVX512
[DUPLICATE IFORM] VCVTSI2SS_XMMf32_XMMf32_MEMi32_AVX512
[DUPLICATE IFORM] VCVTSI2SS_XMMf32_XMMf32_GPR64i64_AVX512
[DUPLICATE IFORM] VCVTSS2SD_XMMf64_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTSS2SI_GPR32i32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTSS2SI_GPR32i32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTSS2SI_GPR32i32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTSS2SI_GPR32i32_MEMf32_AVX512
[DUPLICATE IFORM] VCVTSS2SI_GPR64i64_XMMf32_AVX512
[DUPLICATE IFORM] VCVTSS2USI_GPR32u32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTSS2USI_GPR32u32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTSS2USI_GPR32u32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTSS2USI_GPR32u32_MEMf32_AVX512
[DUPLICATE IFORM] VCVTSS2USI_GPR64u64_XMMf32_AVX512
[DUPLICATE IFORM] VCVTTPD2DQ_YMMi32_MASKmskw_ZMMf64_AVX512_VL512
[DUPLICATE IFORM] VCVTTPD2UDQ_YMMu32_MASKmskw_ZMMf64_AVX512_VL512
[DUPLICATE IFORM] VCVTTPS2DQ_ZMMi32_MASKmskw_ZMMf32_AVX512
[DUPLICATE IFORM] VCVTTPS2UDQ_ZMMu32_MASKmskw_ZMMf32_AVX512
[DUPLICATE IFORM] VCVTTSD2SI_GPR32i32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTTSD2SI_GPR32i32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTTSD2SI_GPR32i32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTTSD2SI_GPR32i32_MEMf64_AVX512
[DUPLICATE IFORM] VCVTTSD2SI_GPR64i64_XMMf64_AVX512
[DUPLICATE IFORM] VCVTTSD2USI_GPR32u32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTTSD2USI_GPR32u32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTTSD2USI_GPR32u32_XMMf64_AVX512
[DUPLICATE IFORM] VCVTTSD2USI_GPR32u32_MEMf64_AVX512
[DUPLICATE IFORM] VCVTTSD2USI_GPR64u64_XMMf64_AVX512
[DUPLICATE IFORM] VCVTTSS2SI_GPR32i32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTTSS2SI_GPR32i32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTTSS2SI_GPR32i32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTTSS2SI_GPR32i32_MEMf32_AVX512
[DUPLICATE IFORM] VCVTTSS2SI_GPR64i64_XMMf32_AVX512
[DUPLICATE IFORM] VCVTTSS2USI_GPR32u32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTTSS2USI_GPR32u32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTTSS2USI_GPR32u32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTTSS2USI_GPR32u32_MEMf32_AVX512
[DUPLICATE IFORM] VCVTTSS2USI_GPR64u64_XMMf32_AVX512
[DUPLICATE IFORM] VCVTUDQ2PD_ZMMf64_MASKmskw_YMMu32_AVX512
[DUPLICATE IFORM] VCVTUDQ2PS_ZMMf32_MASKmskw_ZMMu32_AVX512
[DUPLICATE IFORM] VCVTUSI2SD_XMMf64_XMMf64_GPR32u32_AVX512
[DUPLICATE IFORM] VCVTUSI2SD_XMMf64_XMMf64_MEMu32_AVX512
[DUPLICATE IFORM] VCVTUSI2SD_XMMf64_XMMf64_GPR64u64_AVX512
[DUPLICATE IFORM] VCVTUSI2SS_XMMf32_XMMf32_GPR32u32_AVX512
[DUPLICATE IFORM] VCVTUSI2SS_XMMf32_XMMf32_GPR32u32_AVX512
[DUPLICATE IFORM] VCVTUSI2SS_XMMf32_XMMf32_GPR32u32_AVX512
[DUPLICATE IFORM] VCVTUSI2SS_XMMf32_XMMf32_MEMu32_AVX512
[DUPLICATE IFORM] VCVTUSI2SS_XMMf32_XMMf32_GPR64u64_AVX512
[DUPLICATE IFORM] VDIVPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VDIVPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VDIVSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VDIVSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFIXUPIMMPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_IMM8_AVX512
[DUPLICATE IFORM] VFIXUPIMMPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_IMM8_AVX512
[DUPLICATE IFORM] VFIXUPIMMSD_XMMf64_MASKmskw_XMMf64_XMMf64_IMM8_AVX512
[DUPLICATE IFORM] VFIXUPIMMSS_XMMf32_MASKmskw_XMMf32_XMMf32_IMM8_AVX512
[DUPLICATE IFORM] VFMADD132PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFMADD132PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFMADD132SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VFMADD132SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFMADD213PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFMADD213PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFMADD213SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VFMADD213SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFMADD231PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFMADD231PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFMADD231SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VFMADD231SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFMADDSUB132PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFMADDSUB132PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFMADDSUB213PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFMADDSUB213PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFMADDSUB231PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFMADDSUB231PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFMSUB132PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFMSUB132PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFMSUB132SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VFMSUB132SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFMSUB213PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFMSUB213PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFMSUB213SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VFMSUB213SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFMSUB231PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFMSUB231PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFMSUB231SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VFMSUB231SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFMSUBADD132PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFMSUBADD132PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFMSUBADD213PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFMSUBADD213PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFMSUBADD231PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFMSUBADD231PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFNMADD132PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFNMADD132PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFNMADD132SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VFNMADD132SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFNMADD213PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFNMADD213PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFNMADD213SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VFNMADD213SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFNMADD231PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFNMADD231PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFNMADD231SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VFNMADD231SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFNMSUB132PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFNMSUB132PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFNMSUB132SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VFNMSUB132SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFNMSUB213PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFNMSUB213PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFNMSUB213SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VFNMSUB213SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VFNMSUB231PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VFNMSUB231PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VFNMSUB231SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VFNMSUB231SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VGETEXPPD_ZMMf64_MASKmskw_ZMMf64_AVX512
[DUPLICATE IFORM] VGETEXPPS_ZMMf32_MASKmskw_ZMMf32_AVX512
[DUPLICATE IFORM] VGETEXPSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VGETEXPSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VGETMANTPD_ZMMf64_MASKmskw_ZMMf64_IMM8_AVX512
[DUPLICATE IFORM] VGETMANTPS_ZMMf32_MASKmskw_ZMMf32_IMM8_AVX512
[DUPLICATE IFORM] VGETMANTSD_XMMf64_MASKmskw_XMMf64_XMMf64_IMM8_AVX512
[DUPLICATE IFORM] VGETMANTSS_XMMf32_MASKmskw_XMMf32_XMMf32_IMM8_AVX512
[DUPLICATE IFORM] VMAXPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VMAXPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VMAXSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VMAXSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VMINPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VMINPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VMINSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VMINSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VMOVAPD_ZMMf64_MASKmskw_ZMMf64_AVX512
[DUPLICATE IFORM] VMOVAPD_XMMf64_MASKmskw_XMMf64_AVX512
[DUPLICATE IFORM] VMOVAPD_YMMf64_MASKmskw_YMMf64_AVX512
[DUPLICATE IFORM] VMOVAPS_ZMMf32_MASKmskw_ZMMf32_AVX512
[DUPLICATE IFORM] VMOVAPS_XMMf32_MASKmskw_XMMf32_AVX512
[DUPLICATE IFORM] VMOVAPS_YMMf32_MASKmskw_YMMf32_AVX512
[DUPLICATE IFORM] VMOVD_XMMu32_GPR32u32_AVX512
[DUPLICATE IFORM] VMOVD_XMMu32_MEMu32_AVX512
[DUPLICATE IFORM] VMOVD_GPR32u32_XMMu32_AVX512
[DUPLICATE IFORM] VMOVD_MEMu32_XMMu32_AVX512
[DUPLICATE IFORM] VMOVDQA32_ZMMu32_MASKmskw_ZMMu32_AVX512
[DUPLICATE IFORM] VMOVDQA32_XMMu32_MASKmskw_XMMu32_AVX512
[DUPLICATE IFORM] VMOVDQA32_YMMu32_MASKmskw_YMMu32_AVX512
[DUPLICATE IFORM] VMOVDQA64_ZMMu64_MASKmskw_ZMMu64_AVX512
[DUPLICATE IFORM] VMOVDQA64_XMMu64_MASKmskw_XMMu64_AVX512
[DUPLICATE IFORM] VMOVDQA64_YMMu64_MASKmskw_YMMu64_AVX512
[DUPLICATE IFORM] VMOVDQU32_ZMMu32_MASKmskw_ZMMu32_AVX512
[DUPLICATE IFORM] VMOVDQU32_XMMu32_MASKmskw_XMMu32_AVX512
[DUPLICATE IFORM] VMOVDQU32_YMMu32_MASKmskw_YMMu32_AVX512
[DUPLICATE IFORM] VMOVDQU64_ZMMu64_MASKmskw_ZMMu64_AVX512
[DUPLICATE IFORM] VMOVDQU64_XMMu64_MASKmskw_XMMu64_AVX512
[DUPLICATE IFORM] VMOVDQU64_YMMu64_MASKmskw_YMMu64_AVX512
[DUPLICATE IFORM] VMOVQ_XMMu64_MEMu64_AVX512
[DUPLICATE IFORM] VMOVQ_XMMu64_XMMu64_AVX512
[DUPLICATE IFORM] VMOVQ_MEMu64_XMMu64_AVX512
[DUPLICATE IFORM] VMOVSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VMOVSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VMOVUPD_ZMMf64_MASKmskw_ZMMf64_AVX512
[DUPLICATE IFORM] VMOVUPD_XMMf64_MASKmskw_XMMf64_AVX512
[DUPLICATE IFORM] VMOVUPD_YMMf64_MASKmskw_YMMf64_AVX512
[DUPLICATE IFORM] VMOVUPS_ZMMf32_MASKmskw_ZMMf32_AVX512
[DUPLICATE IFORM] VMOVUPS_XMMf32_MASKmskw_XMMf32_AVX512
[DUPLICATE IFORM] VMOVUPS_YMMf32_MASKmskw_YMMf32_AVX512
[DUPLICATE IFORM] VMULPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VMULPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VMULSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VMULSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VPBROADCASTD_ZMMu32_MASKmskw_GPR32u32_AVX512
[DUPLICATE IFORM] VPBROADCASTD_XMMu32_MASKmskw_GPR32u32_AVX512
[DUPLICATE IFORM] VPBROADCASTD_YMMu32_MASKmskw_GPR32u32_AVX512
[DUPLICATE IFORM] VRNDSCALEPD_ZMMf64_MASKmskw_ZMMf64_IMM8_AVX512
[DUPLICATE IFORM] VRNDSCALEPS_ZMMf32_MASKmskw_ZMMf32_IMM8_AVX512
[DUPLICATE IFORM] VRNDSCALESD_XMMf64_MASKmskw_XMMf64_XMMf64_IMM8_AVX512
[DUPLICATE IFORM] VRNDSCALESS_XMMf32_MASKmskw_XMMf32_XMMf32_IMM8_AVX512
[DUPLICATE IFORM] VSCALEFPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VSCALEFPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VSCALEFSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VSCALEFSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VSQRTPD_ZMMf64_MASKmskw_ZMMf64_AVX512
[DUPLICATE IFORM] VSQRTPS_ZMMf32_MASKmskw_ZMMf32_AVX512
[DUPLICATE IFORM] VSQRTSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VSQRTSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VSUBPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512
[DUPLICATE IFORM] VSUBPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512
[DUPLICATE IFORM] VSUBSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VSUBSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VUCOMISD_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VUCOMISS_XMMf32_XMMf32_AVX512
[DUPLICATE IFORM] VCVTPD2QQ_ZMMi64_MASKmskw_ZMMf64_AVX512
[DUPLICATE IFORM] VCVTPD2UQQ_ZMMu64_MASKmskw_ZMMf64_AVX512
[DUPLICATE IFORM] VCVTPS2QQ_ZMMi64_MASKmskw_YMMf32_AVX512
[DUPLICATE IFORM] VCVTPS2UQQ_ZMMu64_MASKmskw_YMMf32_AVX512
[DUPLICATE IFORM] VCVTQQ2PD_ZMMi64_MASKmskw_ZMMf64_AVX512
[DUPLICATE IFORM] VCVTQQ2PS_YMMf32_MASKmskw_ZMMu64_AVX512_VL512
[DUPLICATE IFORM] VCVTTPD2QQ_ZMMi64_MASKmskw_ZMMf64_AVX512
[DUPLICATE IFORM] VCVTTPD2UQQ_ZMMu64_MASKmskw_ZMMf64_AVX512
[DUPLICATE IFORM] VCVTTPS2QQ_ZMMi64_MASKmskw_YMMf32_AVX512
[DUPLICATE IFORM] VCVTTPS2UQQ_ZMMu64_MASKmskw_YMMf32_AVX512
[DUPLICATE IFORM] VCVTUQQ2PD_ZMMf64_MASKmskw_ZMMu64_AVX512
[DUPLICATE IFORM] VCVTUQQ2PS_YMMf32_MASKmskw_ZMMu64_AVX512_VL512
[DUPLICATE IFORM] VMOVDQU16_XMMu16_MASKmskw_XMMu16_AVX512
[DUPLICATE IFORM] VMOVDQU16_YMMu16_MASKmskw_YMMu16_AVX512
[DUPLICATE IFORM] VMOVDQU16_ZMMu16_MASKmskw_ZMMu16_AVX512
[DUPLICATE IFORM] VMOVDQU8_XMMu8_MASKmskw_XMMu8_AVX512
[DUPLICATE IFORM] VMOVDQU8_YMMu8_MASKmskw_YMMu8_AVX512
[DUPLICATE IFORM] VMOVDQU8_ZMMu8_MASKmskw_ZMMu8_AVX512
[DUPLICATE IFORM] VPEXTRD_GPR32u32_XMMu32_IMM8_AVX512
[DUPLICATE IFORM] VPEXTRD_MEMu32_XMMu32_IMM8_AVX512
[DUPLICATE IFORM] VPEXTRW_GPR32u16_XMMu16_IMM8_AVX512_C5
[DUPLICATE IFORM] VPINSRD_XMMu32_XMMu32_GPR32u32_IMM8_AVX512
[DUPLICATE IFORM] VPINSRD_XMMu32_XMMu32_MEMu32_IMM8_AVX512
[DUPLICATE IFORM] VRANGEPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_IMM8_AVX512
[DUPLICATE IFORM] VRANGEPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_IMM8_AVX512
[DUPLICATE IFORM] VRANGESD_XMMf64_MASKmskw_XMMf64_XMMf64_IMM8_AVX512
[DUPLICATE IFORM] VRANGESS_XMMf32_MASKmskw_XMMf32_XMMf32_IMM8_AVX512
[DUPLICATE IFORM] VREDUCEPD_ZMMf64_MASKmskw_ZMMf64_IMM8_AVX512
[DUPLICATE IFORM] VREDUCEPS_ZMMf32_MASKmskw_ZMMf32_IMM8_AVX512
[DUPLICATE IFORM] VREDUCESD_XMMf64_MASKmskw_XMMf64_XMMf64_IMM8_AVX512
[DUPLICATE IFORM] VREDUCESS_XMMf32_MASKmskw_XMMf32_XMMf32_IMM8_AVX512
[DUPLICATE IFORM] VADDPH_ZMMf16_MASKmskw_ZMMf16_ZMMf16_AVX512
[DUPLICATE IFORM] VADDSH_XMMf16_MASKmskw_XMMf16_XMMf16_AVX512
[DUPLICATE IFORM] VCMPPH_MASKmskw_MASKmskw_ZMMf16_ZMMf16_IMM8_AVX512
[DUPLICATE IFORM] VCMPSH_MASKmskw_MASKmskw_XMMf16_XMMf16_IMM8_AVX512
[DUPLICATE IFORM] VCOMISH_XMMf16_XMMf16_AVX512
[DUPLICATE IFORM] VCVTDQ2PH_YMMf16_MASKmskw_ZMMi32_AVX512
[DUPLICATE IFORM] VCVTPD2PH_XMMf16_MASKmskw_ZMMf64_AVX512
[DUPLICATE IFORM] VCVTPH2DQ_ZMMi32_MASKmskw_YMMf16_AVX512
[DUPLICATE IFORM] VCVTPH2PD_ZMMf64_MASKmskw_XMMf16_AVX512
[DUPLICATE IFORM] VCVTPH2PSX_ZMMf32_MASKmskw_YMMf16_AVX512
[DUPLICATE IFORM] VCVTPH2QQ_ZMMi64_MASKmskw_XMMf16_AVX512
[DUPLICATE IFORM] VCVTPH2UDQ_ZMMu32_MASKmskw_YMMf16_AVX512
[DUPLICATE IFORM] VCVTPH2UQQ_ZMMu64_MASKmskw_XMMf16_AVX512
[DUPLICATE IFORM] VCVTPH2UW_ZMMu16_MASKmskw_ZMMf16_AVX512
[DUPLICATE IFORM] VCVTPH2W_ZMMi16_MASKmskw_ZMMf16_AVX512
[DUPLICATE IFORM] VCVTPS2PHX_YMMf16_MASKmskw_ZMMf32_AVX512
[DUPLICATE IFORM] VCVTQQ2PH_XMMf16_MASKmskw_ZMMu64_AVX512
[DUPLICATE IFORM] VCVTSD2SH_XMMf16_MASKmskw_XMMf64_XMMf64_AVX512
[DUPLICATE IFORM] VCVTSH2SD_XMMf64_MASKmskw_XMMf64_XMMf16_AVX512
[DUPLICATE IFORM] VCVTSH2SI_GPR32i32_XMMf16_AVX512
[DUPLICATE IFORM] VCVTSH2SI_GPR32i32_XMMf16_AVX512
[DUPLICATE IFORM] VCVTSH2SI_GPR32i32_XMMf16_AVX512
[DUPLICATE IFORM] VCVTSH2SI_GPR32i32_MEMf16_AVX512
[DUPLICATE IFORM] VCVTSH2SI_GPR64i64_XMMf16_AVX512
[DUPLICATE IFORM] VCVTSH2SS_XMMf32_MASKmskw_XMMf32_XMMf16_AVX512
[DUPLICATE IFORM] VCVTSH2USI_GPR32u32_XMMf16_AVX512
[DUPLICATE IFORM] VCVTSH2USI_GPR32u32_XMMf16_AVX512
[DUPLICATE IFORM] VCVTSH2USI_GPR32u32_XMMf16_AVX512
[DUPLICATE IFORM] VCVTSH2USI_GPR32u32_MEMf16_AVX512
[DUPLICATE IFORM] VCVTSH2USI_GPR64u64_XMMf16_AVX512
[DUPLICATE IFORM] VCVTSI2SH_XMMf16_XMMf16_GPR32i32_AVX512
[DUPLICATE IFORM] VCVTSI2SH_XMMf16_XMMf16_GPR32i32_AVX512
[DUPLICATE IFORM] VCVTSI2SH_XMMf16_XMMf16_GPR32i32_AVX512
[DUPLICATE IFORM] VCVTSI2SH_XMMf16_XMMf16_MEMi32_AVX512
[DUPLICATE IFORM] VCVTSI2SH_XMMf16_XMMf16_GPR64i64_AVX512
[DUPLICATE IFORM] VCVTSS2SH_XMMf16_MASKmskw_XMMf16_XMMf32_AVX512
[DUPLICATE IFORM] VCVTTPH2DQ_ZMMi32_MASKmskw_YMMf16_AVX512
[DUPLICATE IFORM] VCVTTPH2QQ_ZMMi64_MASKmskw_XMMf16_AVX512
[DUPLICATE IFORM] VCVTTPH2UDQ_ZMMu32_MASKmskw_YMMf16_AVX512
[DUPLICATE IFORM] VCVTTPH2UQQ_ZMMu64_MASKmskw_XMMf16_AVX512
[DUPLICATE IFORM] VCVTTPH2UW_ZMMu16_MASKmskw_ZMMf16_AVX512
[DUPLICATE IFORM] VCVTTPH2W_ZMMi16_MASKmskw_ZMMf16_AVX512
[DUPLICATE IFORM] VCVTTSH2SI_GPR32i32_XMMf16_AVX512
[DUPLICATE IFORM] VCVTTSH2SI_GPR32i32_XMMf16_AVX512
[DUPLICATE IFORM] VCVTTSH2SI_GPR32i32_XMMf16_AVX512
[DUPLICATE IFORM] VCVTTSH2SI_GPR32i32_MEMf16_AVX512
[DUPLICATE IFORM] VCVTTSH2SI_GPR64i64_XMMf16_AVX512
[DUPLICATE IFORM] VCVTTSH2USI_GPR32u32_XMMf16_AVX512
[DUPLICATE IFORM] VCVTTSH2USI_GPR32u32_XMMf16_AVX512
[DUPLICATE IFORM] VCVTTSH2USI_GPR32u32_XMMf16_AVX512
[DUPLICATE IFORM] VCVTTSH2USI_GPR32u32_MEMf16_AVX512
[DUPLICATE IFORM] VCVTTSH2USI_GPR64u64_XMMf16_AVX512
[DUPLICATE IFORM] VCVTUDQ2PH_YMMf16_MASKmskw_ZMMu32_AVX512
[DUPLICATE IFORM] VCVTUQQ2PH_XMMf16_MASKmskw_ZMMu64_AVX512
[DUPLICATE IFORM] VCVTUSI2SH_XMMf16_XMMf16_GPR32u32_AVX512
[DUPLICATE IFORM] VCVTUSI2SH_XMMf16_XMMf16_GPR32u32_AVX512
[DUPLICATE IFORM] VCVTUSI2SH_XMMf16_XMMf16_GPR32u32_AVX512
[DUPLICATE IFORM] VCVTUSI2SH_XMMf16_XMMf16_MEMu32_AVX512
[DUPLICATE IFORM] VCVTUSI2SH_XMMf16_XMMf16_GPR64u64_AVX512
[DUPLICATE IFORM] VCVTUW2PH_ZMMf16_MASKmskw_ZMMu16_AVX512
[DUPLICATE IFORM] VCVTW2PH_ZMMf16_MASKmskw_ZMMi16_AVX512
[DUPLICATE IFORM] VDIVPH_ZMMf16_MASKmskw_ZMMf16_ZMMf16_AVX512
[DUPLICATE IFORM] VDIVSH_XMMf16_MASKmskw_XMMf16_XMMf16_AVX512
[DUPLICATE IFORM] VFCMADDCPH_ZMM2f16_MASKmskw_ZMM2f16_ZMM2f16_AVX512
[DUPLICATE IFORM] VFCMADDCSH_XMM2f16_MASKmskw_XMM2f16_XMM2f16_AVX512
[DUPLICATE IFORM] VFCMULCPH_ZMM2f16_MASKmskw_ZMM2f16_ZMM2f16_AVX512
[DUPLICATE IFORM] VFCMULCSH_XMM2f16_MASKmskw_XMM2f16_XMM2f16_AVX512
[DUPLICATE IFORM] VFMADD132PH_ZMMf16_MASKmskw_ZMMf16_ZMMf16_AVX512
[DUPLICATE IFORM] VFMADD132SH_XMMf16_MASKmskw_XMMf16_XMMf16_AVX512
[DUPLICATE IFORM] VFMADD213PH_ZMMf16_MASKmskw_ZMMf16_ZMMf16_AVX512
[DUPLICATE IFORM] VFMADD213SH_XMMf16_MASKmskw_XMMf16_XMMf16_AVX512
[DUPLICATE IFORM] VFMADD231PH_ZMMf16_MASKmskw_ZMMf16_ZMMf16_AVX512
[DUPLICATE IFORM] VFMADD231SH_XMMf16_MASKmskw_XMMf16_XMMf16_AVX512
[DUPLICATE IFORM] VFMADDCPH_ZMM2f16_MASKmskw_ZMM2f16_ZMM2f16_AVX512
[DUPLICATE IFORM] VFMADDCSH_XMM2f16_MASKmskw_XMM2f16_XMM2f16_AVX512
[DUPLICATE IFORM] VFMADDSUB132PH_ZMMf16_MASKmskw_ZMMf16_ZMMf16_AVX512
[DUPLICATE IFORM] VFMADDSUB213PH_ZMMf16_MASKmskw_ZMMf16_ZMMf16_AVX512
[DUPLICATE IFORM] VFMADDSUB231PH_ZMMf16_MASKmskw_ZMMf16_ZMMf16_AVX512
[DUPLICATE IFORM] VFMSUB132PH_ZMMf16_MASKmskw_ZMMf16_ZMMf16_AVX512
[DUPLICATE IFORM] VFMSUB132SH_XMMf16_MASKmskw_XMMf16_XMMf16_AVX512
[DUPLICATE IFORM] VFMSUB213PH_ZMMf16_MASKmskw_ZMMf16_ZMMf16_AVX512
[DUPLICATE IFORM] VFMSUB213SH_XMMf16_MASKmskw_XMMf16_XMMf16_AVX512
[DUPLICATE IFORM] VFMSUB231PH_ZMMf16_MASKmskw_ZMMf16_ZMMf16_AVX512
[DUPLICATE IFORM] VFMSUB231SH_XMMf16_MASKmskw_XMMf16_XMMf16_AVX512
[DUPLICATE IFORM] VFMSUBADD132PH_ZMMf16_MASKmskw_ZMMf16_ZMMf16_AVX512
[DUPLICATE IFORM] VFMSUBADD213PH_ZMMf16_MASKmskw_ZMMf16_ZMMf16_AVX512
[DUPLICATE IFORM] VFMSUBADD231PH_ZMMf16_MASKmskw_ZMMf16_ZMMf16_AVX512
[DUPLICATE IFORM] VFMULCPH_ZMM2f16_MASKmskw_ZMM2f16_ZMM2f16_AVX512
[DUPLICATE IFORM] VFMULCSH_XMM2f16_MASKmskw_XMM2f16_XMM2f16_AVX512
[DUPLICATE IFORM] VFNMADD132PH_ZMMf16_MASKmskw_ZMMf16_ZMMf16_AVX512
[DUPLICATE IFORM] VFNMADD132SH_XMMf16_MASKmskw_XMMf16_XMMf16_AVX512
[DUPLICATE IFORM] VFNMADD213PH_ZMMf16_MASKmskw_ZMMf16_ZMMf16_AVX512
[DUPLICATE IFORM] VFNMADD213SH_XMMf16_MASKmskw_XMMf16_XMMf16_AVX512
[DUPLICATE IFORM] VFNMADD231PH_ZMMf16_MASKmskw_ZMMf16_ZMMf16_AVX512
[DUPLICATE IFORM] VFNMADD231SH_XMMf16_MASKmskw_XMMf16_XMMf16_AVX512
[DUPLICATE IFORM] VFNMSUB132PH_ZMMf16_MASKmskw_ZMMf16_ZMMf16_AVX512
[DUPLICATE IFORM] VFNMSUB132SH_XMMf16_MASKmskw_XMMf16_XMMf16_AVX512
[DUPLICATE IFORM] VFNMSUB213PH_ZMMf16_MASKmskw_ZMMf16_ZMMf16_AVX512
[DUPLICATE IFORM] VFNMSUB213SH_XMMf16_MASKmskw_XMMf16_XMMf16_AVX512
[DUPLICATE IFORM] VFNMSUB231PH_ZMMf16_MASKmskw_ZMMf16_ZMMf16_AVX512
[DUPLICATE IFORM] VFNMSUB231SH_XMMf16_MASKmskw_XMMf16_XMMf16_AVX512
[DUPLICATE IFORM] VGETEXPPH_ZMMf16_MASKmskw_ZMMf16_AVX512
[DUPLICATE IFORM] VGETEXPSH_XMMf16_MASKmskw_XMMf16_XMMf16_AVX512
[DUPLICATE IFORM] VGETMANTPH_ZMMf16_MASKmskw_ZMMf16_IMM8_AVX512
[DUPLICATE IFORM] VGETMANTSH_XMMf16_MASKmskw_XMMf16_XMMf16_IMM8_AVX512
[DUPLICATE IFORM] VMAXPH_ZMMf16_MASKmskw_ZMMf16_ZMMf16_AVX512
[DUPLICATE IFORM] VMAXSH_XMMf16_MASKmskw_XMMf16_XMMf16_AVX512
[DUPLICATE IFORM] VMINPH_ZMMf16_MASKmskw_ZMMf16_ZMMf16_AVX512
[DUPLICATE IFORM] VMINSH_XMMf16_MASKmskw_XMMf16_XMMf16_AVX512
[DUPLICATE IFORM] VMOVSH_XMMf16_MASKmskw_XMMf16_XMMf16_AVX512
[DUPLICATE IFORM] VMULPH_ZMMf16_MASKmskw_ZMMf16_ZMMf16_AVX512
[DUPLICATE IFORM] VMULSH_XMMf16_MASKmskw_XMMf16_XMMf16_AVX512
[DUPLICATE IFORM] VREDUCEPH_ZMMf16_MASKmskw_ZMMf16_IMM8_AVX512
[DUPLICATE IFORM] VREDUCESH_XMMf16_MASKmskw_XMMf16_XMMf16_IMM8_AVX512
[DUPLICATE IFORM] VRNDSCALEPH_ZMMf16_MASKmskw_ZMMf16_IMM8_AVX512
[DUPLICATE IFORM] VRNDSCALESH_XMMf16_MASKmskw_XMMf16_XMMf16_IMM8_AVX512
[DUPLICATE IFORM] VSCALEFPH_ZMMf16_MASKmskw_ZMMf16_ZMMf16_AVX512
[DUPLICATE IFORM] VSCALEFSH_XMMf16_MASKmskw_XMMf16_XMMf16_AVX512
[DUPLICATE IFORM] VSQRTPH_ZMMf16_MASKmskw_ZMMf16_AVX512
[DUPLICATE IFORM] VSQRTSH_XMMf16_MASKmskw_XMMf16_XMMf16_AVX512
[DUPLICATE IFORM] VSUBPH_ZMMf16_MASKmskw_ZMMf16_ZMMf16_AVX512
[DUPLICATE IFORM] VSUBSH_XMMf16_MASKmskw_XMMf16_XMMf16_AVX512
[DUPLICATE IFORM] VUCOMISH_XMMf16_XMMf16_AVX512
[DUPLICATE IFORM] ADC_GPRv_GPRv_APX
[DUPLICATE IFORM] ADC_MEMv_GPRv_APX
[DUPLICATE IFORM] ADC_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] ADC_GPRv_MEMv_GPRv_APX
[DUPLICATE IFORM] ADC_GPR8i8_GPR8i8_APX
[DUPLICATE IFORM] ADC_GPR8i8_GPR8i8_GPR8i8_APX
[DUPLICATE IFORM] ADC_GPRv_GPRv_APX
[DUPLICATE IFORM] ADC_GPRv_GPRv_APX
[DUPLICATE IFORM] ADC_GPRv_MEMv_APX
[DUPLICATE IFORM] ADC_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] ADC_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] ADC_GPRv_GPRv_MEMv_APX
[DUPLICATE IFORM] ADC_GPRv_IMMz_APX
[DUPLICATE IFORM] ADC_MEMv_IMMz_APX
[DUPLICATE IFORM] ADC_GPRv_GPRv_IMMz_APX
[DUPLICATE IFORM] ADC_GPRv_MEMv_IMMz_APX
[DUPLICATE IFORM] ADC_GPRv_IMM8_APX
[DUPLICATE IFORM] ADC_MEMv_IMM8_APX
[DUPLICATE IFORM] ADC_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] ADC_GPRv_MEMv_IMM8_APX
[DUPLICATE IFORM] ADD_GPR8i8_GPR8i8_APX
[DUPLICATE IFORM] ADD_MEMi8_GPR8i8_APX
[DUPLICATE IFORM] ADD_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] ADD_GPRv_MEMv_IMM8_APX
[DUPLICATE IFORM] ADD_GPR8i8_GPR8i8_GPR8i8_APX
[DUPLICATE IFORM] ADD_GPR8i8_MEMi8_GPR8i8_APX
[DUPLICATE IFORM] ADD_GPRv_GPRv_APX
[DUPLICATE IFORM] ADD_MEMv_GPRv_APX
[DUPLICATE IFORM] ADD_GPRv_GPRv_APX
[DUPLICATE IFORM] ADD_MEMv_GPRv_APX
[DUPLICATE IFORM] ADD_GPRv_GPRv_APX
[DUPLICATE IFORM] ADD_MEMv_GPRv_APX
[DUPLICATE IFORM] ADD_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] ADD_GPRv_MEMv_GPRv_APX
[DUPLICATE IFORM] ADD_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] ADD_GPRv_MEMv_GPRv_APX
[DUPLICATE IFORM] ADD_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] ADD_GPRv_MEMv_GPRv_APX
[DUPLICATE IFORM] ADD_GPR8i8_GPR8i8_APX
[DUPLICATE IFORM] ADD_GPR8i8_GPR8i8_APX
[DUPLICATE IFORM] ADD_GPR8i8_MEMi8_APX
[DUPLICATE IFORM] ADD_GPR8i8_GPR8i8_GPR8i8_APX
[DUPLICATE IFORM] ADD_GPR8i8_GPR8i8_GPR8i8_APX
[DUPLICATE IFORM] ADD_GPR8i8_GPR8i8_MEMi8_APX
[DUPLICATE IFORM] ADD_GPRv_GPRv_APX
[DUPLICATE IFORM] ADD_GPRv_GPRv_APX
[DUPLICATE IFORM] ADD_GPRv_MEMv_APX
[DUPLICATE IFORM] ADD_GPRv_GPRv_APX
[DUPLICATE IFORM] ADD_GPRv_MEMv_APX
[DUPLICATE IFORM] ADD_GPRv_GPRv_APX
[DUPLICATE IFORM] ADD_GPRv_MEMv_APX
[DUPLICATE IFORM] ADD_GPR8i8_GPR8i8_IMM8_APX
[DUPLICATE IFORM] ADD_GPR8i8_MEMi8_IMM8_APX
[DUPLICATE IFORM] ADD_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] ADD_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] ADD_GPRv_GPRv_MEMv_APX
[DUPLICATE IFORM] ADD_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] ADD_GPRv_GPRv_MEMv_APX
[DUPLICATE IFORM] ADD_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] ADD_GPRv_GPRv_MEMv_APX
[DUPLICATE IFORM] ADD_GPR8i8_IMM8_APX
[DUPLICATE IFORM] ADD_MEMi8_IMM8_APX
[DUPLICATE IFORM] ADD_GPRv_IMMz_APX
[DUPLICATE IFORM] ADD_MEMv_IMMz_APX
[DUPLICATE IFORM] ADD_GPRv_IMMz_APX
[DUPLICATE IFORM] ADD_MEMv_IMMz_APX
[DUPLICATE IFORM] ADD_GPRv_IMMz_APX
[DUPLICATE IFORM] ADD_MEMv_IMMz_APX
[DUPLICATE IFORM] ADD_GPRv_GPRv_IMMz_APX
[DUPLICATE IFORM] ADD_GPRv_MEMv_IMMz_APX
[DUPLICATE IFORM] ADD_GPRv_GPRv_IMMz_APX
[DUPLICATE IFORM] ADD_GPRv_MEMv_IMMz_APX
[DUPLICATE IFORM] ADD_GPRv_GPRv_IMMz_APX
[DUPLICATE IFORM] ADD_GPRv_MEMv_IMMz_APX
[DUPLICATE IFORM] ADD_GPRv_IMM8_APX
[DUPLICATE IFORM] ADD_MEMv_IMM8_APX
[DUPLICATE IFORM] ADD_GPRv_IMM8_APX
[DUPLICATE IFORM] ADD_MEMv_IMM8_APX
[DUPLICATE IFORM] ADD_GPRv_IMM8_APX
[DUPLICATE IFORM] ADD_MEMv_IMM8_APX
[DUPLICATE IFORM] ADD_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] ADD_GPRv_MEMv_IMM8_APX
[DUPLICATE IFORM] ADD_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] ADD_GPRv_MEMv_IMM8_APX
[DUPLICATE IFORM] AND_GPR8i8_GPR8i8_APX
[DUPLICATE IFORM] AND_MEMi8_GPR8i8_APX
[DUPLICATE IFORM] AND_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] AND_GPRv_MEMv_IMM8_APX
[DUPLICATE IFORM] AND_GPR8i8_GPR8i8_GPR8i8_APX
[DUPLICATE IFORM] AND_GPR8i8_MEMi8_GPR8i8_APX
[DUPLICATE IFORM] AND_GPRv_GPRv_APX
[DUPLICATE IFORM] AND_MEMv_GPRv_APX
[DUPLICATE IFORM] AND_GPRv_GPRv_APX
[DUPLICATE IFORM] AND_MEMv_GPRv_APX
[DUPLICATE IFORM] AND_GPRv_GPRv_APX
[DUPLICATE IFORM] AND_MEMv_GPRv_APX
[DUPLICATE IFORM] AND_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] AND_GPRv_MEMv_GPRv_APX
[DUPLICATE IFORM] AND_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] AND_GPRv_MEMv_GPRv_APX
[DUPLICATE IFORM] AND_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] AND_GPRv_MEMv_GPRv_APX
[DUPLICATE IFORM] AND_GPR8i8_GPR8i8_APX
[DUPLICATE IFORM] AND_GPR8i8_GPR8i8_APX
[DUPLICATE IFORM] AND_GPR8i8_MEMi8_APX
[DUPLICATE IFORM] AND_GPR8i8_GPR8i8_GPR8i8_APX
[DUPLICATE IFORM] AND_GPR8i8_GPR8i8_GPR8i8_APX
[DUPLICATE IFORM] AND_GPR8i8_GPR8i8_MEMi8_APX
[DUPLICATE IFORM] AND_GPRv_GPRv_APX
[DUPLICATE IFORM] AND_GPRv_GPRv_APX
[DUPLICATE IFORM] AND_GPRv_MEMv_APX
[DUPLICATE IFORM] AND_GPRv_GPRv_APX
[DUPLICATE IFORM] AND_GPRv_MEMv_APX
[DUPLICATE IFORM] AND_GPRv_GPRv_APX
[DUPLICATE IFORM] AND_GPRv_MEMv_APX
[DUPLICATE IFORM] AND_GPR8i8_GPR8i8_IMM8_APX
[DUPLICATE IFORM] AND_GPR8i8_MEMi8_IMM8_APX
[DUPLICATE IFORM] AND_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] AND_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] AND_GPRv_GPRv_MEMv_APX
[DUPLICATE IFORM] AND_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] AND_GPRv_GPRv_MEMv_APX
[DUPLICATE IFORM] AND_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] AND_GPRv_GPRv_MEMv_APX
[DUPLICATE IFORM] AND_GPR8i8_IMM8_APX
[DUPLICATE IFORM] AND_MEMi8_IMM8_APX
[DUPLICATE IFORM] AND_GPRv_IMMz_APX
[DUPLICATE IFORM] AND_MEMv_IMMz_APX
[DUPLICATE IFORM] AND_GPRv_IMMz_APX
[DUPLICATE IFORM] AND_MEMv_IMMz_APX
[DUPLICATE IFORM] AND_GPRv_IMMz_APX
[DUPLICATE IFORM] AND_MEMv_IMMz_APX
[DUPLICATE IFORM] AND_GPRv_GPRv_IMMz_APX
[DUPLICATE IFORM] AND_GPRv_MEMv_IMMz_APX
[DUPLICATE IFORM] AND_GPRv_GPRv_IMMz_APX
[DUPLICATE IFORM] AND_GPRv_MEMv_IMMz_APX
[DUPLICATE IFORM] AND_GPRv_GPRv_IMMz_APX
[DUPLICATE IFORM] AND_GPRv_MEMv_IMMz_APX
[DUPLICATE IFORM] AND_GPRv_IMM8_APX
[DUPLICATE IFORM] AND_MEMv_IMM8_APX
[DUPLICATE IFORM] AND_GPRv_IMM8_APX
[DUPLICATE IFORM] AND_MEMv_IMM8_APX
[DUPLICATE IFORM] AND_GPRv_IMM8_APX
[DUPLICATE IFORM] AND_MEMv_IMM8_APX
[DUPLICATE IFORM] AND_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] AND_GPRv_MEMv_IMM8_APX
[DUPLICATE IFORM] AND_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] AND_GPRv_MEMv_IMM8_APX
[DUPLICATE IFORM] ANDN_GPR32i32_GPR32i32_GPR32i32_APX
[DUPLICATE IFORM] ANDN_GPR32i32_GPR32i32_MEMi32_APX
[DUPLICATE IFORM] ANDN_GPR64i64_GPR64i64_GPR64i64_APX
[DUPLICATE IFORM] ANDN_GPR64i64_GPR64i64_MEMi64_APX
[DUPLICATE IFORM] BEXTR_GPR32i32_GPR32i32_GPR32i32_APX
[DUPLICATE IFORM] BEXTR_GPR32i32_MEMi32_GPR32i32_APX
[DUPLICATE IFORM] BEXTR_GPR64i64_GPR64i64_GPR64i64_APX
[DUPLICATE IFORM] BEXTR_GPR64i64_MEMi64_GPR64i64_APX
[DUPLICATE IFORM] BLSI_GPR32i32_GPR32i32_APX
[DUPLICATE IFORM] BLSI_GPR32i32_MEMi32_APX
[DUPLICATE IFORM] BLSI_GPR64i64_GPR64i64_APX
[DUPLICATE IFORM] BLSI_GPR64i64_MEMi64_APX
[DUPLICATE IFORM] BLSMSK_GPR32i32_GPR32i32_APX
[DUPLICATE IFORM] BLSMSK_GPR32i32_MEMi32_APX
[DUPLICATE IFORM] BLSMSK_GPR64i64_GPR64i64_APX
[DUPLICATE IFORM] BLSMSK_GPR64i64_MEMi64_APX
[DUPLICATE IFORM] BLSR_GPR32i32_GPR32i32_APX
[DUPLICATE IFORM] BLSR_GPR32i32_MEMi32_APX
[DUPLICATE IFORM] BLSR_GPR64i64_GPR64i64_APX
[DUPLICATE IFORM] BLSR_GPR64i64_MEMi64_APX
[DUPLICATE IFORM] BZHI_GPR32i32_GPR32i32_GPR32i32_APX
[DUPLICATE IFORM] BZHI_GPR32i32_MEMi32_GPR32i32_APX
[DUPLICATE IFORM] BZHI_GPR64i64_GPR64i64_GPR64i64_APX
[DUPLICATE IFORM] BZHI_GPR64i64_MEMi64_GPR64i64_APX
[DUPLICATE IFORM] CCMPB_GPRv_IMM8_DFV_APX
[DUPLICATE IFORM] CCMPB_MEMv_IMM8_DFV_APX
[DUPLICATE IFORM] CCMPB_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPB_MEMv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPB_GPR8i8_GPR8i8_DFV_APX
[DUPLICATE IFORM] CCMPB_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPB_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPB_GPRv_MEMv_DFV_APX
[DUPLICATE IFORM] CCMPB_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CCMPB_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CCMPBE_GPRv_IMM8_DFV_APX
[DUPLICATE IFORM] CCMPBE_MEMv_IMM8_DFV_APX
[DUPLICATE IFORM] CCMPBE_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPBE_MEMv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPBE_GPR8i8_GPR8i8_DFV_APX
[DUPLICATE IFORM] CCMPBE_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPBE_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPBE_GPRv_MEMv_DFV_APX
[DUPLICATE IFORM] CCMPBE_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CCMPBE_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CCMPF_GPRv_IMM8_DFV_APX
[DUPLICATE IFORM] CCMPF_MEMv_IMM8_DFV_APX
[DUPLICATE IFORM] CCMPF_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPF_MEMv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPF_GPR8i8_GPR8i8_DFV_APX
[DUPLICATE IFORM] CCMPF_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPF_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPF_GPRv_MEMv_DFV_APX
[DUPLICATE IFORM] CCMPF_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CCMPF_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CCMPL_GPRv_IMM8_DFV_APX
[DUPLICATE IFORM] CCMPL_MEMv_IMM8_DFV_APX
[DUPLICATE IFORM] CCMPL_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPL_MEMv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPL_GPR8i8_GPR8i8_DFV_APX
[DUPLICATE IFORM] CCMPL_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPL_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPL_GPRv_MEMv_DFV_APX
[DUPLICATE IFORM] CCMPL_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CCMPL_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CCMPLE_GPRv_IMM8_DFV_APX
[DUPLICATE IFORM] CCMPLE_MEMv_IMM8_DFV_APX
[DUPLICATE IFORM] CCMPLE_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPLE_MEMv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPLE_GPR8i8_GPR8i8_DFV_APX
[DUPLICATE IFORM] CCMPLE_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPLE_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPLE_GPRv_MEMv_DFV_APX
[DUPLICATE IFORM] CCMPLE_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CCMPLE_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CCMPNB_GPRv_IMM8_DFV_APX
[DUPLICATE IFORM] CCMPNB_MEMv_IMM8_DFV_APX
[DUPLICATE IFORM] CCMPNB_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPNB_MEMv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPNB_GPR8i8_GPR8i8_DFV_APX
[DUPLICATE IFORM] CCMPNB_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPNB_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPNB_GPRv_MEMv_DFV_APX
[DUPLICATE IFORM] CCMPNB_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CCMPNB_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CCMPNBE_GPRv_IMM8_DFV_APX
[DUPLICATE IFORM] CCMPNBE_MEMv_IMM8_DFV_APX
[DUPLICATE IFORM] CCMPNBE_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPNBE_MEMv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPNBE_GPR8i8_GPR8i8_DFV_APX
[DUPLICATE IFORM] CCMPNBE_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPNBE_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPNBE_GPRv_MEMv_DFV_APX
[DUPLICATE IFORM] CCMPNBE_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CCMPNBE_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CCMPNL_GPRv_IMM8_DFV_APX
[DUPLICATE IFORM] CCMPNL_MEMv_IMM8_DFV_APX
[DUPLICATE IFORM] CCMPNL_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPNL_MEMv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPNL_GPR8i8_GPR8i8_DFV_APX
[DUPLICATE IFORM] CCMPNL_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPNL_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPNL_GPRv_MEMv_DFV_APX
[DUPLICATE IFORM] CCMPNL_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CCMPNL_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CCMPNLE_GPRv_IMM8_DFV_APX
[DUPLICATE IFORM] CCMPNLE_MEMv_IMM8_DFV_APX
[DUPLICATE IFORM] CCMPNLE_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPNLE_MEMv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPNLE_GPR8i8_GPR8i8_DFV_APX
[DUPLICATE IFORM] CCMPNLE_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPNLE_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPNLE_GPRv_MEMv_DFV_APX
[DUPLICATE IFORM] CCMPNLE_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CCMPNLE_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CCMPNO_GPRv_IMM8_DFV_APX
[DUPLICATE IFORM] CCMPNO_MEMv_IMM8_DFV_APX
[DUPLICATE IFORM] CCMPNO_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPNO_MEMv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPNO_GPR8i8_GPR8i8_DFV_APX
[DUPLICATE IFORM] CCMPNO_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPNO_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPNO_GPRv_MEMv_DFV_APX
[DUPLICATE IFORM] CCMPNO_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CCMPNO_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CCMPNS_GPRv_IMM8_DFV_APX
[DUPLICATE IFORM] CCMPNS_MEMv_IMM8_DFV_APX
[DUPLICATE IFORM] CCMPNS_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPNS_MEMv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPNS_GPR8i8_GPR8i8_DFV_APX
[DUPLICATE IFORM] CCMPNS_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPNS_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPNS_GPRv_MEMv_DFV_APX
[DUPLICATE IFORM] CCMPNS_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CCMPNS_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CCMPNZ_GPRv_IMM8_DFV_APX
[DUPLICATE IFORM] CCMPNZ_MEMv_IMM8_DFV_APX
[DUPLICATE IFORM] CCMPNZ_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPNZ_MEMv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPNZ_GPR8i8_GPR8i8_DFV_APX
[DUPLICATE IFORM] CCMPNZ_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPNZ_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPNZ_GPRv_MEMv_DFV_APX
[DUPLICATE IFORM] CCMPNZ_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CCMPNZ_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CCMPO_GPRv_IMM8_DFV_APX
[DUPLICATE IFORM] CCMPO_MEMv_IMM8_DFV_APX
[DUPLICATE IFORM] CCMPO_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPO_MEMv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPO_GPR8i8_GPR8i8_DFV_APX
[DUPLICATE IFORM] CCMPO_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPO_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPO_GPRv_MEMv_DFV_APX
[DUPLICATE IFORM] CCMPO_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CCMPO_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CCMPS_GPRv_IMM8_DFV_APX
[DUPLICATE IFORM] CCMPS_MEMv_IMM8_DFV_APX
[DUPLICATE IFORM] CCMPS_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPS_MEMv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPS_GPR8i8_GPR8i8_DFV_APX
[DUPLICATE IFORM] CCMPS_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPS_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPS_GPRv_MEMv_DFV_APX
[DUPLICATE IFORM] CCMPS_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CCMPS_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CCMPT_GPRv_IMM8_DFV_APX
[DUPLICATE IFORM] CCMPT_MEMv_IMM8_DFV_APX
[DUPLICATE IFORM] CCMPT_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPT_MEMv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPT_GPR8i8_GPR8i8_DFV_APX
[DUPLICATE IFORM] CCMPT_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPT_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPT_GPRv_MEMv_DFV_APX
[DUPLICATE IFORM] CCMPT_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CCMPT_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CCMPZ_GPRv_IMM8_DFV_APX
[DUPLICATE IFORM] CCMPZ_MEMv_IMM8_DFV_APX
[DUPLICATE IFORM] CCMPZ_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPZ_MEMv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPZ_GPR8i8_GPR8i8_DFV_APX
[DUPLICATE IFORM] CCMPZ_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPZ_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CCMPZ_GPRv_MEMv_DFV_APX
[DUPLICATE IFORM] CCMPZ_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CCMPZ_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CFCMOVB_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVB_GPRv_MEMv_APX
[DUPLICATE IFORM] CFCMOVB_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVB_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVB_MEMv_GPRv_APX
[DUPLICATE IFORM] CFCMOVB_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVB_GPRv_GPRv_MEMv_APX
[DUPLICATE IFORM] CFCMOVBE_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVBE_GPRv_MEMv_APX
[DUPLICATE IFORM] CFCMOVBE_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVBE_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVBE_MEMv_GPRv_APX
[DUPLICATE IFORM] CFCMOVBE_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVBE_GPRv_GPRv_MEMv_APX
[DUPLICATE IFORM] CFCMOVL_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVL_GPRv_MEMv_APX
[DUPLICATE IFORM] CFCMOVL_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVL_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVL_MEMv_GPRv_APX
[DUPLICATE IFORM] CFCMOVL_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVL_GPRv_GPRv_MEMv_APX
[DUPLICATE IFORM] CFCMOVLE_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVLE_GPRv_MEMv_APX
[DUPLICATE IFORM] CFCMOVLE_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVLE_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVLE_MEMv_GPRv_APX
[DUPLICATE IFORM] CFCMOVLE_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVLE_GPRv_GPRv_MEMv_APX
[DUPLICATE IFORM] CFCMOVNB_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVNB_GPRv_MEMv_APX
[DUPLICATE IFORM] CFCMOVNB_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVNB_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVNB_MEMv_GPRv_APX
[DUPLICATE IFORM] CFCMOVNB_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVNB_GPRv_GPRv_MEMv_APX
[DUPLICATE IFORM] CFCMOVNBE_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVNBE_GPRv_MEMv_APX
[DUPLICATE IFORM] CFCMOVNBE_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVNBE_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVNBE_MEMv_GPRv_APX
[DUPLICATE IFORM] CFCMOVNBE_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVNBE_GPRv_GPRv_MEMv_APX
[DUPLICATE IFORM] CFCMOVNL_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVNL_GPRv_MEMv_APX
[DUPLICATE IFORM] CFCMOVNL_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVNL_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVNL_MEMv_GPRv_APX
[DUPLICATE IFORM] CFCMOVNL_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVNL_GPRv_GPRv_MEMv_APX
[DUPLICATE IFORM] CFCMOVNLE_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVNLE_GPRv_MEMv_APX
[DUPLICATE IFORM] CFCMOVNLE_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVNLE_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVNLE_MEMv_GPRv_APX
[DUPLICATE IFORM] CFCMOVNLE_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVNLE_GPRv_GPRv_MEMv_APX
[DUPLICATE IFORM] CFCMOVNO_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVNO_GPRv_MEMv_APX
[DUPLICATE IFORM] CFCMOVNO_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVNO_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVNO_MEMv_GPRv_APX
[DUPLICATE IFORM] CFCMOVNO_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVNO_GPRv_GPRv_MEMv_APX
[DUPLICATE IFORM] CFCMOVNP_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVNP_GPRv_MEMv_APX
[DUPLICATE IFORM] CFCMOVNP_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVNP_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVNP_MEMv_GPRv_APX
[DUPLICATE IFORM] CFCMOVNP_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVNP_GPRv_GPRv_MEMv_APX
[DUPLICATE IFORM] CFCMOVNS_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVNS_GPRv_MEMv_APX
[DUPLICATE IFORM] CFCMOVNS_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVNS_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVNS_MEMv_GPRv_APX
[DUPLICATE IFORM] CFCMOVNS_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVNS_GPRv_GPRv_MEMv_APX
[DUPLICATE IFORM] CFCMOVNZ_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVNZ_GPRv_MEMv_APX
[DUPLICATE IFORM] CFCMOVNZ_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVNZ_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVNZ_MEMv_GPRv_APX
[DUPLICATE IFORM] CFCMOVNZ_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVNZ_GPRv_GPRv_MEMv_APX
[DUPLICATE IFORM] CFCMOVO_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVO_GPRv_MEMv_APX
[DUPLICATE IFORM] CFCMOVO_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVO_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVO_MEMv_GPRv_APX
[DUPLICATE IFORM] CFCMOVO_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVO_GPRv_GPRv_MEMv_APX
[DUPLICATE IFORM] CFCMOVP_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVP_GPRv_MEMv_APX
[DUPLICATE IFORM] CFCMOVP_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVP_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVP_MEMv_GPRv_APX
[DUPLICATE IFORM] CFCMOVP_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVP_GPRv_GPRv_MEMv_APX
[DUPLICATE IFORM] CFCMOVS_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVS_GPRv_MEMv_APX
[DUPLICATE IFORM] CFCMOVS_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVS_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVS_MEMv_GPRv_APX
[DUPLICATE IFORM] CFCMOVS_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVS_GPRv_GPRv_MEMv_APX
[DUPLICATE IFORM] CFCMOVZ_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVZ_GPRv_MEMv_APX
[DUPLICATE IFORM] CFCMOVZ_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVZ_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVZ_MEMv_GPRv_APX
[DUPLICATE IFORM] CFCMOVZ_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] CFCMOVZ_GPRv_GPRv_MEMv_APX
[DUPLICATE IFORM] CMOVB_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] CMOVB_GPRv_GPRv_MEMv_APX
[DUPLICATE IFORM] CMOVBE_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] CMOVBE_GPRv_GPRv_MEMv_APX
[DUPLICATE IFORM] CMOVL_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] CMOVL_GPRv_GPRv_MEMv_APX
[DUPLICATE IFORM] CMOVLE_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] CMOVLE_GPRv_GPRv_MEMv_APX
[DUPLICATE IFORM] CMOVNB_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] CMOVNB_GPRv_GPRv_MEMv_APX
[DUPLICATE IFORM] CMOVNBE_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] CMOVNBE_GPRv_GPRv_MEMv_APX
[DUPLICATE IFORM] CMOVNL_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] CMOVNL_GPRv_GPRv_MEMv_APX
[DUPLICATE IFORM] CMOVNLE_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] CMOVNLE_GPRv_GPRv_MEMv_APX
[DUPLICATE IFORM] CMOVNO_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] CMOVNO_GPRv_GPRv_MEMv_APX
[DUPLICATE IFORM] CMOVNP_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] CMOVNP_GPRv_GPRv_MEMv_APX
[DUPLICATE IFORM] CMOVNS_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] CMOVNS_GPRv_GPRv_MEMv_APX
[DUPLICATE IFORM] CMOVNZ_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] CMOVNZ_GPRv_GPRv_MEMv_APX
[DUPLICATE IFORM] CMOVO_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] CMOVO_GPRv_GPRv_MEMv_APX
[DUPLICATE IFORM] CMOVP_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] CMOVP_GPRv_GPRv_MEMv_APX
[DUPLICATE IFORM] CMOVS_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] CMOVS_GPRv_GPRv_MEMv_APX
[DUPLICATE IFORM] CMOVZ_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] CMOVZ_GPRv_GPRv_MEMv_APX
[DUPLICATE IFORM] CRC32_GPRy_GPRv_APX
[DUPLICATE IFORM] CRC32_GPRy_MEMv_APX
[DUPLICATE IFORM] CTESTB_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CTESTB_MEMv_GPRv_DFV_APX
[DUPLICATE IFORM] CTESTB_GPR8i8_IMM8_DFV_APX
[DUPLICATE IFORM] CTESTB_MEMi8_IMM8_DFV_APX
[DUPLICATE IFORM] CTESTB_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTB_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTB_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTB_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTB_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTB_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTBE_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CTESTBE_MEMv_GPRv_DFV_APX
[DUPLICATE IFORM] CTESTBE_GPR8i8_IMM8_DFV_APX
[DUPLICATE IFORM] CTESTBE_MEMi8_IMM8_DFV_APX
[DUPLICATE IFORM] CTESTBE_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTBE_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTBE_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTBE_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTBE_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTBE_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTF_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CTESTF_MEMv_GPRv_DFV_APX
[DUPLICATE IFORM] CTESTF_GPR8i8_IMM8_DFV_APX
[DUPLICATE IFORM] CTESTF_MEMi8_IMM8_DFV_APX
[DUPLICATE IFORM] CTESTF_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTF_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTF_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTF_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTF_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTF_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTL_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CTESTL_MEMv_GPRv_DFV_APX
[DUPLICATE IFORM] CTESTL_GPR8i8_IMM8_DFV_APX
[DUPLICATE IFORM] CTESTL_MEMi8_IMM8_DFV_APX
[DUPLICATE IFORM] CTESTL_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTL_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTL_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTL_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTL_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTL_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTLE_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CTESTLE_MEMv_GPRv_DFV_APX
[DUPLICATE IFORM] CTESTLE_GPR8i8_IMM8_DFV_APX
[DUPLICATE IFORM] CTESTLE_MEMi8_IMM8_DFV_APX
[DUPLICATE IFORM] CTESTLE_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTLE_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTLE_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTLE_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTLE_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTLE_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTNB_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CTESTNB_MEMv_GPRv_DFV_APX
[DUPLICATE IFORM] CTESTNB_GPR8i8_IMM8_DFV_APX
[DUPLICATE IFORM] CTESTNB_MEMi8_IMM8_DFV_APX
[DUPLICATE IFORM] CTESTNB_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTNB_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTNB_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTNB_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTNB_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTNB_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTNBE_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CTESTNBE_MEMv_GPRv_DFV_APX
[DUPLICATE IFORM] CTESTNBE_GPR8i8_IMM8_DFV_APX
[DUPLICATE IFORM] CTESTNBE_MEMi8_IMM8_DFV_APX
[DUPLICATE IFORM] CTESTNBE_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTNBE_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTNBE_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTNBE_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTNBE_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTNBE_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTNL_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CTESTNL_MEMv_GPRv_DFV_APX
[DUPLICATE IFORM] CTESTNL_GPR8i8_IMM8_DFV_APX
[DUPLICATE IFORM] CTESTNL_MEMi8_IMM8_DFV_APX
[DUPLICATE IFORM] CTESTNL_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTNL_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTNL_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTNL_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTNL_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTNL_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTNLE_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CTESTNLE_MEMv_GPRv_DFV_APX
[DUPLICATE IFORM] CTESTNLE_GPR8i8_IMM8_DFV_APX
[DUPLICATE IFORM] CTESTNLE_MEMi8_IMM8_DFV_APX
[DUPLICATE IFORM] CTESTNLE_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTNLE_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTNLE_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTNLE_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTNLE_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTNLE_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTNO_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CTESTNO_MEMv_GPRv_DFV_APX
[DUPLICATE IFORM] CTESTNO_GPR8i8_IMM8_DFV_APX
[DUPLICATE IFORM] CTESTNO_MEMi8_IMM8_DFV_APX
[DUPLICATE IFORM] CTESTNO_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTNO_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTNO_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTNO_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTNO_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTNO_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTNS_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CTESTNS_MEMv_GPRv_DFV_APX
[DUPLICATE IFORM] CTESTNS_GPR8i8_IMM8_DFV_APX
[DUPLICATE IFORM] CTESTNS_MEMi8_IMM8_DFV_APX
[DUPLICATE IFORM] CTESTNS_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTNS_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTNS_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTNS_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTNS_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTNS_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTNZ_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CTESTNZ_MEMv_GPRv_DFV_APX
[DUPLICATE IFORM] CTESTNZ_GPR8i8_IMM8_DFV_APX
[DUPLICATE IFORM] CTESTNZ_MEMi8_IMM8_DFV_APX
[DUPLICATE IFORM] CTESTNZ_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTNZ_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTNZ_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTNZ_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTNZ_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTNZ_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTO_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CTESTO_MEMv_GPRv_DFV_APX
[DUPLICATE IFORM] CTESTO_GPR8i8_IMM8_DFV_APX
[DUPLICATE IFORM] CTESTO_MEMi8_IMM8_DFV_APX
[DUPLICATE IFORM] CTESTO_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTO_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTO_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTO_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTO_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTO_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTS_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CTESTS_MEMv_GPRv_DFV_APX
[DUPLICATE IFORM] CTESTS_GPR8i8_IMM8_DFV_APX
[DUPLICATE IFORM] CTESTS_MEMi8_IMM8_DFV_APX
[DUPLICATE IFORM] CTESTS_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTS_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTS_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTS_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTS_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTS_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTT_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CTESTT_MEMv_GPRv_DFV_APX
[DUPLICATE IFORM] CTESTT_GPR8i8_IMM8_DFV_APX
[DUPLICATE IFORM] CTESTT_MEMi8_IMM8_DFV_APX
[DUPLICATE IFORM] CTESTT_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTT_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTT_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTT_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTT_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTT_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTZ_GPRv_GPRv_DFV_APX
[DUPLICATE IFORM] CTESTZ_MEMv_GPRv_DFV_APX
[DUPLICATE IFORM] CTESTZ_GPR8i8_IMM8_DFV_APX
[DUPLICATE IFORM] CTESTZ_MEMi8_IMM8_DFV_APX
[DUPLICATE IFORM] CTESTZ_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTZ_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTZ_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTZ_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTZ_GPRv_IMMz_DFV_APX
[DUPLICATE IFORM] CTESTZ_MEMv_IMMz_DFV_APX
[DUPLICATE IFORM] DEC_GPR8i8_APX
[DUPLICATE IFORM] DEC_MEMi8_APX
[DUPLICATE IFORM] DEC_GPR8i8_GPR8i8_APX
[DUPLICATE IFORM] DEC_GPR8i8_MEMi8_APX
[DUPLICATE IFORM] DEC_GPRv_APX
[DUPLICATE IFORM] DEC_MEMv_APX
[DUPLICATE IFORM] DEC_GPRv_APX
[DUPLICATE IFORM] DEC_MEMv_APX
[DUPLICATE IFORM] DEC_GPRv_APX
[DUPLICATE IFORM] DEC_MEMv_APX
[DUPLICATE IFORM] DEC_GPRv_GPRv_APX
[DUPLICATE IFORM] DEC_GPRv_MEMv_APX
[DUPLICATE IFORM] DEC_GPRv_GPRv_APX
[DUPLICATE IFORM] DEC_GPRv_MEMv_APX
[DUPLICATE IFORM] DEC_GPRv_GPRv_APX
[DUPLICATE IFORM] DEC_GPRv_MEMv_APX
[DUPLICATE IFORM] DIV_GPR8i8_APX
[DUPLICATE IFORM] DIV_MEMi8_APX
[DUPLICATE IFORM] DIV_GPRv_APX
[DUPLICATE IFORM] DIV_MEMv_APX
[DUPLICATE IFORM] DIV_GPRv_APX
[DUPLICATE IFORM] DIV_MEMv_APX
[DUPLICATE IFORM] DIV_GPRv_APX
[DUPLICATE IFORM] DIV_MEMv_APX
[DUPLICATE IFORM] IDIV_GPR8i8_APX
[DUPLICATE IFORM] IDIV_MEMi8_APX
[DUPLICATE IFORM] IDIV_GPRv_APX
[DUPLICATE IFORM] IDIV_MEMv_APX
[DUPLICATE IFORM] IDIV_GPRv_APX
[DUPLICATE IFORM] IDIV_MEMv_APX
[DUPLICATE IFORM] IDIV_GPRv_APX
[DUPLICATE IFORM] IDIV_MEMv_APX
[DUPLICATE IFORM] IMUL_GPRv_GPRv_IMMz_APX
[DUPLICATE IFORM] IMUL_GPRv_MEMv_IMMz_APX
[DUPLICATE IFORM] IMUL_GPRv_APX
[DUPLICATE IFORM] IMUL_MEMv_APX
[DUPLICATE IFORM] IMUL_GPRv_APX
[DUPLICATE IFORM] IMUL_MEMv_APX
[DUPLICATE IFORM] IMUL_GPRv_APX
[DUPLICATE IFORM] IMUL_MEMv_APX
[DUPLICATE IFORM] IMUL_GPRv_GPRv_IMMz_APX
[DUPLICATE IFORM] IMUL_GPRv_MEMv_IMMz_APX
[DUPLICATE IFORM] IMUL_GPRv_GPRv_IMMz_APX
[DUPLICATE IFORM] IMUL_GPRv_MEMv_IMMz_APX
[DUPLICATE IFORM] IMUL_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] IMUL_GPRv_MEMv_IMM8_APX
[DUPLICATE IFORM] IMUL_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] IMUL_GPRv_MEMv_IMM8_APX
[DUPLICATE IFORM] IMUL_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] IMUL_GPRv_MEMv_IMM8_APX
[DUPLICATE IFORM] IMUL_GPRv_GPRv_APX
[DUPLICATE IFORM] IMUL_GPRv_MEMv_APX
[DUPLICATE IFORM] IMUL_GPRv_GPRv_APX
[DUPLICATE IFORM] IMUL_GPRv_MEMv_APX
[DUPLICATE IFORM] IMUL_GPRv_GPRv_APX
[DUPLICATE IFORM] IMUL_GPRv_MEMv_APX
[DUPLICATE IFORM] IMUL_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] IMUL_GPRv_GPRv_MEMv_APX
[DUPLICATE IFORM] IMUL_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] IMUL_GPRv_GPRv_MEMv_APX
[DUPLICATE IFORM] IMUL_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] IMUL_GPRv_GPRv_MEMv_APX
[DUPLICATE IFORM] IMUL_GPR8i8_APX
[DUPLICATE IFORM] IMUL_MEMi8_APX
[DUPLICATE IFORM] INC_GPR8i8_APX
[DUPLICATE IFORM] INC_MEMi8_APX
[DUPLICATE IFORM] INC_GPR8i8_GPR8i8_APX
[DUPLICATE IFORM] INC_GPR8i8_MEMi8_APX
[DUPLICATE IFORM] INC_GPRv_APX
[DUPLICATE IFORM] INC_MEMv_APX
[DUPLICATE IFORM] INC_GPRv_APX
[DUPLICATE IFORM] INC_MEMv_APX
[DUPLICATE IFORM] INC_GPRv_APX
[DUPLICATE IFORM] INC_MEMv_APX
[DUPLICATE IFORM] INC_GPRv_GPRv_APX
[DUPLICATE IFORM] INC_GPRv_MEMv_APX
[DUPLICATE IFORM] INC_GPRv_GPRv_APX
[DUPLICATE IFORM] INC_GPRv_MEMv_APX
[DUPLICATE IFORM] INC_GPRv_GPRv_APX
[DUPLICATE IFORM] INC_GPRv_MEMv_APX
[DUPLICATE IFORM] LZCNT_GPRv_GPRv_APX
[DUPLICATE IFORM] LZCNT_GPRv_MEMv_APX
[DUPLICATE IFORM] LZCNT_GPRv_GPRv_APX
[DUPLICATE IFORM] LZCNT_GPRv_MEMv_APX
[DUPLICATE IFORM] LZCNT_GPRv_GPRv_APX
[DUPLICATE IFORM] LZCNT_GPRv_MEMv_APX
[DUPLICATE IFORM] MOVBE_GPRv_GPRv_APX
[DUPLICATE IFORM] MOVBE_GPRv_MEMv_APX
[DUPLICATE IFORM] MOVBE_GPRv_GPRv_APX
[DUPLICATE IFORM] MOVBE_GPRv_GPRv_APX
[DUPLICATE IFORM] MOVBE_MEMv_GPRv_APX
[DUPLICATE IFORM] MUL_GPR8i8_APX
[DUPLICATE IFORM] MUL_MEMi8_APX
[DUPLICATE IFORM] MUL_GPRv_APX
[DUPLICATE IFORM] MUL_MEMv_APX
[DUPLICATE IFORM] MUL_GPRv_APX
[DUPLICATE IFORM] MUL_MEMv_APX
[DUPLICATE IFORM] MUL_GPRv_APX
[DUPLICATE IFORM] MUL_MEMv_APX
[DUPLICATE IFORM] NEG_GPR8i8_APX
[DUPLICATE IFORM] NEG_MEMi8_APX
[DUPLICATE IFORM] NEG_GPR8i8_GPR8i8_APX
[DUPLICATE IFORM] NEG_GPR8i8_MEMi8_APX
[DUPLICATE IFORM] NEG_GPRv_APX
[DUPLICATE IFORM] NEG_MEMv_APX
[DUPLICATE IFORM] NEG_GPRv_APX
[DUPLICATE IFORM] NEG_MEMv_APX
[DUPLICATE IFORM] NEG_GPRv_APX
[DUPLICATE IFORM] NEG_MEMv_APX
[DUPLICATE IFORM] NEG_GPRv_GPRv_APX
[DUPLICATE IFORM] NEG_GPRv_MEMv_APX
[DUPLICATE IFORM] NEG_GPRv_GPRv_APX
[DUPLICATE IFORM] NEG_GPRv_MEMv_APX
[DUPLICATE IFORM] NEG_GPRv_GPRv_APX
[DUPLICATE IFORM] NEG_GPRv_MEMv_APX
[DUPLICATE IFORM] NOT_GPRv_APX
[DUPLICATE IFORM] NOT_MEMv_APX
[DUPLICATE IFORM] NOT_GPRv_GPRv_APX
[DUPLICATE IFORM] NOT_GPRv_MEMv_APX
[DUPLICATE IFORM] OR_GPR8i8_GPR8i8_APX
[DUPLICATE IFORM] OR_MEMi8_GPR8i8_APX
[DUPLICATE IFORM] OR_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] OR_GPRv_MEMv_IMM8_APX
[DUPLICATE IFORM] OR_GPR8i8_GPR8i8_GPR8i8_APX
[DUPLICATE IFORM] OR_GPR8i8_MEMi8_GPR8i8_APX
[DUPLICATE IFORM] OR_GPRv_GPRv_APX
[DUPLICATE IFORM] OR_MEMv_GPRv_APX
[DUPLICATE IFORM] OR_GPRv_GPRv_APX
[DUPLICATE IFORM] OR_MEMv_GPRv_APX
[DUPLICATE IFORM] OR_GPRv_GPRv_APX
[DUPLICATE IFORM] OR_MEMv_GPRv_APX
[DUPLICATE IFORM] OR_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] OR_GPRv_MEMv_GPRv_APX
[DUPLICATE IFORM] OR_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] OR_GPRv_MEMv_GPRv_APX
[DUPLICATE IFORM] OR_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] OR_GPRv_MEMv_GPRv_APX
[DUPLICATE IFORM] OR_GPR8i8_GPR8i8_APX
[DUPLICATE IFORM] OR_GPR8i8_GPR8i8_APX
[DUPLICATE IFORM] OR_GPR8i8_MEMi8_APX
[DUPLICATE IFORM] OR_GPR8i8_GPR8i8_GPR8i8_APX
[DUPLICATE IFORM] OR_GPR8i8_GPR8i8_GPR8i8_APX
[DUPLICATE IFORM] OR_GPR8i8_GPR8i8_MEMi8_APX
[DUPLICATE IFORM] OR_GPRv_GPRv_APX
[DUPLICATE IFORM] OR_GPRv_GPRv_APX
[DUPLICATE IFORM] OR_GPRv_MEMv_APX
[DUPLICATE IFORM] OR_GPRv_GPRv_APX
[DUPLICATE IFORM] OR_GPRv_MEMv_APX
[DUPLICATE IFORM] OR_GPRv_GPRv_APX
[DUPLICATE IFORM] OR_GPRv_MEMv_APX
[DUPLICATE IFORM] OR_GPR8i8_GPR8i8_IMM8_APX
[DUPLICATE IFORM] OR_GPR8i8_MEMi8_IMM8_APX
[DUPLICATE IFORM] OR_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] OR_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] OR_GPRv_GPRv_MEMv_APX
[DUPLICATE IFORM] OR_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] OR_GPRv_GPRv_MEMv_APX
[DUPLICATE IFORM] OR_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] OR_GPRv_GPRv_MEMv_APX
[DUPLICATE IFORM] OR_GPR8i8_IMM8_APX
[DUPLICATE IFORM] OR_MEMi8_IMM8_APX
[DUPLICATE IFORM] OR_GPRv_IMMz_APX
[DUPLICATE IFORM] OR_MEMv_IMMz_APX
[DUPLICATE IFORM] OR_GPRv_IMMz_APX
[DUPLICATE IFORM] OR_MEMv_IMMz_APX
[DUPLICATE IFORM] OR_GPRv_IMMz_APX
[DUPLICATE IFORM] OR_MEMv_IMMz_APX
[DUPLICATE IFORM] OR_GPRv_GPRv_IMMz_APX
[DUPLICATE IFORM] OR_GPRv_MEMv_IMMz_APX
[DUPLICATE IFORM] OR_GPRv_GPRv_IMMz_APX
[DUPLICATE IFORM] OR_GPRv_MEMv_IMMz_APX
[DUPLICATE IFORM] OR_GPRv_GPRv_IMMz_APX
[DUPLICATE IFORM] OR_GPRv_MEMv_IMMz_APX
[DUPLICATE IFORM] OR_GPRv_IMM8_APX
[DUPLICATE IFORM] OR_MEMv_IMM8_APX
[DUPLICATE IFORM] OR_GPRv_IMM8_APX
[DUPLICATE IFORM] OR_MEMv_IMM8_APX
[DUPLICATE IFORM] OR_GPRv_IMM8_APX
[DUPLICATE IFORM] OR_MEMv_IMM8_APX
[DUPLICATE IFORM] OR_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] OR_GPRv_MEMv_IMM8_APX
[DUPLICATE IFORM] OR_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] OR_GPRv_MEMv_IMM8_APX
[DUPLICATE IFORM] POPCNT_GPRv_GPRv_APX
[DUPLICATE IFORM] POPCNT_GPRv_MEMv_APX
[DUPLICATE IFORM] POPCNT_GPRv_GPRv_APX
[DUPLICATE IFORM] POPCNT_GPRv_MEMv_APX
[DUPLICATE IFORM] POPCNT_GPRv_GPRv_APX
[DUPLICATE IFORM] POPCNT_GPRv_MEMv_APX
[DUPLICATE IFORM] RCL_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] RCL_GPRv_MEMv_IMM8_APX
[DUPLICATE IFORM] RCL_GPRv_ONE_APX
[DUPLICATE IFORM] RCL_MEMv_ONE_APX
[DUPLICATE IFORM] RCL_GPRv_GPRv_ONE_APX
[DUPLICATE IFORM] RCL_GPRv_MEMv_ONE_APX
[DUPLICATE IFORM] RCL_GPRv_CL_APX
[DUPLICATE IFORM] RCL_MEMv_CL_APX
[DUPLICATE IFORM] RCL_GPRv_GPRv_CL_APX
[DUPLICATE IFORM] RCL_GPRv_MEMv_CL_APX
[DUPLICATE IFORM] RCL_GPRv_IMM8_APX
[DUPLICATE IFORM] RCL_MEMv_IMM8_APX
[DUPLICATE IFORM] RCR_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] RCR_GPRv_MEMv_IMM8_APX
[DUPLICATE IFORM] RCR_GPRv_ONE_APX
[DUPLICATE IFORM] RCR_MEMv_ONE_APX
[DUPLICATE IFORM] RCR_GPRv_GPRv_ONE_APX
[DUPLICATE IFORM] RCR_GPRv_MEMv_ONE_APX
[DUPLICATE IFORM] RCR_GPRv_CL_APX
[DUPLICATE IFORM] RCR_MEMv_CL_APX
[DUPLICATE IFORM] RCR_GPRv_GPRv_CL_APX
[DUPLICATE IFORM] RCR_GPRv_MEMv_CL_APX
[DUPLICATE IFORM] RCR_GPRv_IMM8_APX
[DUPLICATE IFORM] RCR_MEMv_IMM8_APX
[DUPLICATE IFORM] ROL_GPR8i8_IMM8_APX
[DUPLICATE IFORM] ROL_MEMi8_IMM8_APX
[DUPLICATE IFORM] ROL_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] ROL_GPRv_MEMv_IMM8_APX
[DUPLICATE IFORM] ROL_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] ROL_GPRv_MEMv_IMM8_APX
[DUPLICATE IFORM] ROL_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] ROL_GPRv_MEMv_IMM8_APX
[DUPLICATE IFORM] ROL_GPR8i8_ONE_APX
[DUPLICATE IFORM] ROL_MEMi8_ONE_APX
[DUPLICATE IFORM] ROL_GPR8i8_GPR8i8_ONE_APX
[DUPLICATE IFORM] ROL_GPR8i8_MEMi8_ONE_APX
[DUPLICATE IFORM] ROL_GPRv_ONE_APX
[DUPLICATE IFORM] ROL_MEMv_ONE_APX
[DUPLICATE IFORM] ROL_GPRv_ONE_APX
[DUPLICATE IFORM] ROL_MEMv_ONE_APX
[DUPLICATE IFORM] ROL_GPRv_ONE_APX
[DUPLICATE IFORM] ROL_MEMv_ONE_APX
[DUPLICATE IFORM] ROL_GPRv_GPRv_ONE_APX
[DUPLICATE IFORM] ROL_GPRv_MEMv_ONE_APX
[DUPLICATE IFORM] ROL_GPRv_GPRv_ONE_APX
[DUPLICATE IFORM] ROL_GPRv_MEMv_ONE_APX
[DUPLICATE IFORM] ROL_GPRv_GPRv_ONE_APX
[DUPLICATE IFORM] ROL_GPRv_MEMv_ONE_APX
[DUPLICATE IFORM] ROL_GPR8i8_CL_APX
[DUPLICATE IFORM] ROL_MEMi8_CL_APX
[DUPLICATE IFORM] ROL_GPR8i8_GPR8i8_CL_APX
[DUPLICATE IFORM] ROL_GPR8i8_MEMi8_CL_APX
[DUPLICATE IFORM] ROL_GPRv_CL_APX
[DUPLICATE IFORM] ROL_MEMv_CL_APX
[DUPLICATE IFORM] ROL_GPRv_CL_APX
[DUPLICATE IFORM] ROL_MEMv_CL_APX
[DUPLICATE IFORM] ROL_GPRv_CL_APX
[DUPLICATE IFORM] ROL_MEMv_CL_APX
[DUPLICATE IFORM] ROL_GPRv_GPRv_CL_APX
[DUPLICATE IFORM] ROL_GPRv_MEMv_CL_APX
[DUPLICATE IFORM] ROL_GPRv_GPRv_CL_APX
[DUPLICATE IFORM] ROL_GPRv_MEMv_CL_APX
[DUPLICATE IFORM] ROL_GPRv_GPRv_CL_APX
[DUPLICATE IFORM] ROL_GPRv_MEMv_CL_APX
[DUPLICATE IFORM] ROL_GPR8i8_GPR8i8_IMM8_APX
[DUPLICATE IFORM] ROL_GPR8i8_MEMi8_IMM8_APX
[DUPLICATE IFORM] ROL_GPRv_IMM8_APX
[DUPLICATE IFORM] ROL_MEMv_IMM8_APX
[DUPLICATE IFORM] ROL_GPRv_IMM8_APX
[DUPLICATE IFORM] ROL_MEMv_IMM8_APX
[DUPLICATE IFORM] ROL_GPRv_IMM8_APX
[DUPLICATE IFORM] ROL_MEMv_IMM8_APX
[DUPLICATE IFORM] ROR_GPR8i8_IMM8_APX
[DUPLICATE IFORM] ROR_MEMi8_IMM8_APX
[DUPLICATE IFORM] ROR_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] ROR_GPRv_MEMv_IMM8_APX
[DUPLICATE IFORM] ROR_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] ROR_GPRv_MEMv_IMM8_APX
[DUPLICATE IFORM] ROR_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] ROR_GPRv_MEMv_IMM8_APX
[DUPLICATE IFORM] ROR_GPR8i8_ONE_APX
[DUPLICATE IFORM] ROR_MEMi8_ONE_APX
[DUPLICATE IFORM] ROR_GPR8i8_GPR8i8_ONE_APX
[DUPLICATE IFORM] ROR_GPR8i8_MEMi8_ONE_APX
[DUPLICATE IFORM] ROR_GPRv_ONE_APX
[DUPLICATE IFORM] ROR_MEMv_ONE_APX
[DUPLICATE IFORM] ROR_GPRv_ONE_APX
[DUPLICATE IFORM] ROR_MEMv_ONE_APX
[DUPLICATE IFORM] ROR_GPRv_ONE_APX
[DUPLICATE IFORM] ROR_MEMv_ONE_APX
[DUPLICATE IFORM] ROR_GPRv_GPRv_ONE_APX
[DUPLICATE IFORM] ROR_GPRv_MEMv_ONE_APX
[DUPLICATE IFORM] ROR_GPRv_GPRv_ONE_APX
[DUPLICATE IFORM] ROR_GPRv_MEMv_ONE_APX
[DUPLICATE IFORM] ROR_GPRv_GPRv_ONE_APX
[DUPLICATE IFORM] ROR_GPRv_MEMv_ONE_APX
[DUPLICATE IFORM] ROR_GPR8i8_CL_APX
[DUPLICATE IFORM] ROR_MEMi8_CL_APX
[DUPLICATE IFORM] ROR_GPR8i8_GPR8i8_CL_APX
[DUPLICATE IFORM] ROR_GPR8i8_MEMi8_CL_APX
[DUPLICATE IFORM] ROR_GPRv_CL_APX
[DUPLICATE IFORM] ROR_MEMv_CL_APX
[DUPLICATE IFORM] ROR_GPRv_CL_APX
[DUPLICATE IFORM] ROR_MEMv_CL_APX
[DUPLICATE IFORM] ROR_GPRv_CL_APX
[DUPLICATE IFORM] ROR_MEMv_CL_APX
[DUPLICATE IFORM] ROR_GPRv_GPRv_CL_APX
[DUPLICATE IFORM] ROR_GPRv_MEMv_CL_APX
[DUPLICATE IFORM] ROR_GPRv_GPRv_CL_APX
[DUPLICATE IFORM] ROR_GPRv_MEMv_CL_APX
[DUPLICATE IFORM] ROR_GPRv_GPRv_CL_APX
[DUPLICATE IFORM] ROR_GPRv_MEMv_CL_APX
[DUPLICATE IFORM] ROR_GPR8i8_GPR8i8_IMM8_APX
[DUPLICATE IFORM] ROR_GPR8i8_MEMi8_IMM8_APX
[DUPLICATE IFORM] ROR_GPRv_IMM8_APX
[DUPLICATE IFORM] ROR_MEMv_IMM8_APX
[DUPLICATE IFORM] ROR_GPRv_IMM8_APX
[DUPLICATE IFORM] ROR_MEMv_IMM8_APX
[DUPLICATE IFORM] ROR_GPRv_IMM8_APX
[DUPLICATE IFORM] ROR_MEMv_IMM8_APX
[DUPLICATE IFORM] SAR_GPR8i8_IMM8_APX
[DUPLICATE IFORM] SAR_MEMi8_IMM8_APX
[DUPLICATE IFORM] SAR_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] SAR_GPRv_MEMv_IMM8_APX
[DUPLICATE IFORM] SAR_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] SAR_GPRv_MEMv_IMM8_APX
[DUPLICATE IFORM] SAR_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] SAR_GPRv_MEMv_IMM8_APX
[DUPLICATE IFORM] SAR_GPR8i8_ONE_APX
[DUPLICATE IFORM] SAR_MEMi8_ONE_APX
[DUPLICATE IFORM] SAR_GPR8i8_GPR8i8_ONE_APX
[DUPLICATE IFORM] SAR_GPR8i8_MEMi8_ONE_APX
[DUPLICATE IFORM] SAR_GPRv_ONE_APX
[DUPLICATE IFORM] SAR_MEMv_ONE_APX
[DUPLICATE IFORM] SAR_GPRv_ONE_APX
[DUPLICATE IFORM] SAR_MEMv_ONE_APX
[DUPLICATE IFORM] SAR_GPRv_ONE_APX
[DUPLICATE IFORM] SAR_MEMv_ONE_APX
[DUPLICATE IFORM] SAR_GPRv_GPRv_ONE_APX
[DUPLICATE IFORM] SAR_GPRv_MEMv_ONE_APX
[DUPLICATE IFORM] SAR_GPRv_GPRv_ONE_APX
[DUPLICATE IFORM] SAR_GPRv_MEMv_ONE_APX
[DUPLICATE IFORM] SAR_GPRv_GPRv_ONE_APX
[DUPLICATE IFORM] SAR_GPRv_MEMv_ONE_APX
[DUPLICATE IFORM] SAR_GPR8i8_CL_APX
[DUPLICATE IFORM] SAR_MEMi8_CL_APX
[DUPLICATE IFORM] SAR_GPR8i8_GPR8i8_CL_APX
[DUPLICATE IFORM] SAR_GPR8i8_MEMi8_CL_APX
[DUPLICATE IFORM] SAR_GPRv_CL_APX
[DUPLICATE IFORM] SAR_MEMv_CL_APX
[DUPLICATE IFORM] SAR_GPRv_CL_APX
[DUPLICATE IFORM] SAR_MEMv_CL_APX
[DUPLICATE IFORM] SAR_GPRv_CL_APX
[DUPLICATE IFORM] SAR_MEMv_CL_APX
[DUPLICATE IFORM] SAR_GPRv_GPRv_CL_APX
[DUPLICATE IFORM] SAR_GPRv_MEMv_CL_APX
[DUPLICATE IFORM] SAR_GPRv_GPRv_CL_APX
[DUPLICATE IFORM] SAR_GPRv_MEMv_CL_APX
[DUPLICATE IFORM] SAR_GPRv_GPRv_CL_APX
[DUPLICATE IFORM] SAR_GPRv_MEMv_CL_APX
[DUPLICATE IFORM] SAR_GPR8i8_GPR8i8_IMM8_APX
[DUPLICATE IFORM] SAR_GPR8i8_MEMi8_IMM8_APX
[DUPLICATE IFORM] SAR_GPRv_IMM8_APX
[DUPLICATE IFORM] SAR_MEMv_IMM8_APX
[DUPLICATE IFORM] SAR_GPRv_IMM8_APX
[DUPLICATE IFORM] SAR_MEMv_IMM8_APX
[DUPLICATE IFORM] SAR_GPRv_IMM8_APX
[DUPLICATE IFORM] SAR_MEMv_IMM8_APX
[DUPLICATE IFORM] SBB_GPRv_GPRv_APX
[DUPLICATE IFORM] SBB_MEMv_GPRv_APX
[DUPLICATE IFORM] SBB_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] SBB_GPRv_MEMv_GPRv_APX
[DUPLICATE IFORM] SBB_GPR8i8_GPR8i8_APX
[DUPLICATE IFORM] SBB_GPR8i8_GPR8i8_GPR8i8_APX
[DUPLICATE IFORM] SBB_GPRv_GPRv_APX
[DUPLICATE IFORM] SBB_GPRv_GPRv_APX
[DUPLICATE IFORM] SBB_GPRv_MEMv_APX
[DUPLICATE IFORM] SBB_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] SBB_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] SBB_GPRv_GPRv_MEMv_APX
[DUPLICATE IFORM] SBB_GPRv_IMMz_APX
[DUPLICATE IFORM] SBB_MEMv_IMMz_APX
[DUPLICATE IFORM] SBB_GPRv_GPRv_IMMz_APX
[DUPLICATE IFORM] SBB_GPRv_MEMv_IMMz_APX
[DUPLICATE IFORM] SBB_GPRv_IMM8_APX
[DUPLICATE IFORM] SBB_MEMv_IMM8_APX
[DUPLICATE IFORM] SBB_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] SBB_GPRv_MEMv_IMM8_APX
[DUPLICATE IFORM] SHL_GPR8i8_IMM8_APX
[DUPLICATE IFORM] SHL_MEMi8_IMM8_APX
[DUPLICATE IFORM] SHL_GPRv_GPRv_ONE_APX
[DUPLICATE IFORM] SHL_GPRv_MEMv_ONE_APX
[DUPLICATE IFORM] SHL_GPRv_GPRv_ONE_APX
[DUPLICATE IFORM] SHL_GPRv_MEMv_ONE_APX
[DUPLICATE IFORM] SHL_GPRv_GPRv_ONE_APX
[DUPLICATE IFORM] SHL_GPRv_MEMv_ONE_APX
[DUPLICATE IFORM] SHL_GPRv_GPRv_ONE_APX
[DUPLICATE IFORM] SHL_GPRv_MEMv_ONE_APX
[DUPLICATE IFORM] SHL_GPRv_GPRv_ONE_APX
[DUPLICATE IFORM] SHL_GPRv_MEMv_ONE_APX
[DUPLICATE IFORM] SHL_GPR8i8_CL_APX
[DUPLICATE IFORM] SHL_MEMi8_CL_APX
[DUPLICATE IFORM] SHL_GPR8i8_CL_APX
[DUPLICATE IFORM] SHL_MEMi8_CL_APX
[DUPLICATE IFORM] SHL_GPR8i8_CL_APX
[DUPLICATE IFORM] SHL_MEMi8_CL_APX
[DUPLICATE IFORM] SHL_GPR8i8_GPR8i8_CL_APX
[DUPLICATE IFORM] SHL_GPR8i8_MEMi8_CL_APX
[DUPLICATE IFORM] SHL_GPR8i8_IMM8_APX
[DUPLICATE IFORM] SHL_MEMi8_IMM8_APX
[DUPLICATE IFORM] SHL_GPR8i8_IMM8_APX
[DUPLICATE IFORM] SHL_MEMi8_IMM8_APX
[DUPLICATE IFORM] SHL_GPR8i8_GPR8i8_CL_APX
[DUPLICATE IFORM] SHL_GPR8i8_MEMi8_CL_APX
[DUPLICATE IFORM] SHL_GPR8i8_GPR8i8_CL_APX
[DUPLICATE IFORM] SHL_GPR8i8_MEMi8_CL_APX
[DUPLICATE IFORM] SHL_GPRv_CL_APX
[DUPLICATE IFORM] SHL_MEMv_CL_APX
[DUPLICATE IFORM] SHL_GPRv_CL_APX
[DUPLICATE IFORM] SHL_MEMv_CL_APX
[DUPLICATE IFORM] SHL_GPRv_CL_APX
[DUPLICATE IFORM] SHL_MEMv_CL_APX
[DUPLICATE IFORM] SHL_GPR8i8_ONE_APX
[DUPLICATE IFORM] SHL_MEMi8_ONE_APX
[DUPLICATE IFORM] SHL_GPRv_CL_APX
[DUPLICATE IFORM] SHL_MEMv_CL_APX
[DUPLICATE IFORM] SHL_GPRv_CL_APX
[DUPLICATE IFORM] SHL_MEMv_CL_APX
[DUPLICATE IFORM] SHL_GPRv_CL_APX
[DUPLICATE IFORM] SHL_MEMv_CL_APX
[DUPLICATE IFORM] SHL_GPRv_CL_APX
[DUPLICATE IFORM] SHL_MEMv_CL_APX
[DUPLICATE IFORM] SHL_GPRv_GPRv_CL_APX
[DUPLICATE IFORM] SHL_GPRv_MEMv_CL_APX
[DUPLICATE IFORM] SHL_GPRv_GPRv_CL_APX
[DUPLICATE IFORM] SHL_GPRv_MEMv_CL_APX
[DUPLICATE IFORM] SHL_GPRv_GPRv_CL_APX
[DUPLICATE IFORM] SHL_GPRv_MEMv_CL_APX
[DUPLICATE IFORM] SHL_GPRv_GPRv_CL_APX
[DUPLICATE IFORM] SHL_GPRv_MEMv_CL_APX
[DUPLICATE IFORM] SHL_GPRv_GPRv_CL_APX
[DUPLICATE IFORM] SHL_GPRv_MEMv_CL_APX
[DUPLICATE IFORM] SHL_GPRv_GPRv_CL_APX
[DUPLICATE IFORM] SHL_GPRv_MEMv_CL_APX
[DUPLICATE IFORM] SHL_GPRv_GPRv_CL_APX
[DUPLICATE IFORM] SHL_GPRv_MEMv_CL_APX
[DUPLICATE IFORM] SHL_GPR8i8_GPR8i8_IMM8_APX
[DUPLICATE IFORM] SHL_GPR8i8_MEMi8_IMM8_APX
[DUPLICATE IFORM] SHL_GPR8i8_GPR8i8_IMM8_APX
[DUPLICATE IFORM] SHL_GPR8i8_MEMi8_IMM8_APX
[DUPLICATE IFORM] SHL_GPR8i8_GPR8i8_IMM8_APX
[DUPLICATE IFORM] SHL_GPR8i8_MEMi8_IMM8_APX
[DUPLICATE IFORM] SHL_GPRv_IMM8_APX
[DUPLICATE IFORM] SHL_MEMv_IMM8_APX
[DUPLICATE IFORM] SHL_GPRv_IMM8_APX
[DUPLICATE IFORM] SHL_MEMv_IMM8_APX
[DUPLICATE IFORM] SHL_GPRv_IMM8_APX
[DUPLICATE IFORM] SHL_MEMv_IMM8_APX
[DUPLICATE IFORM] SHL_GPR8i8_GPR8i8_ONE_APX
[DUPLICATE IFORM] SHL_GPR8i8_MEMi8_ONE_APX
[DUPLICATE IFORM] SHL_GPRv_IMM8_APX
[DUPLICATE IFORM] SHL_MEMv_IMM8_APX
[DUPLICATE IFORM] SHL_GPRv_IMM8_APX
[DUPLICATE IFORM] SHL_MEMv_IMM8_APX
[DUPLICATE IFORM] SHL_GPRv_IMM8_APX
[DUPLICATE IFORM] SHL_MEMv_IMM8_APX
[DUPLICATE IFORM] SHL_GPRv_IMM8_APX
[DUPLICATE IFORM] SHL_MEMv_IMM8_APX
[DUPLICATE IFORM] SHL_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] SHL_GPRv_MEMv_IMM8_APX
[DUPLICATE IFORM] SHL_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] SHL_GPRv_MEMv_IMM8_APX
[DUPLICATE IFORM] SHL_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] SHL_GPRv_MEMv_IMM8_APX
[DUPLICATE IFORM] SHL_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] SHL_GPRv_MEMv_IMM8_APX
[DUPLICATE IFORM] SHL_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] SHL_GPRv_MEMv_IMM8_APX
[DUPLICATE IFORM] SHL_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] SHL_GPRv_MEMv_IMM8_APX
[DUPLICATE IFORM] SHL_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] SHL_GPRv_MEMv_IMM8_APX
[DUPLICATE IFORM] SHL_GPR8i8_ONE_APX
[DUPLICATE IFORM] SHL_MEMi8_ONE_APX
[DUPLICATE IFORM] SHL_GPR8i8_ONE_APX
[DUPLICATE IFORM] SHL_MEMi8_ONE_APX
[DUPLICATE IFORM] SHL_GPR8i8_GPR8i8_ONE_APX
[DUPLICATE IFORM] SHL_GPR8i8_MEMi8_ONE_APX
[DUPLICATE IFORM] SHL_GPR8i8_GPR8i8_ONE_APX
[DUPLICATE IFORM] SHL_GPR8i8_MEMi8_ONE_APX
[DUPLICATE IFORM] SHL_GPRv_ONE_APX
[DUPLICATE IFORM] SHL_MEMv_ONE_APX
[DUPLICATE IFORM] SHL_GPRv_ONE_APX
[DUPLICATE IFORM] SHL_MEMv_ONE_APX
[DUPLICATE IFORM] SHL_GPRv_ONE_APX
[DUPLICATE IFORM] SHL_MEMv_ONE_APX
[DUPLICATE IFORM] SHL_GPRv_ONE_APX
[DUPLICATE IFORM] SHL_MEMv_ONE_APX
[DUPLICATE IFORM] SHL_GPRv_ONE_APX
[DUPLICATE IFORM] SHL_MEMv_ONE_APX
[DUPLICATE IFORM] SHL_GPRv_ONE_APX
[DUPLICATE IFORM] SHL_MEMv_ONE_APX
[DUPLICATE IFORM] SHL_GPRv_ONE_APX
[DUPLICATE IFORM] SHL_MEMv_ONE_APX
[DUPLICATE IFORM] SHL_GPRv_GPRv_ONE_APX
[DUPLICATE IFORM] SHL_GPRv_MEMv_ONE_APX
[DUPLICATE IFORM] SHL_GPRv_GPRv_ONE_APX
[DUPLICATE IFORM] SHL_GPRv_MEMv_ONE_APX
[DUPLICATE IFORM] SHLD_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] SHLD_MEMv_GPRv_IMM8_APX
[DUPLICATE IFORM] SHLD_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] SHLD_MEMv_GPRv_IMM8_APX
[DUPLICATE IFORM] SHLD_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] SHLD_MEMv_GPRv_IMM8_APX
[DUPLICATE IFORM] SHLD_GPRv_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] SHLD_GPRv_MEMv_GPRv_IMM8_APX
[DUPLICATE IFORM] SHLD_GPRv_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] SHLD_GPRv_MEMv_GPRv_IMM8_APX
[DUPLICATE IFORM] SHLD_GPRv_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] SHLD_GPRv_MEMv_GPRv_IMM8_APX
[DUPLICATE IFORM] SHLD_GPRv_GPRv_CL_APX
[DUPLICATE IFORM] SHLD_MEMv_GPRv_CL_APX
[DUPLICATE IFORM] SHLD_GPRv_GPRv_CL_APX
[DUPLICATE IFORM] SHLD_MEMv_GPRv_CL_APX
[DUPLICATE IFORM] SHLD_GPRv_GPRv_CL_APX
[DUPLICATE IFORM] SHLD_MEMv_GPRv_CL_APX
[DUPLICATE IFORM] SHLD_GPRv_GPRv_GPRv_CL_APX
[DUPLICATE IFORM] SHLD_GPRv_MEMv_GPRv_CL_APX
[DUPLICATE IFORM] SHLD_GPRv_GPRv_GPRv_CL_APX
[DUPLICATE IFORM] SHLD_GPRv_MEMv_GPRv_CL_APX
[DUPLICATE IFORM] SHLD_GPRv_GPRv_GPRv_CL_APX
[DUPLICATE IFORM] SHLD_GPRv_MEMv_GPRv_CL_APX
[DUPLICATE IFORM] SHR_GPR8i8_IMM8_APX
[DUPLICATE IFORM] SHR_MEMi8_IMM8_APX
[DUPLICATE IFORM] SHR_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] SHR_GPRv_MEMv_IMM8_APX
[DUPLICATE IFORM] SHR_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] SHR_GPRv_MEMv_IMM8_APX
[DUPLICATE IFORM] SHR_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] SHR_GPRv_MEMv_IMM8_APX
[DUPLICATE IFORM] SHR_GPR8i8_ONE_APX
[DUPLICATE IFORM] SHR_MEMi8_ONE_APX
[DUPLICATE IFORM] SHR_GPR8i8_GPR8i8_ONE_APX
[DUPLICATE IFORM] SHR_GPR8i8_MEMi8_ONE_APX
[DUPLICATE IFORM] SHR_GPRv_ONE_APX
[DUPLICATE IFORM] SHR_MEMv_ONE_APX
[DUPLICATE IFORM] SHR_GPRv_ONE_APX
[DUPLICATE IFORM] SHR_MEMv_ONE_APX
[DUPLICATE IFORM] SHR_GPRv_ONE_APX
[DUPLICATE IFORM] SHR_MEMv_ONE_APX
[DUPLICATE IFORM] SHR_GPRv_GPRv_ONE_APX
[DUPLICATE IFORM] SHR_GPRv_MEMv_ONE_APX
[DUPLICATE IFORM] SHR_GPRv_GPRv_ONE_APX
[DUPLICATE IFORM] SHR_GPRv_MEMv_ONE_APX
[DUPLICATE IFORM] SHR_GPRv_GPRv_ONE_APX
[DUPLICATE IFORM] SHR_GPRv_MEMv_ONE_APX
[DUPLICATE IFORM] SHR_GPR8i8_CL_APX
[DUPLICATE IFORM] SHR_MEMi8_CL_APX
[DUPLICATE IFORM] SHR_GPR8i8_GPR8i8_CL_APX
[DUPLICATE IFORM] SHR_GPR8i8_MEMi8_CL_APX
[DUPLICATE IFORM] SHR_GPRv_CL_APX
[DUPLICATE IFORM] SHR_MEMv_CL_APX
[DUPLICATE IFORM] SHR_GPRv_CL_APX
[DUPLICATE IFORM] SHR_MEMv_CL_APX
[DUPLICATE IFORM] SHR_GPRv_CL_APX
[DUPLICATE IFORM] SHR_MEMv_CL_APX
[DUPLICATE IFORM] SHR_GPRv_GPRv_CL_APX
[DUPLICATE IFORM] SHR_GPRv_MEMv_CL_APX
[DUPLICATE IFORM] SHR_GPRv_GPRv_CL_APX
[DUPLICATE IFORM] SHR_GPRv_MEMv_CL_APX
[DUPLICATE IFORM] SHR_GPRv_GPRv_CL_APX
[DUPLICATE IFORM] SHR_GPRv_MEMv_CL_APX
[DUPLICATE IFORM] SHR_GPR8i8_GPR8i8_IMM8_APX
[DUPLICATE IFORM] SHR_GPR8i8_MEMi8_IMM8_APX
[DUPLICATE IFORM] SHR_GPRv_IMM8_APX
[DUPLICATE IFORM] SHR_MEMv_IMM8_APX
[DUPLICATE IFORM] SHR_GPRv_IMM8_APX
[DUPLICATE IFORM] SHR_MEMv_IMM8_APX
[DUPLICATE IFORM] SHR_GPRv_IMM8_APX
[DUPLICATE IFORM] SHR_MEMv_IMM8_APX
[DUPLICATE IFORM] SHRD_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] SHRD_MEMv_GPRv_IMM8_APX
[DUPLICATE IFORM] SHRD_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] SHRD_MEMv_GPRv_IMM8_APX
[DUPLICATE IFORM] SHRD_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] SHRD_MEMv_GPRv_IMM8_APX
[DUPLICATE IFORM] SHRD_GPRv_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] SHRD_GPRv_MEMv_GPRv_IMM8_APX
[DUPLICATE IFORM] SHRD_GPRv_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] SHRD_GPRv_MEMv_GPRv_IMM8_APX
[DUPLICATE IFORM] SHRD_GPRv_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] SHRD_GPRv_MEMv_GPRv_IMM8_APX
[DUPLICATE IFORM] SHRD_GPRv_GPRv_CL_APX
[DUPLICATE IFORM] SHRD_MEMv_GPRv_CL_APX
[DUPLICATE IFORM] SHRD_GPRv_GPRv_CL_APX
[DUPLICATE IFORM] SHRD_MEMv_GPRv_CL_APX
[DUPLICATE IFORM] SHRD_GPRv_GPRv_CL_APX
[DUPLICATE IFORM] SHRD_MEMv_GPRv_CL_APX
[DUPLICATE IFORM] SHRD_GPRv_GPRv_GPRv_CL_APX
[DUPLICATE IFORM] SHRD_GPRv_MEMv_GPRv_CL_APX
[DUPLICATE IFORM] SHRD_GPRv_GPRv_GPRv_CL_APX
[DUPLICATE IFORM] SHRD_GPRv_MEMv_GPRv_CL_APX
[DUPLICATE IFORM] SHRD_GPRv_GPRv_GPRv_CL_APX
[DUPLICATE IFORM] SHRD_GPRv_MEMv_GPRv_CL_APX
[DUPLICATE IFORM] SUB_GPR8i8_GPR8i8_APX
[DUPLICATE IFORM] SUB_MEMi8_GPR8i8_APX
[DUPLICATE IFORM] SUB_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] SUB_GPRv_MEMv_IMM8_APX
[DUPLICATE IFORM] SUB_GPR8i8_GPR8i8_GPR8i8_APX
[DUPLICATE IFORM] SUB_GPR8i8_MEMi8_GPR8i8_APX
[DUPLICATE IFORM] SUB_GPRv_GPRv_APX
[DUPLICATE IFORM] SUB_MEMv_GPRv_APX
[DUPLICATE IFORM] SUB_GPRv_GPRv_APX
[DUPLICATE IFORM] SUB_MEMv_GPRv_APX
[DUPLICATE IFORM] SUB_GPRv_GPRv_APX
[DUPLICATE IFORM] SUB_MEMv_GPRv_APX
[DUPLICATE IFORM] SUB_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] SUB_GPRv_MEMv_GPRv_APX
[DUPLICATE IFORM] SUB_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] SUB_GPRv_MEMv_GPRv_APX
[DUPLICATE IFORM] SUB_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] SUB_GPRv_MEMv_GPRv_APX
[DUPLICATE IFORM] SUB_GPR8i8_GPR8i8_APX
[DUPLICATE IFORM] SUB_GPR8i8_GPR8i8_APX
[DUPLICATE IFORM] SUB_GPR8i8_MEMi8_APX
[DUPLICATE IFORM] SUB_GPR8i8_GPR8i8_GPR8i8_APX
[DUPLICATE IFORM] SUB_GPR8i8_GPR8i8_GPR8i8_APX
[DUPLICATE IFORM] SUB_GPR8i8_GPR8i8_MEMi8_APX
[DUPLICATE IFORM] SUB_GPRv_GPRv_APX
[DUPLICATE IFORM] SUB_GPRv_GPRv_APX
[DUPLICATE IFORM] SUB_GPRv_MEMv_APX
[DUPLICATE IFORM] SUB_GPRv_GPRv_APX
[DUPLICATE IFORM] SUB_GPRv_MEMv_APX
[DUPLICATE IFORM] SUB_GPRv_GPRv_APX
[DUPLICATE IFORM] SUB_GPRv_MEMv_APX
[DUPLICATE IFORM] SUB_GPR8i8_GPR8i8_IMM8_APX
[DUPLICATE IFORM] SUB_GPR8i8_MEMi8_IMM8_APX
[DUPLICATE IFORM] SUB_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] SUB_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] SUB_GPRv_GPRv_MEMv_APX
[DUPLICATE IFORM] SUB_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] SUB_GPRv_GPRv_MEMv_APX
[DUPLICATE IFORM] SUB_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] SUB_GPRv_GPRv_MEMv_APX
[DUPLICATE IFORM] SUB_GPR8i8_IMM8_APX
[DUPLICATE IFORM] SUB_MEMi8_IMM8_APX
[DUPLICATE IFORM] SUB_GPRv_IMMz_APX
[DUPLICATE IFORM] SUB_MEMv_IMMz_APX
[DUPLICATE IFORM] SUB_GPRv_IMMz_APX
[DUPLICATE IFORM] SUB_MEMv_IMMz_APX
[DUPLICATE IFORM] SUB_GPRv_IMMz_APX
[DUPLICATE IFORM] SUB_MEMv_IMMz_APX
[DUPLICATE IFORM] SUB_GPRv_GPRv_IMMz_APX
[DUPLICATE IFORM] SUB_GPRv_MEMv_IMMz_APX
[DUPLICATE IFORM] SUB_GPRv_GPRv_IMMz_APX
[DUPLICATE IFORM] SUB_GPRv_MEMv_IMMz_APX
[DUPLICATE IFORM] SUB_GPRv_GPRv_IMMz_APX
[DUPLICATE IFORM] SUB_GPRv_MEMv_IMMz_APX
[DUPLICATE IFORM] SUB_GPRv_IMM8_APX
[DUPLICATE IFORM] SUB_MEMv_IMM8_APX
[DUPLICATE IFORM] SUB_GPRv_IMM8_APX
[DUPLICATE IFORM] SUB_MEMv_IMM8_APX
[DUPLICATE IFORM] SUB_GPRv_IMM8_APX
[DUPLICATE IFORM] SUB_MEMv_IMM8_APX
[DUPLICATE IFORM] SUB_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] SUB_GPRv_MEMv_IMM8_APX
[DUPLICATE IFORM] SUB_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] SUB_GPRv_MEMv_IMM8_APX
[DUPLICATE IFORM] TZCNT_GPRv_GPRv_APX
[DUPLICATE IFORM] TZCNT_GPRv_MEMv_APX
[DUPLICATE IFORM] TZCNT_GPRv_GPRv_APX
[DUPLICATE IFORM] TZCNT_GPRv_MEMv_APX
[DUPLICATE IFORM] TZCNT_GPRv_GPRv_APX
[DUPLICATE IFORM] TZCNT_GPRv_MEMv_APX
[DUPLICATE IFORM] XOR_GPR8i8_GPR8i8_APX
[DUPLICATE IFORM] XOR_MEMi8_GPR8i8_APX
[DUPLICATE IFORM] XOR_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] XOR_GPRv_MEMv_IMM8_APX
[DUPLICATE IFORM] XOR_GPR8i8_GPR8i8_GPR8i8_APX
[DUPLICATE IFORM] XOR_GPR8i8_MEMi8_GPR8i8_APX
[DUPLICATE IFORM] XOR_GPRv_GPRv_APX
[DUPLICATE IFORM] XOR_MEMv_GPRv_APX
[DUPLICATE IFORM] XOR_GPRv_GPRv_APX
[DUPLICATE IFORM] XOR_MEMv_GPRv_APX
[DUPLICATE IFORM] XOR_GPRv_GPRv_APX
[DUPLICATE IFORM] XOR_MEMv_GPRv_APX
[DUPLICATE IFORM] XOR_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] XOR_GPRv_MEMv_GPRv_APX
[DUPLICATE IFORM] XOR_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] XOR_GPRv_MEMv_GPRv_APX
[DUPLICATE IFORM] XOR_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] XOR_GPRv_MEMv_GPRv_APX
[DUPLICATE IFORM] XOR_GPR8i8_GPR8i8_APX
[DUPLICATE IFORM] XOR_GPR8i8_GPR8i8_APX
[DUPLICATE IFORM] XOR_GPR8i8_MEMi8_APX
[DUPLICATE IFORM] XOR_GPR8i8_GPR8i8_GPR8i8_APX
[DUPLICATE IFORM] XOR_GPR8i8_GPR8i8_GPR8i8_APX
[DUPLICATE IFORM] XOR_GPR8i8_GPR8i8_MEMi8_APX
[DUPLICATE IFORM] XOR_GPRv_GPRv_APX
[DUPLICATE IFORM] XOR_GPRv_GPRv_APX
[DUPLICATE IFORM] XOR_GPRv_MEMv_APX
[DUPLICATE IFORM] XOR_GPRv_GPRv_APX
[DUPLICATE IFORM] XOR_GPRv_MEMv_APX
[DUPLICATE IFORM] XOR_GPRv_GPRv_APX
[DUPLICATE IFORM] XOR_GPRv_MEMv_APX
[DUPLICATE IFORM] XOR_GPR8i8_GPR8i8_IMM8_APX
[DUPLICATE IFORM] XOR_GPR8i8_MEMi8_IMM8_APX
[DUPLICATE IFORM] XOR_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] XOR_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] XOR_GPRv_GPRv_MEMv_APX
[DUPLICATE IFORM] XOR_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] XOR_GPRv_GPRv_MEMv_APX
[DUPLICATE IFORM] XOR_GPRv_GPRv_GPRv_APX
[DUPLICATE IFORM] XOR_GPRv_GPRv_MEMv_APX
[DUPLICATE IFORM] XOR_GPR8i8_IMM8_APX
[DUPLICATE IFORM] XOR_MEMi8_IMM8_APX
[DUPLICATE IFORM] XOR_GPRv_IMMz_APX
[DUPLICATE IFORM] XOR_MEMv_IMMz_APX
[DUPLICATE IFORM] XOR_GPRv_IMMz_APX
[DUPLICATE IFORM] XOR_MEMv_IMMz_APX
[DUPLICATE IFORM] XOR_GPRv_IMMz_APX
[DUPLICATE IFORM] XOR_MEMv_IMMz_APX
[DUPLICATE IFORM] XOR_GPRv_GPRv_IMMz_APX
[DUPLICATE IFORM] XOR_GPRv_MEMv_IMMz_APX
[DUPLICATE IFORM] XOR_GPRv_GPRv_IMMz_APX
[DUPLICATE IFORM] XOR_GPRv_MEMv_IMMz_APX
[DUPLICATE IFORM] XOR_GPRv_GPRv_IMMz_APX
[DUPLICATE IFORM] XOR_GPRv_MEMv_IMMz_APX
[DUPLICATE IFORM] XOR_GPRv_IMM8_APX
[DUPLICATE IFORM] XOR_MEMv_IMM8_APX
[DUPLICATE IFORM] XOR_GPRv_IMM8_APX
[DUPLICATE IFORM] XOR_MEMv_IMM8_APX
[DUPLICATE IFORM] XOR_GPRv_IMM8_APX
[DUPLICATE IFORM] XOR_MEMv_IMM8_APX
[DUPLICATE IFORM] XOR_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] XOR_GPRv_MEMv_IMM8_APX
[DUPLICATE IFORM] XOR_GPRv_GPRv_IMM8_APX
[DUPLICATE IFORM] XOR_GPRv_MEMv_IMM8_APX
FE:EMIT_FILE obj/idata.txt
FE:EMIT_FILE obj/xed-iform-map-init.c
FE:EMIT_FILE obj/xed-exception-enum.txt
FE:EMIT_FILE obj/xed-exception-enum.c
FE:EMIT_FILE obj/xed-exception-enum.h
[Unique Operand Sequences] 3207
[Number of required operand sequence pointers] 10121
[Number of reused operand sequence pointers] 9850
[Number of required operands] 1669
[MAX OPERAND COUNT 11] 
[INVALID WIDTH CODE]  REP    imm_const [0x2] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REP    imm_const [0x3] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  LOCK   imm_const [0x1] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  HINT   imm_const [0x1] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  HINT   imm_const [0x2] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  HINT   imm_const [0x3] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  HINT   imm_const [0x4] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  HINT   imm_const [0x5] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  EOSZ   imm_const [0x1] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  EOSZ   imm_const [0x2] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  EOSZ   imm_const [0x3] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  EASZ   imm_const [0x1] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  EASZ   imm_const [0x2] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  EASZ   imm_const [0x3] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  IMM0SIGNED imm_const [0x1] r EXPLICIT INVALID
[INVALID WIDTH CODE]  DISP_WIDTH imm_const [0x10] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  DISP_WIDTH imm_const [0x20] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  DISP_WIDTH imm_const [0x40] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  DISP_WIDTH imm_const [0x8] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  DISP_WIDTH imm_const [0x0] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar8 INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar16 INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar24 INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar9 INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar17 INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar25 INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT ArDX INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar10 INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar18 INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar26 INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar11 INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar19 INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar27 INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT rIPa INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar14 INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar22 INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar30 INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar15 INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar23 INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar31 INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar13 INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar21 INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar29 INVALID
[INVALID WIDTH CODE]  BASE0  reg       [XED_REG_ESI] r EXPLICIT INVALID
[INVALID WIDTH CODE]  BASE0  reg       [XED_REG_EDI] r EXPLICIT INVALID
[INVALID WIDTH CODE]  BASE0  reg       [XED_REG_EBP] r EXPLICIT INVALID
[INVALID WIDTH CODE]  BASE0  reg       [XED_REG_BX] r EXPLICIT INVALID
[INVALID WIDTH CODE]  BASE0  reg       [XED_REG_BP] r EXPLICIT INVALID
[INVALID WIDTH CODE]  BASE0  reg       [XED_REG_SI] r EXPLICIT INVALID
[INVALID WIDTH CODE]  BASE0  reg       [XED_REG_DI] r EXPLICIT INVALID
[INVALID WIDTH CODE]  BASE0  reg       [XED_REG_INVALID] r EXPLICIT INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT ArSP INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar12 INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar20 INVALID
[INVALID WIDTH CODE]  BASE0  nt_lookup_fn r EXPLICIT Ar28 INVALID
[INVALID WIDTH CODE]  REG0   nt_lookup_fn w EXPLICIT SEG_MOV INVALID
[INVALID WIDTH CODE]  REG0   reg       [XED_REG_GSBASE] rw SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG2   reg       [XED_REG_CX] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG4   reg       [XED_REG_BX] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG5   reg       [XED_REG_SP] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG6   reg       [XED_REG_BP] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG7   reg       [XED_REG_SI] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG8   reg       [XED_REG_DI] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG5   reg       [XED_REG_ESP] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG6   reg       [XED_REG_EBP] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG7   reg       [XED_REG_ESI] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG8   reg       [XED_REG_EDI] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG2   reg       [XED_REG_CX] w SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG4   reg       [XED_REG_BX] w SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG5   reg       [XED_REG_BP] w SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG6   reg       [XED_REG_SI] w SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG7   reg       [XED_REG_DI] w SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG5   reg       [XED_REG_EBP] w SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG6   reg       [XED_REG_ESI] w SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG7   reg       [XED_REG_EDI] w SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG0   reg       [XED_REG_CX] r SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG1   reg       [XED_REG_IP] rw SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG1   reg       [XED_REG_ESP] w SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG1   reg       [XED_REG_RSP] w SUPPRESSED INVALID
[INVALID WIDTH CODE]  REG0   nt_lookup_fn r SUPPRESSED OrCX INVALID
[INVALID WIDTH CODE]  REG0   nt_lookup_fn rw SUPPRESSED OrCX INVALID
[INVALID WIDTH CODE]  REG2   nt_lookup_fn r SUPPRESSED OrBX INVALID
[INVALID WIDTH CODE]  REG1   nt_lookup_fn rcw SUPPRESSED OrCX INVALID
[INVALID WIDTH CODE]  REG0   nt_lookup_fn w EXPLICIT BND_R INVALID
[INVALID WIDTH CODE]  REG0   nt_lookup_fn r EXPLICIT BND_R INVALID
[INVALID WIDTH CODE]  REG1   nt_lookup_fn r EXPLICIT BND_B INVALID
[INVALID WIDTH CODE]  REG0   nt_lookup_fn w EXPLICIT BND_B INVALID
[INVALID WIDTH CODE]  REG1   nt_lookup_fn r EXPLICIT BND_R INVALID
[INVALID WIDTH CODE]  REG0   nt_lookup_fn r EXPLICIT A_GPR_R INVALID
[INVALID WIDTH CODE]  BASE1  nt_lookup_fn r SUPPRESSED A_GPR_R INVALID
[INVALID WIDTH CODE]  REG0   nt_lookup_fn r EXPLICIT A_GPR_B INVALID
[INVALID WIDTH CODE]  REG2   nt_lookup_fn r EXPLICIT DFV INVALID
[INVALID WIDTH CODE]  REG1   nt_lookup_fn r EXPLICIT DFV INVALID
[INVALID WIDTH CODE]  REG0   nt_lookup_fn r EXPLICIT DFV INVALID
FE:EMIT_FILE obj/xed-init-operand-data.c
FE:EMIT_FILE obj/xed-init-operand-sequences.c
FE:EMIT_FILE obj/xed-init-inst-table-data.c
FE:EMIT_FILE obj/xed-init-inst-table-0.c
FE:EMIT_FILE obj/xed-init-inst-table.c
emit_enum_info
OPERAND-NAMES SEG_OVD HINT ENCODE_FORCE LOCK NEED_MEMDISP DISP DISP_WIDTH BRDISP_WIDTH DF32 DF64 NOREX NOREX2 NEEDREX REX REXW REXR REXX REXB REX2 REXB4 REXX4 REXR4 HAS_EGPR REP OSZ PREFIX66 ASZ EOSZ EASZ SKIP_OSZ MOD REG SRM RM REALMODE CHIP MODE SMODE MODEP5 MODEP55C P4 LZCNT TZCNT MODE_FIRST_PREFIX MODE_SHORT_UD0 IMM0 IMM1 IMM0SIGNED UIMM0 UIMM1 IMM_WIDTH USING_DEFAULT_SEGMENT0 USING_DEFAULT_SEGMENT1 DEFAULT_SEG SEG0 BASE0 INDEX SCALE NEED_SIB SIBSCALE SIBBASE SIBINDEX SEG1 BASE1 MEM0 MEM1 MEM_WIDTH AGEN RELBR ABSBR PTR REG0 REG1 REG2 REG3 REG4 REG5 REG6 REG7 REG8 REG9 OUTREG ENCODER_PREFERRED ERROR ICLASS NELEM ELEMENT_SIZE MAP OUT_OF_BYTES FIRST_F2F3 LAST_F2F3 ILD_F2 ILD_F3 MAX_BYTES ILD_SEG NSEG_PREFIXES NREXES NPREFIXES NOMINAL_OPCODE POS_NOMINAL_OPCODE HAS_MODRM HAS_SIB POS_MODRM POS_SIB POS_DISP POS_IMM POS_IMM1 IMM1_BYTES MODRM_BYTE ESRC VEXVALID DUMMY NO_EVEX NO_VEX NO_APX AMD3DNOW MPXMODE CET CLDEMOTE VEXDEST3 VEXDEST210 VL VEX_PREFIX VEX_C4 BCAST MUST_USE_EVEX ZEROING LLRC BCRC VEXDEST4 MASK ROUNDC SAE VL_IGN UBIT WBNOINVD EVVSPACE ND NF SCC
FE:EMIT_FILE obj/xed-attributes-list.c
FE:EMIT_FILE obj/xed-nonterminal-enum.txt
FE:EMIT_FILE obj/xed-nonterminal-enum.c
FE:EMIT_FILE obj/xed-nonterminal-enum.h
FE:EMIT_FILE obj/xed-operand-enum.txt
FE:EMIT_FILE obj/xed-operand-enum.c
FE:EMIT_FILE obj/xed-operand-enum.h
FE:EMIT_FILE obj/xed-operand-type-enum.txt
FE:EMIT_FILE obj/xed-operand-type-enum.c
FE:EMIT_FILE obj/xed-operand-type-enum.h
FE:EMIT_FILE obj/xed-attribute-enum.txt
FE:EMIT_FILE obj/xed-attribute-enum.c
FE:EMIT_FILE obj/xed-attribute-enum.h
FE:EMIT_FILE obj/xed-category-enum.txt
FE:EMIT_FILE obj/xed-category-enum.c
FE:EMIT_FILE obj/xed-category-enum.h
FE:EMIT_FILE obj/xed-extension-enum.txt
FE:EMIT_FILE obj/xed-extension-enum.c
FE:EMIT_FILE obj/xed-extension-enum.h
PREFAB-ENUM: ./datafiles/xed-operand-visibility-enum.txt
FE:EMIT_FILE obj/xed-operand-visibility-enum.c
FE:EMIT_FILE obj/xed-operand-visibility-enum.h
PREFAB-ENUM: ./datafiles/xed-syntax-enum.txt
FE:EMIT_FILE obj/xed-syntax-enum.c
FE:EMIT_FILE obj/xed-syntax-enum.h
PREFAB-ENUM: ./datafiles/xed-flag-enum.txt
FE:EMIT_FILE obj/xed-flag-enum.c
FE:EMIT_FILE obj/xed-flag-enum.h
PREFAB-ENUM: ./datafiles/xed-operand-action-enum.txt
FE:EMIT_FILE obj/xed-operand-action-enum.c
FE:EMIT_FILE obj/xed-operand-action-enum.h
PREFAB-ENUM: ./datafiles/xed-machine-modes-enum.txt
FE:EMIT_FILE obj/xed-machine-mode-enum.c
FE:EMIT_FILE obj/xed-machine-mode-enum.h
PREFAB-ENUM: ./datafiles/xed-reg-role.enum.txt
FE:EMIT_FILE obj/xed-reg-role-enum.c
FE:EMIT_FILE obj/xed-reg-role-enum.h
PREFAB-ENUM: ./datafiles/xed-addr-width-enum.txt
FE:EMIT_FILE obj/xed-address-width-enum.c
FE:EMIT_FILE obj/xed-address-width-enum.h
PREFAB-ENUM: ./datafiles/xed-flag-action-enum.txt
FE:EMIT_FILE obj/xed-flag-action-enum.c
FE:EMIT_FILE obj/xed-flag-action-enum.h
FE:EMIT_FILE obj/xed-attributes-init.c
FE:EMIT_FILE obj/xed-gen-table-defs.h
FE:EMIT_FILE obj/cdata.txt
FE:EMIT_FILE obj/xed-chip-enum.txt
FE:EMIT_FILE obj/xed-chip-enum.c
FE:EMIT_FILE obj/xed-chip-enum.h
[FROM CHIP MODEL] ['INVALID', '3DNOW', 'ADOX_ADCX', 'AES', 'AMD', 'AMD_INVLPGB', 'AMX_BF16', 'AMX_COMPLEX', 'AMX_FP16', 'AMX_INT8', 'AMX_TILE', 'APX_F', 'APX_F_ADX', 'APX_F_AMX', 'APX_F_BMI1', 'APX_F_BMI2', 'APX_F_CET', 'APX_F_CMPCCXADD', 'APX_F_ENQCMD', 'APX_F_INVPCID', 'APX_F_KEYLOCKER', 'APX_F_KEYLOCKER_WIDE', 'APX_F_KOPB', 'APX_F_KOPD', 'APX_F_KOPQ', 'APX_F_KOPW', 'APX_F_LZCNT', 'APX_F_MOVBE', 'APX_F_MOVDIR64B', 'APX_F_MOVDIRI', 'APX_F_RAO_INT', 'APX_F_SHA', 'APX_F_USER_MSR', 'APX_F_VMX', 'AVX', 'AVX2', 'AVX2GATHER', 'AVX512BW_128', 'AVX512BW_128N', 'AVX512BW_256', 'AVX512BW_512', 'AVX512BW_KOPD', 'AVX512BW_KOPQ', 'AVX512CD_128', 'AVX512CD_256', 'AVX512CD_512', 'AVX512DQ_128', 'AVX512DQ_128N', 'AVX512DQ_256', 'AVX512DQ_512', 'AVX512DQ_KOPB', 'AVX512DQ_KOPW', 'AVX512DQ_SCALAR', 'AVX512ER_512', 'AVX512ER_SCALAR', 'AVX512F_128', 'AVX512F_128N', 'AVX512F_256', 'AVX512F_512', 'AVX512F_KOPW', 'AVX512F_SCALAR', 'AVX512PF_512', 'AVX512_4FMAPS_512', 'AVX512_4FMAPS_SCALAR', 'AVX512_4VNNIW_512', 'AVX512_BF16_128', 'AVX512_BF16_256', 'AVX512_BF16_512', 'AVX512_BITALG_128', 'AVX512_BITALG_256', 'AVX512_BITALG_512', 'AVX512_FP16_128', 'AVX512_FP16_128N', 'AVX512_FP16_256', 'AVX512_FP16_512', 'AVX512_FP16_SCALAR', 'AVX512_GFNI_128', 'AVX512_GFNI_256', 'AVX512_GFNI_512', 'AVX512_IFMA_128', 'AVX512_IFMA_256', 'AVX512_IFMA_512', 'AVX512_VAES_128', 'AVX512_VAES_256', 'AVX512_VAES_512', 'AVX512_VBMI2_128', 'AVX512_VBMI2_256', 'AVX512_VBMI2_512', 'AVX512_VBMI_128', 'AVX512_VBMI_256', 'AVX512_VBMI_512', 'AVX512_VNNI_128', 'AVX512_VNNI_256', 'AVX512_VNNI_512', 'AVX512_VP2INTERSECT_128', 'AVX512_VP2INTERSECT_256', 'AVX512_VP2INTERSECT_512', 'AVX512_VPCLMULQDQ_128', 'AVX512_VPCLMULQDQ_256', 'AVX512_VPCLMULQDQ_512', 'AVX512_VPOPCNTDQ_128', 'AVX512_VPOPCNTDQ_256', 'AVX512_VPOPCNTDQ_512', 'AVXAES', 'AVX_GFNI', 'AVX_IFMA', 'AVX_NE_CONVERT', 'AVX_VNNI', 'AVX_VNNI_INT16', 'AVX_VNNI_INT8', 'BMI1', 'BMI2', 'CET', 'CLDEMOTE', 'CLFLUSHOPT', 'CLFSH', 'CLWB', 'CLZERO', 'CMOV', 'CMPCCXADD', 'CMPXCHG16B', 'ENQCMD', 'F16C', 'FAT_NOP', 'FCMOV', 'FCOMI', 'FMA', 'FMA4', 'FRED', 'FXSAVE', 'FXSAVE64', 'GFNI', 'HRESET', 'I186', 'I286PROTECTED', 'I286REAL', 'I386', 'I486', 'I486REAL', 'I86', 'ICACHE_PREFETCH', 'INVPCID', 'KEYLOCKER', 'KEYLOCKER_WIDE', 'LAHF', 'LKGS', 'LONGMODE', 'LWP', 'LZCNT', 'MCOMMIT', 'MONITOR', 'MONITORX', 'MOVBE', 'MOVDIR64B', 'MOVDIRI', 'MPX', 'MSRLIST', 'PAUSE', 'PBNDKB', 'PCLMULQDQ', 'PCONFIG', 'PENTIUMMMX', 'PENTIUMREAL', 'PKU', 'POPCNT', 'PPRO', 'PPRO_UD0_LONG', 'PPRO_UD0_SHORT', 'PREFETCHW', 'PREFETCHWT1', 'PREFETCH_NOP', 'PTWRITE', 'RAO_INT', 'RDPID', 'RDPMC', 'RDPRU', 'RDRAND', 'RDSEED', 'RDTSCP', 'RDWRFSGS', 'RTM', 'SERIALIZE', 'SGX', 'SGX_ENCLV', 'SHA', 'SHA512', 'SM3', 'SM4', 'SMAP', 'SMX', 'SNP', 'SSE', 'SSE2', 'SSE2MMX', 'SSE3', 'SSE3X87', 'SSE4', 'SSE42', 'SSE4A', 'SSEMXCSR', 'SSE_PREFETCH', 'SSSE3', 'SSSE3MMX', 'SVM', 'TBM', 'TDX', 'TSX_LDTRK', 'UINTR', 'USER_MSR', 'VAES', 'VIA_PADLOCK_AES', 'VIA_PADLOCK_MONTMUL', 'VIA_PADLOCK_RNG', 'VIA_PADLOCK_SHA', 'VMFUNC', 'VPCLMULQDQ', 'VTX', 'WAITPKG', 'WBNOINVD', 'WRMSRNS', 'X87', 'XOP', 'XSAVE', 'XSAVEC', 'XSAVEOPT', 'XSAVES']
[FROM INSTRUCTIONS ] {'SSE4A', 'AMX_INT8', 'VPCLMULQDQ', 'AVX512_VPCLMULQDQ_128', 'RDPRU', 'AVX512DQ_SCALAR', 'APX_F_CMPCCXADD', 'AVX_IFMA', 'CLDEMOTE', 'SMAP', 'AVX512F_128', 'BMI1', 'AVX512_VPOPCNTDQ_256', 'INVPCID', 'AVX512_VBMI_128', 'SSE3X87', 'RAO_INT', 'AVX512_GFNI_512', 'AVX512_BITALG_256', 'AMX_FP16', 'SSE3', 'MONITORX', 'ENQCMD', 'BMI2', 'FMA4', 'AVX512_BITALG_512', 'F16C', 'PKU', 'TDX', 'SGX_ENCLV', 'I486', 'AVX_GFNI', 'PPRO_UD0_SHORT', 'TBM', 'SHA512', 'SSSE3MMX', 'AVX512BW_128N', 'AVX512PF_512', 'AVX512_FP16_SCALAR', 'SSSE3', 'AVX512F_512', 'I86', 'PBNDKB', 'AVXAES', 'AVX512_FP16_256', 'I286PROTECTED', 'SSE42', 'AVX_VNNI', 'UINTR', 'AVX512DQ_128', 'MCOMMIT', 'AVX_NE_CONVERT', 'RDTSCP', 'SVM', 'TSX_LDTRK', 'APX_F_KOPB', 'XSAVE', 'VAES', 'CLZERO', 'MPX', 'VTX', 'MONITOR', 'AMX_TILE', 'APX_F_USER_MSR', 'AVX512_4VNNIW_512', 'AVX512_VBMI2_512', 'VIA_PADLOCK_RNG', 'APX_F_ADX', 'FXSAVE', 'AVX', 'AVX512_VPOPCNTDQ_128', 'AVX512_VAES_128', 'APX_F_MOVDIRI', 'CLFSH', 'AVX512_VP2INTERSECT_128', 'APX_F_LZCNT', 'AVX512DQ_KOPW', 'VIA_PADLOCK_SHA', 'AVX512_VPCLMULQDQ_256', 'APX_F_BMI2', 'PCLMULQDQ', 'APX_F_ENQCMD', 'WAITPKG', 'AVX512DQ_512', 'APX_F_CET', 'AVX512F_128N', 'AVX512_VPCLMULQDQ_512', 'AVX512_VAES_256', 'APX_F_KEYLOCKER', 'WRMSRNS', 'AVX512DQ_KOPB', 'AVX512_BF16_512', 'CMPCCXADD', 'MOVDIR64B', 'APX_F_MOVBE', 'AVX512_VBMI_512', 'AVX512_VNNI_512', 'FMA', 'AMD_INVLPGB', 'FCOMI', 'AVX512_4FMAPS_512', 'FXSAVE64', 'KEYLOCKER_WIDE', 'SMX', 'AVX512_VBMI_256', 'RDPMC', 'PCONFIG', 'AVX512_FP16_512', 'AVX512_VBMI2_128', 'I186', 'AVX512_FP16_128N', 'AVX512_BF16_256', 'RDRAND', 'GFNI', 'SSE2', 'AVX512DQ_256', 'PENTIUMREAL', 'RDSEED', 'RTM', 'AVX512_VBMI2_256', 'PTWRITE', 'APX_F_KOPD', 'XSAVEC', 'AMX_COMPLEX', 'AVX512_4FMAPS_SCALAR', 'VIA_PADLOCK_AES', 'AVX_VNNI_INT16', 'SSE2MMX', 'CLFLUSHOPT', 'POPCNT', 'AVX512_GFNI_128', 'AVX512BW_128', 'AVX512_IFMA_128', 'RDPID', 'APX_F_KOPW', 'AVX512CD_512', 'AVX512_GFNI_256', 'XSAVES', 'ADOX_ADCX', 'USER_MSR', 'APX_F', 'AVX512CD_256', 'LAHF', 'FRED', 'AVX512_VNNI_256', 'APX_F_MOVDIR64B', 'WBNOINVD', 'LONGMODE', 'PAUSE', 'XSAVEOPT', '3DNOW', 'SSE_PREFETCH', 'CMOV', 'PENTIUMMMX', 'FAT_NOP', 'CET', 'AVX512BW_KOPQ', 'AVX512BW_KOPD', 'RDWRFSGS', 'SNP', 'APX_F_KOPQ', 'AVX512_VP2INTERSECT_256', 'AVX512_IFMA_512', 'SSE', 'AVX512_FP16_128', 'LWP', 'I386', 'PPRO', 'SSE4', 'APX_F_RAO_INT', 'PPRO_UD0_LONG', 'APX_F_AMX', 'MOVBE', 'I286REAL', 'I486REAL', 'APX_F_VMX', 'HRESET', 'SM4', 'SHA', 'LZCNT', 'AMX_BF16', 'AVX512_VAES_512', 'AMD', 'PREFETCH_NOP', 'AVX512_VP2INTERSECT_512', 'AVX2', 'AVX512BW_256', 'AVX512F_SCALAR', 'AES', 'AVX512F_KOPW', 'XOP', 'VMFUNC', 'AVX512_VNNI_128', 'ICACHE_PREFETCH', 'SSEMXCSR', 'AVX512ER_512', 'CMPXCHG16B', 'X87', 'AVX512F_256', 'APX_F_INVPCID', 'AVX512_BITALG_128', 'SERIALIZE', 'AVX512_VPOPCNTDQ_512', 'APX_F_KEYLOCKER_WIDE', 'SGX', 'APX_F_BMI1', 'APX_F_SHA', 'VIA_PADLOCK_MONTMUL', 'AVX_VNNI_INT8', 'MOVDIRI', 'LKGS', 'MSRLIST', 'AVX512BW_512', 'FCMOV', 'KEYLOCKER', 'SM3', 'AVX512_BF16_128', 'AVX512DQ_128N', 'AVX512_IFMA_256', 'PREFETCHWT1', 'CLWB', 'AVX512CD_128', 'AVX2GATHER', 'AVX512ER_SCALAR'}
FE:EMIT_FILE obj/xed-isa-set-enum.txt
FE:EMIT_FILE obj/xed-isa-set-enum.c
FE:EMIT_FILE obj/xed-isa-set-enum.h
FE:EMIT_FILE obj/xed-chip-features-table.c
FE:EMIT_FILE obj/include-private/xed-chip-features-table.h
Created files: obj/cdata.txt obj/xed-chip-enum.h obj/xed-chip-enum.c obj/xed-isa-set-enum.h obj/xed-isa-set-enum.c obj/include-private/xed-chip-features-table.h obj/xed-chip-features-table.c
FE:EMIT_FILE obj/xed-operand-convert-enum.txt
FE:EMIT_FILE obj/xed-operand-convert-enum.c
FE:EMIT_FILE obj/xed-operand-convert-enum.h
FE:EMIT_FILE obj/xed-convert-table-init.c
FE:EMIT_FILE obj/xed-convert-table-init.h
FE:EMIT_FILE obj/xed-operand-storage.h
FE:EMIT_FILE obj/xed-classifiers.c
[ILD_MODRM] alias search for map legacy_map1 opcode 0x4
[ILD_MODRM] alias search for map legacy_map1 opcode 0xa
[ILD_MODRM] alias search for map legacy_map1 opcode 0xc
[ILD_MODRM] alias search for map legacy_map1 opcode 0xf
[ILD_MODRM] alias search for map legacy_map1 opcode 0x24
[ILD_MODRM] alias search for map legacy_map1 opcode 0x25
[ILD_MODRM] alias search for map legacy_map1 opcode 0x26
[ILD_MODRM] alias search for map legacy_map1 opcode 0x27
[ILD_MODRM] alias search for map legacy_map1 opcode 0x36
[ILD_MODRM] alias search for map legacy_map1 opcode 0x38
[ILD_MODRM] alias search for map legacy_map1 opcode 0x39
[ILD_MODRM] alias search for map legacy_map1 opcode 0x3a
[ILD_MODRM] alias search for map legacy_map1 opcode 0x3b
[ILD_MODRM] alias search for map legacy_map1 opcode 0x3c
[ILD_MODRM] alias search for map legacy_map1 opcode 0x3d
[ILD_MODRM] alias search for map legacy_map1 opcode 0x3e
[ILD_MODRM] alias search for map legacy_map1 opcode 0x3f
[ILD_MODRM] alias search for map legacy_map1 opcode 0x7a
[ILD_MODRM] alias search for map legacy_map1 opcode 0x7b
[ILD_MODRM] alias search for map vex_map1 opcode 0x0
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x1
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x2
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x3
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x4
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0x4 = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x5
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x6
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x7
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x8
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x9
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xa
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0xa = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xb
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xc
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0xc = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xd
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xe
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xf
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0xf = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x18
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x19
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x1a
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x1b
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x1c
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x1d
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x1e
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x1f
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x20
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_IGNORE_MOD
[ILD_MODRM] alias search for map vex_map1 opcode 0x21
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_IGNORE_MOD
[ILD_MODRM] alias search for map vex_map1 opcode 0x22
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_IGNORE_MOD
[ILD_MODRM] alias search for map vex_map1 opcode 0x23
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_IGNORE_MOD
[ILD_MODRM] alias search for map vex_map1 opcode 0x24
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0x24 = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x25
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0x25 = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x26
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0x26 = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x27
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0x27 = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x30
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x31
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x32
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x33
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x34
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x35
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x36
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0x36 = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x37
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x38
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0x38 = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x39
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0x39 = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x3a
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0x3a = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x3b
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0x3b = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x3c
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0x3c = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x3d
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0x3d = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x3e
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0x3e = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x3f
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0x3f = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x40
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x43
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x48
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x49
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x4c
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x4d
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x4e
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x4f
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x78
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x79
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x7a
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0x7a = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x7b
[ild_modrm] providing ild gap data for map legacy_map1 opcode 0x7b = XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x80
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x81
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x82
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x83
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x84
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x85
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x86
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x87
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x88
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x89
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x8a
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x8b
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x8c
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x8d
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x8e
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x8f
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0x94
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x95
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x96
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x97
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x9a
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x9b
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x9c
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x9d
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x9e
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0x9f
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xa0
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xa1
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xa2
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xa3
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xa4
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xa5
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xa6
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_IGNORE_MOD
[ILD_MODRM] alias search for map vex_map1 opcode 0xa7
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_IGNORE_MOD
[ILD_MODRM] alias search for map vex_map1 opcode 0xa8
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xa9
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xaa
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xab
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xac
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xad
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xaf
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xb0
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xb1
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xb2
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xb3
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xb4
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xb5
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xb6
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xb7
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xb8
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xb9
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xba
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xbb
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xbc
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xbd
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xbe
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xbf
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xc0
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xc1
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xc3
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xc7
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_TRUE
[ILD_MODRM] alias search for map vex_map1 opcode 0xc8
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xc9
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xca
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xcb
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xcc
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xcd
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xce
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xcf
[ILD_MODRM] 		 --> supplied XED_ILD_HASMODRM_FALSE
[ILD_MODRM] alias search for map vex_map1 opcode 0xff
[ILD_MODRM] alias search for map legacy_map0 opcode 0xf
[ILD_MODRM] alias search for map legacy_map0 opcode 0x26
[ILD_MODRM] alias search for map legacy_map0 opcode 0x2e
[ILD_MODRM] alias search for map legacy_map0 opcode 0x36
[ILD_MODRM] alias search for map legacy_map0 opcode 0x3e
[ILD_MODRM] alias search for map legacy_map0 opcode 0x64
[ILD_MODRM] alias search for map legacy_map0 opcode 0x65
[ILD_MODRM] alias search for map legacy_map0 opcode 0x66
[ILD_MODRM] alias search for map legacy_map0 opcode 0x67
[ILD_MODRM] alias search for map legacy_map0 opcode 0xf0
[ILD_MODRM] alias search for map legacy_map0 opcode 0xf2
[ILD_MODRM] alias search for map legacy_map0 opcode 0xf3
FE:EMIT_FILE obj/include-private/xed-ild-modrm.h
[ILD_MODRM] aliases supplied 110
FE:EMIT_FILE obj/ild_eosz_debug.txt
FE:EMIT_FILE obj/ild_eosz_debug_header.txt
FE:EMIT_FILE obj/xed-ild-eosz.c
FE:EMIT_FILE obj/include-private/xed-ild-eosz.h
FE:EMIT_FILE obj/include-private/xed-ild-eosz-getters.h
FE:EMIT_FILE obj/ild_easz_debug.txt
FE:EMIT_FILE obj/ild_easz_debug_header.txt
FE:EMIT_FILE obj/xed-ild-easz.c
FE:EMIT_FILE obj/include-private/xed-ild-easz.h
FE:EMIT_FILE obj/include-private/xed-ild-easz-getters.h
FE:EMIT_FILE obj/xed-operand-accessors.h
FE:EMIT_FILE obj/xed-operand-accessors.c
FE:EMIT_FILE obj/xed-ild-imm-l3.c
FE:EMIT_FILE obj/include-private/xed-ild-imm-l3.h
FE:EMIT_FILE obj/include-private/xed-ild-imm-l2.h
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0xf6 map evex_map4
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0xf7 map evex_map4
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0xc7 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0xc7 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0xc7 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0xc7 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0xc7 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0xc7 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0xc7 map legacy_map0
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0xf6 map legacy_map0
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0xf7 map legacy_map0
FE:EMIT_FILE obj/include-private/xed-ild-imm-l1.h
FE:EMIT_FILE obj/include-private/xed-ild-imm-bytes.h
FE:EMIT_FILE obj/xed-ild-disp-l3.c
FE:EMIT_FILE obj/include-private/xed-ild-disp-l3.h
FE:EMIT_FILE obj/include-private/xed-ild-disp-l2.h
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x80 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x80 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x80 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x80 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x80 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x80 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x80 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x80 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x80 map legacy_map1
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x80 map legacy_map1
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x80 map legacy_map1
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x81 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x81 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x81 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x81 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x81 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x81 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x81 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x81 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x81 map legacy_map1
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x81 map legacy_map1
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x81 map legacy_map1
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x82 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x82 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x82 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x82 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x82 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x82 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x82 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x82 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x82 map legacy_map1
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x82 map legacy_map1
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x82 map legacy_map1
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x83 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x83 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x83 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x83 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x83 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x83 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x83 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x83 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x83 map legacy_map1
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x83 map legacy_map1
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x83 map legacy_map1
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x84 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x84 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x84 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x84 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x84 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x84 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x84 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x84 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x84 map legacy_map1
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x84 map legacy_map1
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x84 map legacy_map1
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x85 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x85 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x85 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x85 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x85 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x85 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x85 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x85 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x85 map legacy_map1
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x85 map legacy_map1
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x85 map legacy_map1
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x86 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x86 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x86 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x86 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x86 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x86 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x86 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x86 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x86 map legacy_map1
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x86 map legacy_map1
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x86 map legacy_map1
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x87 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x87 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x87 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x87 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x87 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x87 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x87 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x87 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x87 map legacy_map1
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x87 map legacy_map1
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x87 map legacy_map1
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x88 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x88 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x88 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x88 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x88 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x88 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x88 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x88 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x88 map legacy_map1
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x88 map legacy_map1
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x88 map legacy_map1
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x89 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x89 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x89 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x89 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x89 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x89 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x89 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x89 map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x89 map legacy_map1
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x89 map legacy_map1
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x89 map legacy_map1
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x8a map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x8a map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x8a map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x8a map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x8a map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x8a map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x8a map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x8a map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x8a map legacy_map1
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x8a map legacy_map1
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x8a map legacy_map1
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x8b map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x8b map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x8b map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x8b map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x8b map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x8b map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x8b map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x8b map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x8b map legacy_map1
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x8b map legacy_map1
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x8b map legacy_map1
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x8c map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x8c map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x8c map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x8c map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x8c map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x8c map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x8c map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x8c map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x8c map legacy_map1
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x8c map legacy_map1
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x8c map legacy_map1
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x8d map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x8d map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x8d map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x8d map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x8d map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x8d map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x8d map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x8d map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x8d map legacy_map1
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x8d map legacy_map1
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x8d map legacy_map1
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x8e map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x8e map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x8e map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x8e map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x8e map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x8e map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x8e map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x8e map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x8e map legacy_map1
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x8e map legacy_map1
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x8e map legacy_map1
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0x8f map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0x8f map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0x8f map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0x8f map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0x8f map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0x8f map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0x8f map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0x8f map legacy_map1
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0x8f map legacy_map1
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0x8f map legacy_map1
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0x8f map legacy_map1
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0xa1 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0xa1 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0xa1 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0xa1 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0xa1 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0xa1 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0xa1 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0xa1 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0xa1 map legacy_map0
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0xa1 map legacy_map0
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0xa1 map legacy_map0
[ILD_PARSER WARNING] BY MODE resolving:Still conflict for mode2 opcode 0xa1 map legacy_map0
[ILD_PARSER WARNING] Failed to generate by mode fun_dict for opcode 0xa1 map legacy_map0
[ILD_PARSER WARNING] generating by REX2 fun_dict for opcode 0xa1 map legacy_map0
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0xc7 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0xc7 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0xc7 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0xc7 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0xc7 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0xc7 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0xc7 map legacy_map0
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0xe8 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0xe8 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0xe8 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0xe8 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0xe8 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0xe8 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0xe8 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0xe8 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0xe8 map legacy_map0
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0xe8 map legacy_map0
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0xe8 map legacy_map0
[ILD_PARSER WARNING] generating by reg fun_dict for opcode 0xe9 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg0 opcode 0xe9 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg1 opcode 0xe9 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg2 opcode 0xe9 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg3 opcode 0xe9 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg4 opcode 0xe9 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg5 opcode 0xe9 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg6 opcode 0xe9 map legacy_map0
[ILD_PARSER WARNING] BYREG resolving: No infos for reg7 opcode 0xe9 map legacy_map0
[ILD_PARSER WARNING] Failed to generate by reg fun_dict for opcode 0xe9 map legacy_map0
[ILD_PARSER WARNING] generating by mode fun_dict for opcode 0xe9 map legacy_map0
FE:EMIT_FILE obj/include-private/xed-ild-disp-l1.h
FE:EMIT_FILE obj/include-private/xed-ild-disp-bytes.h
[ALL ZEROS] VV=0 MAP=amd_xop8
[ALL ZEROS] VV=0 MAP=amd_xop9
[ALL ZEROS] VV=0 MAP=amd_xopA
[ALL ZEROS] VV=0 MAP=vex_map2
[ALL ZEROS] VV=0 MAP=vex_map3
[ALL ZEROS] VV=0 MAP=evex_map2
[ALL ZEROS] VV=0 MAP=evex_map3
[ALL ZEROS] VV=0 MAP=evex_map5
[ALL ZEROS] VV=0 MAP=evex_map6
[ALL ZEROS] VV=0 MAP=vex_map7
[ALL ZEROS] VV=0 MAP=evex_map4
[ALL ZEROS] VV=0 MAP=evex_map7
[ALL ZEROS] VV=0 MAP=vex_map1
[ALL ZEROS] VV=0 MAP=evex_map1
FE:EMIT_FILE obj/include-private/xed3-phash-vv0.h
FE:EMIT_FILE obj/xed3-phash-lu-vv0.c
FE:EMIT_FILE obj/include-private/xed3-phash-lu-vv0.h
[ALL ZEROS] VV=1 MAP=legacy_map2
[ALL ZEROS] VV=1 MAP=legacy_map3
[ALL ZEROS] VV=1 MAP=amd_3dnow
[ALL ZEROS] VV=1 MAP=amd_xop8
[ALL ZEROS] VV=1 MAP=amd_xop9
[ALL ZEROS] VV=1 MAP=amd_xopA
[ALL ZEROS] VV=1 MAP=evex_map2
[ALL ZEROS] VV=1 MAP=evex_map3
[ALL ZEROS] VV=1 MAP=legacy_map1
[ALL ZEROS] VV=1 MAP=evex_map5
[ALL ZEROS] VV=1 MAP=evex_map6
[ALL ZEROS] VV=1 MAP=evex_map4
[ALL ZEROS] VV=1 MAP=evex_map7
[ALL ZEROS] VV=1 MAP=evex_map1
[ALL ZEROS] VV=1 MAP=legacy_map0
FE:EMIT_FILE obj/include-private/xed3-phash-vv1.h
FE:EMIT_FILE obj/xed3-phash-lu-vv1.c
FE:EMIT_FILE obj/include-private/xed3-phash-lu-vv1.h
[ALL ZEROS] VV=2 MAP=legacy_map2
[ALL ZEROS] VV=2 MAP=legacy_map3
[ALL ZEROS] VV=2 MAP=amd_3dnow
[ALL ZEROS] VV=2 MAP=amd_xop8
[ALL ZEROS] VV=2 MAP=amd_xop9
[ALL ZEROS] VV=2 MAP=amd_xopA
[ALL ZEROS] VV=2 MAP=vex_map2
[ALL ZEROS] VV=2 MAP=vex_map3
[ALL ZEROS] VV=2 MAP=legacy_map1
[ALL ZEROS] VV=2 MAP=vex_map7
[ALL ZEROS] VV=2 MAP=vex_map1
[ALL ZEROS] VV=2 MAP=legacy_map0
FE:EMIT_FILE obj/include-private/xed3-phash-vv2.h
FE:EMIT_FILE obj/xed3-phash-lu-vv2.c
FE:EMIT_FILE obj/include-private/xed3-phash-lu-vv2.h
[ALL ZEROS] VV=3 MAP=legacy_map2
[ALL ZEROS] VV=3 MAP=legacy_map3
[ALL ZEROS] VV=3 MAP=amd_3dnow
[ALL ZEROS] VV=3 MAP=vex_map2
[ALL ZEROS] VV=3 MAP=vex_map3
[ALL ZEROS] VV=3 MAP=evex_map2
[ALL ZEROS] VV=3 MAP=evex_map3
[ALL ZEROS] VV=3 MAP=legacy_map1
[ALL ZEROS] VV=3 MAP=evex_map5
[ALL ZEROS] VV=3 MAP=evex_map6
[ALL ZEROS] VV=3 MAP=vex_map7
[ALL ZEROS] VV=3 MAP=evex_map4
[ALL ZEROS] VV=3 MAP=evex_map7
[ALL ZEROS] VV=3 MAP=vex_map1
[ALL ZEROS] VV=3 MAP=evex_map1
[ALL ZEROS] VV=3 MAP=legacy_map0
FE:EMIT_FILE obj/include-private/xed3-phash-vv3.h
FE:EMIT_FILE obj/xed3-phash-lu-vv3.c
FE:EMIT_FILE obj/include-private/xed3-phash-lu-vv3.h
FE:EMIT_FILE obj/include-private/xed3-operand-lu.h
FE:EMIT_FILE obj/xed3-operand-lu.c
FE:EMIT_FILE obj/include-private/xed3-phash.h
FE:EMIT_FILE obj/include-private/xed3-nt-capture.h
FE:EMIT_FILE obj/include-private/xed3-chain-capture.h
FE:EMIT_FILE obj/include-private/xed3-chain-capture-lu.h
FE:EMIT_FILE obj/include-private/xed3-op-chain-capture.h
FE:EMIT_FILE obj/include-private/xed3-op-chain-capture-lu.h
FE:EMIT_FILE obj/include-private/xed3-dynamic-part1-capture.h
FE:EMIT_FILE obj/xed-ild-enum.c
FE:EMIT_FILE obj/xed-ild-enum.h
FE:EMIT_FILE obj/xed-mapu-enum.c
FE:EMIT_FILE obj/xed-mapu-enum.h
FE:EMIT_FILE obj/include-private/xed-map-feature-tables.h
FE:EMIT_FILE obj/xed-cpuid-rec-enum.txt
FE:EMIT_FILE obj/xed-cpuid-rec-enum.c
FE:EMIT_FILE obj/xed-cpuid-rec-enum.h
FE:EMIT_FILE obj/xed-cpuid-group-enum.txt
FE:EMIT_FILE obj/xed-cpuid-group-enum.c
FE:EMIT_FILE obj/xed-cpuid-group-enum.h
CPUID Group:  INVALID
CPUID Group:  ADOX_ADCX
CPUID Group:  AES
CPUID Group:  AMX_BF16
CPUID Group:  AMX_COMPLEX
CPUID Group:  AMX_FP16
CPUID Group:  AMX_INT8
CPUID Group:  AMX_TILE
CPUID Group:  APX_F
CPUID Group:  APX_F_ADX
CPUID Group:  APX_F_AMX
CPUID Group:  APX_F_BMI1
CPUID Group:  APX_F_BMI2
CPUID Group:  APX_F_CET
CPUID Group:  APX_F_CMPCCXADD
CPUID Group:  APX_F_ENQCMD
CPUID Group:  APX_F_INVPCID
CPUID Group:  APX_F_KEYLOCKER
CPUID Group:  APX_F_KEYLOCKER_WIDE
CPUID Group:  APX_F_KOPB
CPUID Group:  APX_F_KOPB_AVX10
CPUID Group:  APX_F_KOPD
CPUID Group:  APX_F_KOPD_AVX10
CPUID Group:  APX_F_KOPQ
CPUID Group:  APX_F_KOPQ_AVX10
CPUID Group:  APX_F_KOPW
CPUID Group:  APX_F_KOPW_AVX10
CPUID Group:  APX_F_LZCNT
CPUID Group:  APX_F_MOVBE
CPUID Group:  APX_F_MOVDIR64B
CPUID Group:  APX_F_MOVDIRI
CPUID Group:  APX_F_RAO_INT
CPUID Group:  APX_F_SHA
CPUID Group:  APX_F_USER_MSR
CPUID Group:  APX_F_VMX
CPUID Group:  AVX
CPUID Group:  AVX2
CPUID Group:  AVX2GATHER
CPUID Group:  AVX512BW_128
CPUID Group:  AVX512BW_128N
CPUID Group:  AVX512BW_128N_AVX10
CPUID Group:  AVX512BW_128_AVX10
CPUID Group:  AVX512BW_256
CPUID Group:  AVX512BW_256_AVX10
CPUID Group:  AVX512BW_512
CPUID Group:  AVX512BW_512_AVX10
CPUID Group:  AVX512BW_KOPD
CPUID Group:  AVX512BW_KOPD_AVX10
CPUID Group:  AVX512BW_KOPQ
CPUID Group:  AVX512BW_KOPQ_AVX10
CPUID Group:  AVX512CD_128
CPUID Group:  AVX512CD_128_AVX10
CPUID Group:  AVX512CD_256
CPUID Group:  AVX512CD_256_AVX10
CPUID Group:  AVX512CD_512
CPUID Group:  AVX512CD_512_AVX10
CPUID Group:  AVX512DQ_128
CPUID Group:  AVX512DQ_128N
CPUID Group:  AVX512DQ_128N_AVX10
CPUID Group:  AVX512DQ_128_AVX10
CPUID Group:  AVX512DQ_256
CPUID Group:  AVX512DQ_256_AVX10
CPUID Group:  AVX512DQ_512
CPUID Group:  AVX512DQ_512_AVX10
CPUID Group:  AVX512DQ_KOPB
CPUID Group:  AVX512DQ_KOPB_AVX10
CPUID Group:  AVX512DQ_KOPW
CPUID Group:  AVX512DQ_KOPW_AVX10
CPUID Group:  AVX512DQ_SCALAR
CPUID Group:  AVX512DQ_SCALAR_AVX10
CPUID Group:  AVX512ER_512
CPUID Group:  AVX512ER_SCALAR
CPUID Group:  AVX512F_128
CPUID Group:  AVX512F_128N
CPUID Group:  AVX512F_128N_AVX10
CPUID Group:  AVX512F_128_AVX10
CPUID Group:  AVX512F_256
CPUID Group:  AVX512F_256_AVX10
CPUID Group:  AVX512F_512
CPUID Group:  AVX512F_512_AVX10
CPUID Group:  AVX512F_KOPW
CPUID Group:  AVX512F_KOPW_AVX10
CPUID Group:  AVX512F_SCALAR
CPUID Group:  AVX512F_SCALAR_AVX10
CPUID Group:  AVX512PF_512
CPUID Group:  AVX512_4FMAPS_512
CPUID Group:  AVX512_4FMAPS_SCALAR
CPUID Group:  AVX512_4VNNIW_512
CPUID Group:  AVX512_BF16_128
CPUID Group:  AVX512_BF16_128_AVX10
CPUID Group:  AVX512_BF16_256
CPUID Group:  AVX512_BF16_256_AVX10
CPUID Group:  AVX512_BF16_512
CPUID Group:  AVX512_BF16_512_AVX10
CPUID Group:  AVX512_BITALG_128
CPUID Group:  AVX512_BITALG_128_AVX10
CPUID Group:  AVX512_BITALG_256
CPUID Group:  AVX512_BITALG_256_AVX10
CPUID Group:  AVX512_BITALG_512
CPUID Group:  AVX512_BITALG_512_AVX10
CPUID Group:  AVX512_FP16_128
CPUID Group:  AVX512_FP16_128N
CPUID Group:  AVX512_FP16_128N_AVX10
CPUID Group:  AVX512_FP16_128_AVX10
CPUID Group:  AVX512_FP16_256
CPUID Group:  AVX512_FP16_256_AVX10
CPUID Group:  AVX512_FP16_512
CPUID Group:  AVX512_FP16_512_AVX10
CPUID Group:  AVX512_FP16_SCALAR
CPUID Group:  AVX512_FP16_SCALAR_AVX10
CPUID Group:  AVX512_GFNI_128
CPUID Group:  AVX512_GFNI_128_AVX10
CPUID Group:  AVX512_GFNI_256
CPUID Group:  AVX512_GFNI_256_AVX10
CPUID Group:  AVX512_GFNI_512
CPUID Group:  AVX512_GFNI_512_AVX10
CPUID Group:  AVX512_IFMA_128
CPUID Group:  AVX512_IFMA_128_AVX10
CPUID Group:  AVX512_IFMA_256
CPUID Group:  AVX512_IFMA_256_AVX10
CPUID Group:  AVX512_IFMA_512
CPUID Group:  AVX512_IFMA_512_AVX10
CPUID Group:  AVX512_VAES_128
CPUID Group:  AVX512_VAES_128_AVX10
CPUID Group:  AVX512_VAES_256
CPUID Group:  AVX512_VAES_256_AVX10
CPUID Group:  AVX512_VAES_512
CPUID Group:  AVX512_VAES_512_AVX10
CPUID Group:  AVX512_VBMI2_128
CPUID Group:  AVX512_VBMI2_128_AVX10
CPUID Group:  AVX512_VBMI2_256
CPUID Group:  AVX512_VBMI2_256_AVX10
CPUID Group:  AVX512_VBMI2_512
CPUID Group:  AVX512_VBMI2_512_AVX10
CPUID Group:  AVX512_VBMI_128
CPUID Group:  AVX512_VBMI_128_AVX10
CPUID Group:  AVX512_VBMI_256
CPUID Group:  AVX512_VBMI_256_AVX10
CPUID Group:  AVX512_VBMI_512
CPUID Group:  AVX512_VBMI_512_AVX10
CPUID Group:  AVX512_VNNI_128
CPUID Group:  AVX512_VNNI_128_AVX10
CPUID Group:  AVX512_VNNI_256
CPUID Group:  AVX512_VNNI_256_AVX10
CPUID Group:  AVX512_VNNI_512
CPUID Group:  AVX512_VNNI_512_AVX10
CPUID Group:  AVX512_VP2INTERSECT_128
CPUID Group:  AVX512_VP2INTERSECT_256
CPUID Group:  AVX512_VP2INTERSECT_512
CPUID Group:  AVX512_VPCLMULQDQ_128
CPUID Group:  AVX512_VPCLMULQDQ_128_AVX10
CPUID Group:  AVX512_VPCLMULQDQ_256
CPUID Group:  AVX512_VPCLMULQDQ_256_AVX10
CPUID Group:  AVX512_VPCLMULQDQ_512
CPUID Group:  AVX512_VPCLMULQDQ_512_AVX10
CPUID Group:  AVX512_VPOPCNTDQ_128
CPUID Group:  AVX512_VPOPCNTDQ_128_AVX10
CPUID Group:  AVX512_VPOPCNTDQ_256
CPUID Group:  AVX512_VPOPCNTDQ_256_AVX10
CPUID Group:  AVX512_VPOPCNTDQ_512
CPUID Group:  AVX512_VPOPCNTDQ_512_AVX10
CPUID Group:  AVXAES
CPUID Group:  AVX_GFNI
CPUID Group:  AVX_IFMA
CPUID Group:  AVX_NE_CONVERT
CPUID Group:  AVX_VNNI
CPUID Group:  AVX_VNNI_INT16
CPUID Group:  AVX_VNNI_INT8
CPUID Group:  BMI1
CPUID Group:  BMI2
CPUID Group:  CET
CPUID Group:  CLDEMOTE
CPUID Group:  CLFLUSHOPT
CPUID Group:  CLFSH
CPUID Group:  CLWB
CPUID Group:  CMOV
CPUID Group:  CMPCCXADD
CPUID Group:  CMPXCHG16B
CPUID Group:  ENQCMD
CPUID Group:  F16C
CPUID Group:  FCMOV
CPUID Group:  FCOMI
CPUID Group:  FMA
CPUID Group:  FRED
CPUID Group:  FXSAVE
CPUID Group:  FXSAVE64
CPUID Group:  GFNI
CPUID Group:  HRESET
CPUID Group:  ICACHE_PREFETCH
CPUID Group:  INVPCID
CPUID Group:  KEYLOCKER
CPUID Group:  KEYLOCKER_WIDE
CPUID Group:  LAHF
CPUID Group:  LKGS
CPUID Group:  LONGMODE
CPUID Group:  LZCNT
CPUID Group:  MCOMMIT
CPUID Group:  MONITOR
CPUID Group:  MONITORX
CPUID Group:  MOVBE
CPUID Group:  MOVDIR64B
CPUID Group:  MOVDIRI
CPUID Group:  MPX
CPUID Group:  MSRLIST
CPUID Group:  PBNDKB
CPUID Group:  PCLMULQDQ
CPUID Group:  PCONFIG
CPUID Group:  PENTIUMMMX
CPUID Group:  PKU
CPUID Group:  POPCNT
CPUID Group:  PREFETCHW
CPUID Group:  PREFETCHWT1
CPUID Group:  PTWRITE
CPUID Group:  RAO_INT
CPUID Group:  RDPID
CPUID Group:  RDPRU
CPUID Group:  RDRAND
CPUID Group:  RDSEED
CPUID Group:  RDTSCP
CPUID Group:  RDWRFSGS
CPUID Group:  RTM
CPUID Group:  SERIALIZE
CPUID Group:  SGX
CPUID Group:  SHA
CPUID Group:  SHA512
CPUID Group:  SM3
CPUID Group:  SM4
CPUID Group:  SMAP
CPUID Group:  SMX
CPUID Group:  SNP
CPUID Group:  SSE
CPUID Group:  SSE2
CPUID Group:  SSE2MMX
CPUID Group:  SSE3
CPUID Group:  SSE3X87
CPUID Group:  SSE4
CPUID Group:  SSE42
CPUID Group:  SSE4A
CPUID Group:  SSEMXCSR
CPUID Group:  SSSE3
CPUID Group:  SSSE3MMX
CPUID Group:  TSX_LDTRK
CPUID Group:  UINTR
CPUID Group:  USER_MSR
CPUID Group:  VAES
CPUID Group:  VIA_PADLOCK_AES
CPUID Group:  VIA_PADLOCK_MONTMUL
CPUID Group:  VIA_PADLOCK_RNG
CPUID Group:  VIA_PADLOCK_SHA
CPUID Group:  VPCLMULQDQ
CPUID Group:  VTX
CPUID Group:  WAITPKG
CPUID Group:  WBNOINVD
CPUID Group:  WRMSRNS
CPUID Group:  XSAVE
CPUID Group:  XSAVEC
CPUID Group:  XSAVEOPT
CPUID Group:  XSAVES
ISASET:  INVALID
ISASET:  3DNOW
ISASET:  ADOX_ADCX
ISASET:  AES
ISASET:  AMD
ISASET:  AMD_INVLPGB
ISASET:  AMX_BF16
ISASET:  AMX_COMPLEX
ISASET:  AMX_FP16
ISASET:  AMX_INT8
ISASET:  AMX_TILE
ISASET:  APX_F
ISASET:  APX_F_ADX
ISASET:  APX_F_AMX
ISASET:  APX_F_BMI1
ISASET:  APX_F_BMI2
ISASET:  APX_F_CET
ISASET:  APX_F_CMPCCXADD
ISASET:  APX_F_ENQCMD
ISASET:  APX_F_INVPCID
ISASET:  APX_F_KEYLOCKER
ISASET:  APX_F_KEYLOCKER_WIDE
ISASET:  APX_F_KOPB
ISASET:  APX_F_KOPD
ISASET:  APX_F_KOPQ
ISASET:  APX_F_KOPW
ISASET:  APX_F_LZCNT
ISASET:  APX_F_MOVBE
ISASET:  APX_F_MOVDIR64B
ISASET:  APX_F_MOVDIRI
ISASET:  APX_F_RAO_INT
ISASET:  APX_F_SHA
ISASET:  APX_F_USER_MSR
ISASET:  APX_F_VMX
ISASET:  AVX
ISASET:  AVX2
ISASET:  AVX2GATHER
ISASET:  AVX512BW_128
ISASET:  AVX512BW_128N
ISASET:  AVX512BW_256
ISASET:  AVX512BW_512
ISASET:  AVX512BW_KOPD
ISASET:  AVX512BW_KOPQ
ISASET:  AVX512CD_128
ISASET:  AVX512CD_256
ISASET:  AVX512CD_512
ISASET:  AVX512DQ_128
ISASET:  AVX512DQ_128N
ISASET:  AVX512DQ_256
ISASET:  AVX512DQ_512
ISASET:  AVX512DQ_KOPB
ISASET:  AVX512DQ_KOPW
ISASET:  AVX512DQ_SCALAR
ISASET:  AVX512ER_512
ISASET:  AVX512ER_SCALAR
ISASET:  AVX512F_128
ISASET:  AVX512F_128N
ISASET:  AVX512F_256
ISASET:  AVX512F_512
ISASET:  AVX512F_KOPW
ISASET:  AVX512F_SCALAR
ISASET:  AVX512PF_512
ISASET:  AVX512_4FMAPS_512
ISASET:  AVX512_4FMAPS_SCALAR
ISASET:  AVX512_4VNNIW_512
ISASET:  AVX512_BF16_128
ISASET:  AVX512_BF16_256
ISASET:  AVX512_BF16_512
ISASET:  AVX512_BITALG_128
ISASET:  AVX512_BITALG_256
ISASET:  AVX512_BITALG_512
ISASET:  AVX512_FP16_128
ISASET:  AVX512_FP16_128N
ISASET:  AVX512_FP16_256
ISASET:  AVX512_FP16_512
ISASET:  AVX512_FP16_SCALAR
ISASET:  AVX512_GFNI_128
ISASET:  AVX512_GFNI_256
ISASET:  AVX512_GFNI_512
ISASET:  AVX512_IFMA_128
ISASET:  AVX512_IFMA_256
ISASET:  AVX512_IFMA_512
ISASET:  AVX512_VAES_128
ISASET:  AVX512_VAES_256
ISASET:  AVX512_VAES_512
ISASET:  AVX512_VBMI2_128
ISASET:  AVX512_VBMI2_256
ISASET:  AVX512_VBMI2_512
ISASET:  AVX512_VBMI_128
ISASET:  AVX512_VBMI_256
ISASET:  AVX512_VBMI_512
ISASET:  AVX512_VNNI_128
ISASET:  AVX512_VNNI_256
ISASET:  AVX512_VNNI_512
ISASET:  AVX512_VP2INTERSECT_128
ISASET:  AVX512_VP2INTERSECT_256
ISASET:  AVX512_VP2INTERSECT_512
ISASET:  AVX512_VPCLMULQDQ_128
ISASET:  AVX512_VPCLMULQDQ_256
ISASET:  AVX512_VPCLMULQDQ_512
ISASET:  AVX512_VPOPCNTDQ_128
ISASET:  AVX512_VPOPCNTDQ_256
ISASET:  AVX512_VPOPCNTDQ_512
ISASET:  AVXAES
ISASET:  AVX_GFNI
ISASET:  AVX_IFMA
ISASET:  AVX_NE_CONVERT
ISASET:  AVX_VNNI
ISASET:  AVX_VNNI_INT16
ISASET:  AVX_VNNI_INT8
ISASET:  BMI1
ISASET:  BMI2
ISASET:  CET
ISASET:  CLDEMOTE
ISASET:  CLFLUSHOPT
ISASET:  CLFSH
ISASET:  CLWB
ISASET:  CLZERO
ISASET:  CMOV
ISASET:  CMPCCXADD
ISASET:  CMPXCHG16B
ISASET:  ENQCMD
ISASET:  F16C
ISASET:  FAT_NOP
ISASET:  FCMOV
ISASET:  FCOMI
ISASET:  FMA
ISASET:  FMA4
ISASET:  FRED
ISASET:  FXSAVE
ISASET:  FXSAVE64
ISASET:  GFNI
ISASET:  HRESET
ISASET:  I186
ISASET:  I286PROTECTED
ISASET:  I286REAL
ISASET:  I386
ISASET:  I486
ISASET:  I486REAL
ISASET:  I86
ISASET:  ICACHE_PREFETCH
ISASET:  INVPCID
ISASET:  KEYLOCKER
ISASET:  KEYLOCKER_WIDE
ISASET:  LAHF
ISASET:  LKGS
ISASET:  LONGMODE
ISASET:  LWP
ISASET:  LZCNT
ISASET:  MCOMMIT
ISASET:  MONITOR
ISASET:  MONITORX
ISASET:  MOVBE
ISASET:  MOVDIR64B
ISASET:  MOVDIRI
ISASET:  MPX
ISASET:  MSRLIST
ISASET:  PAUSE
ISASET:  PBNDKB
ISASET:  PCLMULQDQ
ISASET:  PCONFIG
ISASET:  PENTIUMMMX
ISASET:  PENTIUMREAL
ISASET:  PKU
ISASET:  POPCNT
ISASET:  PPRO
ISASET:  PPRO_UD0_LONG
ISASET:  PPRO_UD0_SHORT
ISASET:  PREFETCHW
ISASET:  PREFETCHWT1
ISASET:  PREFETCH_NOP
ISASET:  PTWRITE
ISASET:  RAO_INT
ISASET:  RDPID
ISASET:  RDPMC
ISASET:  RDPRU
ISASET:  RDRAND
ISASET:  RDSEED
ISASET:  RDTSCP
ISASET:  RDWRFSGS
ISASET:  RTM
ISASET:  SERIALIZE
ISASET:  SGX
ISASET:  SGX_ENCLV
ISASET:  SHA
ISASET:  SHA512
ISASET:  SM3
ISASET:  SM4
ISASET:  SMAP
ISASET:  SMX
ISASET:  SNP
ISASET:  SSE
ISASET:  SSE2
ISASET:  SSE2MMX
ISASET:  SSE3
ISASET:  SSE3X87
ISASET:  SSE4
ISASET:  SSE42
ISASET:  SSE4A
ISASET:  SSEMXCSR
ISASET:  SSE_PREFETCH
ISASET:  SSSE3
ISASET:  SSSE3MMX
ISASET:  SVM
ISASET:  TBM
ISASET:  TDX
ISASET:  TSX_LDTRK
ISASET:  UINTR
ISASET:  USER_MSR
ISASET:  VAES
ISASET:  VIA_PADLOCK_AES
ISASET:  VIA_PADLOCK_MONTMUL
ISASET:  VIA_PADLOCK_RNG
ISASET:  VIA_PADLOCK_SHA
ISASET:  VMFUNC
ISASET:  VPCLMULQDQ
ISASET:  VTX
ISASET:  WAITPKG
ISASET:  WBNOINVD
ISASET:  WRMSRNS
ISASET:  X87
ISASET:  XOP
ISASET:  XSAVE
ISASET:  XSAVEC
ISASET:  XSAVEOPT
ISASET:  XSAVES
FE:EMIT_FILE obj/xed-cpuid-tables.c
FE: Closing an already-closed file: obj/xed-init-inst-table.c
FE:EMIT_FILE obj/xed-flags-simple.c
FE:EMIT_FILE obj/xed-flags-complex.c
FE:EMIT_FILE obj/xed-flags-actions.c
FE: Closing an already-closed file: obj/xed-operand-convert-init.c
FE: Closing an already-closed file: obj/xed-iclass-string.c
FE: Closing an already-closed file: obj/xed-iform-map-init.c
FE: Closing an already-closed file: obj/xed-init-inst-table-0.c
FE: Closing an already-closed file: obj/xed-attributes-init.c
