/// @file include-private/xed3-nt-capture.h

// This file was automatically generated.
// Do not edit this file.

#if !defined(INCLUDE_PRIVATE_XED3_NT_CAPTURE_H)
# define INCLUDE_PRIVATE_XED3_NT_CAPTURE_H
/*BEGIN_LEGAL

Copyright (c) 2024 Intel Corporation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  
END_LEGAL */
#include "xed-internal-header.h"
#include "xed-operand-accessors.h"
#include "xed-ild.h"
static XED_INLINE void xed3_capture_nt_REMOVE_SEGMENT(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_BRANCH_HINT(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_CET_NO_TRACK(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_rFLAGS(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_MMX_R(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_MMX_B(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_X87(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_SEG(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_SEG_MOV(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_FINAL_DSEG(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_FINAL_DSEG_NOT64(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_FINAL_DSEG_MODE64(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_FINAL_DSEG1(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_FINAL_DSEG1_NOT64(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_FINAL_DSEG1_MODE64(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_FINAL_ESEG(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_FINAL_ESEG1(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_FINAL_SSEG1(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_FINAL_SSEG0(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_FINAL_SSEG(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_FINAL_SSEG_NOT64(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_FINAL_SSEG_MODE64(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_ArAX(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_ArBX(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_ArCX(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_ArDX(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_ArSI(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_ArDI(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_ArSP(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_ArBP(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_SrSP(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_SrBP(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_Ar8(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_Ar9(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_Ar10(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_Ar11(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_Ar12(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_Ar13(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_Ar14(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_Ar15(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_Ar16(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_Ar17(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_Ar18(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_Ar19(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_Ar20(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_Ar21(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_Ar22(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_Ar23(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_Ar24(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_Ar25(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_Ar26(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_Ar27(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_Ar28(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_Ar29(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_Ar30(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_Ar31(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_rIP(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_rIPa(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_OeAX(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_OrAX(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_OrDX(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_OrCX(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_OrBX(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_OrSP(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_OrBP(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_GPRv_R(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_GPRv_SB(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_GPRz_R(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_GPRy_R(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_GPRv_B(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_GPRz_B(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_GPRy_B(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_GPR64_R(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_GPR64_B(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_GPR64_SB(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_GPR32_R(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_GPR32_B(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_GPR32_SB(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_GPR16_R(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_GPR16_B(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_GPR16_SB(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_CR_R(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_CR_B(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_DR_R(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_GPR8_R(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_GPR8_B(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_GPR8_SB(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_OSZ_NONTERM(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_DF64(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_REFINING66(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_IGNORE66(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_IMMUNE66(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_CR_WIDTH(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_IMMUNE66_LOOP64(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_IMMUNE_REXW(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_FORCE64(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_ASZ_NONTERM(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_ONE(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_UIMMv(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_SIMMz(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_SIMM8(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_UIMM8(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_UIMM8_1(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_UIMM16(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_UIMM32(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_BRDISP8(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_BRDISP32(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_BRDISP64(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_BRDISPz(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_MEMDISPv(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_MEMDISP32(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_MEMDISP16(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_MEMDISP8(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_MEMDISP(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_MODRM(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_MODRM64alt32(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_MODRM32(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_MODRM16(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_SIB(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_SIB_BASE0(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_OVERRIDE_SEG0(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_OVERRIDE_SEG1(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_XMM_R(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_XMM_R_32(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_XMM_R_64(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_XMM_B(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_XMM_B_32(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_XMM_B_64(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_BND_R_CHECK(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_BND_B_CHECK(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_BND_R(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_BND_B(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_A_GPR_R(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_A_GPR_B(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_XMM_SE(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_XMM_SE64(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_XMM_SE32(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_YMM_SE(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_YMM_SE64(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_YMM_SE32(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_XMM_N(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_XMM_N_32(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_XMM_N_64(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_YMM_N(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_YMM_N_32(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_YMM_N_64(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_YMM_R(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_YMM_R_32(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_YMM_R_64(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_YMM_B(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_YMM_B_32(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_YMM_B_64(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_SE_IMM8(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_VMODRM_YMM(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_VMODRM_XMM(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_VSIB_YMM(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_VSIB_XMM(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_VSIB_INDEX_YMM(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_VSIB_INDEX_XMM(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_VSIB_BASE(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_VGPRy_R(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_VGPRy_B(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_VGPRy_N(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_VGPR32_N(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_VGPR32_B(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_VGPR32_R(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_VGPR32_N_32(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_VGPR32_N_64(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_VGPR64_N(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_VGPR32_R_32(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_VGPR32_R_64(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_VGPR64_R(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_VGPR32_B_32(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_VGPR32_B_64(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_VGPR64_B(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_NELEM_TUPLE1_4X(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_AVX512_ROUND(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_SAE(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_EVEXR4_ONE(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_ESIZE_128_BITS(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_ESIZE_64_BITS(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_ESIZE_32_BITS(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_ESIZE_16_BITS(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_ESIZE_8_BITS(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_ESIZE_4_BITS(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_ESIZE_2_BITS(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_ESIZE_1_BITS(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_NELEM_MOVDDUP(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_NELEM_FULLMEM(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_NELEM_HALFMEM(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_NELEM_QUARTERMEM(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_NELEM_EIGHTHMEM(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_NELEM_GPR_READER_BYTE(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_NELEM_GPR_READER_WORD(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_NELEM_GPR_WRITER_LDOP_D(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_NELEM_GPR_WRITER_LDOP_Q(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_NELEM_GPR_WRITER_STORE_BYTE(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_NELEM_GPR_WRITER_STORE_WORD(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_NELEM_TUPLE1_BYTE(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_NELEM_TUPLE1_WORD(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_NELEM_SCALAR(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_NELEM_TUPLE1_SUBDWORD(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_NELEM_GPR_READER(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_NELEM_GPR_READER_SUBDWORD(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_NELEM_GPR_WRITER_LDOP(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_NELEM_GPR_WRITER_STORE(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_NELEM_GPR_WRITER_STORE_SUBDWORD(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_NELEM_TUPLE1(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_NELEM_GSCAT(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_NELEM_TUPLE2(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_NELEM_TUPLE4(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_NELEM_TUPLE8(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_NELEM_MEM128(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_NELEM_FULL(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_NELEM_HALF(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_FIX_ROUND_LEN512(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_FIX_ROUND_LEN128(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_UISA_VMODRM_ZMM(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_UISA_VMODRM_YMM(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_UISA_VMODRM_XMM(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_UISA_VSIB_ZMM(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_UISA_VSIB_YMM(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_UISA_VSIB_XMM(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_UISA_VSIB_INDEX_ZMM(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_UISA_VSIB_INDEX_YMM(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_UISA_VSIB_INDEX_XMM(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_UISA_VSIB_BASE(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_MASK1(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_MASKNOT0(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_MASK_R(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_MASK_B(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_MASK_N(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_MASK_N64(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_MASK_N32(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_XMM_R3(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_XMM_R3_32(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_XMM_R3_64(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_YMM_R3(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_YMM_R3_32(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_YMM_R3_64(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_ZMM_R3(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_ZMM_R3_32(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_ZMM_R3_64(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_XMM_B3(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_XMM_B3_32(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_XMM_B3_64(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_YMM_B3(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_YMM_B3_32(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_YMM_B3_64(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_ZMM_B3(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_ZMM_B3_32(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_ZMM_B3_64(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_XMM_N3(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_XMM_N3_32(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_XMM_N3_64(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_YMM_N3(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_YMM_N3_32(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_YMM_N3_64(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_ZMM_N3(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_ZMM_N3_32(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_ZMM_N3_64(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_TMM_R(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_TMM_B(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_TMM_N(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_NELEM_QUARTER(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_XMM_L_R3(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_XMM_L_R3_64(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_XMM_L_B3(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_XMM_L_B3_64(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_GPRv_N(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_GPR64_N(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_GPR32_N(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_GPR16_N(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_GPR8_N(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_GPR64_N_NORSP(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_GPR64_B_NORSP(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_DFV(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_TMM_R3(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_EVAPX(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_EVAPX_SCC(xed_decoded_inst_t* d);

static XED_INLINE void xed3_capture_nt_REMOVE_SEGMENT(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mode(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> mode16 | SEG0=XED_REG_INVALID*/
    xed3_operand_set_seg0(d, XED_REG_INVALID);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> mode32 | SEG0=XED_REG_INVALID*/
    xed3_operand_set_seg0(d, XED_REG_INVALID);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> mode64 | SEG0=XED_REG_INVALID*/
    xed3_operand_set_seg0(d, XED_REG_INVALID);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_BRANCH_HINT(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_hint(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> HINT=0    |*/
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> HINT=1    | HINT=3*/
    xed3_operand_set_hint(d, 0x3);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> HINT=2    | HINT=4*/
    xed3_operand_set_hint(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_CET_NO_TRACK(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_hint(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> HINT=0    |*/
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> HINT=1    |*/
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> HINT=2    | HINT=5*/
    xed3_operand_set_hint(d, 0x5);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_rFLAGS(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mode(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> mode16 | OUTREG=XED_REG_FLAGS*/
    xed3_operand_set_outreg(d, XED_REG_FLAGS);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> mode32 | OUTREG=XED_REG_EFLAGS*/
    xed3_operand_set_outreg(d, XED_REG_EFLAGS);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> mode64 | OUTREG=XED_REG_RFLAGS*/
    xed3_operand_set_outreg(d, XED_REG_RFLAGS);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_MMX_R(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_reg(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> REG=0x0  | OUTREG=XED_REG_MMX0*/
    xed3_operand_set_outreg(d, XED_REG_MMX0);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> REG=0x1  | OUTREG=XED_REG_MMX1*/
    xed3_operand_set_outreg(d, XED_REG_MMX1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> REG=0x2  | OUTREG=XED_REG_MMX2*/
    xed3_operand_set_outreg(d, XED_REG_MMX2);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> REG=0x3  | OUTREG=XED_REG_MMX3*/
    xed3_operand_set_outreg(d, XED_REG_MMX3);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4,) -> REG=0x4  | OUTREG=XED_REG_MMX4*/
    xed3_operand_set_outreg(d, XED_REG_MMX4);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5,) -> REG=0x5  | OUTREG=XED_REG_MMX5*/
    xed3_operand_set_outreg(d, XED_REG_MMX5);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6,) -> REG=0x6  | OUTREG=XED_REG_MMX6*/
    xed3_operand_set_outreg(d, XED_REG_MMX6);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7,) -> REG=0x7  | OUTREG=XED_REG_MMX7*/
    xed3_operand_set_outreg(d, XED_REG_MMX7);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_MMX_B(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_rm(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> RM=0x0  | OUTREG=XED_REG_MMX0*/
    xed3_operand_set_outreg(d, XED_REG_MMX0);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> RM=0x1  | OUTREG=XED_REG_MMX1*/
    xed3_operand_set_outreg(d, XED_REG_MMX1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> RM=0x2  | OUTREG=XED_REG_MMX2*/
    xed3_operand_set_outreg(d, XED_REG_MMX2);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> RM=0x3  | OUTREG=XED_REG_MMX3*/
    xed3_operand_set_outreg(d, XED_REG_MMX3);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4,) -> RM=0x4  | OUTREG=XED_REG_MMX4*/
    xed3_operand_set_outreg(d, XED_REG_MMX4);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5,) -> RM=0x5  | OUTREG=XED_REG_MMX5*/
    xed3_operand_set_outreg(d, XED_REG_MMX5);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6,) -> RM=0x6  | OUTREG=XED_REG_MMX6*/
    xed3_operand_set_outreg(d, XED_REG_MMX6);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7,) -> RM=0x7  | OUTREG=XED_REG_MMX7*/
    xed3_operand_set_outreg(d, XED_REG_MMX7);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_X87(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_rm(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> RM=0x0  | OUTREG=XED_REG_ST0*/
    xed3_operand_set_outreg(d, XED_REG_ST0);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> RM=0x1  | OUTREG=XED_REG_ST1*/
    xed3_operand_set_outreg(d, XED_REG_ST1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> RM=0x2  | OUTREG=XED_REG_ST2*/
    xed3_operand_set_outreg(d, XED_REG_ST2);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> RM=0x3  | OUTREG=XED_REG_ST3*/
    xed3_operand_set_outreg(d, XED_REG_ST3);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4,) -> RM=0x4  | OUTREG=XED_REG_ST4*/
    xed3_operand_set_outreg(d, XED_REG_ST4);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5,) -> RM=0x5  | OUTREG=XED_REG_ST5*/
    xed3_operand_set_outreg(d, XED_REG_ST5);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6,) -> RM=0x6  | OUTREG=XED_REG_ST6*/
    xed3_operand_set_outreg(d, XED_REG_ST6);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7,) -> RM=0x7  | OUTREG=XED_REG_ST7*/
    xed3_operand_set_outreg(d, XED_REG_ST7);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_SEG(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_reg(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> REG=0x0  | OUTREG=XED_REG_ES*/
    xed3_operand_set_outreg(d, XED_REG_ES);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> REG=0x1  | OUTREG=XED_REG_CS*/
    xed3_operand_set_outreg(d, XED_REG_CS);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> REG=0x2  | OUTREG=XED_REG_SS*/
    xed3_operand_set_outreg(d, XED_REG_SS);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> REG=0x3  | OUTREG=XED_REG_DS*/
    xed3_operand_set_outreg(d, XED_REG_DS);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4,) -> REG=0x4  | OUTREG=XED_REG_FS*/
    xed3_operand_set_outreg(d, XED_REG_FS);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5,) -> REG=0x5  | OUTREG=XED_REG_GS*/
    xed3_operand_set_outreg(d, XED_REG_GS);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6,) -> REG=0x6  | OUTREG=XED_REG_ERROR     enc*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7,) -> REG=0x7  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_SEG_MOV(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_reg(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> REG=0x0  | OUTREG=XED_REG_ES*/
    xed3_operand_set_outreg(d, XED_REG_ES);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> REG=0x1  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> REG=0x2  | OUTREG=XED_REG_SS*/
    xed3_operand_set_outreg(d, XED_REG_SS);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> REG=0x3  | OUTREG=XED_REG_DS*/
    xed3_operand_set_outreg(d, XED_REG_DS);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4,) -> REG=0x4  | OUTREG=XED_REG_FS*/
    xed3_operand_set_outreg(d, XED_REG_FS);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5,) -> REG=0x5  | OUTREG=XED_REG_GS*/
    xed3_operand_set_outreg(d, XED_REG_GS);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6,) -> REG=0x6  | OUTREG=XED_REG_ERROR     enc*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7,) -> REG=0x7  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_FINAL_DSEG(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mode(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> mode16 | OUTREG=FINAL_DSEG_NOT64()*/
    xed3_capture_nt_FINAL_DSEG_NOT64(d);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> mode32 | OUTREG=FINAL_DSEG_NOT64()*/
    xed3_capture_nt_FINAL_DSEG_NOT64(d);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> mode64 | OUTREG=FINAL_DSEG_MODE64()*/
    xed3_capture_nt_FINAL_DSEG_MODE64(d);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_FINAL_DSEG_NOT64(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_seg_ovd(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> SEG_OVD=0 | OUTREG=XED_REG_DS  USING_DEFAULT_SEGMENT0=1 enc*/
    xed3_operand_set_outreg(d, XED_REG_DS);
    xed3_operand_set_using_default_segment0(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> SEG_OVD=1 | OUTREG=XED_REG_CS  USING_DEFAULT_SEGMENT0=0*/
    xed3_operand_set_outreg(d, XED_REG_CS);
    xed3_operand_set_using_default_segment0(d, 0x0);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> SEG_OVD=2 | OUTREG=XED_REG_DS  USING_DEFAULT_SEGMENT0=1*/
    xed3_operand_set_outreg(d, XED_REG_DS);
    xed3_operand_set_using_default_segment0(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> SEG_OVD=3 | OUTREG=XED_REG_ES  USING_DEFAULT_SEGMENT0=0*/
    xed3_operand_set_outreg(d, XED_REG_ES);
    xed3_operand_set_using_default_segment0(d, 0x0);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4,) -> SEG_OVD=4 | OUTREG=XED_REG_FS  USING_DEFAULT_SEGMENT0=0*/
    xed3_operand_set_outreg(d, XED_REG_FS);
    xed3_operand_set_using_default_segment0(d, 0x0);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5,) -> SEG_OVD=5 | OUTREG=XED_REG_GS  USING_DEFAULT_SEGMENT0=0*/
    xed3_operand_set_outreg(d, XED_REG_GS);
    xed3_operand_set_using_default_segment0(d, 0x0);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6,) -> SEG_OVD=6 | OUTREG=XED_REG_SS  USING_DEFAULT_SEGMENT0=0*/
    xed3_operand_set_outreg(d, XED_REG_SS);
    xed3_operand_set_using_default_segment0(d, 0x0);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_FINAL_DSEG_MODE64(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_seg_ovd(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> SEG_OVD=0 | OUTREG=XED_REG_INVALID USING_DEFAULT_SEGMENT0=1  enc*/
    xed3_operand_set_outreg(d, XED_REG_INVALID);
    xed3_operand_set_using_default_segment0(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> SEG_OVD=1 | OUTREG=XED_REG_INVALID USING_DEFAULT_SEGMENT0=1*/
    xed3_operand_set_outreg(d, XED_REG_INVALID);
    xed3_operand_set_using_default_segment0(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> SEG_OVD=2 | OUTREG=XED_REG_INVALID USING_DEFAULT_SEGMENT0=1*/
    xed3_operand_set_outreg(d, XED_REG_INVALID);
    xed3_operand_set_using_default_segment0(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> SEG_OVD=3 | OUTREG=XED_REG_INVALID USING_DEFAULT_SEGMENT0=1*/
    xed3_operand_set_outreg(d, XED_REG_INVALID);
    xed3_operand_set_using_default_segment0(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4,) -> SEG_OVD=4 | OUTREG=XED_REG_FS      USING_DEFAULT_SEGMENT0=0*/
    xed3_operand_set_outreg(d, XED_REG_FS);
    xed3_operand_set_using_default_segment0(d, 0x0);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5,) -> SEG_OVD=5 | OUTREG=XED_REG_GS      USING_DEFAULT_SEGMENT0=0*/
    xed3_operand_set_outreg(d, XED_REG_GS);
    xed3_operand_set_using_default_segment0(d, 0x0);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6,) -> SEG_OVD=6 | OUTREG=XED_REG_INVALID USING_DEFAULT_SEGMENT0=1*/
    xed3_operand_set_outreg(d, XED_REG_INVALID);
    xed3_operand_set_using_default_segment0(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_FINAL_DSEG1(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mode(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> mode16 | OUTREG=FINAL_DSEG1_NOT64()*/
    xed3_capture_nt_FINAL_DSEG1_NOT64(d);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> mode32 | OUTREG=FINAL_DSEG1_NOT64()*/
    xed3_capture_nt_FINAL_DSEG1_NOT64(d);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> mode64 | OUTREG=FINAL_DSEG1_MODE64()*/
    xed3_capture_nt_FINAL_DSEG1_MODE64(d);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_FINAL_DSEG1_NOT64(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_seg_ovd(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> SEG_OVD=0 | OUTREG=XED_REG_DS  USING_DEFAULT_SEGMENT1=1 enc*/
    xed3_operand_set_outreg(d, XED_REG_DS);
    xed3_operand_set_using_default_segment1(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> SEG_OVD=1 | OUTREG=XED_REG_CS  USING_DEFAULT_SEGMENT1=0*/
    xed3_operand_set_outreg(d, XED_REG_CS);
    xed3_operand_set_using_default_segment1(d, 0x0);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> SEG_OVD=2 | OUTREG=XED_REG_DS  USING_DEFAULT_SEGMENT1=1*/
    xed3_operand_set_outreg(d, XED_REG_DS);
    xed3_operand_set_using_default_segment1(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> SEG_OVD=3 | OUTREG=XED_REG_ES  USING_DEFAULT_SEGMENT1=0*/
    xed3_operand_set_outreg(d, XED_REG_ES);
    xed3_operand_set_using_default_segment1(d, 0x0);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4,) -> SEG_OVD=4 | OUTREG=XED_REG_FS  USING_DEFAULT_SEGMENT1=0*/
    xed3_operand_set_outreg(d, XED_REG_FS);
    xed3_operand_set_using_default_segment1(d, 0x0);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5,) -> SEG_OVD=5 | OUTREG=XED_REG_GS  USING_DEFAULT_SEGMENT1=0*/
    xed3_operand_set_outreg(d, XED_REG_GS);
    xed3_operand_set_using_default_segment1(d, 0x0);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6,) -> SEG_OVD=6 | OUTREG=XED_REG_SS  USING_DEFAULT_SEGMENT1=0*/
    xed3_operand_set_outreg(d, XED_REG_SS);
    xed3_operand_set_using_default_segment1(d, 0x0);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_FINAL_DSEG1_MODE64(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_seg_ovd(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> SEG_OVD=0 | OUTREG=XED_REG_INVALID USING_DEFAULT_SEGMENT1=1  enc*/
    xed3_operand_set_outreg(d, XED_REG_INVALID);
    xed3_operand_set_using_default_segment1(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> SEG_OVD=1 | OUTREG=XED_REG_INVALID USING_DEFAULT_SEGMENT1=1*/
    xed3_operand_set_outreg(d, XED_REG_INVALID);
    xed3_operand_set_using_default_segment1(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> SEG_OVD=2 | OUTREG=XED_REG_INVALID USING_DEFAULT_SEGMENT1=1*/
    xed3_operand_set_outreg(d, XED_REG_INVALID);
    xed3_operand_set_using_default_segment1(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> SEG_OVD=3 | OUTREG=XED_REG_INVALID USING_DEFAULT_SEGMENT1=1*/
    xed3_operand_set_outreg(d, XED_REG_INVALID);
    xed3_operand_set_using_default_segment1(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4,) -> SEG_OVD=4 | OUTREG=XED_REG_FS      USING_DEFAULT_SEGMENT1=0*/
    xed3_operand_set_outreg(d, XED_REG_FS);
    xed3_operand_set_using_default_segment1(d, 0x0);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5,) -> SEG_OVD=5 | OUTREG=XED_REG_GS      USING_DEFAULT_SEGMENT1=0*/
    xed3_operand_set_outreg(d, XED_REG_GS);
    xed3_operand_set_using_default_segment1(d, 0x0);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6,) -> SEG_OVD=6 | OUTREG=XED_REG_INVALID USING_DEFAULT_SEGMENT1=1*/
    xed3_operand_set_outreg(d, XED_REG_INVALID);
    xed3_operand_set_using_default_segment1(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_FINAL_ESEG(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mode(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> mode16 | OUTREG=XED_REG_ES        USING_DEFAULT_SEGMENT0=1*/
    xed3_operand_set_outreg(d, XED_REG_ES);
    xed3_operand_set_using_default_segment0(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> mode32 | OUTREG=XED_REG_ES        USING_DEFAULT_SEGMENT0=1*/
    xed3_operand_set_outreg(d, XED_REG_ES);
    xed3_operand_set_using_default_segment0(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> mode64 | OUTREG=XED_REG_INVALID   USING_DEFAULT_SEGMENT0=1*/
    xed3_operand_set_outreg(d, XED_REG_INVALID);
    xed3_operand_set_using_default_segment0(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_FINAL_ESEG1(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mode(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> mode16 | OUTREG=XED_REG_ES        USING_DEFAULT_SEGMENT1=1*/
    xed3_operand_set_outreg(d, XED_REG_ES);
    xed3_operand_set_using_default_segment1(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> mode32 | OUTREG=XED_REG_ES        USING_DEFAULT_SEGMENT1=1*/
    xed3_operand_set_outreg(d, XED_REG_ES);
    xed3_operand_set_using_default_segment1(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> mode64 | OUTREG=XED_REG_INVALID   USING_DEFAULT_SEGMENT1=1*/
    xed3_operand_set_outreg(d, XED_REG_INVALID);
    xed3_operand_set_using_default_segment1(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_FINAL_SSEG1(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mode(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> mode16 | OUTREG=XED_REG_SS       USING_DEFAULT_SEGMENT1=1*/
    xed3_operand_set_outreg(d, XED_REG_SS);
    xed3_operand_set_using_default_segment1(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> mode32 | OUTREG=XED_REG_SS       USING_DEFAULT_SEGMENT1=1*/
    xed3_operand_set_outreg(d, XED_REG_SS);
    xed3_operand_set_using_default_segment1(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> mode64 | OUTREG=XED_REG_INVALID  USING_DEFAULT_SEGMENT1=1*/
    xed3_operand_set_outreg(d, XED_REG_INVALID);
    xed3_operand_set_using_default_segment1(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_FINAL_SSEG0(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mode(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> mode16 | OUTREG=XED_REG_SS       USING_DEFAULT_SEGMENT0=1*/
    xed3_operand_set_outreg(d, XED_REG_SS);
    xed3_operand_set_using_default_segment0(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> mode32 | OUTREG=XED_REG_SS       USING_DEFAULT_SEGMENT0=1*/
    xed3_operand_set_outreg(d, XED_REG_SS);
    xed3_operand_set_using_default_segment0(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> mode64 | OUTREG=XED_REG_INVALID  USING_DEFAULT_SEGMENT0=1*/
    xed3_operand_set_outreg(d, XED_REG_INVALID);
    xed3_operand_set_using_default_segment0(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_FINAL_SSEG(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mode(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> mode16 | OUTREG=FINAL_SSEG_NOT64()*/
    xed3_capture_nt_FINAL_SSEG_NOT64(d);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> mode32 | OUTREG=FINAL_SSEG_NOT64()*/
    xed3_capture_nt_FINAL_SSEG_NOT64(d);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> mode64 | OUTREG=FINAL_SSEG_MODE64()*/
    xed3_capture_nt_FINAL_SSEG_MODE64(d);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_FINAL_SSEG_NOT64(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_seg_ovd(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> SEG_OVD=0 | OUTREG=XED_REG_SS  USING_DEFAULT_SEGMENT0=1     enc*/
    xed3_operand_set_outreg(d, XED_REG_SS);
    xed3_operand_set_using_default_segment0(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> SEG_OVD=1 | OUTREG=XED_REG_CS  USING_DEFAULT_SEGMENT0=0*/
    xed3_operand_set_outreg(d, XED_REG_CS);
    xed3_operand_set_using_default_segment0(d, 0x0);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> SEG_OVD=2 | OUTREG=XED_REG_DS  USING_DEFAULT_SEGMENT0=0*/
    xed3_operand_set_outreg(d, XED_REG_DS);
    xed3_operand_set_using_default_segment0(d, 0x0);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> SEG_OVD=3 | OUTREG=XED_REG_ES  USING_DEFAULT_SEGMENT0=0*/
    xed3_operand_set_outreg(d, XED_REG_ES);
    xed3_operand_set_using_default_segment0(d, 0x0);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4,) -> SEG_OVD=4 | OUTREG=XED_REG_FS  USING_DEFAULT_SEGMENT0=0*/
    xed3_operand_set_outreg(d, XED_REG_FS);
    xed3_operand_set_using_default_segment0(d, 0x0);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5,) -> SEG_OVD=5 | OUTREG=XED_REG_GS  USING_DEFAULT_SEGMENT0=0*/
    xed3_operand_set_outreg(d, XED_REG_GS);
    xed3_operand_set_using_default_segment0(d, 0x0);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6,) -> SEG_OVD=6 | OUTREG=XED_REG_SS  USING_DEFAULT_SEGMENT0=1*/
    xed3_operand_set_outreg(d, XED_REG_SS);
    xed3_operand_set_using_default_segment0(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_FINAL_SSEG_MODE64(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_seg_ovd(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> SEG_OVD=0 | OUTREG=XED_REG_INVALID USING_DEFAULT_SEGMENT0=1  enc*/
    xed3_operand_set_outreg(d, XED_REG_INVALID);
    xed3_operand_set_using_default_segment0(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> SEG_OVD=1 | OUTREG=XED_REG_INVALID USING_DEFAULT_SEGMENT0=1*/
    xed3_operand_set_outreg(d, XED_REG_INVALID);
    xed3_operand_set_using_default_segment0(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> SEG_OVD=2 | OUTREG=XED_REG_INVALID USING_DEFAULT_SEGMENT0=1*/
    xed3_operand_set_outreg(d, XED_REG_INVALID);
    xed3_operand_set_using_default_segment0(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> SEG_OVD=3 | OUTREG=XED_REG_INVALID USING_DEFAULT_SEGMENT0=1*/
    xed3_operand_set_outreg(d, XED_REG_INVALID);
    xed3_operand_set_using_default_segment0(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4,) -> SEG_OVD=4 | OUTREG=XED_REG_FS      USING_DEFAULT_SEGMENT0=0*/
    xed3_operand_set_outreg(d, XED_REG_FS);
    xed3_operand_set_using_default_segment0(d, 0x0);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5,) -> SEG_OVD=5 | OUTREG=XED_REG_GS      USING_DEFAULT_SEGMENT0=0*/
    xed3_operand_set_outreg(d, XED_REG_GS);
    xed3_operand_set_using_default_segment0(d, 0x0);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6,) -> SEG_OVD=6 | OUTREG=XED_REG_INVALID USING_DEFAULT_SEGMENT0=1*/
    xed3_operand_set_outreg(d, XED_REG_INVALID);
    xed3_operand_set_using_default_segment0(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_ArAX(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_easz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EASZ=1 | OUTREG=XED_REG_AX*/
    xed3_operand_set_outreg(d, XED_REG_AX);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EASZ=2 | OUTREG=XED_REG_EAX*/
    xed3_operand_set_outreg(d, XED_REG_EAX);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EASZ=3 | OUTREG=XED_REG_RAX*/
    xed3_operand_set_outreg(d, XED_REG_RAX);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_ArBX(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_easz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EASZ=1 | OUTREG=XED_REG_BX*/
    xed3_operand_set_outreg(d, XED_REG_BX);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EASZ=2 | OUTREG=XED_REG_EBX*/
    xed3_operand_set_outreg(d, XED_REG_EBX);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EASZ=3 | OUTREG=XED_REG_RBX*/
    xed3_operand_set_outreg(d, XED_REG_RBX);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_ArCX(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_easz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EASZ=1 | OUTREG=XED_REG_CX*/
    xed3_operand_set_outreg(d, XED_REG_CX);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EASZ=2 | OUTREG=XED_REG_ECX*/
    xed3_operand_set_outreg(d, XED_REG_ECX);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EASZ=3 | OUTREG=XED_REG_RCX*/
    xed3_operand_set_outreg(d, XED_REG_RCX);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_ArDX(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_easz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EASZ=1 | OUTREG=XED_REG_DX*/
    xed3_operand_set_outreg(d, XED_REG_DX);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EASZ=2 | OUTREG=XED_REG_EDX*/
    xed3_operand_set_outreg(d, XED_REG_EDX);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EASZ=3 | OUTREG=XED_REG_RDX*/
    xed3_operand_set_outreg(d, XED_REG_RDX);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_ArSI(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_easz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EASZ=1 | OUTREG=XED_REG_SI*/
    xed3_operand_set_outreg(d, XED_REG_SI);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EASZ=2 | OUTREG=XED_REG_ESI*/
    xed3_operand_set_outreg(d, XED_REG_ESI);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EASZ=3 | OUTREG=XED_REG_RSI*/
    xed3_operand_set_outreg(d, XED_REG_RSI);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_ArDI(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_easz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EASZ=1 | OUTREG=XED_REG_DI*/
    xed3_operand_set_outreg(d, XED_REG_DI);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EASZ=2 | OUTREG=XED_REG_EDI*/
    xed3_operand_set_outreg(d, XED_REG_EDI);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EASZ=3 | OUTREG=XED_REG_RDI*/
    xed3_operand_set_outreg(d, XED_REG_RDI);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_ArSP(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_easz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EASZ=1 | OUTREG=XED_REG_SP*/
    xed3_operand_set_outreg(d, XED_REG_SP);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EASZ=2 | OUTREG=XED_REG_ESP*/
    xed3_operand_set_outreg(d, XED_REG_ESP);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EASZ=3 | OUTREG=XED_REG_RSP*/
    xed3_operand_set_outreg(d, XED_REG_RSP);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_ArBP(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_easz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EASZ=1 | OUTREG=XED_REG_BP*/
    xed3_operand_set_outreg(d, XED_REG_BP);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EASZ=2 | OUTREG=XED_REG_EBP*/
    xed3_operand_set_outreg(d, XED_REG_EBP);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EASZ=3 | OUTREG=XED_REG_RBP*/
    xed3_operand_set_outreg(d, XED_REG_RBP);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_SrSP(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_smode(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> smode16 | OUTREG=XED_REG_SP*/
    xed3_operand_set_outreg(d, XED_REG_SP);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> smode32 | OUTREG=XED_REG_ESP*/
    xed3_operand_set_outreg(d, XED_REG_ESP);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> smode64 | OUTREG=XED_REG_RSP*/
    xed3_operand_set_outreg(d, XED_REG_RSP);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_SrBP(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_smode(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> smode16 | OUTREG=XED_REG_BP*/
    xed3_operand_set_outreg(d, XED_REG_BP);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> smode32 | OUTREG=XED_REG_EBP*/
    xed3_operand_set_outreg(d, XED_REG_EBP);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> smode64 | OUTREG=XED_REG_RBP*/
    xed3_operand_set_outreg(d, XED_REG_RBP);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_Ar8(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_easz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EASZ=1 | OUTREG=XED_REG_R8W*/
    xed3_operand_set_outreg(d, XED_REG_R8W);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EASZ=2 | OUTREG=XED_REG_R8D*/
    xed3_operand_set_outreg(d, XED_REG_R8D);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EASZ=3 | OUTREG=XED_REG_R8*/
    xed3_operand_set_outreg(d, XED_REG_R8);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_Ar9(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_easz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EASZ=1 | OUTREG=XED_REG_R9W*/
    xed3_operand_set_outreg(d, XED_REG_R9W);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EASZ=2 | OUTREG=XED_REG_R9D*/
    xed3_operand_set_outreg(d, XED_REG_R9D);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EASZ=3 | OUTREG=XED_REG_R9*/
    xed3_operand_set_outreg(d, XED_REG_R9);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_Ar10(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_easz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EASZ=1 | OUTREG=XED_REG_R10W*/
    xed3_operand_set_outreg(d, XED_REG_R10W);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EASZ=2 | OUTREG=XED_REG_R10D*/
    xed3_operand_set_outreg(d, XED_REG_R10D);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EASZ=3 | OUTREG=XED_REG_R10*/
    xed3_operand_set_outreg(d, XED_REG_R10);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_Ar11(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_easz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EASZ=1 | OUTREG=XED_REG_R11W*/
    xed3_operand_set_outreg(d, XED_REG_R11W);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EASZ=2 | OUTREG=XED_REG_R11D*/
    xed3_operand_set_outreg(d, XED_REG_R11D);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EASZ=3 | OUTREG=XED_REG_R11*/
    xed3_operand_set_outreg(d, XED_REG_R11);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_Ar12(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_easz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EASZ=1 | OUTREG=XED_REG_R12W*/
    xed3_operand_set_outreg(d, XED_REG_R12W);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EASZ=2 | OUTREG=XED_REG_R12D*/
    xed3_operand_set_outreg(d, XED_REG_R12D);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EASZ=3 | OUTREG=XED_REG_R12*/
    xed3_operand_set_outreg(d, XED_REG_R12);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_Ar13(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_easz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EASZ=1 | OUTREG=XED_REG_R13W*/
    xed3_operand_set_outreg(d, XED_REG_R13W);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EASZ=2 | OUTREG=XED_REG_R13D*/
    xed3_operand_set_outreg(d, XED_REG_R13D);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EASZ=3 | OUTREG=XED_REG_R13*/
    xed3_operand_set_outreg(d, XED_REG_R13);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_Ar14(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_easz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EASZ=1 | OUTREG=XED_REG_R14W*/
    xed3_operand_set_outreg(d, XED_REG_R14W);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EASZ=2 | OUTREG=XED_REG_R14D*/
    xed3_operand_set_outreg(d, XED_REG_R14D);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EASZ=3 | OUTREG=XED_REG_R14*/
    xed3_operand_set_outreg(d, XED_REG_R14);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_Ar15(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_easz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EASZ=1 | OUTREG=XED_REG_R15W*/
    xed3_operand_set_outreg(d, XED_REG_R15W);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EASZ=2 | OUTREG=XED_REG_R15D*/
    xed3_operand_set_outreg(d, XED_REG_R15D);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EASZ=3 | OUTREG=XED_REG_R15*/
    xed3_operand_set_outreg(d, XED_REG_R15);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_Ar16(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_easz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EASZ=1 | OUTREG=XED_REG_R16W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R16W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EASZ=2 | OUTREG=XED_REG_R16D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R16D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EASZ=3 | OUTREG=XED_REG_R16  HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R16);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_Ar17(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_easz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EASZ=1 | OUTREG=XED_REG_R17W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R17W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EASZ=2 | OUTREG=XED_REG_R17D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R17D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EASZ=3 | OUTREG=XED_REG_R17  HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R17);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_Ar18(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_easz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EASZ=1 | OUTREG=XED_REG_R18W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R18W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EASZ=2 | OUTREG=XED_REG_R18D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R18D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EASZ=3 | OUTREG=XED_REG_R18  HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R18);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_Ar19(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_easz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EASZ=1 | OUTREG=XED_REG_R19W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R19W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EASZ=2 | OUTREG=XED_REG_R19D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R19D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EASZ=3 | OUTREG=XED_REG_R19  HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R19);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_Ar20(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_easz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EASZ=1 | OUTREG=XED_REG_R20W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R20W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EASZ=2 | OUTREG=XED_REG_R20D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R20D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EASZ=3 | OUTREG=XED_REG_R20  HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R20);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_Ar21(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_easz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EASZ=1 | OUTREG=XED_REG_R21W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R21W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EASZ=2 | OUTREG=XED_REG_R21D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R21D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EASZ=3 | OUTREG=XED_REG_R21  HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R21);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_Ar22(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_easz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EASZ=1 | OUTREG=XED_REG_R22W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R22W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EASZ=2 | OUTREG=XED_REG_R22D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R22D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EASZ=3 | OUTREG=XED_REG_R22  HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R22);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_Ar23(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_easz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EASZ=1 | OUTREG=XED_REG_R23W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R23W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EASZ=2 | OUTREG=XED_REG_R23D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R23D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EASZ=3 | OUTREG=XED_REG_R23  HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R23);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_Ar24(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_easz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EASZ=1 | OUTREG=XED_REG_R24W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R24W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EASZ=2 | OUTREG=XED_REG_R24D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R24D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EASZ=3 | OUTREG=XED_REG_R24  HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R24);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_Ar25(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_easz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EASZ=1 | OUTREG=XED_REG_R25W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R25W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EASZ=2 | OUTREG=XED_REG_R25D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R25D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EASZ=3 | OUTREG=XED_REG_R25  HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R25);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_Ar26(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_easz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EASZ=1 | OUTREG=XED_REG_R26W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R26W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EASZ=2 | OUTREG=XED_REG_R26D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R26D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EASZ=3 | OUTREG=XED_REG_R26  HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R26);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_Ar27(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_easz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EASZ=1 | OUTREG=XED_REG_R27W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R27W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EASZ=2 | OUTREG=XED_REG_R27D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R27D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EASZ=3 | OUTREG=XED_REG_R27  HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R27);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_Ar28(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_easz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EASZ=1 | OUTREG=XED_REG_R28W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R28W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EASZ=2 | OUTREG=XED_REG_R28D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R28D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EASZ=3 | OUTREG=XED_REG_R28  HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R28);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_Ar29(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_easz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EASZ=1 | OUTREG=XED_REG_R29W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R29W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EASZ=2 | OUTREG=XED_REG_R29D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R29D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EASZ=3 | OUTREG=XED_REG_R29  HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R29);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_Ar30(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_easz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EASZ=1 | OUTREG=XED_REG_R30W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R30W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EASZ=2 | OUTREG=XED_REG_R30D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R30D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EASZ=3 | OUTREG=XED_REG_R30  HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R30);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_Ar31(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_easz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EASZ=1 | OUTREG=XED_REG_R31W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R31W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EASZ=2 | OUTREG=XED_REG_R31D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R31D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EASZ=3 | OUTREG=XED_REG_R31  HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R31);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_rIP(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mode(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> mode16 | OUTREG=XED_REG_EIP*/
    xed3_operand_set_outreg(d, XED_REG_EIP);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> mode32 | OUTREG=XED_REG_EIP*/
    xed3_operand_set_outreg(d, XED_REG_EIP);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> mode64 | OUTREG=XED_REG_RIP*/
    xed3_operand_set_outreg(d, XED_REG_RIP);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_rIPa(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_easz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 2: /*(2,) -> EASZ=2 | OUTREG=XED_REG_EIP*/
    xed3_operand_set_outreg(d, XED_REG_EIP);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EASZ=3 | OUTREG=XED_REG_RIP*/
    xed3_operand_set_outreg(d, XED_REG_RIP);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_OeAX(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_eosz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EOSZ=1 | OUTREG=XED_REG_AX*/
    xed3_operand_set_outreg(d, XED_REG_AX);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EOSZ=2 | OUTREG=XED_REG_EAX*/
    xed3_operand_set_outreg(d, XED_REG_EAX);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EOSZ=3 | OUTREG=XED_REG_EAX*/
    xed3_operand_set_outreg(d, XED_REG_EAX);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_OrAX(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_eosz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EOSZ=1 | OUTREG=XED_REG_AX*/
    xed3_operand_set_outreg(d, XED_REG_AX);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EOSZ=2 | OUTREG=XED_REG_EAX*/
    xed3_operand_set_outreg(d, XED_REG_EAX);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EOSZ=3 | OUTREG=XED_REG_RAX*/
    xed3_operand_set_outreg(d, XED_REG_RAX);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_OrDX(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_eosz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EOSZ=1 | OUTREG=XED_REG_DX*/
    xed3_operand_set_outreg(d, XED_REG_DX);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EOSZ=2 | OUTREG=XED_REG_EDX*/
    xed3_operand_set_outreg(d, XED_REG_EDX);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EOSZ=3 | OUTREG=XED_REG_RDX*/
    xed3_operand_set_outreg(d, XED_REG_RDX);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_OrCX(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_eosz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EOSZ=1 | OUTREG=XED_REG_CX*/
    xed3_operand_set_outreg(d, XED_REG_CX);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EOSZ=2 | OUTREG=XED_REG_ECX*/
    xed3_operand_set_outreg(d, XED_REG_ECX);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EOSZ=3 | OUTREG=XED_REG_RCX*/
    xed3_operand_set_outreg(d, XED_REG_RCX);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_OrBX(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_eosz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EOSZ=1 | OUTREG=XED_REG_BX*/
    xed3_operand_set_outreg(d, XED_REG_BX);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EOSZ=2 | OUTREG=XED_REG_EBX*/
    xed3_operand_set_outreg(d, XED_REG_EBX);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EOSZ=3 | OUTREG=XED_REG_RBX*/
    xed3_operand_set_outreg(d, XED_REG_RBX);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_OrSP(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_eosz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EOSZ=1 | OUTREG=XED_REG_SP*/
    xed3_operand_set_outreg(d, XED_REG_SP);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EOSZ=2 | OUTREG=XED_REG_ESP*/
    xed3_operand_set_outreg(d, XED_REG_ESP);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EOSZ=3 | OUTREG=XED_REG_RSP*/
    xed3_operand_set_outreg(d, XED_REG_RSP);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_OrBP(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_eosz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EOSZ=1 | OUTREG=XED_REG_BP*/
    xed3_operand_set_outreg(d, XED_REG_BP);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EOSZ=2 | OUTREG=XED_REG_EBP*/
    xed3_operand_set_outreg(d, XED_REG_EBP);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EOSZ=3 | OUTREG=XED_REG_RBP*/
    xed3_operand_set_outreg(d, XED_REG_RBP);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_GPRv_R(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_eosz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EOSZ=1 | OUTREG=GPR16_R()*/
    xed3_capture_nt_GPR16_R(d);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EOSZ=2 | OUTREG=GPR32_R()*/
    xed3_capture_nt_GPR32_R(d);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EOSZ=3 | OUTREG=GPR64_R()*/
    xed3_capture_nt_GPR64_R(d);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_GPRv_SB(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_eosz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EOSZ=1 | OUTREG=GPR16_SB()*/
    xed3_capture_nt_GPR16_SB(d);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EOSZ=2 | OUTREG=GPR32_SB()*/
    xed3_capture_nt_GPR32_SB(d);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EOSZ=3 | OUTREG=GPR64_SB()*/
    xed3_capture_nt_GPR64_SB(d);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_GPRz_R(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_eosz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EOSZ=1 | OUTREG=GPR16_R()*/
    xed3_capture_nt_GPR16_R(d);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EOSZ=2 | OUTREG=GPR32_R()*/
    xed3_capture_nt_GPR32_R(d);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EOSZ=3 | OUTREG=GPR32_R()*/
    xed3_capture_nt_GPR32_R(d);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_GPRy_R(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_eosz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EOSZ=1 | OUTREG=GPR32_R()*/
    xed3_capture_nt_GPR32_R(d);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EOSZ=2 | OUTREG=GPR32_R()*/
    xed3_capture_nt_GPR32_R(d);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EOSZ=3 | OUTREG=GPR64_R()*/
    xed3_capture_nt_GPR64_R(d);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_GPRv_B(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_eosz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EOSZ=1 | OUTREG=GPR16_B()*/
    xed3_capture_nt_GPR16_B(d);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EOSZ=2 | OUTREG=GPR32_B()*/
    xed3_capture_nt_GPR32_B(d);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EOSZ=3 | OUTREG=GPR64_B()*/
    xed3_capture_nt_GPR64_B(d);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_GPRz_B(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_eosz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EOSZ=1 | OUTREG=GPR16_B()*/
    xed3_capture_nt_GPR16_B(d);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EOSZ=2 | OUTREG=GPR32_B()*/
    xed3_capture_nt_GPR32_B(d);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EOSZ=3 | OUTREG=GPR32_B()*/
    xed3_capture_nt_GPR32_B(d);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_GPRy_B(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_eosz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EOSZ=1 | OUTREG=GPR32_B()*/
    xed3_capture_nt_GPR32_B(d);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EOSZ=2 | OUTREG=GPR32_B()*/
    xed3_capture_nt_GPR32_B(d);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EOSZ=3 | OUTREG=GPR64_B()*/
    xed3_capture_nt_GPR64_B(d);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_GPR64_R(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_reg(d)) << ((0));
key += (xed3_operand_get_rexr(d)) << ((3));
key += (xed3_operand_get_rexr4(d)) << ((4));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0, 0) -> REXR4=0 REXR=0 REG=0x0  | OUTREG=XED_REG_RAX*/
    xed3_operand_set_outreg(d, XED_REG_RAX);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0, 0) -> REXR4=0 REXR=0 REG=0x1  | OUTREG=XED_REG_RCX*/
    xed3_operand_set_outreg(d, XED_REG_RCX);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2, 0, 0) -> REXR4=0 REXR=0 REG=0x2  | OUTREG=XED_REG_RDX*/
    xed3_operand_set_outreg(d, XED_REG_RDX);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3, 0, 0) -> REXR4=0 REXR=0 REG=0x3  | OUTREG=XED_REG_RBX*/
    xed3_operand_set_outreg(d, XED_REG_RBX);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4, 0, 0) -> REXR4=0 REXR=0 REG=0x4  | OUTREG=XED_REG_RSP*/
    xed3_operand_set_outreg(d, XED_REG_RSP);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5, 0, 0) -> REXR4=0 REXR=0 REG=0x5  | OUTREG=XED_REG_RBP*/
    xed3_operand_set_outreg(d, XED_REG_RBP);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6, 0, 0) -> REXR4=0 REXR=0 REG=0x6  | OUTREG=XED_REG_RSI*/
    xed3_operand_set_outreg(d, XED_REG_RSI);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7, 0, 0) -> REXR4=0 REXR=0 REG=0x7  | OUTREG=XED_REG_RDI*/
    xed3_operand_set_outreg(d, XED_REG_RDI);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 1, 0) -> REXR4=0 REXR=1 REG=0x0  | OUTREG=XED_REG_R8*/
    xed3_operand_set_outreg(d, XED_REG_R8);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 1, 0) -> REXR4=0 REXR=1 REG=0x1  | OUTREG=XED_REG_R9*/
    xed3_operand_set_outreg(d, XED_REG_R9);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(2, 1, 0) -> REXR4=0 REXR=1 REG=0x2  | OUTREG=XED_REG_R10*/
    xed3_operand_set_outreg(d, XED_REG_R10);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(3, 1, 0) -> REXR4=0 REXR=1 REG=0x3  | OUTREG=XED_REG_R11*/
    xed3_operand_set_outreg(d, XED_REG_R11);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(4, 1, 0) -> REXR4=0 REXR=1 REG=0x4  | OUTREG=XED_REG_R12*/
    xed3_operand_set_outreg(d, XED_REG_R12);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(5, 1, 0) -> REXR4=0 REXR=1 REG=0x5  | OUTREG=XED_REG_R13*/
    xed3_operand_set_outreg(d, XED_REG_R13);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(6, 1, 0) -> REXR4=0 REXR=1 REG=0x6  | OUTREG=XED_REG_R14*/
    xed3_operand_set_outreg(d, XED_REG_R14);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(7, 1, 0) -> REXR4=0 REXR=1 REG=0x7  | OUTREG=XED_REG_R15*/
    xed3_operand_set_outreg(d, XED_REG_R15);
/*pacify the compiler */
(void)d;
    break;
case 16: /*(0, 0, 1) -> REXR4=1 REXR=0 REG=0x0  | OUTREG=XED_REG_R16 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R16);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 17: /*(1, 0, 1) -> REXR4=1 REXR=0 REG=0x1  | OUTREG=XED_REG_R17 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R17);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 18: /*(2, 0, 1) -> REXR4=1 REXR=0 REG=0x2  | OUTREG=XED_REG_R18 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R18);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 19: /*(3, 0, 1) -> REXR4=1 REXR=0 REG=0x3  | OUTREG=XED_REG_R19 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R19);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 20: /*(4, 0, 1) -> REXR4=1 REXR=0 REG=0x4  | OUTREG=XED_REG_R20 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R20);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 21: /*(5, 0, 1) -> REXR4=1 REXR=0 REG=0x5  | OUTREG=XED_REG_R21 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R21);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 22: /*(6, 0, 1) -> REXR4=1 REXR=0 REG=0x6  | OUTREG=XED_REG_R22 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R22);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 23: /*(7, 0, 1) -> REXR4=1 REXR=0 REG=0x7  | OUTREG=XED_REG_R23 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R23);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 24: /*(0, 1, 1) -> REXR4=1 REXR=1 REG=0x0  | OUTREG=XED_REG_R24 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R24);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 25: /*(1, 1, 1) -> REXR4=1 REXR=1 REG=0x1  | OUTREG=XED_REG_R25 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R25);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 26: /*(2, 1, 1) -> REXR4=1 REXR=1 REG=0x2  | OUTREG=XED_REG_R26 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R26);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 27: /*(3, 1, 1) -> REXR4=1 REXR=1 REG=0x3  | OUTREG=XED_REG_R27 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R27);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 28: /*(4, 1, 1) -> REXR4=1 REXR=1 REG=0x4  | OUTREG=XED_REG_R28 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R28);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 29: /*(5, 1, 1) -> REXR4=1 REXR=1 REG=0x5  | OUTREG=XED_REG_R29 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R29);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 30: /*(6, 1, 1) -> REXR4=1 REXR=1 REG=0x6  | OUTREG=XED_REG_R30 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R30);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 31: /*(7, 1, 1) -> REXR4=1 REXR=1 REG=0x7  | OUTREG=XED_REG_R31 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R31);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_GPR64_B(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_rexb(d)) << ((0));
key += (xed3_operand_get_rexb4(d)) << ((1));
key += (xed3_operand_get_rm(d)) << ((2));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0, 0) -> REXB4=0 REXB=0 RM=0x0  | OUTREG=XED_REG_RAX*/
    xed3_operand_set_outreg(d, XED_REG_RAX);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0, 0) -> REXB4=0 REXB=1 RM=0x0  | OUTREG=XED_REG_R8*/
    xed3_operand_set_outreg(d, XED_REG_R8);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(0, 1, 0) -> REXB4=1 REXB=0 RM=0x0  | OUTREG=XED_REG_R16 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R16);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(1, 1, 0) -> REXB4=1 REXB=1 RM=0x0  | OUTREG=XED_REG_R24 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R24);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(0, 0, 1) -> REXB4=0 REXB=0 RM=0x1  | OUTREG=XED_REG_RCX*/
    xed3_operand_set_outreg(d, XED_REG_RCX);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(1, 0, 1) -> REXB4=0 REXB=1 RM=0x1  | OUTREG=XED_REG_R9*/
    xed3_operand_set_outreg(d, XED_REG_R9);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(0, 1, 1) -> REXB4=1 REXB=0 RM=0x1  | OUTREG=XED_REG_R17 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R17);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(1, 1, 1) -> REXB4=1 REXB=1 RM=0x1  | OUTREG=XED_REG_R25 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R25);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 0, 2) -> REXB4=0 REXB=0 RM=0x2  | OUTREG=XED_REG_RDX*/
    xed3_operand_set_outreg(d, XED_REG_RDX);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 0, 2) -> REXB4=0 REXB=1 RM=0x2  | OUTREG=XED_REG_R10*/
    xed3_operand_set_outreg(d, XED_REG_R10);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(0, 1, 2) -> REXB4=1 REXB=0 RM=0x2  | OUTREG=XED_REG_R18 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R18);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(1, 1, 2) -> REXB4=1 REXB=1 RM=0x2  | OUTREG=XED_REG_R26 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R26);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(0, 0, 3) -> REXB4=0 REXB=0 RM=0x3  | OUTREG=XED_REG_RBX*/
    xed3_operand_set_outreg(d, XED_REG_RBX);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(1, 0, 3) -> REXB4=0 REXB=1 RM=0x3  | OUTREG=XED_REG_R11*/
    xed3_operand_set_outreg(d, XED_REG_R11);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(0, 1, 3) -> REXB4=1 REXB=0 RM=0x3  | OUTREG=XED_REG_R19 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R19);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(1, 1, 3) -> REXB4=1 REXB=1 RM=0x3  | OUTREG=XED_REG_R27 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R27);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 16: /*(0, 0, 4) -> REXB4=0 REXB=0 RM=0x4  | OUTREG=XED_REG_RSP*/
    xed3_operand_set_outreg(d, XED_REG_RSP);
/*pacify the compiler */
(void)d;
    break;
case 17: /*(1, 0, 4) -> REXB4=0 REXB=1 RM=0x4  | OUTREG=XED_REG_R12*/
    xed3_operand_set_outreg(d, XED_REG_R12);
/*pacify the compiler */
(void)d;
    break;
case 18: /*(0, 1, 4) -> REXB4=1 REXB=0 RM=0x4  | OUTREG=XED_REG_R20 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R20);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 19: /*(1, 1, 4) -> REXB4=1 REXB=1 RM=0x4  | OUTREG=XED_REG_R28 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R28);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 20: /*(0, 0, 5) -> REXB4=0 REXB=0 RM=0x5  | OUTREG=XED_REG_RBP*/
    xed3_operand_set_outreg(d, XED_REG_RBP);
/*pacify the compiler */
(void)d;
    break;
case 21: /*(1, 0, 5) -> REXB4=0 REXB=1 RM=0x5  | OUTREG=XED_REG_R13*/
    xed3_operand_set_outreg(d, XED_REG_R13);
/*pacify the compiler */
(void)d;
    break;
case 22: /*(0, 1, 5) -> REXB4=1 REXB=0 RM=0x5  | OUTREG=XED_REG_R21 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R21);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 23: /*(1, 1, 5) -> REXB4=1 REXB=1 RM=0x5  | OUTREG=XED_REG_R29 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R29);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 24: /*(0, 0, 6) -> REXB4=0 REXB=0 RM=0x6  | OUTREG=XED_REG_RSI*/
    xed3_operand_set_outreg(d, XED_REG_RSI);
/*pacify the compiler */
(void)d;
    break;
case 25: /*(1, 0, 6) -> REXB4=0 REXB=1 RM=0x6  | OUTREG=XED_REG_R14*/
    xed3_operand_set_outreg(d, XED_REG_R14);
/*pacify the compiler */
(void)d;
    break;
case 26: /*(0, 1, 6) -> REXB4=1 REXB=0 RM=0x6  | OUTREG=XED_REG_R22 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R22);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 27: /*(1, 1, 6) -> REXB4=1 REXB=1 RM=0x6  | OUTREG=XED_REG_R30 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R30);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 28: /*(0, 0, 7) -> REXB4=0 REXB=0 RM=0x7  | OUTREG=XED_REG_RDI*/
    xed3_operand_set_outreg(d, XED_REG_RDI);
/*pacify the compiler */
(void)d;
    break;
case 29: /*(1, 0, 7) -> REXB4=0 REXB=1 RM=0x7  | OUTREG=XED_REG_R15*/
    xed3_operand_set_outreg(d, XED_REG_R15);
/*pacify the compiler */
(void)d;
    break;
case 30: /*(0, 1, 7) -> REXB4=1 REXB=0 RM=0x7  | OUTREG=XED_REG_R23 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R23);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 31: /*(1, 1, 7) -> REXB4=1 REXB=1 RM=0x7  | OUTREG=XED_REG_R31 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R31);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_GPR64_SB(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_rexb(d)) << ((0));
key += (xed3_operand_get_rexb4(d)) << ((1));
key += (xed3_operand_get_srm(d)) << ((2));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0, 0) -> REXB4=0 REXB=0 SRM=0x0  | OUTREG=XED_REG_RAX*/
    xed3_operand_set_outreg(d, XED_REG_RAX);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0, 0) -> REXB4=0 REXB=1 SRM=0x0  | OUTREG=XED_REG_R8*/
    xed3_operand_set_outreg(d, XED_REG_R8);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(0, 1, 0) -> REXB4=1 REXB=0 SRM=0x0  | OUTREG=XED_REG_R16 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R16);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(1, 1, 0) -> REXB4=1 REXB=1 SRM=0x0  | OUTREG=XED_REG_R24 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R24);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(0, 0, 1) -> REXB4=0 REXB=0 SRM=0x1  | OUTREG=XED_REG_RCX*/
    xed3_operand_set_outreg(d, XED_REG_RCX);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(1, 0, 1) -> REXB4=0 REXB=1 SRM=0x1  | OUTREG=XED_REG_R9*/
    xed3_operand_set_outreg(d, XED_REG_R9);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(0, 1, 1) -> REXB4=1 REXB=0 SRM=0x1  | OUTREG=XED_REG_R17 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R17);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(1, 1, 1) -> REXB4=1 REXB=1 SRM=0x1  | OUTREG=XED_REG_R25 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R25);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 0, 2) -> REXB4=0 REXB=0 SRM=0x2  | OUTREG=XED_REG_RDX*/
    xed3_operand_set_outreg(d, XED_REG_RDX);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 0, 2) -> REXB4=0 REXB=1 SRM=0x2  | OUTREG=XED_REG_R10*/
    xed3_operand_set_outreg(d, XED_REG_R10);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(0, 1, 2) -> REXB4=1 REXB=0 SRM=0x2  | OUTREG=XED_REG_R18 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R18);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(1, 1, 2) -> REXB4=1 REXB=1 SRM=0x2  | OUTREG=XED_REG_R26 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R26);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(0, 0, 3) -> REXB4=0 REXB=0 SRM=0x3  | OUTREG=XED_REG_RBX*/
    xed3_operand_set_outreg(d, XED_REG_RBX);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(1, 0, 3) -> REXB4=0 REXB=1 SRM=0x3  | OUTREG=XED_REG_R11*/
    xed3_operand_set_outreg(d, XED_REG_R11);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(0, 1, 3) -> REXB4=1 REXB=0 SRM=0x3  | OUTREG=XED_REG_R19 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R19);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(1, 1, 3) -> REXB4=1 REXB=1 SRM=0x3  | OUTREG=XED_REG_R27 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R27);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 16: /*(0, 0, 4) -> REXB4=0 REXB=0 SRM=0x4  | OUTREG=XED_REG_RSP*/
    xed3_operand_set_outreg(d, XED_REG_RSP);
/*pacify the compiler */
(void)d;
    break;
case 17: /*(1, 0, 4) -> REXB4=0 REXB=1 SRM=0x4  | OUTREG=XED_REG_R12*/
    xed3_operand_set_outreg(d, XED_REG_R12);
/*pacify the compiler */
(void)d;
    break;
case 18: /*(0, 1, 4) -> REXB4=1 REXB=0 SRM=0x4  | OUTREG=XED_REG_R20 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R20);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 19: /*(1, 1, 4) -> REXB4=1 REXB=1 SRM=0x4  | OUTREG=XED_REG_R28 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R28);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 20: /*(0, 0, 5) -> REXB4=0 REXB=0 SRM=0x5  | OUTREG=XED_REG_RBP*/
    xed3_operand_set_outreg(d, XED_REG_RBP);
/*pacify the compiler */
(void)d;
    break;
case 21: /*(1, 0, 5) -> REXB4=0 REXB=1 SRM=0x5  | OUTREG=XED_REG_R13*/
    xed3_operand_set_outreg(d, XED_REG_R13);
/*pacify the compiler */
(void)d;
    break;
case 22: /*(0, 1, 5) -> REXB4=1 REXB=0 SRM=0x5  | OUTREG=XED_REG_R21 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R21);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 23: /*(1, 1, 5) -> REXB4=1 REXB=1 SRM=0x5  | OUTREG=XED_REG_R29 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R29);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 24: /*(0, 0, 6) -> REXB4=0 REXB=0 SRM=0x6  | OUTREG=XED_REG_RSI*/
    xed3_operand_set_outreg(d, XED_REG_RSI);
/*pacify the compiler */
(void)d;
    break;
case 25: /*(1, 0, 6) -> REXB4=0 REXB=1 SRM=0x6  | OUTREG=XED_REG_R14*/
    xed3_operand_set_outreg(d, XED_REG_R14);
/*pacify the compiler */
(void)d;
    break;
case 26: /*(0, 1, 6) -> REXB4=1 REXB=0 SRM=0x6  | OUTREG=XED_REG_R22 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R22);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 27: /*(1, 1, 6) -> REXB4=1 REXB=1 SRM=0x6  | OUTREG=XED_REG_R30 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R30);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 28: /*(0, 0, 7) -> REXB4=0 REXB=0 SRM=0x7  | OUTREG=XED_REG_RDI*/
    xed3_operand_set_outreg(d, XED_REG_RDI);
/*pacify the compiler */
(void)d;
    break;
case 29: /*(1, 0, 7) -> REXB4=0 REXB=1 SRM=0x7  | OUTREG=XED_REG_R15*/
    xed3_operand_set_outreg(d, XED_REG_R15);
/*pacify the compiler */
(void)d;
    break;
case 30: /*(0, 1, 7) -> REXB4=1 REXB=0 SRM=0x7  | OUTREG=XED_REG_R23 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R23);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 31: /*(1, 1, 7) -> REXB4=1 REXB=1 SRM=0x7  | OUTREG=XED_REG_R31 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R31);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_GPR32_R(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_reg(d)) << ((0));
key += (xed3_operand_get_rexr(d)) << ((3));
key += (xed3_operand_get_rexr4(d)) << ((4));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0, 0) -> REXR4=0 REXR=0 REG=0x0  | OUTREG=XED_REG_EAX*/
    xed3_operand_set_outreg(d, XED_REG_EAX);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0, 0) -> REXR4=0 REXR=0 REG=0x1  | OUTREG=XED_REG_ECX*/
    xed3_operand_set_outreg(d, XED_REG_ECX);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2, 0, 0) -> REXR4=0 REXR=0 REG=0x2  | OUTREG=XED_REG_EDX*/
    xed3_operand_set_outreg(d, XED_REG_EDX);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3, 0, 0) -> REXR4=0 REXR=0 REG=0x3  | OUTREG=XED_REG_EBX*/
    xed3_operand_set_outreg(d, XED_REG_EBX);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4, 0, 0) -> REXR4=0 REXR=0 REG=0x4  | OUTREG=XED_REG_ESP*/
    xed3_operand_set_outreg(d, XED_REG_ESP);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5, 0, 0) -> REXR4=0 REXR=0 REG=0x5  | OUTREG=XED_REG_EBP*/
    xed3_operand_set_outreg(d, XED_REG_EBP);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6, 0, 0) -> REXR4=0 REXR=0 REG=0x6  | OUTREG=XED_REG_ESI*/
    xed3_operand_set_outreg(d, XED_REG_ESI);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7, 0, 0) -> REXR4=0 REXR=0 REG=0x7  | OUTREG=XED_REG_EDI*/
    xed3_operand_set_outreg(d, XED_REG_EDI);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 1, 0) -> REXR4=0 REXR=1 REG=0x0  | OUTREG=XED_REG_R8D*/
    xed3_operand_set_outreg(d, XED_REG_R8D);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 1, 0) -> REXR4=0 REXR=1 REG=0x1  | OUTREG=XED_REG_R9D*/
    xed3_operand_set_outreg(d, XED_REG_R9D);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(2, 1, 0) -> REXR4=0 REXR=1 REG=0x2  | OUTREG=XED_REG_R10D*/
    xed3_operand_set_outreg(d, XED_REG_R10D);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(3, 1, 0) -> REXR4=0 REXR=1 REG=0x3  | OUTREG=XED_REG_R11D*/
    xed3_operand_set_outreg(d, XED_REG_R11D);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(4, 1, 0) -> REXR4=0 REXR=1 REG=0x4  | OUTREG=XED_REG_R12D*/
    xed3_operand_set_outreg(d, XED_REG_R12D);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(5, 1, 0) -> REXR4=0 REXR=1 REG=0x5  | OUTREG=XED_REG_R13D*/
    xed3_operand_set_outreg(d, XED_REG_R13D);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(6, 1, 0) -> REXR4=0 REXR=1 REG=0x6  | OUTREG=XED_REG_R14D*/
    xed3_operand_set_outreg(d, XED_REG_R14D);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(7, 1, 0) -> REXR4=0 REXR=1 REG=0x7  | OUTREG=XED_REG_R15D*/
    xed3_operand_set_outreg(d, XED_REG_R15D);
/*pacify the compiler */
(void)d;
    break;
case 16: /*(0, 0, 1) -> REXR4=1 REXR=0 REG=0x0  | OUTREG=XED_REG_R16D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R16D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 17: /*(1, 0, 1) -> REXR4=1 REXR=0 REG=0x1  | OUTREG=XED_REG_R17D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R17D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 18: /*(2, 0, 1) -> REXR4=1 REXR=0 REG=0x2  | OUTREG=XED_REG_R18D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R18D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 19: /*(3, 0, 1) -> REXR4=1 REXR=0 REG=0x3  | OUTREG=XED_REG_R19D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R19D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 20: /*(4, 0, 1) -> REXR4=1 REXR=0 REG=0x4  | OUTREG=XED_REG_R20D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R20D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 21: /*(5, 0, 1) -> REXR4=1 REXR=0 REG=0x5  | OUTREG=XED_REG_R21D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R21D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 22: /*(6, 0, 1) -> REXR4=1 REXR=0 REG=0x6  | OUTREG=XED_REG_R22D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R22D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 23: /*(7, 0, 1) -> REXR4=1 REXR=0 REG=0x7  | OUTREG=XED_REG_R23D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R23D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 24: /*(0, 1, 1) -> REXR4=1 REXR=1 REG=0x0  | OUTREG=XED_REG_R24D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R24D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 25: /*(1, 1, 1) -> REXR4=1 REXR=1 REG=0x1  | OUTREG=XED_REG_R25D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R25D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 26: /*(2, 1, 1) -> REXR4=1 REXR=1 REG=0x2  | OUTREG=XED_REG_R26D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R26D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 27: /*(3, 1, 1) -> REXR4=1 REXR=1 REG=0x3  | OUTREG=XED_REG_R27D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R27D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 28: /*(4, 1, 1) -> REXR4=1 REXR=1 REG=0x4  | OUTREG=XED_REG_R28D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R28D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 29: /*(5, 1, 1) -> REXR4=1 REXR=1 REG=0x5  | OUTREG=XED_REG_R29D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R29D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 30: /*(6, 1, 1) -> REXR4=1 REXR=1 REG=0x6  | OUTREG=XED_REG_R30D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R30D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 31: /*(7, 1, 1) -> REXR4=1 REXR=1 REG=0x7  | OUTREG=XED_REG_R31D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R31D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_GPR32_B(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_rexb(d)) << ((0));
key += (xed3_operand_get_rexb4(d)) << ((1));
key += (xed3_operand_get_rm(d)) << ((2));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0, 0) -> REXB4=0 REXB=0 RM=0x0  | OUTREG=XED_REG_EAX*/
    xed3_operand_set_outreg(d, XED_REG_EAX);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0, 0) -> REXB4=0 REXB=1 RM=0x0  | OUTREG=XED_REG_R8D*/
    xed3_operand_set_outreg(d, XED_REG_R8D);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(0, 1, 0) -> REXB4=1 REXB=0 RM=0x0  | OUTREG=XED_REG_R16D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R16D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(1, 1, 0) -> REXB4=1 REXB=1 RM=0x0  | OUTREG=XED_REG_R24D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R24D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(0, 0, 1) -> REXB4=0 REXB=0 RM=0x1  | OUTREG=XED_REG_ECX*/
    xed3_operand_set_outreg(d, XED_REG_ECX);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(1, 0, 1) -> REXB4=0 REXB=1 RM=0x1  | OUTREG=XED_REG_R9D*/
    xed3_operand_set_outreg(d, XED_REG_R9D);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(0, 1, 1) -> REXB4=1 REXB=0 RM=0x1  | OUTREG=XED_REG_R17D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R17D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(1, 1, 1) -> REXB4=1 REXB=1 RM=0x1  | OUTREG=XED_REG_R25D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R25D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 0, 2) -> REXB4=0 REXB=0 RM=0x2  | OUTREG=XED_REG_EDX*/
    xed3_operand_set_outreg(d, XED_REG_EDX);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 0, 2) -> REXB4=0 REXB=1 RM=0x2  | OUTREG=XED_REG_R10D*/
    xed3_operand_set_outreg(d, XED_REG_R10D);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(0, 1, 2) -> REXB4=1 REXB=0 RM=0x2  | OUTREG=XED_REG_R18D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R18D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(1, 1, 2) -> REXB4=1 REXB=1 RM=0x2  | OUTREG=XED_REG_R26D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R26D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(0, 0, 3) -> REXB4=0 REXB=0 RM=0x3  | OUTREG=XED_REG_EBX*/
    xed3_operand_set_outreg(d, XED_REG_EBX);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(1, 0, 3) -> REXB4=0 REXB=1 RM=0x3  | OUTREG=XED_REG_R11D*/
    xed3_operand_set_outreg(d, XED_REG_R11D);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(0, 1, 3) -> REXB4=1 REXB=0 RM=0x3  | OUTREG=XED_REG_R19D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R19D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(1, 1, 3) -> REXB4=1 REXB=1 RM=0x3  | OUTREG=XED_REG_R27D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R27D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 16: /*(0, 0, 4) -> REXB4=0 REXB=0 RM=0x4  | OUTREG=XED_REG_ESP*/
    xed3_operand_set_outreg(d, XED_REG_ESP);
/*pacify the compiler */
(void)d;
    break;
case 17: /*(1, 0, 4) -> REXB4=0 REXB=1 RM=0x4  | OUTREG=XED_REG_R12D*/
    xed3_operand_set_outreg(d, XED_REG_R12D);
/*pacify the compiler */
(void)d;
    break;
case 18: /*(0, 1, 4) -> REXB4=1 REXB=0 RM=0x4  | OUTREG=XED_REG_R20D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R20D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 19: /*(1, 1, 4) -> REXB4=1 REXB=1 RM=0x4  | OUTREG=XED_REG_R28D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R28D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 20: /*(0, 0, 5) -> REXB4=0 REXB=0 RM=0x5  | OUTREG=XED_REG_EBP*/
    xed3_operand_set_outreg(d, XED_REG_EBP);
/*pacify the compiler */
(void)d;
    break;
case 21: /*(1, 0, 5) -> REXB4=0 REXB=1 RM=0x5  | OUTREG=XED_REG_R13D*/
    xed3_operand_set_outreg(d, XED_REG_R13D);
/*pacify the compiler */
(void)d;
    break;
case 22: /*(0, 1, 5) -> REXB4=1 REXB=0 RM=0x5  | OUTREG=XED_REG_R21D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R21D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 23: /*(1, 1, 5) -> REXB4=1 REXB=1 RM=0x5  | OUTREG=XED_REG_R29D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R29D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 24: /*(0, 0, 6) -> REXB4=0 REXB=0 RM=0x6  | OUTREG=XED_REG_ESI*/
    xed3_operand_set_outreg(d, XED_REG_ESI);
/*pacify the compiler */
(void)d;
    break;
case 25: /*(1, 0, 6) -> REXB4=0 REXB=1 RM=0x6  | OUTREG=XED_REG_R14D*/
    xed3_operand_set_outreg(d, XED_REG_R14D);
/*pacify the compiler */
(void)d;
    break;
case 26: /*(0, 1, 6) -> REXB4=1 REXB=0 RM=0x6  | OUTREG=XED_REG_R22D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R22D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 27: /*(1, 1, 6) -> REXB4=1 REXB=1 RM=0x6  | OUTREG=XED_REG_R30D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R30D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 28: /*(0, 0, 7) -> REXB4=0 REXB=0 RM=0x7  | OUTREG=XED_REG_EDI*/
    xed3_operand_set_outreg(d, XED_REG_EDI);
/*pacify the compiler */
(void)d;
    break;
case 29: /*(1, 0, 7) -> REXB4=0 REXB=1 RM=0x7  | OUTREG=XED_REG_R15D*/
    xed3_operand_set_outreg(d, XED_REG_R15D);
/*pacify the compiler */
(void)d;
    break;
case 30: /*(0, 1, 7) -> REXB4=1 REXB=0 RM=0x7  | OUTREG=XED_REG_R23D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R23D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 31: /*(1, 1, 7) -> REXB4=1 REXB=1 RM=0x7  | OUTREG=XED_REG_R31D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R31D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_GPR32_SB(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_rexb(d)) << ((0));
key += (xed3_operand_get_rexb4(d)) << ((1));
key += (xed3_operand_get_srm(d)) << ((2));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0, 0) -> REXB4=0 REXB=0 SRM=0x0  | OUTREG=XED_REG_EAX*/
    xed3_operand_set_outreg(d, XED_REG_EAX);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0, 0) -> REXB4=0 REXB=1 SRM=0x0  | OUTREG=XED_REG_R8D*/
    xed3_operand_set_outreg(d, XED_REG_R8D);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(0, 1, 0) -> REXB4=1 REXB=0 SRM=0x0  | OUTREG=XED_REG_R16D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R16D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(1, 1, 0) -> REXB4=1 REXB=1 SRM=0x0  | OUTREG=XED_REG_R24D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R24D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(0, 0, 1) -> REXB4=0 REXB=0 SRM=0x1  | OUTREG=XED_REG_ECX*/
    xed3_operand_set_outreg(d, XED_REG_ECX);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(1, 0, 1) -> REXB4=0 REXB=1 SRM=0x1  | OUTREG=XED_REG_R9D*/
    xed3_operand_set_outreg(d, XED_REG_R9D);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(0, 1, 1) -> REXB4=1 REXB=0 SRM=0x1  | OUTREG=XED_REG_R17D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R17D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(1, 1, 1) -> REXB4=1 REXB=1 SRM=0x1  | OUTREG=XED_REG_R25D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R25D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 0, 2) -> REXB4=0 REXB=0 SRM=0x2  | OUTREG=XED_REG_EDX*/
    xed3_operand_set_outreg(d, XED_REG_EDX);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 0, 2) -> REXB4=0 REXB=1 SRM=0x2  | OUTREG=XED_REG_R10D*/
    xed3_operand_set_outreg(d, XED_REG_R10D);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(0, 1, 2) -> REXB4=1 REXB=0 SRM=0x2  | OUTREG=XED_REG_R18D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R18D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(1, 1, 2) -> REXB4=1 REXB=1 SRM=0x2  | OUTREG=XED_REG_R26D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R26D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(0, 0, 3) -> REXB4=0 REXB=0 SRM=0x3  | OUTREG=XED_REG_EBX*/
    xed3_operand_set_outreg(d, XED_REG_EBX);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(1, 0, 3) -> REXB4=0 REXB=1 SRM=0x3  | OUTREG=XED_REG_R11D*/
    xed3_operand_set_outreg(d, XED_REG_R11D);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(0, 1, 3) -> REXB4=1 REXB=0 SRM=0x3  | OUTREG=XED_REG_R19D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R19D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(1, 1, 3) -> REXB4=1 REXB=1 SRM=0x3  | OUTREG=XED_REG_R27D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R27D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 16: /*(0, 0, 4) -> REXB4=0 REXB=0 SRM=0x4  | OUTREG=XED_REG_ESP*/
    xed3_operand_set_outreg(d, XED_REG_ESP);
/*pacify the compiler */
(void)d;
    break;
case 17: /*(1, 0, 4) -> REXB4=0 REXB=1 SRM=0x4  | OUTREG=XED_REG_R12D*/
    xed3_operand_set_outreg(d, XED_REG_R12D);
/*pacify the compiler */
(void)d;
    break;
case 18: /*(0, 1, 4) -> REXB4=1 REXB=0 SRM=0x4  | OUTREG=XED_REG_R20D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R20D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 19: /*(1, 1, 4) -> REXB4=1 REXB=1 SRM=0x4  | OUTREG=XED_REG_R28D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R28D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 20: /*(0, 0, 5) -> REXB4=0 REXB=0 SRM=0x5  | OUTREG=XED_REG_EBP*/
    xed3_operand_set_outreg(d, XED_REG_EBP);
/*pacify the compiler */
(void)d;
    break;
case 21: /*(1, 0, 5) -> REXB4=0 REXB=1 SRM=0x5  | OUTREG=XED_REG_R13D*/
    xed3_operand_set_outreg(d, XED_REG_R13D);
/*pacify the compiler */
(void)d;
    break;
case 22: /*(0, 1, 5) -> REXB4=1 REXB=0 SRM=0x5  | OUTREG=XED_REG_R21D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R21D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 23: /*(1, 1, 5) -> REXB4=1 REXB=1 SRM=0x5  | OUTREG=XED_REG_R29D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R29D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 24: /*(0, 0, 6) -> REXB4=0 REXB=0 SRM=0x6  | OUTREG=XED_REG_ESI*/
    xed3_operand_set_outreg(d, XED_REG_ESI);
/*pacify the compiler */
(void)d;
    break;
case 25: /*(1, 0, 6) -> REXB4=0 REXB=1 SRM=0x6  | OUTREG=XED_REG_R14D*/
    xed3_operand_set_outreg(d, XED_REG_R14D);
/*pacify the compiler */
(void)d;
    break;
case 26: /*(0, 1, 6) -> REXB4=1 REXB=0 SRM=0x6  | OUTREG=XED_REG_R22D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R22D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 27: /*(1, 1, 6) -> REXB4=1 REXB=1 SRM=0x6  | OUTREG=XED_REG_R30D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R30D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 28: /*(0, 0, 7) -> REXB4=0 REXB=0 SRM=0x7  | OUTREG=XED_REG_EDI*/
    xed3_operand_set_outreg(d, XED_REG_EDI);
/*pacify the compiler */
(void)d;
    break;
case 29: /*(1, 0, 7) -> REXB4=0 REXB=1 SRM=0x7  | OUTREG=XED_REG_R15D*/
    xed3_operand_set_outreg(d, XED_REG_R15D);
/*pacify the compiler */
(void)d;
    break;
case 30: /*(0, 1, 7) -> REXB4=1 REXB=0 SRM=0x7  | OUTREG=XED_REG_R23D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R23D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 31: /*(1, 1, 7) -> REXB4=1 REXB=1 SRM=0x7  | OUTREG=XED_REG_R31D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R31D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_GPR16_R(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_reg(d)) << ((0));
key += (xed3_operand_get_rexr(d)) << ((3));
key += (xed3_operand_get_rexr4(d)) << ((4));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0, 0) -> REXR4=0 REXR=0 REG=0x0  | OUTREG=XED_REG_AX*/
    xed3_operand_set_outreg(d, XED_REG_AX);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0, 0) -> REXR4=0 REXR=0 REG=0x1  | OUTREG=XED_REG_CX*/
    xed3_operand_set_outreg(d, XED_REG_CX);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2, 0, 0) -> REXR4=0 REXR=0 REG=0x2  | OUTREG=XED_REG_DX*/
    xed3_operand_set_outreg(d, XED_REG_DX);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3, 0, 0) -> REXR4=0 REXR=0 REG=0x3  | OUTREG=XED_REG_BX*/
    xed3_operand_set_outreg(d, XED_REG_BX);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4, 0, 0) -> REXR4=0 REXR=0 REG=0x4  | OUTREG=XED_REG_SP*/
    xed3_operand_set_outreg(d, XED_REG_SP);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5, 0, 0) -> REXR4=0 REXR=0 REG=0x5  | OUTREG=XED_REG_BP*/
    xed3_operand_set_outreg(d, XED_REG_BP);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6, 0, 0) -> REXR4=0 REXR=0 REG=0x6  | OUTREG=XED_REG_SI*/
    xed3_operand_set_outreg(d, XED_REG_SI);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7, 0, 0) -> REXR4=0 REXR=0 REG=0x7  | OUTREG=XED_REG_DI*/
    xed3_operand_set_outreg(d, XED_REG_DI);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 1, 0) -> REXR4=0 REXR=1 REG=0x0  | OUTREG=XED_REG_R8W*/
    xed3_operand_set_outreg(d, XED_REG_R8W);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 1, 0) -> REXR4=0 REXR=1 REG=0x1  | OUTREG=XED_REG_R9W*/
    xed3_operand_set_outreg(d, XED_REG_R9W);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(2, 1, 0) -> REXR4=0 REXR=1 REG=0x2  | OUTREG=XED_REG_R10W*/
    xed3_operand_set_outreg(d, XED_REG_R10W);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(3, 1, 0) -> REXR4=0 REXR=1 REG=0x3  | OUTREG=XED_REG_R11W*/
    xed3_operand_set_outreg(d, XED_REG_R11W);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(4, 1, 0) -> REXR4=0 REXR=1 REG=0x4  | OUTREG=XED_REG_R12W*/
    xed3_operand_set_outreg(d, XED_REG_R12W);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(5, 1, 0) -> REXR4=0 REXR=1 REG=0x5  | OUTREG=XED_REG_R13W*/
    xed3_operand_set_outreg(d, XED_REG_R13W);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(6, 1, 0) -> REXR4=0 REXR=1 REG=0x6  | OUTREG=XED_REG_R14W*/
    xed3_operand_set_outreg(d, XED_REG_R14W);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(7, 1, 0) -> REXR4=0 REXR=1 REG=0x7  | OUTREG=XED_REG_R15W*/
    xed3_operand_set_outreg(d, XED_REG_R15W);
/*pacify the compiler */
(void)d;
    break;
case 16: /*(0, 0, 1) -> REXR4=1 REXR=0 REG=0x0  | OUTREG=XED_REG_R16W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R16W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 17: /*(1, 0, 1) -> REXR4=1 REXR=0 REG=0x1  | OUTREG=XED_REG_R17W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R17W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 18: /*(2, 0, 1) -> REXR4=1 REXR=0 REG=0x2  | OUTREG=XED_REG_R18W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R18W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 19: /*(3, 0, 1) -> REXR4=1 REXR=0 REG=0x3  | OUTREG=XED_REG_R19W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R19W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 20: /*(4, 0, 1) -> REXR4=1 REXR=0 REG=0x4  | OUTREG=XED_REG_R20W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R20W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 21: /*(5, 0, 1) -> REXR4=1 REXR=0 REG=0x5  | OUTREG=XED_REG_R21W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R21W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 22: /*(6, 0, 1) -> REXR4=1 REXR=0 REG=0x6  | OUTREG=XED_REG_R22W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R22W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 23: /*(7, 0, 1) -> REXR4=1 REXR=0 REG=0x7  | OUTREG=XED_REG_R23W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R23W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 24: /*(0, 1, 1) -> REXR4=1 REXR=1 REG=0x0  | OUTREG=XED_REG_R24W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R24W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 25: /*(1, 1, 1) -> REXR4=1 REXR=1 REG=0x1  | OUTREG=XED_REG_R25W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R25W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 26: /*(2, 1, 1) -> REXR4=1 REXR=1 REG=0x2  | OUTREG=XED_REG_R26W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R26W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 27: /*(3, 1, 1) -> REXR4=1 REXR=1 REG=0x3  | OUTREG=XED_REG_R27W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R27W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 28: /*(4, 1, 1) -> REXR4=1 REXR=1 REG=0x4  | OUTREG=XED_REG_R28W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R28W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 29: /*(5, 1, 1) -> REXR4=1 REXR=1 REG=0x5  | OUTREG=XED_REG_R29W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R29W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 30: /*(6, 1, 1) -> REXR4=1 REXR=1 REG=0x6  | OUTREG=XED_REG_R30W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R30W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 31: /*(7, 1, 1) -> REXR4=1 REXR=1 REG=0x7  | OUTREG=XED_REG_R31W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R31W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_GPR16_B(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_rexb(d)) << ((0));
key += (xed3_operand_get_rexb4(d)) << ((1));
key += (xed3_operand_get_rm(d)) << ((2));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0, 0) -> REXB4=0 REXB=0 RM=0x0  | OUTREG=XED_REG_AX*/
    xed3_operand_set_outreg(d, XED_REG_AX);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0, 0) -> REXB4=0 REXB=1 RM=0x0  | OUTREG=XED_REG_R8W*/
    xed3_operand_set_outreg(d, XED_REG_R8W);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(0, 1, 0) -> REXB4=1 REXB=0 RM=0x0  | OUTREG=XED_REG_R16W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R16W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(1, 1, 0) -> REXB4=1 REXB=1 RM=0x0  | OUTREG=XED_REG_R24W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R24W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(0, 0, 1) -> REXB4=0 REXB=0 RM=0x1  | OUTREG=XED_REG_CX*/
    xed3_operand_set_outreg(d, XED_REG_CX);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(1, 0, 1) -> REXB4=0 REXB=1 RM=0x1  | OUTREG=XED_REG_R9W*/
    xed3_operand_set_outreg(d, XED_REG_R9W);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(0, 1, 1) -> REXB4=1 REXB=0 RM=0x1  | OUTREG=XED_REG_R17W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R17W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(1, 1, 1) -> REXB4=1 REXB=1 RM=0x1  | OUTREG=XED_REG_R25W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R25W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 0, 2) -> REXB4=0 REXB=0 RM=0x2  | OUTREG=XED_REG_DX*/
    xed3_operand_set_outreg(d, XED_REG_DX);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 0, 2) -> REXB4=0 REXB=1 RM=0x2  | OUTREG=XED_REG_R10W*/
    xed3_operand_set_outreg(d, XED_REG_R10W);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(0, 1, 2) -> REXB4=1 REXB=0 RM=0x2  | OUTREG=XED_REG_R18W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R18W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(1, 1, 2) -> REXB4=1 REXB=1 RM=0x2  | OUTREG=XED_REG_R26W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R26W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(0, 0, 3) -> REXB4=0 REXB=0 RM=0x3  | OUTREG=XED_REG_BX*/
    xed3_operand_set_outreg(d, XED_REG_BX);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(1, 0, 3) -> REXB4=0 REXB=1 RM=0x3  | OUTREG=XED_REG_R11W*/
    xed3_operand_set_outreg(d, XED_REG_R11W);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(0, 1, 3) -> REXB4=1 REXB=0 RM=0x3  | OUTREG=XED_REG_R19W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R19W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(1, 1, 3) -> REXB4=1 REXB=1 RM=0x3  | OUTREG=XED_REG_R27W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R27W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 16: /*(0, 0, 4) -> REXB4=0 REXB=0 RM=0x4  | OUTREG=XED_REG_SP*/
    xed3_operand_set_outreg(d, XED_REG_SP);
/*pacify the compiler */
(void)d;
    break;
case 17: /*(1, 0, 4) -> REXB4=0 REXB=1 RM=0x4  | OUTREG=XED_REG_R12W*/
    xed3_operand_set_outreg(d, XED_REG_R12W);
/*pacify the compiler */
(void)d;
    break;
case 18: /*(0, 1, 4) -> REXB4=1 REXB=0 RM=0x4  | OUTREG=XED_REG_R20W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R20W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 19: /*(1, 1, 4) -> REXB4=1 REXB=1 RM=0x4  | OUTREG=XED_REG_R28W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R28W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 20: /*(0, 0, 5) -> REXB4=0 REXB=0 RM=0x5  | OUTREG=XED_REG_BP*/
    xed3_operand_set_outreg(d, XED_REG_BP);
/*pacify the compiler */
(void)d;
    break;
case 21: /*(1, 0, 5) -> REXB4=0 REXB=1 RM=0x5  | OUTREG=XED_REG_R13W*/
    xed3_operand_set_outreg(d, XED_REG_R13W);
/*pacify the compiler */
(void)d;
    break;
case 22: /*(0, 1, 5) -> REXB4=1 REXB=0 RM=0x5  | OUTREG=XED_REG_R21W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R21W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 23: /*(1, 1, 5) -> REXB4=1 REXB=1 RM=0x5  | OUTREG=XED_REG_R29W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R29W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 24: /*(0, 0, 6) -> REXB4=0 REXB=0 RM=0x6  | OUTREG=XED_REG_SI*/
    xed3_operand_set_outreg(d, XED_REG_SI);
/*pacify the compiler */
(void)d;
    break;
case 25: /*(1, 0, 6) -> REXB4=0 REXB=1 RM=0x6  | OUTREG=XED_REG_R14W*/
    xed3_operand_set_outreg(d, XED_REG_R14W);
/*pacify the compiler */
(void)d;
    break;
case 26: /*(0, 1, 6) -> REXB4=1 REXB=0 RM=0x6  | OUTREG=XED_REG_R22W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R22W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 27: /*(1, 1, 6) -> REXB4=1 REXB=1 RM=0x6  | OUTREG=XED_REG_R30W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R30W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 28: /*(0, 0, 7) -> REXB4=0 REXB=0 RM=0x7  | OUTREG=XED_REG_DI*/
    xed3_operand_set_outreg(d, XED_REG_DI);
/*pacify the compiler */
(void)d;
    break;
case 29: /*(1, 0, 7) -> REXB4=0 REXB=1 RM=0x7  | OUTREG=XED_REG_R15W*/
    xed3_operand_set_outreg(d, XED_REG_R15W);
/*pacify the compiler */
(void)d;
    break;
case 30: /*(0, 1, 7) -> REXB4=1 REXB=0 RM=0x7  | OUTREG=XED_REG_R23W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R23W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 31: /*(1, 1, 7) -> REXB4=1 REXB=1 RM=0x7  | OUTREG=XED_REG_R31W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R31W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_GPR16_SB(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_rexb(d)) << ((0));
key += (xed3_operand_get_rexb4(d)) << ((1));
key += (xed3_operand_get_srm(d)) << ((2));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0, 0) -> REXB4=0 REXB=0 SRM=0x0  | OUTREG=XED_REG_AX*/
    xed3_operand_set_outreg(d, XED_REG_AX);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0, 0) -> REXB4=0 REXB=1 SRM=0x0  | OUTREG=XED_REG_R8W*/
    xed3_operand_set_outreg(d, XED_REG_R8W);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(0, 1, 0) -> REXB4=1 REXB=0 SRM=0x0  | OUTREG=XED_REG_R16W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R16W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(1, 1, 0) -> REXB4=1 REXB=1 SRM=0x0  | OUTREG=XED_REG_R24W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R24W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(0, 0, 1) -> REXB4=0 REXB=0 SRM=0x1  | OUTREG=XED_REG_CX*/
    xed3_operand_set_outreg(d, XED_REG_CX);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(1, 0, 1) -> REXB4=0 REXB=1 SRM=0x1  | OUTREG=XED_REG_R9W*/
    xed3_operand_set_outreg(d, XED_REG_R9W);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(0, 1, 1) -> REXB4=1 REXB=0 SRM=0x1  | OUTREG=XED_REG_R17W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R17W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(1, 1, 1) -> REXB4=1 REXB=1 SRM=0x1  | OUTREG=XED_REG_R25W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R25W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 0, 2) -> REXB4=0 REXB=0 SRM=0x2  | OUTREG=XED_REG_DX*/
    xed3_operand_set_outreg(d, XED_REG_DX);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 0, 2) -> REXB4=0 REXB=1 SRM=0x2  | OUTREG=XED_REG_R10W*/
    xed3_operand_set_outreg(d, XED_REG_R10W);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(0, 1, 2) -> REXB4=1 REXB=0 SRM=0x2  | OUTREG=XED_REG_R18W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R18W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(1, 1, 2) -> REXB4=1 REXB=1 SRM=0x2  | OUTREG=XED_REG_R26W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R26W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(0, 0, 3) -> REXB4=0 REXB=0 SRM=0x3  | OUTREG=XED_REG_BX*/
    xed3_operand_set_outreg(d, XED_REG_BX);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(1, 0, 3) -> REXB4=0 REXB=1 SRM=0x3  | OUTREG=XED_REG_R11W*/
    xed3_operand_set_outreg(d, XED_REG_R11W);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(0, 1, 3) -> REXB4=1 REXB=0 SRM=0x3  | OUTREG=XED_REG_R19W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R19W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(1, 1, 3) -> REXB4=1 REXB=1 SRM=0x3  | OUTREG=XED_REG_R27W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R27W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 16: /*(0, 0, 4) -> REXB4=0 REXB=0 SRM=0x4  | OUTREG=XED_REG_SP*/
    xed3_operand_set_outreg(d, XED_REG_SP);
/*pacify the compiler */
(void)d;
    break;
case 17: /*(1, 0, 4) -> REXB4=0 REXB=1 SRM=0x4  | OUTREG=XED_REG_R12W*/
    xed3_operand_set_outreg(d, XED_REG_R12W);
/*pacify the compiler */
(void)d;
    break;
case 18: /*(0, 1, 4) -> REXB4=1 REXB=0 SRM=0x4  | OUTREG=XED_REG_R20W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R20W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 19: /*(1, 1, 4) -> REXB4=1 REXB=1 SRM=0x4  | OUTREG=XED_REG_R28W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R28W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 20: /*(0, 0, 5) -> REXB4=0 REXB=0 SRM=0x5  | OUTREG=XED_REG_BP*/
    xed3_operand_set_outreg(d, XED_REG_BP);
/*pacify the compiler */
(void)d;
    break;
case 21: /*(1, 0, 5) -> REXB4=0 REXB=1 SRM=0x5  | OUTREG=XED_REG_R13W*/
    xed3_operand_set_outreg(d, XED_REG_R13W);
/*pacify the compiler */
(void)d;
    break;
case 22: /*(0, 1, 5) -> REXB4=1 REXB=0 SRM=0x5  | OUTREG=XED_REG_R21W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R21W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 23: /*(1, 1, 5) -> REXB4=1 REXB=1 SRM=0x5  | OUTREG=XED_REG_R29W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R29W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 24: /*(0, 0, 6) -> REXB4=0 REXB=0 SRM=0x6  | OUTREG=XED_REG_SI*/
    xed3_operand_set_outreg(d, XED_REG_SI);
/*pacify the compiler */
(void)d;
    break;
case 25: /*(1, 0, 6) -> REXB4=0 REXB=1 SRM=0x6  | OUTREG=XED_REG_R14W*/
    xed3_operand_set_outreg(d, XED_REG_R14W);
/*pacify the compiler */
(void)d;
    break;
case 26: /*(0, 1, 6) -> REXB4=1 REXB=0 SRM=0x6  | OUTREG=XED_REG_R22W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R22W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 27: /*(1, 1, 6) -> REXB4=1 REXB=1 SRM=0x6  | OUTREG=XED_REG_R30W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R30W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 28: /*(0, 0, 7) -> REXB4=0 REXB=0 SRM=0x7  | OUTREG=XED_REG_DI*/
    xed3_operand_set_outreg(d, XED_REG_DI);
/*pacify the compiler */
(void)d;
    break;
case 29: /*(1, 0, 7) -> REXB4=0 REXB=1 SRM=0x7  | OUTREG=XED_REG_R15W*/
    xed3_operand_set_outreg(d, XED_REG_R15W);
/*pacify the compiler */
(void)d;
    break;
case 30: /*(0, 1, 7) -> REXB4=1 REXB=0 SRM=0x7  | OUTREG=XED_REG_R23W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R23W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 31: /*(1, 1, 7) -> REXB4=1 REXB=1 SRM=0x7  | OUTREG=XED_REG_R31W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R31W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_CR_R(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_reg(d)) << ((0));
key += (xed3_operand_get_rexr(d)) << ((3));
key += (xed3_operand_get_rexr4(d)) << ((4));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0, 0) -> REXR4=0 REXR=0 REG=0x0  | OUTREG=XED_REG_CR0*/
    xed3_operand_set_outreg(d, XED_REG_CR0);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0, 0) -> REXR4=0 REXR=0 REG=0x1  | OUTREG=XED_REG_ERROR  enc*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2, 0, 0) -> REXR4=0 REXR=0 REG=0x2  | OUTREG=XED_REG_CR2*/
    xed3_operand_set_outreg(d, XED_REG_CR2);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3, 0, 0) -> REXR4=0 REXR=0 REG=0x3  | OUTREG=XED_REG_CR3*/
    xed3_operand_set_outreg(d, XED_REG_CR3);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4, 0, 0) -> REXR4=0 REXR=0 REG=0x4  | OUTREG=XED_REG_CR4*/
    xed3_operand_set_outreg(d, XED_REG_CR4);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5, 0, 0) -> REXR4=0 REXR=0 REG=0x5  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6, 0, 0) -> REXR4=0 REXR=0 REG=0x6  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7, 0, 0) -> REXR4=0 REXR=0 REG=0x7  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 1, 0) -> REXR4=0 REXR=1 REG=0x0  | OUTREG=XED_REG_CR8*/
    xed3_operand_set_outreg(d, XED_REG_CR8);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 1, 0) -> REXR4=0 REXR=1 REG=0x1  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(2, 1, 0) -> REXR4=0 REXR=1 REG=0x2  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(3, 1, 0) -> REXR4=0 REXR=1 REG=0x3  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(4, 1, 0) -> REXR4=0 REXR=1 REG=0x4  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(5, 1, 0) -> REXR4=0 REXR=1 REG=0x5  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(6, 1, 0) -> REXR4=0 REXR=1 REG=0x6  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(7, 1, 0) -> REXR4=0 REXR=1 REG=0x7  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 16: /*(0, 0, 1) -> REXR4=1                 | OUTREG=XED_REG_ERROR*/
case 24: /*(0, 1, 1) -> REXR4=1                 | OUTREG=XED_REG_ERROR*/
case 17: /*(1, 0, 1) -> REXR4=1                 | OUTREG=XED_REG_ERROR*/
case 25: /*(1, 1, 1) -> REXR4=1                 | OUTREG=XED_REG_ERROR*/
case 18: /*(2, 0, 1) -> REXR4=1                 | OUTREG=XED_REG_ERROR*/
case 26: /*(2, 1, 1) -> REXR4=1                 | OUTREG=XED_REG_ERROR*/
case 19: /*(3, 0, 1) -> REXR4=1                 | OUTREG=XED_REG_ERROR*/
case 27: /*(3, 1, 1) -> REXR4=1                 | OUTREG=XED_REG_ERROR*/
case 20: /*(4, 0, 1) -> REXR4=1                 | OUTREG=XED_REG_ERROR*/
case 28: /*(4, 1, 1) -> REXR4=1                 | OUTREG=XED_REG_ERROR*/
case 21: /*(5, 0, 1) -> REXR4=1                 | OUTREG=XED_REG_ERROR*/
case 29: /*(5, 1, 1) -> REXR4=1                 | OUTREG=XED_REG_ERROR*/
case 22: /*(6, 0, 1) -> REXR4=1                 | OUTREG=XED_REG_ERROR*/
case 30: /*(6, 1, 1) -> REXR4=1                 | OUTREG=XED_REG_ERROR*/
case 23: /*(7, 0, 1) -> REXR4=1                 | OUTREG=XED_REG_ERROR*/
case 31: /*(7, 1, 1) -> REXR4=1                 | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_CR_B(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_rexb(d)) << ((0));
key += (xed3_operand_get_rexr4(d)) << ((1));
key += (xed3_operand_get_rm(d)) << ((2));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0, 0) -> REXR4=0 REXB=0 RM=0x0  | OUTREG=XED_REG_CR0*/
    xed3_operand_set_outreg(d, XED_REG_CR0);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0, 0) -> REXR4=0 REXB=1 RM=0x0  | OUTREG=XED_REG_CR8*/
    xed3_operand_set_outreg(d, XED_REG_CR8);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(0, 1, 0) -> REXR4=1                | OUTREG=XED_REG_ERROR*/
case 6: /*(0, 1, 1) -> REXR4=1                | OUTREG=XED_REG_ERROR*/
case 10: /*(0, 1, 2) -> REXR4=1                | OUTREG=XED_REG_ERROR*/
case 14: /*(0, 1, 3) -> REXR4=1                | OUTREG=XED_REG_ERROR*/
case 18: /*(0, 1, 4) -> REXR4=1                | OUTREG=XED_REG_ERROR*/
case 22: /*(0, 1, 5) -> REXR4=1                | OUTREG=XED_REG_ERROR*/
case 26: /*(0, 1, 6) -> REXR4=1                | OUTREG=XED_REG_ERROR*/
case 30: /*(0, 1, 7) -> REXR4=1                | OUTREG=XED_REG_ERROR*/
case 3: /*(1, 1, 0) -> REXR4=1                | OUTREG=XED_REG_ERROR*/
case 7: /*(1, 1, 1) -> REXR4=1                | OUTREG=XED_REG_ERROR*/
case 11: /*(1, 1, 2) -> REXR4=1                | OUTREG=XED_REG_ERROR*/
case 15: /*(1, 1, 3) -> REXR4=1                | OUTREG=XED_REG_ERROR*/
case 19: /*(1, 1, 4) -> REXR4=1                | OUTREG=XED_REG_ERROR*/
case 23: /*(1, 1, 5) -> REXR4=1                | OUTREG=XED_REG_ERROR*/
case 27: /*(1, 1, 6) -> REXR4=1                | OUTREG=XED_REG_ERROR*/
case 31: /*(1, 1, 7) -> REXR4=1                | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(0, 0, 1) -> REXR4=0 REXB=0 RM=0x1  | OUTREG=XED_REG_ERROR   enc*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(1, 0, 1) -> REXR4=0 REXB=1 RM=0x1  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 0, 2) -> REXR4=0 REXB=0 RM=0x2  | OUTREG=XED_REG_CR2*/
    xed3_operand_set_outreg(d, XED_REG_CR2);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 0, 2) -> REXR4=0 REXB=1 RM=0x2  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(0, 0, 3) -> REXR4=0 REXB=0 RM=0x3  | OUTREG=XED_REG_CR3*/
    xed3_operand_set_outreg(d, XED_REG_CR3);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(1, 0, 3) -> REXR4=0 REXB=1 RM=0x3  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 16: /*(0, 0, 4) -> REXR4=0 REXB=0 RM=0x4  | OUTREG=XED_REG_CR4*/
    xed3_operand_set_outreg(d, XED_REG_CR4);
/*pacify the compiler */
(void)d;
    break;
case 17: /*(1, 0, 4) -> REXR4=0 REXB=1 RM=0x4  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 20: /*(0, 0, 5) -> REXR4=0 REXB=0 RM=0x5  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 21: /*(1, 0, 5) -> REXR4=0 REXB=1 RM=0x5  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 24: /*(0, 0, 6) -> REXR4=0 REXB=0 RM=0x6  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 25: /*(1, 0, 6) -> REXR4=0 REXB=1 RM=0x6  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 28: /*(0, 0, 7) -> REXR4=0 REXB=0 RM=0x7  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 29: /*(1, 0, 7) -> REXR4=0 REXB=1 RM=0x7  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_DR_R(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_reg(d)) << ((0));
key += (xed3_operand_get_rexr(d)) << ((3));
key += (xed3_operand_get_rexr4(d)) << ((4));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0, 0) -> REXR4=0 REXR=0 REG=0x0  | OUTREG=XED_REG_DR0*/
    xed3_operand_set_outreg(d, XED_REG_DR0);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0, 0) -> REXR4=0 REXR=0 REG=0x1  | OUTREG=XED_REG_DR1*/
    xed3_operand_set_outreg(d, XED_REG_DR1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2, 0, 0) -> REXR4=0 REXR=0 REG=0x2  | OUTREG=XED_REG_DR2*/
    xed3_operand_set_outreg(d, XED_REG_DR2);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3, 0, 0) -> REXR4=0 REXR=0 REG=0x3  | OUTREG=XED_REG_DR3*/
    xed3_operand_set_outreg(d, XED_REG_DR3);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4, 0, 0) -> REXR4=0 REXR=0 REG=0x4  | OUTREG=XED_REG_DR4*/
    xed3_operand_set_outreg(d, XED_REG_DR4);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5, 0, 0) -> REXR4=0 REXR=0 REG=0x5  | OUTREG=XED_REG_DR5*/
    xed3_operand_set_outreg(d, XED_REG_DR5);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6, 0, 0) -> REXR4=0 REXR=0 REG=0x6  | OUTREG=XED_REG_DR6*/
    xed3_operand_set_outreg(d, XED_REG_DR6);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7, 0, 0) -> REXR4=0 REXR=0 REG=0x7  | OUTREG=XED_REG_DR7*/
    xed3_operand_set_outreg(d, XED_REG_DR7);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 1, 0) -> REXR4=0 REXR=1 REG=0x0  | OUTREG=XED_REG_ERROR enc*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 1, 0) -> REXR4=0 REXR=1 REG=0x1  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(2, 1, 0) -> REXR4=0 REXR=1 REG=0x2  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(3, 1, 0) -> REXR4=0 REXR=1 REG=0x3  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(4, 1, 0) -> REXR4=0 REXR=1 REG=0x4  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(5, 1, 0) -> REXR4=0 REXR=1 REG=0x5  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(6, 1, 0) -> REXR4=0 REXR=1 REG=0x6  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(7, 1, 0) -> REXR4=0 REXR=1 REG=0x7  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 16: /*(0, 0, 1) -> REXR4=1                 | OUTREG=XED_REG_ERROR*/
case 24: /*(0, 1, 1) -> REXR4=1                 | OUTREG=XED_REG_ERROR*/
case 17: /*(1, 0, 1) -> REXR4=1                 | OUTREG=XED_REG_ERROR*/
case 25: /*(1, 1, 1) -> REXR4=1                 | OUTREG=XED_REG_ERROR*/
case 18: /*(2, 0, 1) -> REXR4=1                 | OUTREG=XED_REG_ERROR*/
case 26: /*(2, 1, 1) -> REXR4=1                 | OUTREG=XED_REG_ERROR*/
case 19: /*(3, 0, 1) -> REXR4=1                 | OUTREG=XED_REG_ERROR*/
case 27: /*(3, 1, 1) -> REXR4=1                 | OUTREG=XED_REG_ERROR*/
case 20: /*(4, 0, 1) -> REXR4=1                 | OUTREG=XED_REG_ERROR*/
case 28: /*(4, 1, 1) -> REXR4=1                 | OUTREG=XED_REG_ERROR*/
case 21: /*(5, 0, 1) -> REXR4=1                 | OUTREG=XED_REG_ERROR*/
case 29: /*(5, 1, 1) -> REXR4=1                 | OUTREG=XED_REG_ERROR*/
case 22: /*(6, 0, 1) -> REXR4=1                 | OUTREG=XED_REG_ERROR*/
case 30: /*(6, 1, 1) -> REXR4=1                 | OUTREG=XED_REG_ERROR*/
case 23: /*(7, 0, 1) -> REXR4=1                 | OUTREG=XED_REG_ERROR*/
case 31: /*(7, 1, 1) -> REXR4=1                 | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_GPR8_R(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_reg(d)) << ((0));
key += (xed3_operand_get_rex(d)) << ((3));
key += (xed3_operand_get_rex2(d)) << ((4));
key += (xed3_operand_get_rexr(d)) << ((5));
key += (xed3_operand_get_rexr4(d)) << ((6));
key += (xed3_operand_get_vexvalid(d)) << ((7));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0, 0, 0, 0, 0) -> REXR4=0 REXR=0 REG=0x0  | OUTREG=XED_REG_AL*/
case 128: /*(0, 0, 0, 0, 0, 1) -> REXR4=0 REXR=0 REG=0x0  | OUTREG=XED_REG_AL*/
case 256: /*(0, 0, 0, 0, 0, 2) -> REXR4=0 REXR=0 REG=0x0  | OUTREG=XED_REG_AL*/
case 384: /*(0, 0, 0, 0, 0, 3) -> REXR4=0 REXR=0 REG=0x0  | OUTREG=XED_REG_AL*/
case 16: /*(0, 0, 1, 0, 0, 0) -> REXR4=0 REXR=0 REG=0x0  | OUTREG=XED_REG_AL*/
case 144: /*(0, 0, 1, 0, 0, 1) -> REXR4=0 REXR=0 REG=0x0  | OUTREG=XED_REG_AL*/
case 272: /*(0, 0, 1, 0, 0, 2) -> REXR4=0 REXR=0 REG=0x0  | OUTREG=XED_REG_AL*/
case 400: /*(0, 0, 1, 0, 0, 3) -> REXR4=0 REXR=0 REG=0x0  | OUTREG=XED_REG_AL*/
case 8: /*(0, 1, 0, 0, 0, 0) -> REXR4=0 REXR=0 REG=0x0  | OUTREG=XED_REG_AL*/
case 136: /*(0, 1, 0, 0, 0, 1) -> REXR4=0 REXR=0 REG=0x0  | OUTREG=XED_REG_AL*/
case 264: /*(0, 1, 0, 0, 0, 2) -> REXR4=0 REXR=0 REG=0x0  | OUTREG=XED_REG_AL*/
case 392: /*(0, 1, 0, 0, 0, 3) -> REXR4=0 REXR=0 REG=0x0  | OUTREG=XED_REG_AL*/
case 24: /*(0, 1, 1, 0, 0, 0) -> REXR4=0 REXR=0 REG=0x0  | OUTREG=XED_REG_AL*/
case 152: /*(0, 1, 1, 0, 0, 1) -> REXR4=0 REXR=0 REG=0x0  | OUTREG=XED_REG_AL*/
case 280: /*(0, 1, 1, 0, 0, 2) -> REXR4=0 REXR=0 REG=0x0  | OUTREG=XED_REG_AL*/
case 408: /*(0, 1, 1, 0, 0, 3) -> REXR4=0 REXR=0 REG=0x0  | OUTREG=XED_REG_AL*/
    xed3_operand_set_outreg(d, XED_REG_AL);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0, 0, 0, 0, 0) -> REXR4=0 REXR=0 REG=0x1  | OUTREG=XED_REG_CL*/
case 129: /*(1, 0, 0, 0, 0, 1) -> REXR4=0 REXR=0 REG=0x1  | OUTREG=XED_REG_CL*/
case 257: /*(1, 0, 0, 0, 0, 2) -> REXR4=0 REXR=0 REG=0x1  | OUTREG=XED_REG_CL*/
case 385: /*(1, 0, 0, 0, 0, 3) -> REXR4=0 REXR=0 REG=0x1  | OUTREG=XED_REG_CL*/
case 17: /*(1, 0, 1, 0, 0, 0) -> REXR4=0 REXR=0 REG=0x1  | OUTREG=XED_REG_CL*/
case 145: /*(1, 0, 1, 0, 0, 1) -> REXR4=0 REXR=0 REG=0x1  | OUTREG=XED_REG_CL*/
case 273: /*(1, 0, 1, 0, 0, 2) -> REXR4=0 REXR=0 REG=0x1  | OUTREG=XED_REG_CL*/
case 401: /*(1, 0, 1, 0, 0, 3) -> REXR4=0 REXR=0 REG=0x1  | OUTREG=XED_REG_CL*/
case 9: /*(1, 1, 0, 0, 0, 0) -> REXR4=0 REXR=0 REG=0x1  | OUTREG=XED_REG_CL*/
case 137: /*(1, 1, 0, 0, 0, 1) -> REXR4=0 REXR=0 REG=0x1  | OUTREG=XED_REG_CL*/
case 265: /*(1, 1, 0, 0, 0, 2) -> REXR4=0 REXR=0 REG=0x1  | OUTREG=XED_REG_CL*/
case 393: /*(1, 1, 0, 0, 0, 3) -> REXR4=0 REXR=0 REG=0x1  | OUTREG=XED_REG_CL*/
case 25: /*(1, 1, 1, 0, 0, 0) -> REXR4=0 REXR=0 REG=0x1  | OUTREG=XED_REG_CL*/
case 153: /*(1, 1, 1, 0, 0, 1) -> REXR4=0 REXR=0 REG=0x1  | OUTREG=XED_REG_CL*/
case 281: /*(1, 1, 1, 0, 0, 2) -> REXR4=0 REXR=0 REG=0x1  | OUTREG=XED_REG_CL*/
case 409: /*(1, 1, 1, 0, 0, 3) -> REXR4=0 REXR=0 REG=0x1  | OUTREG=XED_REG_CL*/
    xed3_operand_set_outreg(d, XED_REG_CL);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2, 0, 0, 0, 0, 0) -> REXR4=0 REXR=0 REG=0x2  | OUTREG=XED_REG_DL*/
case 130: /*(2, 0, 0, 0, 0, 1) -> REXR4=0 REXR=0 REG=0x2  | OUTREG=XED_REG_DL*/
case 258: /*(2, 0, 0, 0, 0, 2) -> REXR4=0 REXR=0 REG=0x2  | OUTREG=XED_REG_DL*/
case 386: /*(2, 0, 0, 0, 0, 3) -> REXR4=0 REXR=0 REG=0x2  | OUTREG=XED_REG_DL*/
case 18: /*(2, 0, 1, 0, 0, 0) -> REXR4=0 REXR=0 REG=0x2  | OUTREG=XED_REG_DL*/
case 146: /*(2, 0, 1, 0, 0, 1) -> REXR4=0 REXR=0 REG=0x2  | OUTREG=XED_REG_DL*/
case 274: /*(2, 0, 1, 0, 0, 2) -> REXR4=0 REXR=0 REG=0x2  | OUTREG=XED_REG_DL*/
case 402: /*(2, 0, 1, 0, 0, 3) -> REXR4=0 REXR=0 REG=0x2  | OUTREG=XED_REG_DL*/
case 10: /*(2, 1, 0, 0, 0, 0) -> REXR4=0 REXR=0 REG=0x2  | OUTREG=XED_REG_DL*/
case 138: /*(2, 1, 0, 0, 0, 1) -> REXR4=0 REXR=0 REG=0x2  | OUTREG=XED_REG_DL*/
case 266: /*(2, 1, 0, 0, 0, 2) -> REXR4=0 REXR=0 REG=0x2  | OUTREG=XED_REG_DL*/
case 394: /*(2, 1, 0, 0, 0, 3) -> REXR4=0 REXR=0 REG=0x2  | OUTREG=XED_REG_DL*/
case 26: /*(2, 1, 1, 0, 0, 0) -> REXR4=0 REXR=0 REG=0x2  | OUTREG=XED_REG_DL*/
case 154: /*(2, 1, 1, 0, 0, 1) -> REXR4=0 REXR=0 REG=0x2  | OUTREG=XED_REG_DL*/
case 282: /*(2, 1, 1, 0, 0, 2) -> REXR4=0 REXR=0 REG=0x2  | OUTREG=XED_REG_DL*/
case 410: /*(2, 1, 1, 0, 0, 3) -> REXR4=0 REXR=0 REG=0x2  | OUTREG=XED_REG_DL*/
    xed3_operand_set_outreg(d, XED_REG_DL);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3, 0, 0, 0, 0, 0) -> REXR4=0 REXR=0 REG=0x3  | OUTREG=XED_REG_BL*/
case 131: /*(3, 0, 0, 0, 0, 1) -> REXR4=0 REXR=0 REG=0x3  | OUTREG=XED_REG_BL*/
case 259: /*(3, 0, 0, 0, 0, 2) -> REXR4=0 REXR=0 REG=0x3  | OUTREG=XED_REG_BL*/
case 387: /*(3, 0, 0, 0, 0, 3) -> REXR4=0 REXR=0 REG=0x3  | OUTREG=XED_REG_BL*/
case 19: /*(3, 0, 1, 0, 0, 0) -> REXR4=0 REXR=0 REG=0x3  | OUTREG=XED_REG_BL*/
case 147: /*(3, 0, 1, 0, 0, 1) -> REXR4=0 REXR=0 REG=0x3  | OUTREG=XED_REG_BL*/
case 275: /*(3, 0, 1, 0, 0, 2) -> REXR4=0 REXR=0 REG=0x3  | OUTREG=XED_REG_BL*/
case 403: /*(3, 0, 1, 0, 0, 3) -> REXR4=0 REXR=0 REG=0x3  | OUTREG=XED_REG_BL*/
case 11: /*(3, 1, 0, 0, 0, 0) -> REXR4=0 REXR=0 REG=0x3  | OUTREG=XED_REG_BL*/
case 139: /*(3, 1, 0, 0, 0, 1) -> REXR4=0 REXR=0 REG=0x3  | OUTREG=XED_REG_BL*/
case 267: /*(3, 1, 0, 0, 0, 2) -> REXR4=0 REXR=0 REG=0x3  | OUTREG=XED_REG_BL*/
case 395: /*(3, 1, 0, 0, 0, 3) -> REXR4=0 REXR=0 REG=0x3  | OUTREG=XED_REG_BL*/
case 27: /*(3, 1, 1, 0, 0, 0) -> REXR4=0 REXR=0 REG=0x3  | OUTREG=XED_REG_BL*/
case 155: /*(3, 1, 1, 0, 0, 1) -> REXR4=0 REXR=0 REG=0x3  | OUTREG=XED_REG_BL*/
case 283: /*(3, 1, 1, 0, 0, 2) -> REXR4=0 REXR=0 REG=0x3  | OUTREG=XED_REG_BL*/
case 411: /*(3, 1, 1, 0, 0, 3) -> REXR4=0 REXR=0 REG=0x3  | OUTREG=XED_REG_BL*/
    xed3_operand_set_outreg(d, XED_REG_BL);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4, 0, 0, 0, 0, 0) -> REXR4=0 REXR=0 REG=0x4  REX=0  REX2=0  VEXVALID!=2 | OUTREG=XED_REG_AH*/
case 132: /*(4, 0, 0, 0, 0, 1) -> REXR4=0 REXR=0 REG=0x4  REX=0  REX2=0  VEXVALID!=2 | OUTREG=XED_REG_AH*/
case 388: /*(4, 0, 0, 0, 0, 3) -> REXR4=0 REXR=0 REG=0x4  REX=0  REX2=0  VEXVALID!=2 | OUTREG=XED_REG_AH*/
    xed3_operand_set_outreg(d, XED_REG_AH);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5, 0, 0, 0, 0, 0) -> REXR4=0 REXR=0 REG=0x5  REX=0  REX2=0  VEXVALID!=2 | OUTREG=XED_REG_CH*/
case 133: /*(5, 0, 0, 0, 0, 1) -> REXR4=0 REXR=0 REG=0x5  REX=0  REX2=0  VEXVALID!=2 | OUTREG=XED_REG_CH*/
case 389: /*(5, 0, 0, 0, 0, 3) -> REXR4=0 REXR=0 REG=0x5  REX=0  REX2=0  VEXVALID!=2 | OUTREG=XED_REG_CH*/
    xed3_operand_set_outreg(d, XED_REG_CH);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6, 0, 0, 0, 0, 0) -> REXR4=0 REXR=0 REG=0x6  REX=0  REX2=0  VEXVALID!=2 | OUTREG=XED_REG_DH*/
case 134: /*(6, 0, 0, 0, 0, 1) -> REXR4=0 REXR=0 REG=0x6  REX=0  REX2=0  VEXVALID!=2 | OUTREG=XED_REG_DH*/
case 390: /*(6, 0, 0, 0, 0, 3) -> REXR4=0 REXR=0 REG=0x6  REX=0  REX2=0  VEXVALID!=2 | OUTREG=XED_REG_DH*/
    xed3_operand_set_outreg(d, XED_REG_DH);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7, 0, 0, 0, 0, 0) -> REXR4=0 REXR=0 REG=0x7  REX=0  REX2=0  VEXVALID!=2 | OUTREG=XED_REG_BH*/
case 135: /*(7, 0, 0, 0, 0, 1) -> REXR4=0 REXR=0 REG=0x7  REX=0  REX2=0  VEXVALID!=2 | OUTREG=XED_REG_BH*/
case 391: /*(7, 0, 0, 0, 0, 3) -> REXR4=0 REXR=0 REG=0x7  REX=0  REX2=0  VEXVALID!=2 | OUTREG=XED_REG_BH*/
    xed3_operand_set_outreg(d, XED_REG_BH);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(4, 1, 0, 0, 0, 0) -> REXR4=0 REXR=0 REG=0x4  REX=1  REX2=0 | OUTREG=XED_REG_SPL*/
case 140: /*(4, 1, 0, 0, 0, 1) -> REXR4=0 REXR=0 REG=0x4  REX=1  REX2=0 | OUTREG=XED_REG_SPL*/
case 268: /*(4, 1, 0, 0, 0, 2) -> REXR4=0 REXR=0 REG=0x4  REX=1  REX2=0 | OUTREG=XED_REG_SPL*/
case 396: /*(4, 1, 0, 0, 0, 3) -> REXR4=0 REXR=0 REG=0x4  REX=1  REX2=0 | OUTREG=XED_REG_SPL*/
    xed3_operand_set_outreg(d, XED_REG_SPL);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(5, 1, 0, 0, 0, 0) -> REXR4=0 REXR=0 REG=0x5  REX=1  REX2=0 | OUTREG=XED_REG_BPL*/
case 141: /*(5, 1, 0, 0, 0, 1) -> REXR4=0 REXR=0 REG=0x5  REX=1  REX2=0 | OUTREG=XED_REG_BPL*/
case 269: /*(5, 1, 0, 0, 0, 2) -> REXR4=0 REXR=0 REG=0x5  REX=1  REX2=0 | OUTREG=XED_REG_BPL*/
case 397: /*(5, 1, 0, 0, 0, 3) -> REXR4=0 REXR=0 REG=0x5  REX=1  REX2=0 | OUTREG=XED_REG_BPL*/
    xed3_operand_set_outreg(d, XED_REG_BPL);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(6, 1, 0, 0, 0, 0) -> REXR4=0 REXR=0 REG=0x6  REX=1  REX2=0 | OUTREG=XED_REG_SIL*/
case 142: /*(6, 1, 0, 0, 0, 1) -> REXR4=0 REXR=0 REG=0x6  REX=1  REX2=0 | OUTREG=XED_REG_SIL*/
case 270: /*(6, 1, 0, 0, 0, 2) -> REXR4=0 REXR=0 REG=0x6  REX=1  REX2=0 | OUTREG=XED_REG_SIL*/
case 398: /*(6, 1, 0, 0, 0, 3) -> REXR4=0 REXR=0 REG=0x6  REX=1  REX2=0 | OUTREG=XED_REG_SIL*/
    xed3_operand_set_outreg(d, XED_REG_SIL);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(7, 1, 0, 0, 0, 0) -> REXR4=0 REXR=0 REG=0x7  REX=1  REX2=0 | OUTREG=XED_REG_DIL*/
case 143: /*(7, 1, 0, 0, 0, 1) -> REXR4=0 REXR=0 REG=0x7  REX=1  REX2=0 | OUTREG=XED_REG_DIL*/
case 271: /*(7, 1, 0, 0, 0, 2) -> REXR4=0 REXR=0 REG=0x7  REX=1  REX2=0 | OUTREG=XED_REG_DIL*/
case 399: /*(7, 1, 0, 0, 0, 3) -> REXR4=0 REXR=0 REG=0x7  REX=1  REX2=0 | OUTREG=XED_REG_DIL*/
    xed3_operand_set_outreg(d, XED_REG_DIL);
/*pacify the compiler */
(void)d;
    break;
case 20: /*(4, 0, 1, 0, 0, 0) -> REXR4=0 REXR=0 REG=0x4         REX2=1 | OUTREG=XED_REG_SPL*/
case 148: /*(4, 0, 1, 0, 0, 1) -> REXR4=0 REXR=0 REG=0x4         REX2=1 | OUTREG=XED_REG_SPL*/
case 276: /*(4, 0, 1, 0, 0, 2) -> REXR4=0 REXR=0 REG=0x4         REX2=1 | OUTREG=XED_REG_SPL*/
case 404: /*(4, 0, 1, 0, 0, 3) -> REXR4=0 REXR=0 REG=0x4         REX2=1 | OUTREG=XED_REG_SPL*/
case 28: /*(4, 1, 1, 0, 0, 0) -> REXR4=0 REXR=0 REG=0x4         REX2=1 | OUTREG=XED_REG_SPL*/
case 156: /*(4, 1, 1, 0, 0, 1) -> REXR4=0 REXR=0 REG=0x4         REX2=1 | OUTREG=XED_REG_SPL*/
case 284: /*(4, 1, 1, 0, 0, 2) -> REXR4=0 REXR=0 REG=0x4         REX2=1 | OUTREG=XED_REG_SPL*/
case 412: /*(4, 1, 1, 0, 0, 3) -> REXR4=0 REXR=0 REG=0x4         REX2=1 | OUTREG=XED_REG_SPL*/
    xed3_operand_set_outreg(d, XED_REG_SPL);
/*pacify the compiler */
(void)d;
    break;
case 21: /*(5, 0, 1, 0, 0, 0) -> REXR4=0 REXR=0 REG=0x5         REX2=1 | OUTREG=XED_REG_BPL*/
case 149: /*(5, 0, 1, 0, 0, 1) -> REXR4=0 REXR=0 REG=0x5         REX2=1 | OUTREG=XED_REG_BPL*/
case 277: /*(5, 0, 1, 0, 0, 2) -> REXR4=0 REXR=0 REG=0x5         REX2=1 | OUTREG=XED_REG_BPL*/
case 405: /*(5, 0, 1, 0, 0, 3) -> REXR4=0 REXR=0 REG=0x5         REX2=1 | OUTREG=XED_REG_BPL*/
case 29: /*(5, 1, 1, 0, 0, 0) -> REXR4=0 REXR=0 REG=0x5         REX2=1 | OUTREG=XED_REG_BPL*/
case 157: /*(5, 1, 1, 0, 0, 1) -> REXR4=0 REXR=0 REG=0x5         REX2=1 | OUTREG=XED_REG_BPL*/
case 285: /*(5, 1, 1, 0, 0, 2) -> REXR4=0 REXR=0 REG=0x5         REX2=1 | OUTREG=XED_REG_BPL*/
case 413: /*(5, 1, 1, 0, 0, 3) -> REXR4=0 REXR=0 REG=0x5         REX2=1 | OUTREG=XED_REG_BPL*/
    xed3_operand_set_outreg(d, XED_REG_BPL);
/*pacify the compiler */
(void)d;
    break;
case 22: /*(6, 0, 1, 0, 0, 0) -> REXR4=0 REXR=0 REG=0x6         REX2=1 | OUTREG=XED_REG_SIL*/
case 150: /*(6, 0, 1, 0, 0, 1) -> REXR4=0 REXR=0 REG=0x6         REX2=1 | OUTREG=XED_REG_SIL*/
case 278: /*(6, 0, 1, 0, 0, 2) -> REXR4=0 REXR=0 REG=0x6         REX2=1 | OUTREG=XED_REG_SIL*/
case 406: /*(6, 0, 1, 0, 0, 3) -> REXR4=0 REXR=0 REG=0x6         REX2=1 | OUTREG=XED_REG_SIL*/
case 30: /*(6, 1, 1, 0, 0, 0) -> REXR4=0 REXR=0 REG=0x6         REX2=1 | OUTREG=XED_REG_SIL*/
case 158: /*(6, 1, 1, 0, 0, 1) -> REXR4=0 REXR=0 REG=0x6         REX2=1 | OUTREG=XED_REG_SIL*/
case 286: /*(6, 1, 1, 0, 0, 2) -> REXR4=0 REXR=0 REG=0x6         REX2=1 | OUTREG=XED_REG_SIL*/
case 414: /*(6, 1, 1, 0, 0, 3) -> REXR4=0 REXR=0 REG=0x6         REX2=1 | OUTREG=XED_REG_SIL*/
    xed3_operand_set_outreg(d, XED_REG_SIL);
/*pacify the compiler */
(void)d;
    break;
case 23: /*(7, 0, 1, 0, 0, 0) -> REXR4=0 REXR=0 REG=0x7         REX2=1 | OUTREG=XED_REG_DIL*/
case 151: /*(7, 0, 1, 0, 0, 1) -> REXR4=0 REXR=0 REG=0x7         REX2=1 | OUTREG=XED_REG_DIL*/
case 279: /*(7, 0, 1, 0, 0, 2) -> REXR4=0 REXR=0 REG=0x7         REX2=1 | OUTREG=XED_REG_DIL*/
case 407: /*(7, 0, 1, 0, 0, 3) -> REXR4=0 REXR=0 REG=0x7         REX2=1 | OUTREG=XED_REG_DIL*/
case 31: /*(7, 1, 1, 0, 0, 0) -> REXR4=0 REXR=0 REG=0x7         REX2=1 | OUTREG=XED_REG_DIL*/
case 159: /*(7, 1, 1, 0, 0, 1) -> REXR4=0 REXR=0 REG=0x7         REX2=1 | OUTREG=XED_REG_DIL*/
case 287: /*(7, 1, 1, 0, 0, 2) -> REXR4=0 REXR=0 REG=0x7         REX2=1 | OUTREG=XED_REG_DIL*/
case 415: /*(7, 1, 1, 0, 0, 3) -> REXR4=0 REXR=0 REG=0x7         REX2=1 | OUTREG=XED_REG_DIL*/
    xed3_operand_set_outreg(d, XED_REG_DIL);
/*pacify the compiler */
(void)d;
    break;
case 32: /*(0, 0, 0, 1, 0, 0) -> REXR4=0 REXR=1 REG=0x0  | OUTREG=XED_REG_R8B*/
case 160: /*(0, 0, 0, 1, 0, 1) -> REXR4=0 REXR=1 REG=0x0  | OUTREG=XED_REG_R8B*/
case 288: /*(0, 0, 0, 1, 0, 2) -> REXR4=0 REXR=1 REG=0x0  | OUTREG=XED_REG_R8B*/
case 416: /*(0, 0, 0, 1, 0, 3) -> REXR4=0 REXR=1 REG=0x0  | OUTREG=XED_REG_R8B*/
case 48: /*(0, 0, 1, 1, 0, 0) -> REXR4=0 REXR=1 REG=0x0  | OUTREG=XED_REG_R8B*/
case 176: /*(0, 0, 1, 1, 0, 1) -> REXR4=0 REXR=1 REG=0x0  | OUTREG=XED_REG_R8B*/
case 304: /*(0, 0, 1, 1, 0, 2) -> REXR4=0 REXR=1 REG=0x0  | OUTREG=XED_REG_R8B*/
case 432: /*(0, 0, 1, 1, 0, 3) -> REXR4=0 REXR=1 REG=0x0  | OUTREG=XED_REG_R8B*/
case 40: /*(0, 1, 0, 1, 0, 0) -> REXR4=0 REXR=1 REG=0x0  | OUTREG=XED_REG_R8B*/
case 168: /*(0, 1, 0, 1, 0, 1) -> REXR4=0 REXR=1 REG=0x0  | OUTREG=XED_REG_R8B*/
case 296: /*(0, 1, 0, 1, 0, 2) -> REXR4=0 REXR=1 REG=0x0  | OUTREG=XED_REG_R8B*/
case 424: /*(0, 1, 0, 1, 0, 3) -> REXR4=0 REXR=1 REG=0x0  | OUTREG=XED_REG_R8B*/
case 56: /*(0, 1, 1, 1, 0, 0) -> REXR4=0 REXR=1 REG=0x0  | OUTREG=XED_REG_R8B*/
case 184: /*(0, 1, 1, 1, 0, 1) -> REXR4=0 REXR=1 REG=0x0  | OUTREG=XED_REG_R8B*/
case 312: /*(0, 1, 1, 1, 0, 2) -> REXR4=0 REXR=1 REG=0x0  | OUTREG=XED_REG_R8B*/
case 440: /*(0, 1, 1, 1, 0, 3) -> REXR4=0 REXR=1 REG=0x0  | OUTREG=XED_REG_R8B*/
    xed3_operand_set_outreg(d, XED_REG_R8B);
/*pacify the compiler */
(void)d;
    break;
case 33: /*(1, 0, 0, 1, 0, 0) -> REXR4=0 REXR=1 REG=0x1  | OUTREG=XED_REG_R9B*/
case 161: /*(1, 0, 0, 1, 0, 1) -> REXR4=0 REXR=1 REG=0x1  | OUTREG=XED_REG_R9B*/
case 289: /*(1, 0, 0, 1, 0, 2) -> REXR4=0 REXR=1 REG=0x1  | OUTREG=XED_REG_R9B*/
case 417: /*(1, 0, 0, 1, 0, 3) -> REXR4=0 REXR=1 REG=0x1  | OUTREG=XED_REG_R9B*/
case 49: /*(1, 0, 1, 1, 0, 0) -> REXR4=0 REXR=1 REG=0x1  | OUTREG=XED_REG_R9B*/
case 177: /*(1, 0, 1, 1, 0, 1) -> REXR4=0 REXR=1 REG=0x1  | OUTREG=XED_REG_R9B*/
case 305: /*(1, 0, 1, 1, 0, 2) -> REXR4=0 REXR=1 REG=0x1  | OUTREG=XED_REG_R9B*/
case 433: /*(1, 0, 1, 1, 0, 3) -> REXR4=0 REXR=1 REG=0x1  | OUTREG=XED_REG_R9B*/
case 41: /*(1, 1, 0, 1, 0, 0) -> REXR4=0 REXR=1 REG=0x1  | OUTREG=XED_REG_R9B*/
case 169: /*(1, 1, 0, 1, 0, 1) -> REXR4=0 REXR=1 REG=0x1  | OUTREG=XED_REG_R9B*/
case 297: /*(1, 1, 0, 1, 0, 2) -> REXR4=0 REXR=1 REG=0x1  | OUTREG=XED_REG_R9B*/
case 425: /*(1, 1, 0, 1, 0, 3) -> REXR4=0 REXR=1 REG=0x1  | OUTREG=XED_REG_R9B*/
case 57: /*(1, 1, 1, 1, 0, 0) -> REXR4=0 REXR=1 REG=0x1  | OUTREG=XED_REG_R9B*/
case 185: /*(1, 1, 1, 1, 0, 1) -> REXR4=0 REXR=1 REG=0x1  | OUTREG=XED_REG_R9B*/
case 313: /*(1, 1, 1, 1, 0, 2) -> REXR4=0 REXR=1 REG=0x1  | OUTREG=XED_REG_R9B*/
case 441: /*(1, 1, 1, 1, 0, 3) -> REXR4=0 REXR=1 REG=0x1  | OUTREG=XED_REG_R9B*/
    xed3_operand_set_outreg(d, XED_REG_R9B);
/*pacify the compiler */
(void)d;
    break;
case 34: /*(2, 0, 0, 1, 0, 0) -> REXR4=0 REXR=1 REG=0x2  | OUTREG=XED_REG_R10B*/
case 162: /*(2, 0, 0, 1, 0, 1) -> REXR4=0 REXR=1 REG=0x2  | OUTREG=XED_REG_R10B*/
case 290: /*(2, 0, 0, 1, 0, 2) -> REXR4=0 REXR=1 REG=0x2  | OUTREG=XED_REG_R10B*/
case 418: /*(2, 0, 0, 1, 0, 3) -> REXR4=0 REXR=1 REG=0x2  | OUTREG=XED_REG_R10B*/
case 50: /*(2, 0, 1, 1, 0, 0) -> REXR4=0 REXR=1 REG=0x2  | OUTREG=XED_REG_R10B*/
case 178: /*(2, 0, 1, 1, 0, 1) -> REXR4=0 REXR=1 REG=0x2  | OUTREG=XED_REG_R10B*/
case 306: /*(2, 0, 1, 1, 0, 2) -> REXR4=0 REXR=1 REG=0x2  | OUTREG=XED_REG_R10B*/
case 434: /*(2, 0, 1, 1, 0, 3) -> REXR4=0 REXR=1 REG=0x2  | OUTREG=XED_REG_R10B*/
case 42: /*(2, 1, 0, 1, 0, 0) -> REXR4=0 REXR=1 REG=0x2  | OUTREG=XED_REG_R10B*/
case 170: /*(2, 1, 0, 1, 0, 1) -> REXR4=0 REXR=1 REG=0x2  | OUTREG=XED_REG_R10B*/
case 298: /*(2, 1, 0, 1, 0, 2) -> REXR4=0 REXR=1 REG=0x2  | OUTREG=XED_REG_R10B*/
case 426: /*(2, 1, 0, 1, 0, 3) -> REXR4=0 REXR=1 REG=0x2  | OUTREG=XED_REG_R10B*/
case 58: /*(2, 1, 1, 1, 0, 0) -> REXR4=0 REXR=1 REG=0x2  | OUTREG=XED_REG_R10B*/
case 186: /*(2, 1, 1, 1, 0, 1) -> REXR4=0 REXR=1 REG=0x2  | OUTREG=XED_REG_R10B*/
case 314: /*(2, 1, 1, 1, 0, 2) -> REXR4=0 REXR=1 REG=0x2  | OUTREG=XED_REG_R10B*/
case 442: /*(2, 1, 1, 1, 0, 3) -> REXR4=0 REXR=1 REG=0x2  | OUTREG=XED_REG_R10B*/
    xed3_operand_set_outreg(d, XED_REG_R10B);
/*pacify the compiler */
(void)d;
    break;
case 35: /*(3, 0, 0, 1, 0, 0) -> REXR4=0 REXR=1 REG=0x3  | OUTREG=XED_REG_R11B*/
case 163: /*(3, 0, 0, 1, 0, 1) -> REXR4=0 REXR=1 REG=0x3  | OUTREG=XED_REG_R11B*/
case 291: /*(3, 0, 0, 1, 0, 2) -> REXR4=0 REXR=1 REG=0x3  | OUTREG=XED_REG_R11B*/
case 419: /*(3, 0, 0, 1, 0, 3) -> REXR4=0 REXR=1 REG=0x3  | OUTREG=XED_REG_R11B*/
case 51: /*(3, 0, 1, 1, 0, 0) -> REXR4=0 REXR=1 REG=0x3  | OUTREG=XED_REG_R11B*/
case 179: /*(3, 0, 1, 1, 0, 1) -> REXR4=0 REXR=1 REG=0x3  | OUTREG=XED_REG_R11B*/
case 307: /*(3, 0, 1, 1, 0, 2) -> REXR4=0 REXR=1 REG=0x3  | OUTREG=XED_REG_R11B*/
case 435: /*(3, 0, 1, 1, 0, 3) -> REXR4=0 REXR=1 REG=0x3  | OUTREG=XED_REG_R11B*/
case 43: /*(3, 1, 0, 1, 0, 0) -> REXR4=0 REXR=1 REG=0x3  | OUTREG=XED_REG_R11B*/
case 171: /*(3, 1, 0, 1, 0, 1) -> REXR4=0 REXR=1 REG=0x3  | OUTREG=XED_REG_R11B*/
case 299: /*(3, 1, 0, 1, 0, 2) -> REXR4=0 REXR=1 REG=0x3  | OUTREG=XED_REG_R11B*/
case 427: /*(3, 1, 0, 1, 0, 3) -> REXR4=0 REXR=1 REG=0x3  | OUTREG=XED_REG_R11B*/
case 59: /*(3, 1, 1, 1, 0, 0) -> REXR4=0 REXR=1 REG=0x3  | OUTREG=XED_REG_R11B*/
case 187: /*(3, 1, 1, 1, 0, 1) -> REXR4=0 REXR=1 REG=0x3  | OUTREG=XED_REG_R11B*/
case 315: /*(3, 1, 1, 1, 0, 2) -> REXR4=0 REXR=1 REG=0x3  | OUTREG=XED_REG_R11B*/
case 443: /*(3, 1, 1, 1, 0, 3) -> REXR4=0 REXR=1 REG=0x3  | OUTREG=XED_REG_R11B*/
    xed3_operand_set_outreg(d, XED_REG_R11B);
/*pacify the compiler */
(void)d;
    break;
case 36: /*(4, 0, 0, 1, 0, 0) -> REXR4=0 REXR=1 REG=0x4  | OUTREG=XED_REG_R12B*/
case 164: /*(4, 0, 0, 1, 0, 1) -> REXR4=0 REXR=1 REG=0x4  | OUTREG=XED_REG_R12B*/
case 292: /*(4, 0, 0, 1, 0, 2) -> REXR4=0 REXR=1 REG=0x4  | OUTREG=XED_REG_R12B*/
case 420: /*(4, 0, 0, 1, 0, 3) -> REXR4=0 REXR=1 REG=0x4  | OUTREG=XED_REG_R12B*/
case 52: /*(4, 0, 1, 1, 0, 0) -> REXR4=0 REXR=1 REG=0x4  | OUTREG=XED_REG_R12B*/
case 180: /*(4, 0, 1, 1, 0, 1) -> REXR4=0 REXR=1 REG=0x4  | OUTREG=XED_REG_R12B*/
case 308: /*(4, 0, 1, 1, 0, 2) -> REXR4=0 REXR=1 REG=0x4  | OUTREG=XED_REG_R12B*/
case 436: /*(4, 0, 1, 1, 0, 3) -> REXR4=0 REXR=1 REG=0x4  | OUTREG=XED_REG_R12B*/
case 44: /*(4, 1, 0, 1, 0, 0) -> REXR4=0 REXR=1 REG=0x4  | OUTREG=XED_REG_R12B*/
case 172: /*(4, 1, 0, 1, 0, 1) -> REXR4=0 REXR=1 REG=0x4  | OUTREG=XED_REG_R12B*/
case 300: /*(4, 1, 0, 1, 0, 2) -> REXR4=0 REXR=1 REG=0x4  | OUTREG=XED_REG_R12B*/
case 428: /*(4, 1, 0, 1, 0, 3) -> REXR4=0 REXR=1 REG=0x4  | OUTREG=XED_REG_R12B*/
case 60: /*(4, 1, 1, 1, 0, 0) -> REXR4=0 REXR=1 REG=0x4  | OUTREG=XED_REG_R12B*/
case 188: /*(4, 1, 1, 1, 0, 1) -> REXR4=0 REXR=1 REG=0x4  | OUTREG=XED_REG_R12B*/
case 316: /*(4, 1, 1, 1, 0, 2) -> REXR4=0 REXR=1 REG=0x4  | OUTREG=XED_REG_R12B*/
case 444: /*(4, 1, 1, 1, 0, 3) -> REXR4=0 REXR=1 REG=0x4  | OUTREG=XED_REG_R12B*/
    xed3_operand_set_outreg(d, XED_REG_R12B);
/*pacify the compiler */
(void)d;
    break;
case 37: /*(5, 0, 0, 1, 0, 0) -> REXR4=0 REXR=1 REG=0x5  | OUTREG=XED_REG_R13B*/
case 165: /*(5, 0, 0, 1, 0, 1) -> REXR4=0 REXR=1 REG=0x5  | OUTREG=XED_REG_R13B*/
case 293: /*(5, 0, 0, 1, 0, 2) -> REXR4=0 REXR=1 REG=0x5  | OUTREG=XED_REG_R13B*/
case 421: /*(5, 0, 0, 1, 0, 3) -> REXR4=0 REXR=1 REG=0x5  | OUTREG=XED_REG_R13B*/
case 53: /*(5, 0, 1, 1, 0, 0) -> REXR4=0 REXR=1 REG=0x5  | OUTREG=XED_REG_R13B*/
case 181: /*(5, 0, 1, 1, 0, 1) -> REXR4=0 REXR=1 REG=0x5  | OUTREG=XED_REG_R13B*/
case 309: /*(5, 0, 1, 1, 0, 2) -> REXR4=0 REXR=1 REG=0x5  | OUTREG=XED_REG_R13B*/
case 437: /*(5, 0, 1, 1, 0, 3) -> REXR4=0 REXR=1 REG=0x5  | OUTREG=XED_REG_R13B*/
case 45: /*(5, 1, 0, 1, 0, 0) -> REXR4=0 REXR=1 REG=0x5  | OUTREG=XED_REG_R13B*/
case 173: /*(5, 1, 0, 1, 0, 1) -> REXR4=0 REXR=1 REG=0x5  | OUTREG=XED_REG_R13B*/
case 301: /*(5, 1, 0, 1, 0, 2) -> REXR4=0 REXR=1 REG=0x5  | OUTREG=XED_REG_R13B*/
case 429: /*(5, 1, 0, 1, 0, 3) -> REXR4=0 REXR=1 REG=0x5  | OUTREG=XED_REG_R13B*/
case 61: /*(5, 1, 1, 1, 0, 0) -> REXR4=0 REXR=1 REG=0x5  | OUTREG=XED_REG_R13B*/
case 189: /*(5, 1, 1, 1, 0, 1) -> REXR4=0 REXR=1 REG=0x5  | OUTREG=XED_REG_R13B*/
case 317: /*(5, 1, 1, 1, 0, 2) -> REXR4=0 REXR=1 REG=0x5  | OUTREG=XED_REG_R13B*/
case 445: /*(5, 1, 1, 1, 0, 3) -> REXR4=0 REXR=1 REG=0x5  | OUTREG=XED_REG_R13B*/
    xed3_operand_set_outreg(d, XED_REG_R13B);
/*pacify the compiler */
(void)d;
    break;
case 38: /*(6, 0, 0, 1, 0, 0) -> REXR4=0 REXR=1 REG=0x6  | OUTREG=XED_REG_R14B*/
case 166: /*(6, 0, 0, 1, 0, 1) -> REXR4=0 REXR=1 REG=0x6  | OUTREG=XED_REG_R14B*/
case 294: /*(6, 0, 0, 1, 0, 2) -> REXR4=0 REXR=1 REG=0x6  | OUTREG=XED_REG_R14B*/
case 422: /*(6, 0, 0, 1, 0, 3) -> REXR4=0 REXR=1 REG=0x6  | OUTREG=XED_REG_R14B*/
case 54: /*(6, 0, 1, 1, 0, 0) -> REXR4=0 REXR=1 REG=0x6  | OUTREG=XED_REG_R14B*/
case 182: /*(6, 0, 1, 1, 0, 1) -> REXR4=0 REXR=1 REG=0x6  | OUTREG=XED_REG_R14B*/
case 310: /*(6, 0, 1, 1, 0, 2) -> REXR4=0 REXR=1 REG=0x6  | OUTREG=XED_REG_R14B*/
case 438: /*(6, 0, 1, 1, 0, 3) -> REXR4=0 REXR=1 REG=0x6  | OUTREG=XED_REG_R14B*/
case 46: /*(6, 1, 0, 1, 0, 0) -> REXR4=0 REXR=1 REG=0x6  | OUTREG=XED_REG_R14B*/
case 174: /*(6, 1, 0, 1, 0, 1) -> REXR4=0 REXR=1 REG=0x6  | OUTREG=XED_REG_R14B*/
case 302: /*(6, 1, 0, 1, 0, 2) -> REXR4=0 REXR=1 REG=0x6  | OUTREG=XED_REG_R14B*/
case 430: /*(6, 1, 0, 1, 0, 3) -> REXR4=0 REXR=1 REG=0x6  | OUTREG=XED_REG_R14B*/
case 62: /*(6, 1, 1, 1, 0, 0) -> REXR4=0 REXR=1 REG=0x6  | OUTREG=XED_REG_R14B*/
case 190: /*(6, 1, 1, 1, 0, 1) -> REXR4=0 REXR=1 REG=0x6  | OUTREG=XED_REG_R14B*/
case 318: /*(6, 1, 1, 1, 0, 2) -> REXR4=0 REXR=1 REG=0x6  | OUTREG=XED_REG_R14B*/
case 446: /*(6, 1, 1, 1, 0, 3) -> REXR4=0 REXR=1 REG=0x6  | OUTREG=XED_REG_R14B*/
    xed3_operand_set_outreg(d, XED_REG_R14B);
/*pacify the compiler */
(void)d;
    break;
case 39: /*(7, 0, 0, 1, 0, 0) -> REXR4=0 REXR=1 REG=0x7  | OUTREG=XED_REG_R15B*/
case 167: /*(7, 0, 0, 1, 0, 1) -> REXR4=0 REXR=1 REG=0x7  | OUTREG=XED_REG_R15B*/
case 295: /*(7, 0, 0, 1, 0, 2) -> REXR4=0 REXR=1 REG=0x7  | OUTREG=XED_REG_R15B*/
case 423: /*(7, 0, 0, 1, 0, 3) -> REXR4=0 REXR=1 REG=0x7  | OUTREG=XED_REG_R15B*/
case 55: /*(7, 0, 1, 1, 0, 0) -> REXR4=0 REXR=1 REG=0x7  | OUTREG=XED_REG_R15B*/
case 183: /*(7, 0, 1, 1, 0, 1) -> REXR4=0 REXR=1 REG=0x7  | OUTREG=XED_REG_R15B*/
case 311: /*(7, 0, 1, 1, 0, 2) -> REXR4=0 REXR=1 REG=0x7  | OUTREG=XED_REG_R15B*/
case 439: /*(7, 0, 1, 1, 0, 3) -> REXR4=0 REXR=1 REG=0x7  | OUTREG=XED_REG_R15B*/
case 47: /*(7, 1, 0, 1, 0, 0) -> REXR4=0 REXR=1 REG=0x7  | OUTREG=XED_REG_R15B*/
case 175: /*(7, 1, 0, 1, 0, 1) -> REXR4=0 REXR=1 REG=0x7  | OUTREG=XED_REG_R15B*/
case 303: /*(7, 1, 0, 1, 0, 2) -> REXR4=0 REXR=1 REG=0x7  | OUTREG=XED_REG_R15B*/
case 431: /*(7, 1, 0, 1, 0, 3) -> REXR4=0 REXR=1 REG=0x7  | OUTREG=XED_REG_R15B*/
case 63: /*(7, 1, 1, 1, 0, 0) -> REXR4=0 REXR=1 REG=0x7  | OUTREG=XED_REG_R15B*/
case 191: /*(7, 1, 1, 1, 0, 1) -> REXR4=0 REXR=1 REG=0x7  | OUTREG=XED_REG_R15B*/
case 319: /*(7, 1, 1, 1, 0, 2) -> REXR4=0 REXR=1 REG=0x7  | OUTREG=XED_REG_R15B*/
case 447: /*(7, 1, 1, 1, 0, 3) -> REXR4=0 REXR=1 REG=0x7  | OUTREG=XED_REG_R15B*/
    xed3_operand_set_outreg(d, XED_REG_R15B);
/*pacify the compiler */
(void)d;
    break;
case 64: /*(0, 0, 0, 0, 1, 0) -> REXR4=1 REXR=0 REG=0x0  | OUTREG=XED_REG_R16B HAS_EGPR=1*/
case 192: /*(0, 0, 0, 0, 1, 1) -> REXR4=1 REXR=0 REG=0x0  | OUTREG=XED_REG_R16B HAS_EGPR=1*/
case 320: /*(0, 0, 0, 0, 1, 2) -> REXR4=1 REXR=0 REG=0x0  | OUTREG=XED_REG_R16B HAS_EGPR=1*/
case 448: /*(0, 0, 0, 0, 1, 3) -> REXR4=1 REXR=0 REG=0x0  | OUTREG=XED_REG_R16B HAS_EGPR=1*/
case 80: /*(0, 0, 1, 0, 1, 0) -> REXR4=1 REXR=0 REG=0x0  | OUTREG=XED_REG_R16B HAS_EGPR=1*/
case 208: /*(0, 0, 1, 0, 1, 1) -> REXR4=1 REXR=0 REG=0x0  | OUTREG=XED_REG_R16B HAS_EGPR=1*/
case 336: /*(0, 0, 1, 0, 1, 2) -> REXR4=1 REXR=0 REG=0x0  | OUTREG=XED_REG_R16B HAS_EGPR=1*/
case 464: /*(0, 0, 1, 0, 1, 3) -> REXR4=1 REXR=0 REG=0x0  | OUTREG=XED_REG_R16B HAS_EGPR=1*/
case 72: /*(0, 1, 0, 0, 1, 0) -> REXR4=1 REXR=0 REG=0x0  | OUTREG=XED_REG_R16B HAS_EGPR=1*/
case 200: /*(0, 1, 0, 0, 1, 1) -> REXR4=1 REXR=0 REG=0x0  | OUTREG=XED_REG_R16B HAS_EGPR=1*/
case 328: /*(0, 1, 0, 0, 1, 2) -> REXR4=1 REXR=0 REG=0x0  | OUTREG=XED_REG_R16B HAS_EGPR=1*/
case 456: /*(0, 1, 0, 0, 1, 3) -> REXR4=1 REXR=0 REG=0x0  | OUTREG=XED_REG_R16B HAS_EGPR=1*/
case 88: /*(0, 1, 1, 0, 1, 0) -> REXR4=1 REXR=0 REG=0x0  | OUTREG=XED_REG_R16B HAS_EGPR=1*/
case 216: /*(0, 1, 1, 0, 1, 1) -> REXR4=1 REXR=0 REG=0x0  | OUTREG=XED_REG_R16B HAS_EGPR=1*/
case 344: /*(0, 1, 1, 0, 1, 2) -> REXR4=1 REXR=0 REG=0x0  | OUTREG=XED_REG_R16B HAS_EGPR=1*/
case 472: /*(0, 1, 1, 0, 1, 3) -> REXR4=1 REXR=0 REG=0x0  | OUTREG=XED_REG_R16B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R16B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 65: /*(1, 0, 0, 0, 1, 0) -> REXR4=1 REXR=0 REG=0x1  | OUTREG=XED_REG_R17B HAS_EGPR=1*/
case 193: /*(1, 0, 0, 0, 1, 1) -> REXR4=1 REXR=0 REG=0x1  | OUTREG=XED_REG_R17B HAS_EGPR=1*/
case 321: /*(1, 0, 0, 0, 1, 2) -> REXR4=1 REXR=0 REG=0x1  | OUTREG=XED_REG_R17B HAS_EGPR=1*/
case 449: /*(1, 0, 0, 0, 1, 3) -> REXR4=1 REXR=0 REG=0x1  | OUTREG=XED_REG_R17B HAS_EGPR=1*/
case 81: /*(1, 0, 1, 0, 1, 0) -> REXR4=1 REXR=0 REG=0x1  | OUTREG=XED_REG_R17B HAS_EGPR=1*/
case 209: /*(1, 0, 1, 0, 1, 1) -> REXR4=1 REXR=0 REG=0x1  | OUTREG=XED_REG_R17B HAS_EGPR=1*/
case 337: /*(1, 0, 1, 0, 1, 2) -> REXR4=1 REXR=0 REG=0x1  | OUTREG=XED_REG_R17B HAS_EGPR=1*/
case 465: /*(1, 0, 1, 0, 1, 3) -> REXR4=1 REXR=0 REG=0x1  | OUTREG=XED_REG_R17B HAS_EGPR=1*/
case 73: /*(1, 1, 0, 0, 1, 0) -> REXR4=1 REXR=0 REG=0x1  | OUTREG=XED_REG_R17B HAS_EGPR=1*/
case 201: /*(1, 1, 0, 0, 1, 1) -> REXR4=1 REXR=0 REG=0x1  | OUTREG=XED_REG_R17B HAS_EGPR=1*/
case 329: /*(1, 1, 0, 0, 1, 2) -> REXR4=1 REXR=0 REG=0x1  | OUTREG=XED_REG_R17B HAS_EGPR=1*/
case 457: /*(1, 1, 0, 0, 1, 3) -> REXR4=1 REXR=0 REG=0x1  | OUTREG=XED_REG_R17B HAS_EGPR=1*/
case 89: /*(1, 1, 1, 0, 1, 0) -> REXR4=1 REXR=0 REG=0x1  | OUTREG=XED_REG_R17B HAS_EGPR=1*/
case 217: /*(1, 1, 1, 0, 1, 1) -> REXR4=1 REXR=0 REG=0x1  | OUTREG=XED_REG_R17B HAS_EGPR=1*/
case 345: /*(1, 1, 1, 0, 1, 2) -> REXR4=1 REXR=0 REG=0x1  | OUTREG=XED_REG_R17B HAS_EGPR=1*/
case 473: /*(1, 1, 1, 0, 1, 3) -> REXR4=1 REXR=0 REG=0x1  | OUTREG=XED_REG_R17B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R17B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 66: /*(2, 0, 0, 0, 1, 0) -> REXR4=1 REXR=0 REG=0x2  | OUTREG=XED_REG_R18B HAS_EGPR=1*/
case 194: /*(2, 0, 0, 0, 1, 1) -> REXR4=1 REXR=0 REG=0x2  | OUTREG=XED_REG_R18B HAS_EGPR=1*/
case 322: /*(2, 0, 0, 0, 1, 2) -> REXR4=1 REXR=0 REG=0x2  | OUTREG=XED_REG_R18B HAS_EGPR=1*/
case 450: /*(2, 0, 0, 0, 1, 3) -> REXR4=1 REXR=0 REG=0x2  | OUTREG=XED_REG_R18B HAS_EGPR=1*/
case 82: /*(2, 0, 1, 0, 1, 0) -> REXR4=1 REXR=0 REG=0x2  | OUTREG=XED_REG_R18B HAS_EGPR=1*/
case 210: /*(2, 0, 1, 0, 1, 1) -> REXR4=1 REXR=0 REG=0x2  | OUTREG=XED_REG_R18B HAS_EGPR=1*/
case 338: /*(2, 0, 1, 0, 1, 2) -> REXR4=1 REXR=0 REG=0x2  | OUTREG=XED_REG_R18B HAS_EGPR=1*/
case 466: /*(2, 0, 1, 0, 1, 3) -> REXR4=1 REXR=0 REG=0x2  | OUTREG=XED_REG_R18B HAS_EGPR=1*/
case 74: /*(2, 1, 0, 0, 1, 0) -> REXR4=1 REXR=0 REG=0x2  | OUTREG=XED_REG_R18B HAS_EGPR=1*/
case 202: /*(2, 1, 0, 0, 1, 1) -> REXR4=1 REXR=0 REG=0x2  | OUTREG=XED_REG_R18B HAS_EGPR=1*/
case 330: /*(2, 1, 0, 0, 1, 2) -> REXR4=1 REXR=0 REG=0x2  | OUTREG=XED_REG_R18B HAS_EGPR=1*/
case 458: /*(2, 1, 0, 0, 1, 3) -> REXR4=1 REXR=0 REG=0x2  | OUTREG=XED_REG_R18B HAS_EGPR=1*/
case 90: /*(2, 1, 1, 0, 1, 0) -> REXR4=1 REXR=0 REG=0x2  | OUTREG=XED_REG_R18B HAS_EGPR=1*/
case 218: /*(2, 1, 1, 0, 1, 1) -> REXR4=1 REXR=0 REG=0x2  | OUTREG=XED_REG_R18B HAS_EGPR=1*/
case 346: /*(2, 1, 1, 0, 1, 2) -> REXR4=1 REXR=0 REG=0x2  | OUTREG=XED_REG_R18B HAS_EGPR=1*/
case 474: /*(2, 1, 1, 0, 1, 3) -> REXR4=1 REXR=0 REG=0x2  | OUTREG=XED_REG_R18B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R18B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 67: /*(3, 0, 0, 0, 1, 0) -> REXR4=1 REXR=0 REG=0x3  | OUTREG=XED_REG_R19B HAS_EGPR=1*/
case 195: /*(3, 0, 0, 0, 1, 1) -> REXR4=1 REXR=0 REG=0x3  | OUTREG=XED_REG_R19B HAS_EGPR=1*/
case 323: /*(3, 0, 0, 0, 1, 2) -> REXR4=1 REXR=0 REG=0x3  | OUTREG=XED_REG_R19B HAS_EGPR=1*/
case 451: /*(3, 0, 0, 0, 1, 3) -> REXR4=1 REXR=0 REG=0x3  | OUTREG=XED_REG_R19B HAS_EGPR=1*/
case 83: /*(3, 0, 1, 0, 1, 0) -> REXR4=1 REXR=0 REG=0x3  | OUTREG=XED_REG_R19B HAS_EGPR=1*/
case 211: /*(3, 0, 1, 0, 1, 1) -> REXR4=1 REXR=0 REG=0x3  | OUTREG=XED_REG_R19B HAS_EGPR=1*/
case 339: /*(3, 0, 1, 0, 1, 2) -> REXR4=1 REXR=0 REG=0x3  | OUTREG=XED_REG_R19B HAS_EGPR=1*/
case 467: /*(3, 0, 1, 0, 1, 3) -> REXR4=1 REXR=0 REG=0x3  | OUTREG=XED_REG_R19B HAS_EGPR=1*/
case 75: /*(3, 1, 0, 0, 1, 0) -> REXR4=1 REXR=0 REG=0x3  | OUTREG=XED_REG_R19B HAS_EGPR=1*/
case 203: /*(3, 1, 0, 0, 1, 1) -> REXR4=1 REXR=0 REG=0x3  | OUTREG=XED_REG_R19B HAS_EGPR=1*/
case 331: /*(3, 1, 0, 0, 1, 2) -> REXR4=1 REXR=0 REG=0x3  | OUTREG=XED_REG_R19B HAS_EGPR=1*/
case 459: /*(3, 1, 0, 0, 1, 3) -> REXR4=1 REXR=0 REG=0x3  | OUTREG=XED_REG_R19B HAS_EGPR=1*/
case 91: /*(3, 1, 1, 0, 1, 0) -> REXR4=1 REXR=0 REG=0x3  | OUTREG=XED_REG_R19B HAS_EGPR=1*/
case 219: /*(3, 1, 1, 0, 1, 1) -> REXR4=1 REXR=0 REG=0x3  | OUTREG=XED_REG_R19B HAS_EGPR=1*/
case 347: /*(3, 1, 1, 0, 1, 2) -> REXR4=1 REXR=0 REG=0x3  | OUTREG=XED_REG_R19B HAS_EGPR=1*/
case 475: /*(3, 1, 1, 0, 1, 3) -> REXR4=1 REXR=0 REG=0x3  | OUTREG=XED_REG_R19B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R19B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 68: /*(4, 0, 0, 0, 1, 0) -> REXR4=1 REXR=0 REG=0x4  | OUTREG=XED_REG_R20B HAS_EGPR=1*/
case 196: /*(4, 0, 0, 0, 1, 1) -> REXR4=1 REXR=0 REG=0x4  | OUTREG=XED_REG_R20B HAS_EGPR=1*/
case 324: /*(4, 0, 0, 0, 1, 2) -> REXR4=1 REXR=0 REG=0x4  | OUTREG=XED_REG_R20B HAS_EGPR=1*/
case 452: /*(4, 0, 0, 0, 1, 3) -> REXR4=1 REXR=0 REG=0x4  | OUTREG=XED_REG_R20B HAS_EGPR=1*/
case 84: /*(4, 0, 1, 0, 1, 0) -> REXR4=1 REXR=0 REG=0x4  | OUTREG=XED_REG_R20B HAS_EGPR=1*/
case 212: /*(4, 0, 1, 0, 1, 1) -> REXR4=1 REXR=0 REG=0x4  | OUTREG=XED_REG_R20B HAS_EGPR=1*/
case 340: /*(4, 0, 1, 0, 1, 2) -> REXR4=1 REXR=0 REG=0x4  | OUTREG=XED_REG_R20B HAS_EGPR=1*/
case 468: /*(4, 0, 1, 0, 1, 3) -> REXR4=1 REXR=0 REG=0x4  | OUTREG=XED_REG_R20B HAS_EGPR=1*/
case 76: /*(4, 1, 0, 0, 1, 0) -> REXR4=1 REXR=0 REG=0x4  | OUTREG=XED_REG_R20B HAS_EGPR=1*/
case 204: /*(4, 1, 0, 0, 1, 1) -> REXR4=1 REXR=0 REG=0x4  | OUTREG=XED_REG_R20B HAS_EGPR=1*/
case 332: /*(4, 1, 0, 0, 1, 2) -> REXR4=1 REXR=0 REG=0x4  | OUTREG=XED_REG_R20B HAS_EGPR=1*/
case 460: /*(4, 1, 0, 0, 1, 3) -> REXR4=1 REXR=0 REG=0x4  | OUTREG=XED_REG_R20B HAS_EGPR=1*/
case 92: /*(4, 1, 1, 0, 1, 0) -> REXR4=1 REXR=0 REG=0x4  | OUTREG=XED_REG_R20B HAS_EGPR=1*/
case 220: /*(4, 1, 1, 0, 1, 1) -> REXR4=1 REXR=0 REG=0x4  | OUTREG=XED_REG_R20B HAS_EGPR=1*/
case 348: /*(4, 1, 1, 0, 1, 2) -> REXR4=1 REXR=0 REG=0x4  | OUTREG=XED_REG_R20B HAS_EGPR=1*/
case 476: /*(4, 1, 1, 0, 1, 3) -> REXR4=1 REXR=0 REG=0x4  | OUTREG=XED_REG_R20B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R20B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 69: /*(5, 0, 0, 0, 1, 0) -> REXR4=1 REXR=0 REG=0x5  | OUTREG=XED_REG_R21B HAS_EGPR=1*/
case 197: /*(5, 0, 0, 0, 1, 1) -> REXR4=1 REXR=0 REG=0x5  | OUTREG=XED_REG_R21B HAS_EGPR=1*/
case 325: /*(5, 0, 0, 0, 1, 2) -> REXR4=1 REXR=0 REG=0x5  | OUTREG=XED_REG_R21B HAS_EGPR=1*/
case 453: /*(5, 0, 0, 0, 1, 3) -> REXR4=1 REXR=0 REG=0x5  | OUTREG=XED_REG_R21B HAS_EGPR=1*/
case 85: /*(5, 0, 1, 0, 1, 0) -> REXR4=1 REXR=0 REG=0x5  | OUTREG=XED_REG_R21B HAS_EGPR=1*/
case 213: /*(5, 0, 1, 0, 1, 1) -> REXR4=1 REXR=0 REG=0x5  | OUTREG=XED_REG_R21B HAS_EGPR=1*/
case 341: /*(5, 0, 1, 0, 1, 2) -> REXR4=1 REXR=0 REG=0x5  | OUTREG=XED_REG_R21B HAS_EGPR=1*/
case 469: /*(5, 0, 1, 0, 1, 3) -> REXR4=1 REXR=0 REG=0x5  | OUTREG=XED_REG_R21B HAS_EGPR=1*/
case 77: /*(5, 1, 0, 0, 1, 0) -> REXR4=1 REXR=0 REG=0x5  | OUTREG=XED_REG_R21B HAS_EGPR=1*/
case 205: /*(5, 1, 0, 0, 1, 1) -> REXR4=1 REXR=0 REG=0x5  | OUTREG=XED_REG_R21B HAS_EGPR=1*/
case 333: /*(5, 1, 0, 0, 1, 2) -> REXR4=1 REXR=0 REG=0x5  | OUTREG=XED_REG_R21B HAS_EGPR=1*/
case 461: /*(5, 1, 0, 0, 1, 3) -> REXR4=1 REXR=0 REG=0x5  | OUTREG=XED_REG_R21B HAS_EGPR=1*/
case 93: /*(5, 1, 1, 0, 1, 0) -> REXR4=1 REXR=0 REG=0x5  | OUTREG=XED_REG_R21B HAS_EGPR=1*/
case 221: /*(5, 1, 1, 0, 1, 1) -> REXR4=1 REXR=0 REG=0x5  | OUTREG=XED_REG_R21B HAS_EGPR=1*/
case 349: /*(5, 1, 1, 0, 1, 2) -> REXR4=1 REXR=0 REG=0x5  | OUTREG=XED_REG_R21B HAS_EGPR=1*/
case 477: /*(5, 1, 1, 0, 1, 3) -> REXR4=1 REXR=0 REG=0x5  | OUTREG=XED_REG_R21B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R21B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 70: /*(6, 0, 0, 0, 1, 0) -> REXR4=1 REXR=0 REG=0x6  | OUTREG=XED_REG_R22B HAS_EGPR=1*/
case 198: /*(6, 0, 0, 0, 1, 1) -> REXR4=1 REXR=0 REG=0x6  | OUTREG=XED_REG_R22B HAS_EGPR=1*/
case 326: /*(6, 0, 0, 0, 1, 2) -> REXR4=1 REXR=0 REG=0x6  | OUTREG=XED_REG_R22B HAS_EGPR=1*/
case 454: /*(6, 0, 0, 0, 1, 3) -> REXR4=1 REXR=0 REG=0x6  | OUTREG=XED_REG_R22B HAS_EGPR=1*/
case 86: /*(6, 0, 1, 0, 1, 0) -> REXR4=1 REXR=0 REG=0x6  | OUTREG=XED_REG_R22B HAS_EGPR=1*/
case 214: /*(6, 0, 1, 0, 1, 1) -> REXR4=1 REXR=0 REG=0x6  | OUTREG=XED_REG_R22B HAS_EGPR=1*/
case 342: /*(6, 0, 1, 0, 1, 2) -> REXR4=1 REXR=0 REG=0x6  | OUTREG=XED_REG_R22B HAS_EGPR=1*/
case 470: /*(6, 0, 1, 0, 1, 3) -> REXR4=1 REXR=0 REG=0x6  | OUTREG=XED_REG_R22B HAS_EGPR=1*/
case 78: /*(6, 1, 0, 0, 1, 0) -> REXR4=1 REXR=0 REG=0x6  | OUTREG=XED_REG_R22B HAS_EGPR=1*/
case 206: /*(6, 1, 0, 0, 1, 1) -> REXR4=1 REXR=0 REG=0x6  | OUTREG=XED_REG_R22B HAS_EGPR=1*/
case 334: /*(6, 1, 0, 0, 1, 2) -> REXR4=1 REXR=0 REG=0x6  | OUTREG=XED_REG_R22B HAS_EGPR=1*/
case 462: /*(6, 1, 0, 0, 1, 3) -> REXR4=1 REXR=0 REG=0x6  | OUTREG=XED_REG_R22B HAS_EGPR=1*/
case 94: /*(6, 1, 1, 0, 1, 0) -> REXR4=1 REXR=0 REG=0x6  | OUTREG=XED_REG_R22B HAS_EGPR=1*/
case 222: /*(6, 1, 1, 0, 1, 1) -> REXR4=1 REXR=0 REG=0x6  | OUTREG=XED_REG_R22B HAS_EGPR=1*/
case 350: /*(6, 1, 1, 0, 1, 2) -> REXR4=1 REXR=0 REG=0x6  | OUTREG=XED_REG_R22B HAS_EGPR=1*/
case 478: /*(6, 1, 1, 0, 1, 3) -> REXR4=1 REXR=0 REG=0x6  | OUTREG=XED_REG_R22B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R22B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 71: /*(7, 0, 0, 0, 1, 0) -> REXR4=1 REXR=0 REG=0x7  | OUTREG=XED_REG_R23B HAS_EGPR=1*/
case 199: /*(7, 0, 0, 0, 1, 1) -> REXR4=1 REXR=0 REG=0x7  | OUTREG=XED_REG_R23B HAS_EGPR=1*/
case 327: /*(7, 0, 0, 0, 1, 2) -> REXR4=1 REXR=0 REG=0x7  | OUTREG=XED_REG_R23B HAS_EGPR=1*/
case 455: /*(7, 0, 0, 0, 1, 3) -> REXR4=1 REXR=0 REG=0x7  | OUTREG=XED_REG_R23B HAS_EGPR=1*/
case 87: /*(7, 0, 1, 0, 1, 0) -> REXR4=1 REXR=0 REG=0x7  | OUTREG=XED_REG_R23B HAS_EGPR=1*/
case 215: /*(7, 0, 1, 0, 1, 1) -> REXR4=1 REXR=0 REG=0x7  | OUTREG=XED_REG_R23B HAS_EGPR=1*/
case 343: /*(7, 0, 1, 0, 1, 2) -> REXR4=1 REXR=0 REG=0x7  | OUTREG=XED_REG_R23B HAS_EGPR=1*/
case 471: /*(7, 0, 1, 0, 1, 3) -> REXR4=1 REXR=0 REG=0x7  | OUTREG=XED_REG_R23B HAS_EGPR=1*/
case 79: /*(7, 1, 0, 0, 1, 0) -> REXR4=1 REXR=0 REG=0x7  | OUTREG=XED_REG_R23B HAS_EGPR=1*/
case 207: /*(7, 1, 0, 0, 1, 1) -> REXR4=1 REXR=0 REG=0x7  | OUTREG=XED_REG_R23B HAS_EGPR=1*/
case 335: /*(7, 1, 0, 0, 1, 2) -> REXR4=1 REXR=0 REG=0x7  | OUTREG=XED_REG_R23B HAS_EGPR=1*/
case 463: /*(7, 1, 0, 0, 1, 3) -> REXR4=1 REXR=0 REG=0x7  | OUTREG=XED_REG_R23B HAS_EGPR=1*/
case 95: /*(7, 1, 1, 0, 1, 0) -> REXR4=1 REXR=0 REG=0x7  | OUTREG=XED_REG_R23B HAS_EGPR=1*/
case 223: /*(7, 1, 1, 0, 1, 1) -> REXR4=1 REXR=0 REG=0x7  | OUTREG=XED_REG_R23B HAS_EGPR=1*/
case 351: /*(7, 1, 1, 0, 1, 2) -> REXR4=1 REXR=0 REG=0x7  | OUTREG=XED_REG_R23B HAS_EGPR=1*/
case 479: /*(7, 1, 1, 0, 1, 3) -> REXR4=1 REXR=0 REG=0x7  | OUTREG=XED_REG_R23B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R23B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 96: /*(0, 0, 0, 1, 1, 0) -> REXR4=1 REXR=1 REG=0x0  | OUTREG=XED_REG_R24B HAS_EGPR=1*/
case 224: /*(0, 0, 0, 1, 1, 1) -> REXR4=1 REXR=1 REG=0x0  | OUTREG=XED_REG_R24B HAS_EGPR=1*/
case 352: /*(0, 0, 0, 1, 1, 2) -> REXR4=1 REXR=1 REG=0x0  | OUTREG=XED_REG_R24B HAS_EGPR=1*/
case 480: /*(0, 0, 0, 1, 1, 3) -> REXR4=1 REXR=1 REG=0x0  | OUTREG=XED_REG_R24B HAS_EGPR=1*/
case 112: /*(0, 0, 1, 1, 1, 0) -> REXR4=1 REXR=1 REG=0x0  | OUTREG=XED_REG_R24B HAS_EGPR=1*/
case 240: /*(0, 0, 1, 1, 1, 1) -> REXR4=1 REXR=1 REG=0x0  | OUTREG=XED_REG_R24B HAS_EGPR=1*/
case 368: /*(0, 0, 1, 1, 1, 2) -> REXR4=1 REXR=1 REG=0x0  | OUTREG=XED_REG_R24B HAS_EGPR=1*/
case 496: /*(0, 0, 1, 1, 1, 3) -> REXR4=1 REXR=1 REG=0x0  | OUTREG=XED_REG_R24B HAS_EGPR=1*/
case 104: /*(0, 1, 0, 1, 1, 0) -> REXR4=1 REXR=1 REG=0x0  | OUTREG=XED_REG_R24B HAS_EGPR=1*/
case 232: /*(0, 1, 0, 1, 1, 1) -> REXR4=1 REXR=1 REG=0x0  | OUTREG=XED_REG_R24B HAS_EGPR=1*/
case 360: /*(0, 1, 0, 1, 1, 2) -> REXR4=1 REXR=1 REG=0x0  | OUTREG=XED_REG_R24B HAS_EGPR=1*/
case 488: /*(0, 1, 0, 1, 1, 3) -> REXR4=1 REXR=1 REG=0x0  | OUTREG=XED_REG_R24B HAS_EGPR=1*/
case 120: /*(0, 1, 1, 1, 1, 0) -> REXR4=1 REXR=1 REG=0x0  | OUTREG=XED_REG_R24B HAS_EGPR=1*/
case 248: /*(0, 1, 1, 1, 1, 1) -> REXR4=1 REXR=1 REG=0x0  | OUTREG=XED_REG_R24B HAS_EGPR=1*/
case 376: /*(0, 1, 1, 1, 1, 2) -> REXR4=1 REXR=1 REG=0x0  | OUTREG=XED_REG_R24B HAS_EGPR=1*/
case 504: /*(0, 1, 1, 1, 1, 3) -> REXR4=1 REXR=1 REG=0x0  | OUTREG=XED_REG_R24B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R24B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 97: /*(1, 0, 0, 1, 1, 0) -> REXR4=1 REXR=1 REG=0x1  | OUTREG=XED_REG_R25B HAS_EGPR=1*/
case 225: /*(1, 0, 0, 1, 1, 1) -> REXR4=1 REXR=1 REG=0x1  | OUTREG=XED_REG_R25B HAS_EGPR=1*/
case 353: /*(1, 0, 0, 1, 1, 2) -> REXR4=1 REXR=1 REG=0x1  | OUTREG=XED_REG_R25B HAS_EGPR=1*/
case 481: /*(1, 0, 0, 1, 1, 3) -> REXR4=1 REXR=1 REG=0x1  | OUTREG=XED_REG_R25B HAS_EGPR=1*/
case 113: /*(1, 0, 1, 1, 1, 0) -> REXR4=1 REXR=1 REG=0x1  | OUTREG=XED_REG_R25B HAS_EGPR=1*/
case 241: /*(1, 0, 1, 1, 1, 1) -> REXR4=1 REXR=1 REG=0x1  | OUTREG=XED_REG_R25B HAS_EGPR=1*/
case 369: /*(1, 0, 1, 1, 1, 2) -> REXR4=1 REXR=1 REG=0x1  | OUTREG=XED_REG_R25B HAS_EGPR=1*/
case 497: /*(1, 0, 1, 1, 1, 3) -> REXR4=1 REXR=1 REG=0x1  | OUTREG=XED_REG_R25B HAS_EGPR=1*/
case 105: /*(1, 1, 0, 1, 1, 0) -> REXR4=1 REXR=1 REG=0x1  | OUTREG=XED_REG_R25B HAS_EGPR=1*/
case 233: /*(1, 1, 0, 1, 1, 1) -> REXR4=1 REXR=1 REG=0x1  | OUTREG=XED_REG_R25B HAS_EGPR=1*/
case 361: /*(1, 1, 0, 1, 1, 2) -> REXR4=1 REXR=1 REG=0x1  | OUTREG=XED_REG_R25B HAS_EGPR=1*/
case 489: /*(1, 1, 0, 1, 1, 3) -> REXR4=1 REXR=1 REG=0x1  | OUTREG=XED_REG_R25B HAS_EGPR=1*/
case 121: /*(1, 1, 1, 1, 1, 0) -> REXR4=1 REXR=1 REG=0x1  | OUTREG=XED_REG_R25B HAS_EGPR=1*/
case 249: /*(1, 1, 1, 1, 1, 1) -> REXR4=1 REXR=1 REG=0x1  | OUTREG=XED_REG_R25B HAS_EGPR=1*/
case 377: /*(1, 1, 1, 1, 1, 2) -> REXR4=1 REXR=1 REG=0x1  | OUTREG=XED_REG_R25B HAS_EGPR=1*/
case 505: /*(1, 1, 1, 1, 1, 3) -> REXR4=1 REXR=1 REG=0x1  | OUTREG=XED_REG_R25B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R25B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 98: /*(2, 0, 0, 1, 1, 0) -> REXR4=1 REXR=1 REG=0x2  | OUTREG=XED_REG_R26B HAS_EGPR=1*/
case 226: /*(2, 0, 0, 1, 1, 1) -> REXR4=1 REXR=1 REG=0x2  | OUTREG=XED_REG_R26B HAS_EGPR=1*/
case 354: /*(2, 0, 0, 1, 1, 2) -> REXR4=1 REXR=1 REG=0x2  | OUTREG=XED_REG_R26B HAS_EGPR=1*/
case 482: /*(2, 0, 0, 1, 1, 3) -> REXR4=1 REXR=1 REG=0x2  | OUTREG=XED_REG_R26B HAS_EGPR=1*/
case 114: /*(2, 0, 1, 1, 1, 0) -> REXR4=1 REXR=1 REG=0x2  | OUTREG=XED_REG_R26B HAS_EGPR=1*/
case 242: /*(2, 0, 1, 1, 1, 1) -> REXR4=1 REXR=1 REG=0x2  | OUTREG=XED_REG_R26B HAS_EGPR=1*/
case 370: /*(2, 0, 1, 1, 1, 2) -> REXR4=1 REXR=1 REG=0x2  | OUTREG=XED_REG_R26B HAS_EGPR=1*/
case 498: /*(2, 0, 1, 1, 1, 3) -> REXR4=1 REXR=1 REG=0x2  | OUTREG=XED_REG_R26B HAS_EGPR=1*/
case 106: /*(2, 1, 0, 1, 1, 0) -> REXR4=1 REXR=1 REG=0x2  | OUTREG=XED_REG_R26B HAS_EGPR=1*/
case 234: /*(2, 1, 0, 1, 1, 1) -> REXR4=1 REXR=1 REG=0x2  | OUTREG=XED_REG_R26B HAS_EGPR=1*/
case 362: /*(2, 1, 0, 1, 1, 2) -> REXR4=1 REXR=1 REG=0x2  | OUTREG=XED_REG_R26B HAS_EGPR=1*/
case 490: /*(2, 1, 0, 1, 1, 3) -> REXR4=1 REXR=1 REG=0x2  | OUTREG=XED_REG_R26B HAS_EGPR=1*/
case 122: /*(2, 1, 1, 1, 1, 0) -> REXR4=1 REXR=1 REG=0x2  | OUTREG=XED_REG_R26B HAS_EGPR=1*/
case 250: /*(2, 1, 1, 1, 1, 1) -> REXR4=1 REXR=1 REG=0x2  | OUTREG=XED_REG_R26B HAS_EGPR=1*/
case 378: /*(2, 1, 1, 1, 1, 2) -> REXR4=1 REXR=1 REG=0x2  | OUTREG=XED_REG_R26B HAS_EGPR=1*/
case 506: /*(2, 1, 1, 1, 1, 3) -> REXR4=1 REXR=1 REG=0x2  | OUTREG=XED_REG_R26B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R26B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 99: /*(3, 0, 0, 1, 1, 0) -> REXR4=1 REXR=1 REG=0x3  | OUTREG=XED_REG_R27B HAS_EGPR=1*/
case 227: /*(3, 0, 0, 1, 1, 1) -> REXR4=1 REXR=1 REG=0x3  | OUTREG=XED_REG_R27B HAS_EGPR=1*/
case 355: /*(3, 0, 0, 1, 1, 2) -> REXR4=1 REXR=1 REG=0x3  | OUTREG=XED_REG_R27B HAS_EGPR=1*/
case 483: /*(3, 0, 0, 1, 1, 3) -> REXR4=1 REXR=1 REG=0x3  | OUTREG=XED_REG_R27B HAS_EGPR=1*/
case 115: /*(3, 0, 1, 1, 1, 0) -> REXR4=1 REXR=1 REG=0x3  | OUTREG=XED_REG_R27B HAS_EGPR=1*/
case 243: /*(3, 0, 1, 1, 1, 1) -> REXR4=1 REXR=1 REG=0x3  | OUTREG=XED_REG_R27B HAS_EGPR=1*/
case 371: /*(3, 0, 1, 1, 1, 2) -> REXR4=1 REXR=1 REG=0x3  | OUTREG=XED_REG_R27B HAS_EGPR=1*/
case 499: /*(3, 0, 1, 1, 1, 3) -> REXR4=1 REXR=1 REG=0x3  | OUTREG=XED_REG_R27B HAS_EGPR=1*/
case 107: /*(3, 1, 0, 1, 1, 0) -> REXR4=1 REXR=1 REG=0x3  | OUTREG=XED_REG_R27B HAS_EGPR=1*/
case 235: /*(3, 1, 0, 1, 1, 1) -> REXR4=1 REXR=1 REG=0x3  | OUTREG=XED_REG_R27B HAS_EGPR=1*/
case 363: /*(3, 1, 0, 1, 1, 2) -> REXR4=1 REXR=1 REG=0x3  | OUTREG=XED_REG_R27B HAS_EGPR=1*/
case 491: /*(3, 1, 0, 1, 1, 3) -> REXR4=1 REXR=1 REG=0x3  | OUTREG=XED_REG_R27B HAS_EGPR=1*/
case 123: /*(3, 1, 1, 1, 1, 0) -> REXR4=1 REXR=1 REG=0x3  | OUTREG=XED_REG_R27B HAS_EGPR=1*/
case 251: /*(3, 1, 1, 1, 1, 1) -> REXR4=1 REXR=1 REG=0x3  | OUTREG=XED_REG_R27B HAS_EGPR=1*/
case 379: /*(3, 1, 1, 1, 1, 2) -> REXR4=1 REXR=1 REG=0x3  | OUTREG=XED_REG_R27B HAS_EGPR=1*/
case 507: /*(3, 1, 1, 1, 1, 3) -> REXR4=1 REXR=1 REG=0x3  | OUTREG=XED_REG_R27B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R27B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 100: /*(4, 0, 0, 1, 1, 0) -> REXR4=1 REXR=1 REG=0x4  | OUTREG=XED_REG_R28B HAS_EGPR=1*/
case 228: /*(4, 0, 0, 1, 1, 1) -> REXR4=1 REXR=1 REG=0x4  | OUTREG=XED_REG_R28B HAS_EGPR=1*/
case 356: /*(4, 0, 0, 1, 1, 2) -> REXR4=1 REXR=1 REG=0x4  | OUTREG=XED_REG_R28B HAS_EGPR=1*/
case 484: /*(4, 0, 0, 1, 1, 3) -> REXR4=1 REXR=1 REG=0x4  | OUTREG=XED_REG_R28B HAS_EGPR=1*/
case 116: /*(4, 0, 1, 1, 1, 0) -> REXR4=1 REXR=1 REG=0x4  | OUTREG=XED_REG_R28B HAS_EGPR=1*/
case 244: /*(4, 0, 1, 1, 1, 1) -> REXR4=1 REXR=1 REG=0x4  | OUTREG=XED_REG_R28B HAS_EGPR=1*/
case 372: /*(4, 0, 1, 1, 1, 2) -> REXR4=1 REXR=1 REG=0x4  | OUTREG=XED_REG_R28B HAS_EGPR=1*/
case 500: /*(4, 0, 1, 1, 1, 3) -> REXR4=1 REXR=1 REG=0x4  | OUTREG=XED_REG_R28B HAS_EGPR=1*/
case 108: /*(4, 1, 0, 1, 1, 0) -> REXR4=1 REXR=1 REG=0x4  | OUTREG=XED_REG_R28B HAS_EGPR=1*/
case 236: /*(4, 1, 0, 1, 1, 1) -> REXR4=1 REXR=1 REG=0x4  | OUTREG=XED_REG_R28B HAS_EGPR=1*/
case 364: /*(4, 1, 0, 1, 1, 2) -> REXR4=1 REXR=1 REG=0x4  | OUTREG=XED_REG_R28B HAS_EGPR=1*/
case 492: /*(4, 1, 0, 1, 1, 3) -> REXR4=1 REXR=1 REG=0x4  | OUTREG=XED_REG_R28B HAS_EGPR=1*/
case 124: /*(4, 1, 1, 1, 1, 0) -> REXR4=1 REXR=1 REG=0x4  | OUTREG=XED_REG_R28B HAS_EGPR=1*/
case 252: /*(4, 1, 1, 1, 1, 1) -> REXR4=1 REXR=1 REG=0x4  | OUTREG=XED_REG_R28B HAS_EGPR=1*/
case 380: /*(4, 1, 1, 1, 1, 2) -> REXR4=1 REXR=1 REG=0x4  | OUTREG=XED_REG_R28B HAS_EGPR=1*/
case 508: /*(4, 1, 1, 1, 1, 3) -> REXR4=1 REXR=1 REG=0x4  | OUTREG=XED_REG_R28B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R28B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 101: /*(5, 0, 0, 1, 1, 0) -> REXR4=1 REXR=1 REG=0x5  | OUTREG=XED_REG_R29B HAS_EGPR=1*/
case 229: /*(5, 0, 0, 1, 1, 1) -> REXR4=1 REXR=1 REG=0x5  | OUTREG=XED_REG_R29B HAS_EGPR=1*/
case 357: /*(5, 0, 0, 1, 1, 2) -> REXR4=1 REXR=1 REG=0x5  | OUTREG=XED_REG_R29B HAS_EGPR=1*/
case 485: /*(5, 0, 0, 1, 1, 3) -> REXR4=1 REXR=1 REG=0x5  | OUTREG=XED_REG_R29B HAS_EGPR=1*/
case 117: /*(5, 0, 1, 1, 1, 0) -> REXR4=1 REXR=1 REG=0x5  | OUTREG=XED_REG_R29B HAS_EGPR=1*/
case 245: /*(5, 0, 1, 1, 1, 1) -> REXR4=1 REXR=1 REG=0x5  | OUTREG=XED_REG_R29B HAS_EGPR=1*/
case 373: /*(5, 0, 1, 1, 1, 2) -> REXR4=1 REXR=1 REG=0x5  | OUTREG=XED_REG_R29B HAS_EGPR=1*/
case 501: /*(5, 0, 1, 1, 1, 3) -> REXR4=1 REXR=1 REG=0x5  | OUTREG=XED_REG_R29B HAS_EGPR=1*/
case 109: /*(5, 1, 0, 1, 1, 0) -> REXR4=1 REXR=1 REG=0x5  | OUTREG=XED_REG_R29B HAS_EGPR=1*/
case 237: /*(5, 1, 0, 1, 1, 1) -> REXR4=1 REXR=1 REG=0x5  | OUTREG=XED_REG_R29B HAS_EGPR=1*/
case 365: /*(5, 1, 0, 1, 1, 2) -> REXR4=1 REXR=1 REG=0x5  | OUTREG=XED_REG_R29B HAS_EGPR=1*/
case 493: /*(5, 1, 0, 1, 1, 3) -> REXR4=1 REXR=1 REG=0x5  | OUTREG=XED_REG_R29B HAS_EGPR=1*/
case 125: /*(5, 1, 1, 1, 1, 0) -> REXR4=1 REXR=1 REG=0x5  | OUTREG=XED_REG_R29B HAS_EGPR=1*/
case 253: /*(5, 1, 1, 1, 1, 1) -> REXR4=1 REXR=1 REG=0x5  | OUTREG=XED_REG_R29B HAS_EGPR=1*/
case 381: /*(5, 1, 1, 1, 1, 2) -> REXR4=1 REXR=1 REG=0x5  | OUTREG=XED_REG_R29B HAS_EGPR=1*/
case 509: /*(5, 1, 1, 1, 1, 3) -> REXR4=1 REXR=1 REG=0x5  | OUTREG=XED_REG_R29B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R29B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 102: /*(6, 0, 0, 1, 1, 0) -> REXR4=1 REXR=1 REG=0x6  | OUTREG=XED_REG_R30B HAS_EGPR=1*/
case 230: /*(6, 0, 0, 1, 1, 1) -> REXR4=1 REXR=1 REG=0x6  | OUTREG=XED_REG_R30B HAS_EGPR=1*/
case 358: /*(6, 0, 0, 1, 1, 2) -> REXR4=1 REXR=1 REG=0x6  | OUTREG=XED_REG_R30B HAS_EGPR=1*/
case 486: /*(6, 0, 0, 1, 1, 3) -> REXR4=1 REXR=1 REG=0x6  | OUTREG=XED_REG_R30B HAS_EGPR=1*/
case 118: /*(6, 0, 1, 1, 1, 0) -> REXR4=1 REXR=1 REG=0x6  | OUTREG=XED_REG_R30B HAS_EGPR=1*/
case 246: /*(6, 0, 1, 1, 1, 1) -> REXR4=1 REXR=1 REG=0x6  | OUTREG=XED_REG_R30B HAS_EGPR=1*/
case 374: /*(6, 0, 1, 1, 1, 2) -> REXR4=1 REXR=1 REG=0x6  | OUTREG=XED_REG_R30B HAS_EGPR=1*/
case 502: /*(6, 0, 1, 1, 1, 3) -> REXR4=1 REXR=1 REG=0x6  | OUTREG=XED_REG_R30B HAS_EGPR=1*/
case 110: /*(6, 1, 0, 1, 1, 0) -> REXR4=1 REXR=1 REG=0x6  | OUTREG=XED_REG_R30B HAS_EGPR=1*/
case 238: /*(6, 1, 0, 1, 1, 1) -> REXR4=1 REXR=1 REG=0x6  | OUTREG=XED_REG_R30B HAS_EGPR=1*/
case 366: /*(6, 1, 0, 1, 1, 2) -> REXR4=1 REXR=1 REG=0x6  | OUTREG=XED_REG_R30B HAS_EGPR=1*/
case 494: /*(6, 1, 0, 1, 1, 3) -> REXR4=1 REXR=1 REG=0x6  | OUTREG=XED_REG_R30B HAS_EGPR=1*/
case 126: /*(6, 1, 1, 1, 1, 0) -> REXR4=1 REXR=1 REG=0x6  | OUTREG=XED_REG_R30B HAS_EGPR=1*/
case 254: /*(6, 1, 1, 1, 1, 1) -> REXR4=1 REXR=1 REG=0x6  | OUTREG=XED_REG_R30B HAS_EGPR=1*/
case 382: /*(6, 1, 1, 1, 1, 2) -> REXR4=1 REXR=1 REG=0x6  | OUTREG=XED_REG_R30B HAS_EGPR=1*/
case 510: /*(6, 1, 1, 1, 1, 3) -> REXR4=1 REXR=1 REG=0x6  | OUTREG=XED_REG_R30B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R30B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 103: /*(7, 0, 0, 1, 1, 0) -> REXR4=1 REXR=1 REG=0x7  | OUTREG=XED_REG_R31B HAS_EGPR=1*/
case 231: /*(7, 0, 0, 1, 1, 1) -> REXR4=1 REXR=1 REG=0x7  | OUTREG=XED_REG_R31B HAS_EGPR=1*/
case 359: /*(7, 0, 0, 1, 1, 2) -> REXR4=1 REXR=1 REG=0x7  | OUTREG=XED_REG_R31B HAS_EGPR=1*/
case 487: /*(7, 0, 0, 1, 1, 3) -> REXR4=1 REXR=1 REG=0x7  | OUTREG=XED_REG_R31B HAS_EGPR=1*/
case 119: /*(7, 0, 1, 1, 1, 0) -> REXR4=1 REXR=1 REG=0x7  | OUTREG=XED_REG_R31B HAS_EGPR=1*/
case 247: /*(7, 0, 1, 1, 1, 1) -> REXR4=1 REXR=1 REG=0x7  | OUTREG=XED_REG_R31B HAS_EGPR=1*/
case 375: /*(7, 0, 1, 1, 1, 2) -> REXR4=1 REXR=1 REG=0x7  | OUTREG=XED_REG_R31B HAS_EGPR=1*/
case 503: /*(7, 0, 1, 1, 1, 3) -> REXR4=1 REXR=1 REG=0x7  | OUTREG=XED_REG_R31B HAS_EGPR=1*/
case 111: /*(7, 1, 0, 1, 1, 0) -> REXR4=1 REXR=1 REG=0x7  | OUTREG=XED_REG_R31B HAS_EGPR=1*/
case 239: /*(7, 1, 0, 1, 1, 1) -> REXR4=1 REXR=1 REG=0x7  | OUTREG=XED_REG_R31B HAS_EGPR=1*/
case 367: /*(7, 1, 0, 1, 1, 2) -> REXR4=1 REXR=1 REG=0x7  | OUTREG=XED_REG_R31B HAS_EGPR=1*/
case 495: /*(7, 1, 0, 1, 1, 3) -> REXR4=1 REXR=1 REG=0x7  | OUTREG=XED_REG_R31B HAS_EGPR=1*/
case 127: /*(7, 1, 1, 1, 1, 0) -> REXR4=1 REXR=1 REG=0x7  | OUTREG=XED_REG_R31B HAS_EGPR=1*/
case 255: /*(7, 1, 1, 1, 1, 1) -> REXR4=1 REXR=1 REG=0x7  | OUTREG=XED_REG_R31B HAS_EGPR=1*/
case 383: /*(7, 1, 1, 1, 1, 2) -> REXR4=1 REXR=1 REG=0x7  | OUTREG=XED_REG_R31B HAS_EGPR=1*/
case 511: /*(7, 1, 1, 1, 1, 3) -> REXR4=1 REXR=1 REG=0x7  | OUTREG=XED_REG_R31B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R31B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 260: /*(4, 0, 0, 0, 0, 2) -> REXR4=0 REXR=0 REG=0x4  REX=0  REX2=0  EVV | OUTREG=XED_REG_SPL*/
    xed3_operand_set_outreg(d, XED_REG_SPL);
/*pacify the compiler */
(void)d;
    break;
case 261: /*(5, 0, 0, 0, 0, 2) -> REXR4=0 REXR=0 REG=0x5  REX=0  REX2=0  EVV | OUTREG=XED_REG_BPL*/
    xed3_operand_set_outreg(d, XED_REG_BPL);
/*pacify the compiler */
(void)d;
    break;
case 262: /*(6, 0, 0, 0, 0, 2) -> REXR4=0 REXR=0 REG=0x6  REX=0  REX2=0  EVV | OUTREG=XED_REG_SIL*/
    xed3_operand_set_outreg(d, XED_REG_SIL);
/*pacify the compiler */
(void)d;
    break;
case 263: /*(7, 0, 0, 0, 0, 2) -> REXR4=0 REXR=0 REG=0x7  REX=0  REX2=0  EVV | OUTREG=XED_REG_DIL*/
    xed3_operand_set_outreg(d, XED_REG_DIL);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_GPR8_B(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_rex(d)) << ((0));
key += (xed3_operand_get_rex2(d)) << ((1));
key += (xed3_operand_get_rexb(d)) << ((2));
key += (xed3_operand_get_rexb4(d)) << ((3));
key += (xed3_operand_get_rm(d)) << ((4));
key += (xed3_operand_get_vexvalid(d)) << ((7));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0, 0, 0, 0, 0) -> REXB4=0 REXB=0 RM=0x0  | OUTREG=XED_REG_AL*/
case 128: /*(0, 0, 0, 0, 0, 1) -> REXB4=0 REXB=0 RM=0x0  | OUTREG=XED_REG_AL*/
case 256: /*(0, 0, 0, 0, 0, 2) -> REXB4=0 REXB=0 RM=0x0  | OUTREG=XED_REG_AL*/
case 384: /*(0, 0, 0, 0, 0, 3) -> REXB4=0 REXB=0 RM=0x0  | OUTREG=XED_REG_AL*/
case 2: /*(0, 1, 0, 0, 0, 0) -> REXB4=0 REXB=0 RM=0x0  | OUTREG=XED_REG_AL*/
case 130: /*(0, 1, 0, 0, 0, 1) -> REXB4=0 REXB=0 RM=0x0  | OUTREG=XED_REG_AL*/
case 258: /*(0, 1, 0, 0, 0, 2) -> REXB4=0 REXB=0 RM=0x0  | OUTREG=XED_REG_AL*/
case 386: /*(0, 1, 0, 0, 0, 3) -> REXB4=0 REXB=0 RM=0x0  | OUTREG=XED_REG_AL*/
case 1: /*(1, 0, 0, 0, 0, 0) -> REXB4=0 REXB=0 RM=0x0  | OUTREG=XED_REG_AL*/
case 129: /*(1, 0, 0, 0, 0, 1) -> REXB4=0 REXB=0 RM=0x0  | OUTREG=XED_REG_AL*/
case 257: /*(1, 0, 0, 0, 0, 2) -> REXB4=0 REXB=0 RM=0x0  | OUTREG=XED_REG_AL*/
case 385: /*(1, 0, 0, 0, 0, 3) -> REXB4=0 REXB=0 RM=0x0  | OUTREG=XED_REG_AL*/
case 3: /*(1, 1, 0, 0, 0, 0) -> REXB4=0 REXB=0 RM=0x0  | OUTREG=XED_REG_AL*/
case 131: /*(1, 1, 0, 0, 0, 1) -> REXB4=0 REXB=0 RM=0x0  | OUTREG=XED_REG_AL*/
case 259: /*(1, 1, 0, 0, 0, 2) -> REXB4=0 REXB=0 RM=0x0  | OUTREG=XED_REG_AL*/
case 387: /*(1, 1, 0, 0, 0, 3) -> REXB4=0 REXB=0 RM=0x0  | OUTREG=XED_REG_AL*/
    xed3_operand_set_outreg(d, XED_REG_AL);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(0, 0, 1, 0, 0, 0) -> REXB4=0 REXB=1 RM=0x0  | OUTREG=XED_REG_R8B*/
case 132: /*(0, 0, 1, 0, 0, 1) -> REXB4=0 REXB=1 RM=0x0  | OUTREG=XED_REG_R8B*/
case 260: /*(0, 0, 1, 0, 0, 2) -> REXB4=0 REXB=1 RM=0x0  | OUTREG=XED_REG_R8B*/
case 388: /*(0, 0, 1, 0, 0, 3) -> REXB4=0 REXB=1 RM=0x0  | OUTREG=XED_REG_R8B*/
case 6: /*(0, 1, 1, 0, 0, 0) -> REXB4=0 REXB=1 RM=0x0  | OUTREG=XED_REG_R8B*/
case 134: /*(0, 1, 1, 0, 0, 1) -> REXB4=0 REXB=1 RM=0x0  | OUTREG=XED_REG_R8B*/
case 262: /*(0, 1, 1, 0, 0, 2) -> REXB4=0 REXB=1 RM=0x0  | OUTREG=XED_REG_R8B*/
case 390: /*(0, 1, 1, 0, 0, 3) -> REXB4=0 REXB=1 RM=0x0  | OUTREG=XED_REG_R8B*/
case 5: /*(1, 0, 1, 0, 0, 0) -> REXB4=0 REXB=1 RM=0x0  | OUTREG=XED_REG_R8B*/
case 133: /*(1, 0, 1, 0, 0, 1) -> REXB4=0 REXB=1 RM=0x0  | OUTREG=XED_REG_R8B*/
case 261: /*(1, 0, 1, 0, 0, 2) -> REXB4=0 REXB=1 RM=0x0  | OUTREG=XED_REG_R8B*/
case 389: /*(1, 0, 1, 0, 0, 3) -> REXB4=0 REXB=1 RM=0x0  | OUTREG=XED_REG_R8B*/
case 7: /*(1, 1, 1, 0, 0, 0) -> REXB4=0 REXB=1 RM=0x0  | OUTREG=XED_REG_R8B*/
case 135: /*(1, 1, 1, 0, 0, 1) -> REXB4=0 REXB=1 RM=0x0  | OUTREG=XED_REG_R8B*/
case 263: /*(1, 1, 1, 0, 0, 2) -> REXB4=0 REXB=1 RM=0x0  | OUTREG=XED_REG_R8B*/
case 391: /*(1, 1, 1, 0, 0, 3) -> REXB4=0 REXB=1 RM=0x0  | OUTREG=XED_REG_R8B*/
    xed3_operand_set_outreg(d, XED_REG_R8B);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 0, 0, 1, 0, 0) -> REXB4=1 REXB=0 RM=0x0  | OUTREG=XED_REG_R16B HAS_EGPR=1*/
case 136: /*(0, 0, 0, 1, 0, 1) -> REXB4=1 REXB=0 RM=0x0  | OUTREG=XED_REG_R16B HAS_EGPR=1*/
case 264: /*(0, 0, 0, 1, 0, 2) -> REXB4=1 REXB=0 RM=0x0  | OUTREG=XED_REG_R16B HAS_EGPR=1*/
case 392: /*(0, 0, 0, 1, 0, 3) -> REXB4=1 REXB=0 RM=0x0  | OUTREG=XED_REG_R16B HAS_EGPR=1*/
case 10: /*(0, 1, 0, 1, 0, 0) -> REXB4=1 REXB=0 RM=0x0  | OUTREG=XED_REG_R16B HAS_EGPR=1*/
case 138: /*(0, 1, 0, 1, 0, 1) -> REXB4=1 REXB=0 RM=0x0  | OUTREG=XED_REG_R16B HAS_EGPR=1*/
case 266: /*(0, 1, 0, 1, 0, 2) -> REXB4=1 REXB=0 RM=0x0  | OUTREG=XED_REG_R16B HAS_EGPR=1*/
case 394: /*(0, 1, 0, 1, 0, 3) -> REXB4=1 REXB=0 RM=0x0  | OUTREG=XED_REG_R16B HAS_EGPR=1*/
case 9: /*(1, 0, 0, 1, 0, 0) -> REXB4=1 REXB=0 RM=0x0  | OUTREG=XED_REG_R16B HAS_EGPR=1*/
case 137: /*(1, 0, 0, 1, 0, 1) -> REXB4=1 REXB=0 RM=0x0  | OUTREG=XED_REG_R16B HAS_EGPR=1*/
case 265: /*(1, 0, 0, 1, 0, 2) -> REXB4=1 REXB=0 RM=0x0  | OUTREG=XED_REG_R16B HAS_EGPR=1*/
case 393: /*(1, 0, 0, 1, 0, 3) -> REXB4=1 REXB=0 RM=0x0  | OUTREG=XED_REG_R16B HAS_EGPR=1*/
case 11: /*(1, 1, 0, 1, 0, 0) -> REXB4=1 REXB=0 RM=0x0  | OUTREG=XED_REG_R16B HAS_EGPR=1*/
case 139: /*(1, 1, 0, 1, 0, 1) -> REXB4=1 REXB=0 RM=0x0  | OUTREG=XED_REG_R16B HAS_EGPR=1*/
case 267: /*(1, 1, 0, 1, 0, 2) -> REXB4=1 REXB=0 RM=0x0  | OUTREG=XED_REG_R16B HAS_EGPR=1*/
case 395: /*(1, 1, 0, 1, 0, 3) -> REXB4=1 REXB=0 RM=0x0  | OUTREG=XED_REG_R16B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R16B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(0, 0, 1, 1, 0, 0) -> REXB4=1 REXB=1 RM=0x0  | OUTREG=XED_REG_R24B HAS_EGPR=1*/
case 140: /*(0, 0, 1, 1, 0, 1) -> REXB4=1 REXB=1 RM=0x0  | OUTREG=XED_REG_R24B HAS_EGPR=1*/
case 268: /*(0, 0, 1, 1, 0, 2) -> REXB4=1 REXB=1 RM=0x0  | OUTREG=XED_REG_R24B HAS_EGPR=1*/
case 396: /*(0, 0, 1, 1, 0, 3) -> REXB4=1 REXB=1 RM=0x0  | OUTREG=XED_REG_R24B HAS_EGPR=1*/
case 14: /*(0, 1, 1, 1, 0, 0) -> REXB4=1 REXB=1 RM=0x0  | OUTREG=XED_REG_R24B HAS_EGPR=1*/
case 142: /*(0, 1, 1, 1, 0, 1) -> REXB4=1 REXB=1 RM=0x0  | OUTREG=XED_REG_R24B HAS_EGPR=1*/
case 270: /*(0, 1, 1, 1, 0, 2) -> REXB4=1 REXB=1 RM=0x0  | OUTREG=XED_REG_R24B HAS_EGPR=1*/
case 398: /*(0, 1, 1, 1, 0, 3) -> REXB4=1 REXB=1 RM=0x0  | OUTREG=XED_REG_R24B HAS_EGPR=1*/
case 13: /*(1, 0, 1, 1, 0, 0) -> REXB4=1 REXB=1 RM=0x0  | OUTREG=XED_REG_R24B HAS_EGPR=1*/
case 141: /*(1, 0, 1, 1, 0, 1) -> REXB4=1 REXB=1 RM=0x0  | OUTREG=XED_REG_R24B HAS_EGPR=1*/
case 269: /*(1, 0, 1, 1, 0, 2) -> REXB4=1 REXB=1 RM=0x0  | OUTREG=XED_REG_R24B HAS_EGPR=1*/
case 397: /*(1, 0, 1, 1, 0, 3) -> REXB4=1 REXB=1 RM=0x0  | OUTREG=XED_REG_R24B HAS_EGPR=1*/
case 15: /*(1, 1, 1, 1, 0, 0) -> REXB4=1 REXB=1 RM=0x0  | OUTREG=XED_REG_R24B HAS_EGPR=1*/
case 143: /*(1, 1, 1, 1, 0, 1) -> REXB4=1 REXB=1 RM=0x0  | OUTREG=XED_REG_R24B HAS_EGPR=1*/
case 271: /*(1, 1, 1, 1, 0, 2) -> REXB4=1 REXB=1 RM=0x0  | OUTREG=XED_REG_R24B HAS_EGPR=1*/
case 399: /*(1, 1, 1, 1, 0, 3) -> REXB4=1 REXB=1 RM=0x0  | OUTREG=XED_REG_R24B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R24B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 16: /*(0, 0, 0, 0, 1, 0) -> REXB4=0 REXB=0 RM=0x1  | OUTREG=XED_REG_CL*/
case 144: /*(0, 0, 0, 0, 1, 1) -> REXB4=0 REXB=0 RM=0x1  | OUTREG=XED_REG_CL*/
case 272: /*(0, 0, 0, 0, 1, 2) -> REXB4=0 REXB=0 RM=0x1  | OUTREG=XED_REG_CL*/
case 400: /*(0, 0, 0, 0, 1, 3) -> REXB4=0 REXB=0 RM=0x1  | OUTREG=XED_REG_CL*/
case 18: /*(0, 1, 0, 0, 1, 0) -> REXB4=0 REXB=0 RM=0x1  | OUTREG=XED_REG_CL*/
case 146: /*(0, 1, 0, 0, 1, 1) -> REXB4=0 REXB=0 RM=0x1  | OUTREG=XED_REG_CL*/
case 274: /*(0, 1, 0, 0, 1, 2) -> REXB4=0 REXB=0 RM=0x1  | OUTREG=XED_REG_CL*/
case 402: /*(0, 1, 0, 0, 1, 3) -> REXB4=0 REXB=0 RM=0x1  | OUTREG=XED_REG_CL*/
case 17: /*(1, 0, 0, 0, 1, 0) -> REXB4=0 REXB=0 RM=0x1  | OUTREG=XED_REG_CL*/
case 145: /*(1, 0, 0, 0, 1, 1) -> REXB4=0 REXB=0 RM=0x1  | OUTREG=XED_REG_CL*/
case 273: /*(1, 0, 0, 0, 1, 2) -> REXB4=0 REXB=0 RM=0x1  | OUTREG=XED_REG_CL*/
case 401: /*(1, 0, 0, 0, 1, 3) -> REXB4=0 REXB=0 RM=0x1  | OUTREG=XED_REG_CL*/
case 19: /*(1, 1, 0, 0, 1, 0) -> REXB4=0 REXB=0 RM=0x1  | OUTREG=XED_REG_CL*/
case 147: /*(1, 1, 0, 0, 1, 1) -> REXB4=0 REXB=0 RM=0x1  | OUTREG=XED_REG_CL*/
case 275: /*(1, 1, 0, 0, 1, 2) -> REXB4=0 REXB=0 RM=0x1  | OUTREG=XED_REG_CL*/
case 403: /*(1, 1, 0, 0, 1, 3) -> REXB4=0 REXB=0 RM=0x1  | OUTREG=XED_REG_CL*/
    xed3_operand_set_outreg(d, XED_REG_CL);
/*pacify the compiler */
(void)d;
    break;
case 20: /*(0, 0, 1, 0, 1, 0) -> REXB4=0 REXB=1 RM=0x1  | OUTREG=XED_REG_R9B*/
case 148: /*(0, 0, 1, 0, 1, 1) -> REXB4=0 REXB=1 RM=0x1  | OUTREG=XED_REG_R9B*/
case 276: /*(0, 0, 1, 0, 1, 2) -> REXB4=0 REXB=1 RM=0x1  | OUTREG=XED_REG_R9B*/
case 404: /*(0, 0, 1, 0, 1, 3) -> REXB4=0 REXB=1 RM=0x1  | OUTREG=XED_REG_R9B*/
case 22: /*(0, 1, 1, 0, 1, 0) -> REXB4=0 REXB=1 RM=0x1  | OUTREG=XED_REG_R9B*/
case 150: /*(0, 1, 1, 0, 1, 1) -> REXB4=0 REXB=1 RM=0x1  | OUTREG=XED_REG_R9B*/
case 278: /*(0, 1, 1, 0, 1, 2) -> REXB4=0 REXB=1 RM=0x1  | OUTREG=XED_REG_R9B*/
case 406: /*(0, 1, 1, 0, 1, 3) -> REXB4=0 REXB=1 RM=0x1  | OUTREG=XED_REG_R9B*/
case 21: /*(1, 0, 1, 0, 1, 0) -> REXB4=0 REXB=1 RM=0x1  | OUTREG=XED_REG_R9B*/
case 149: /*(1, 0, 1, 0, 1, 1) -> REXB4=0 REXB=1 RM=0x1  | OUTREG=XED_REG_R9B*/
case 277: /*(1, 0, 1, 0, 1, 2) -> REXB4=0 REXB=1 RM=0x1  | OUTREG=XED_REG_R9B*/
case 405: /*(1, 0, 1, 0, 1, 3) -> REXB4=0 REXB=1 RM=0x1  | OUTREG=XED_REG_R9B*/
case 23: /*(1, 1, 1, 0, 1, 0) -> REXB4=0 REXB=1 RM=0x1  | OUTREG=XED_REG_R9B*/
case 151: /*(1, 1, 1, 0, 1, 1) -> REXB4=0 REXB=1 RM=0x1  | OUTREG=XED_REG_R9B*/
case 279: /*(1, 1, 1, 0, 1, 2) -> REXB4=0 REXB=1 RM=0x1  | OUTREG=XED_REG_R9B*/
case 407: /*(1, 1, 1, 0, 1, 3) -> REXB4=0 REXB=1 RM=0x1  | OUTREG=XED_REG_R9B*/
    xed3_operand_set_outreg(d, XED_REG_R9B);
/*pacify the compiler */
(void)d;
    break;
case 24: /*(0, 0, 0, 1, 1, 0) -> REXB4=1 REXB=0 RM=0x1  | OUTREG=XED_REG_R17B HAS_EGPR=1*/
case 152: /*(0, 0, 0, 1, 1, 1) -> REXB4=1 REXB=0 RM=0x1  | OUTREG=XED_REG_R17B HAS_EGPR=1*/
case 280: /*(0, 0, 0, 1, 1, 2) -> REXB4=1 REXB=0 RM=0x1  | OUTREG=XED_REG_R17B HAS_EGPR=1*/
case 408: /*(0, 0, 0, 1, 1, 3) -> REXB4=1 REXB=0 RM=0x1  | OUTREG=XED_REG_R17B HAS_EGPR=1*/
case 26: /*(0, 1, 0, 1, 1, 0) -> REXB4=1 REXB=0 RM=0x1  | OUTREG=XED_REG_R17B HAS_EGPR=1*/
case 154: /*(0, 1, 0, 1, 1, 1) -> REXB4=1 REXB=0 RM=0x1  | OUTREG=XED_REG_R17B HAS_EGPR=1*/
case 282: /*(0, 1, 0, 1, 1, 2) -> REXB4=1 REXB=0 RM=0x1  | OUTREG=XED_REG_R17B HAS_EGPR=1*/
case 410: /*(0, 1, 0, 1, 1, 3) -> REXB4=1 REXB=0 RM=0x1  | OUTREG=XED_REG_R17B HAS_EGPR=1*/
case 25: /*(1, 0, 0, 1, 1, 0) -> REXB4=1 REXB=0 RM=0x1  | OUTREG=XED_REG_R17B HAS_EGPR=1*/
case 153: /*(1, 0, 0, 1, 1, 1) -> REXB4=1 REXB=0 RM=0x1  | OUTREG=XED_REG_R17B HAS_EGPR=1*/
case 281: /*(1, 0, 0, 1, 1, 2) -> REXB4=1 REXB=0 RM=0x1  | OUTREG=XED_REG_R17B HAS_EGPR=1*/
case 409: /*(1, 0, 0, 1, 1, 3) -> REXB4=1 REXB=0 RM=0x1  | OUTREG=XED_REG_R17B HAS_EGPR=1*/
case 27: /*(1, 1, 0, 1, 1, 0) -> REXB4=1 REXB=0 RM=0x1  | OUTREG=XED_REG_R17B HAS_EGPR=1*/
case 155: /*(1, 1, 0, 1, 1, 1) -> REXB4=1 REXB=0 RM=0x1  | OUTREG=XED_REG_R17B HAS_EGPR=1*/
case 283: /*(1, 1, 0, 1, 1, 2) -> REXB4=1 REXB=0 RM=0x1  | OUTREG=XED_REG_R17B HAS_EGPR=1*/
case 411: /*(1, 1, 0, 1, 1, 3) -> REXB4=1 REXB=0 RM=0x1  | OUTREG=XED_REG_R17B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R17B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 28: /*(0, 0, 1, 1, 1, 0) -> REXB4=1 REXB=1 RM=0x1  | OUTREG=XED_REG_R25B HAS_EGPR=1*/
case 156: /*(0, 0, 1, 1, 1, 1) -> REXB4=1 REXB=1 RM=0x1  | OUTREG=XED_REG_R25B HAS_EGPR=1*/
case 284: /*(0, 0, 1, 1, 1, 2) -> REXB4=1 REXB=1 RM=0x1  | OUTREG=XED_REG_R25B HAS_EGPR=1*/
case 412: /*(0, 0, 1, 1, 1, 3) -> REXB4=1 REXB=1 RM=0x1  | OUTREG=XED_REG_R25B HAS_EGPR=1*/
case 30: /*(0, 1, 1, 1, 1, 0) -> REXB4=1 REXB=1 RM=0x1  | OUTREG=XED_REG_R25B HAS_EGPR=1*/
case 158: /*(0, 1, 1, 1, 1, 1) -> REXB4=1 REXB=1 RM=0x1  | OUTREG=XED_REG_R25B HAS_EGPR=1*/
case 286: /*(0, 1, 1, 1, 1, 2) -> REXB4=1 REXB=1 RM=0x1  | OUTREG=XED_REG_R25B HAS_EGPR=1*/
case 414: /*(0, 1, 1, 1, 1, 3) -> REXB4=1 REXB=1 RM=0x1  | OUTREG=XED_REG_R25B HAS_EGPR=1*/
case 29: /*(1, 0, 1, 1, 1, 0) -> REXB4=1 REXB=1 RM=0x1  | OUTREG=XED_REG_R25B HAS_EGPR=1*/
case 157: /*(1, 0, 1, 1, 1, 1) -> REXB4=1 REXB=1 RM=0x1  | OUTREG=XED_REG_R25B HAS_EGPR=1*/
case 285: /*(1, 0, 1, 1, 1, 2) -> REXB4=1 REXB=1 RM=0x1  | OUTREG=XED_REG_R25B HAS_EGPR=1*/
case 413: /*(1, 0, 1, 1, 1, 3) -> REXB4=1 REXB=1 RM=0x1  | OUTREG=XED_REG_R25B HAS_EGPR=1*/
case 31: /*(1, 1, 1, 1, 1, 0) -> REXB4=1 REXB=1 RM=0x1  | OUTREG=XED_REG_R25B HAS_EGPR=1*/
case 159: /*(1, 1, 1, 1, 1, 1) -> REXB4=1 REXB=1 RM=0x1  | OUTREG=XED_REG_R25B HAS_EGPR=1*/
case 287: /*(1, 1, 1, 1, 1, 2) -> REXB4=1 REXB=1 RM=0x1  | OUTREG=XED_REG_R25B HAS_EGPR=1*/
case 415: /*(1, 1, 1, 1, 1, 3) -> REXB4=1 REXB=1 RM=0x1  | OUTREG=XED_REG_R25B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R25B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 32: /*(0, 0, 0, 0, 2, 0) -> REXB4=0 REXB=0 RM=0x2  | OUTREG=XED_REG_DL*/
case 160: /*(0, 0, 0, 0, 2, 1) -> REXB4=0 REXB=0 RM=0x2  | OUTREG=XED_REG_DL*/
case 288: /*(0, 0, 0, 0, 2, 2) -> REXB4=0 REXB=0 RM=0x2  | OUTREG=XED_REG_DL*/
case 416: /*(0, 0, 0, 0, 2, 3) -> REXB4=0 REXB=0 RM=0x2  | OUTREG=XED_REG_DL*/
case 34: /*(0, 1, 0, 0, 2, 0) -> REXB4=0 REXB=0 RM=0x2  | OUTREG=XED_REG_DL*/
case 162: /*(0, 1, 0, 0, 2, 1) -> REXB4=0 REXB=0 RM=0x2  | OUTREG=XED_REG_DL*/
case 290: /*(0, 1, 0, 0, 2, 2) -> REXB4=0 REXB=0 RM=0x2  | OUTREG=XED_REG_DL*/
case 418: /*(0, 1, 0, 0, 2, 3) -> REXB4=0 REXB=0 RM=0x2  | OUTREG=XED_REG_DL*/
case 33: /*(1, 0, 0, 0, 2, 0) -> REXB4=0 REXB=0 RM=0x2  | OUTREG=XED_REG_DL*/
case 161: /*(1, 0, 0, 0, 2, 1) -> REXB4=0 REXB=0 RM=0x2  | OUTREG=XED_REG_DL*/
case 289: /*(1, 0, 0, 0, 2, 2) -> REXB4=0 REXB=0 RM=0x2  | OUTREG=XED_REG_DL*/
case 417: /*(1, 0, 0, 0, 2, 3) -> REXB4=0 REXB=0 RM=0x2  | OUTREG=XED_REG_DL*/
case 35: /*(1, 1, 0, 0, 2, 0) -> REXB4=0 REXB=0 RM=0x2  | OUTREG=XED_REG_DL*/
case 163: /*(1, 1, 0, 0, 2, 1) -> REXB4=0 REXB=0 RM=0x2  | OUTREG=XED_REG_DL*/
case 291: /*(1, 1, 0, 0, 2, 2) -> REXB4=0 REXB=0 RM=0x2  | OUTREG=XED_REG_DL*/
case 419: /*(1, 1, 0, 0, 2, 3) -> REXB4=0 REXB=0 RM=0x2  | OUTREG=XED_REG_DL*/
    xed3_operand_set_outreg(d, XED_REG_DL);
/*pacify the compiler */
(void)d;
    break;
case 36: /*(0, 0, 1, 0, 2, 0) -> REXB4=0 REXB=1 RM=0x2  | OUTREG=XED_REG_R10B*/
case 164: /*(0, 0, 1, 0, 2, 1) -> REXB4=0 REXB=1 RM=0x2  | OUTREG=XED_REG_R10B*/
case 292: /*(0, 0, 1, 0, 2, 2) -> REXB4=0 REXB=1 RM=0x2  | OUTREG=XED_REG_R10B*/
case 420: /*(0, 0, 1, 0, 2, 3) -> REXB4=0 REXB=1 RM=0x2  | OUTREG=XED_REG_R10B*/
case 38: /*(0, 1, 1, 0, 2, 0) -> REXB4=0 REXB=1 RM=0x2  | OUTREG=XED_REG_R10B*/
case 166: /*(0, 1, 1, 0, 2, 1) -> REXB4=0 REXB=1 RM=0x2  | OUTREG=XED_REG_R10B*/
case 294: /*(0, 1, 1, 0, 2, 2) -> REXB4=0 REXB=1 RM=0x2  | OUTREG=XED_REG_R10B*/
case 422: /*(0, 1, 1, 0, 2, 3) -> REXB4=0 REXB=1 RM=0x2  | OUTREG=XED_REG_R10B*/
case 37: /*(1, 0, 1, 0, 2, 0) -> REXB4=0 REXB=1 RM=0x2  | OUTREG=XED_REG_R10B*/
case 165: /*(1, 0, 1, 0, 2, 1) -> REXB4=0 REXB=1 RM=0x2  | OUTREG=XED_REG_R10B*/
case 293: /*(1, 0, 1, 0, 2, 2) -> REXB4=0 REXB=1 RM=0x2  | OUTREG=XED_REG_R10B*/
case 421: /*(1, 0, 1, 0, 2, 3) -> REXB4=0 REXB=1 RM=0x2  | OUTREG=XED_REG_R10B*/
case 39: /*(1, 1, 1, 0, 2, 0) -> REXB4=0 REXB=1 RM=0x2  | OUTREG=XED_REG_R10B*/
case 167: /*(1, 1, 1, 0, 2, 1) -> REXB4=0 REXB=1 RM=0x2  | OUTREG=XED_REG_R10B*/
case 295: /*(1, 1, 1, 0, 2, 2) -> REXB4=0 REXB=1 RM=0x2  | OUTREG=XED_REG_R10B*/
case 423: /*(1, 1, 1, 0, 2, 3) -> REXB4=0 REXB=1 RM=0x2  | OUTREG=XED_REG_R10B*/
    xed3_operand_set_outreg(d, XED_REG_R10B);
/*pacify the compiler */
(void)d;
    break;
case 40: /*(0, 0, 0, 1, 2, 0) -> REXB4=1 REXB=0 RM=0x2  | OUTREG=XED_REG_R18B HAS_EGPR=1*/
case 168: /*(0, 0, 0, 1, 2, 1) -> REXB4=1 REXB=0 RM=0x2  | OUTREG=XED_REG_R18B HAS_EGPR=1*/
case 296: /*(0, 0, 0, 1, 2, 2) -> REXB4=1 REXB=0 RM=0x2  | OUTREG=XED_REG_R18B HAS_EGPR=1*/
case 424: /*(0, 0, 0, 1, 2, 3) -> REXB4=1 REXB=0 RM=0x2  | OUTREG=XED_REG_R18B HAS_EGPR=1*/
case 42: /*(0, 1, 0, 1, 2, 0) -> REXB4=1 REXB=0 RM=0x2  | OUTREG=XED_REG_R18B HAS_EGPR=1*/
case 170: /*(0, 1, 0, 1, 2, 1) -> REXB4=1 REXB=0 RM=0x2  | OUTREG=XED_REG_R18B HAS_EGPR=1*/
case 298: /*(0, 1, 0, 1, 2, 2) -> REXB4=1 REXB=0 RM=0x2  | OUTREG=XED_REG_R18B HAS_EGPR=1*/
case 426: /*(0, 1, 0, 1, 2, 3) -> REXB4=1 REXB=0 RM=0x2  | OUTREG=XED_REG_R18B HAS_EGPR=1*/
case 41: /*(1, 0, 0, 1, 2, 0) -> REXB4=1 REXB=0 RM=0x2  | OUTREG=XED_REG_R18B HAS_EGPR=1*/
case 169: /*(1, 0, 0, 1, 2, 1) -> REXB4=1 REXB=0 RM=0x2  | OUTREG=XED_REG_R18B HAS_EGPR=1*/
case 297: /*(1, 0, 0, 1, 2, 2) -> REXB4=1 REXB=0 RM=0x2  | OUTREG=XED_REG_R18B HAS_EGPR=1*/
case 425: /*(1, 0, 0, 1, 2, 3) -> REXB4=1 REXB=0 RM=0x2  | OUTREG=XED_REG_R18B HAS_EGPR=1*/
case 43: /*(1, 1, 0, 1, 2, 0) -> REXB4=1 REXB=0 RM=0x2  | OUTREG=XED_REG_R18B HAS_EGPR=1*/
case 171: /*(1, 1, 0, 1, 2, 1) -> REXB4=1 REXB=0 RM=0x2  | OUTREG=XED_REG_R18B HAS_EGPR=1*/
case 299: /*(1, 1, 0, 1, 2, 2) -> REXB4=1 REXB=0 RM=0x2  | OUTREG=XED_REG_R18B HAS_EGPR=1*/
case 427: /*(1, 1, 0, 1, 2, 3) -> REXB4=1 REXB=0 RM=0x2  | OUTREG=XED_REG_R18B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R18B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 44: /*(0, 0, 1, 1, 2, 0) -> REXB4=1 REXB=1 RM=0x2  | OUTREG=XED_REG_R26B HAS_EGPR=1*/
case 172: /*(0, 0, 1, 1, 2, 1) -> REXB4=1 REXB=1 RM=0x2  | OUTREG=XED_REG_R26B HAS_EGPR=1*/
case 300: /*(0, 0, 1, 1, 2, 2) -> REXB4=1 REXB=1 RM=0x2  | OUTREG=XED_REG_R26B HAS_EGPR=1*/
case 428: /*(0, 0, 1, 1, 2, 3) -> REXB4=1 REXB=1 RM=0x2  | OUTREG=XED_REG_R26B HAS_EGPR=1*/
case 46: /*(0, 1, 1, 1, 2, 0) -> REXB4=1 REXB=1 RM=0x2  | OUTREG=XED_REG_R26B HAS_EGPR=1*/
case 174: /*(0, 1, 1, 1, 2, 1) -> REXB4=1 REXB=1 RM=0x2  | OUTREG=XED_REG_R26B HAS_EGPR=1*/
case 302: /*(0, 1, 1, 1, 2, 2) -> REXB4=1 REXB=1 RM=0x2  | OUTREG=XED_REG_R26B HAS_EGPR=1*/
case 430: /*(0, 1, 1, 1, 2, 3) -> REXB4=1 REXB=1 RM=0x2  | OUTREG=XED_REG_R26B HAS_EGPR=1*/
case 45: /*(1, 0, 1, 1, 2, 0) -> REXB4=1 REXB=1 RM=0x2  | OUTREG=XED_REG_R26B HAS_EGPR=1*/
case 173: /*(1, 0, 1, 1, 2, 1) -> REXB4=1 REXB=1 RM=0x2  | OUTREG=XED_REG_R26B HAS_EGPR=1*/
case 301: /*(1, 0, 1, 1, 2, 2) -> REXB4=1 REXB=1 RM=0x2  | OUTREG=XED_REG_R26B HAS_EGPR=1*/
case 429: /*(1, 0, 1, 1, 2, 3) -> REXB4=1 REXB=1 RM=0x2  | OUTREG=XED_REG_R26B HAS_EGPR=1*/
case 47: /*(1, 1, 1, 1, 2, 0) -> REXB4=1 REXB=1 RM=0x2  | OUTREG=XED_REG_R26B HAS_EGPR=1*/
case 175: /*(1, 1, 1, 1, 2, 1) -> REXB4=1 REXB=1 RM=0x2  | OUTREG=XED_REG_R26B HAS_EGPR=1*/
case 303: /*(1, 1, 1, 1, 2, 2) -> REXB4=1 REXB=1 RM=0x2  | OUTREG=XED_REG_R26B HAS_EGPR=1*/
case 431: /*(1, 1, 1, 1, 2, 3) -> REXB4=1 REXB=1 RM=0x2  | OUTREG=XED_REG_R26B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R26B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 48: /*(0, 0, 0, 0, 3, 0) -> REXB4=0 REXB=0 RM=0x3  | OUTREG=XED_REG_BL*/
case 176: /*(0, 0, 0, 0, 3, 1) -> REXB4=0 REXB=0 RM=0x3  | OUTREG=XED_REG_BL*/
case 304: /*(0, 0, 0, 0, 3, 2) -> REXB4=0 REXB=0 RM=0x3  | OUTREG=XED_REG_BL*/
case 432: /*(0, 0, 0, 0, 3, 3) -> REXB4=0 REXB=0 RM=0x3  | OUTREG=XED_REG_BL*/
case 50: /*(0, 1, 0, 0, 3, 0) -> REXB4=0 REXB=0 RM=0x3  | OUTREG=XED_REG_BL*/
case 178: /*(0, 1, 0, 0, 3, 1) -> REXB4=0 REXB=0 RM=0x3  | OUTREG=XED_REG_BL*/
case 306: /*(0, 1, 0, 0, 3, 2) -> REXB4=0 REXB=0 RM=0x3  | OUTREG=XED_REG_BL*/
case 434: /*(0, 1, 0, 0, 3, 3) -> REXB4=0 REXB=0 RM=0x3  | OUTREG=XED_REG_BL*/
case 49: /*(1, 0, 0, 0, 3, 0) -> REXB4=0 REXB=0 RM=0x3  | OUTREG=XED_REG_BL*/
case 177: /*(1, 0, 0, 0, 3, 1) -> REXB4=0 REXB=0 RM=0x3  | OUTREG=XED_REG_BL*/
case 305: /*(1, 0, 0, 0, 3, 2) -> REXB4=0 REXB=0 RM=0x3  | OUTREG=XED_REG_BL*/
case 433: /*(1, 0, 0, 0, 3, 3) -> REXB4=0 REXB=0 RM=0x3  | OUTREG=XED_REG_BL*/
case 51: /*(1, 1, 0, 0, 3, 0) -> REXB4=0 REXB=0 RM=0x3  | OUTREG=XED_REG_BL*/
case 179: /*(1, 1, 0, 0, 3, 1) -> REXB4=0 REXB=0 RM=0x3  | OUTREG=XED_REG_BL*/
case 307: /*(1, 1, 0, 0, 3, 2) -> REXB4=0 REXB=0 RM=0x3  | OUTREG=XED_REG_BL*/
case 435: /*(1, 1, 0, 0, 3, 3) -> REXB4=0 REXB=0 RM=0x3  | OUTREG=XED_REG_BL*/
    xed3_operand_set_outreg(d, XED_REG_BL);
/*pacify the compiler */
(void)d;
    break;
case 52: /*(0, 0, 1, 0, 3, 0) -> REXB4=0 REXB=1 RM=0x3  | OUTREG=XED_REG_R11B*/
case 180: /*(0, 0, 1, 0, 3, 1) -> REXB4=0 REXB=1 RM=0x3  | OUTREG=XED_REG_R11B*/
case 308: /*(0, 0, 1, 0, 3, 2) -> REXB4=0 REXB=1 RM=0x3  | OUTREG=XED_REG_R11B*/
case 436: /*(0, 0, 1, 0, 3, 3) -> REXB4=0 REXB=1 RM=0x3  | OUTREG=XED_REG_R11B*/
case 54: /*(0, 1, 1, 0, 3, 0) -> REXB4=0 REXB=1 RM=0x3  | OUTREG=XED_REG_R11B*/
case 182: /*(0, 1, 1, 0, 3, 1) -> REXB4=0 REXB=1 RM=0x3  | OUTREG=XED_REG_R11B*/
case 310: /*(0, 1, 1, 0, 3, 2) -> REXB4=0 REXB=1 RM=0x3  | OUTREG=XED_REG_R11B*/
case 438: /*(0, 1, 1, 0, 3, 3) -> REXB4=0 REXB=1 RM=0x3  | OUTREG=XED_REG_R11B*/
case 53: /*(1, 0, 1, 0, 3, 0) -> REXB4=0 REXB=1 RM=0x3  | OUTREG=XED_REG_R11B*/
case 181: /*(1, 0, 1, 0, 3, 1) -> REXB4=0 REXB=1 RM=0x3  | OUTREG=XED_REG_R11B*/
case 309: /*(1, 0, 1, 0, 3, 2) -> REXB4=0 REXB=1 RM=0x3  | OUTREG=XED_REG_R11B*/
case 437: /*(1, 0, 1, 0, 3, 3) -> REXB4=0 REXB=1 RM=0x3  | OUTREG=XED_REG_R11B*/
case 55: /*(1, 1, 1, 0, 3, 0) -> REXB4=0 REXB=1 RM=0x3  | OUTREG=XED_REG_R11B*/
case 183: /*(1, 1, 1, 0, 3, 1) -> REXB4=0 REXB=1 RM=0x3  | OUTREG=XED_REG_R11B*/
case 311: /*(1, 1, 1, 0, 3, 2) -> REXB4=0 REXB=1 RM=0x3  | OUTREG=XED_REG_R11B*/
case 439: /*(1, 1, 1, 0, 3, 3) -> REXB4=0 REXB=1 RM=0x3  | OUTREG=XED_REG_R11B*/
    xed3_operand_set_outreg(d, XED_REG_R11B);
/*pacify the compiler */
(void)d;
    break;
case 56: /*(0, 0, 0, 1, 3, 0) -> REXB4=1 REXB=0 RM=0x3  | OUTREG=XED_REG_R19B HAS_EGPR=1*/
case 184: /*(0, 0, 0, 1, 3, 1) -> REXB4=1 REXB=0 RM=0x3  | OUTREG=XED_REG_R19B HAS_EGPR=1*/
case 312: /*(0, 0, 0, 1, 3, 2) -> REXB4=1 REXB=0 RM=0x3  | OUTREG=XED_REG_R19B HAS_EGPR=1*/
case 440: /*(0, 0, 0, 1, 3, 3) -> REXB4=1 REXB=0 RM=0x3  | OUTREG=XED_REG_R19B HAS_EGPR=1*/
case 58: /*(0, 1, 0, 1, 3, 0) -> REXB4=1 REXB=0 RM=0x3  | OUTREG=XED_REG_R19B HAS_EGPR=1*/
case 186: /*(0, 1, 0, 1, 3, 1) -> REXB4=1 REXB=0 RM=0x3  | OUTREG=XED_REG_R19B HAS_EGPR=1*/
case 314: /*(0, 1, 0, 1, 3, 2) -> REXB4=1 REXB=0 RM=0x3  | OUTREG=XED_REG_R19B HAS_EGPR=1*/
case 442: /*(0, 1, 0, 1, 3, 3) -> REXB4=1 REXB=0 RM=0x3  | OUTREG=XED_REG_R19B HAS_EGPR=1*/
case 57: /*(1, 0, 0, 1, 3, 0) -> REXB4=1 REXB=0 RM=0x3  | OUTREG=XED_REG_R19B HAS_EGPR=1*/
case 185: /*(1, 0, 0, 1, 3, 1) -> REXB4=1 REXB=0 RM=0x3  | OUTREG=XED_REG_R19B HAS_EGPR=1*/
case 313: /*(1, 0, 0, 1, 3, 2) -> REXB4=1 REXB=0 RM=0x3  | OUTREG=XED_REG_R19B HAS_EGPR=1*/
case 441: /*(1, 0, 0, 1, 3, 3) -> REXB4=1 REXB=0 RM=0x3  | OUTREG=XED_REG_R19B HAS_EGPR=1*/
case 59: /*(1, 1, 0, 1, 3, 0) -> REXB4=1 REXB=0 RM=0x3  | OUTREG=XED_REG_R19B HAS_EGPR=1*/
case 187: /*(1, 1, 0, 1, 3, 1) -> REXB4=1 REXB=0 RM=0x3  | OUTREG=XED_REG_R19B HAS_EGPR=1*/
case 315: /*(1, 1, 0, 1, 3, 2) -> REXB4=1 REXB=0 RM=0x3  | OUTREG=XED_REG_R19B HAS_EGPR=1*/
case 443: /*(1, 1, 0, 1, 3, 3) -> REXB4=1 REXB=0 RM=0x3  | OUTREG=XED_REG_R19B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R19B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 60: /*(0, 0, 1, 1, 3, 0) -> REXB4=1 REXB=1 RM=0x3  | OUTREG=XED_REG_R27B HAS_EGPR=1*/
case 188: /*(0, 0, 1, 1, 3, 1) -> REXB4=1 REXB=1 RM=0x3  | OUTREG=XED_REG_R27B HAS_EGPR=1*/
case 316: /*(0, 0, 1, 1, 3, 2) -> REXB4=1 REXB=1 RM=0x3  | OUTREG=XED_REG_R27B HAS_EGPR=1*/
case 444: /*(0, 0, 1, 1, 3, 3) -> REXB4=1 REXB=1 RM=0x3  | OUTREG=XED_REG_R27B HAS_EGPR=1*/
case 62: /*(0, 1, 1, 1, 3, 0) -> REXB4=1 REXB=1 RM=0x3  | OUTREG=XED_REG_R27B HAS_EGPR=1*/
case 190: /*(0, 1, 1, 1, 3, 1) -> REXB4=1 REXB=1 RM=0x3  | OUTREG=XED_REG_R27B HAS_EGPR=1*/
case 318: /*(0, 1, 1, 1, 3, 2) -> REXB4=1 REXB=1 RM=0x3  | OUTREG=XED_REG_R27B HAS_EGPR=1*/
case 446: /*(0, 1, 1, 1, 3, 3) -> REXB4=1 REXB=1 RM=0x3  | OUTREG=XED_REG_R27B HAS_EGPR=1*/
case 61: /*(1, 0, 1, 1, 3, 0) -> REXB4=1 REXB=1 RM=0x3  | OUTREG=XED_REG_R27B HAS_EGPR=1*/
case 189: /*(1, 0, 1, 1, 3, 1) -> REXB4=1 REXB=1 RM=0x3  | OUTREG=XED_REG_R27B HAS_EGPR=1*/
case 317: /*(1, 0, 1, 1, 3, 2) -> REXB4=1 REXB=1 RM=0x3  | OUTREG=XED_REG_R27B HAS_EGPR=1*/
case 445: /*(1, 0, 1, 1, 3, 3) -> REXB4=1 REXB=1 RM=0x3  | OUTREG=XED_REG_R27B HAS_EGPR=1*/
case 63: /*(1, 1, 1, 1, 3, 0) -> REXB4=1 REXB=1 RM=0x3  | OUTREG=XED_REG_R27B HAS_EGPR=1*/
case 191: /*(1, 1, 1, 1, 3, 1) -> REXB4=1 REXB=1 RM=0x3  | OUTREG=XED_REG_R27B HAS_EGPR=1*/
case 319: /*(1, 1, 1, 1, 3, 2) -> REXB4=1 REXB=1 RM=0x3  | OUTREG=XED_REG_R27B HAS_EGPR=1*/
case 447: /*(1, 1, 1, 1, 3, 3) -> REXB4=1 REXB=1 RM=0x3  | OUTREG=XED_REG_R27B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R27B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 64: /*(0, 0, 0, 0, 4, 0) -> REXB4=0 REXB=0 RM=0x4  REX=0  REX2=0  VEXVALID!=2 | OUTREG=XED_REG_AH*/
case 192: /*(0, 0, 0, 0, 4, 1) -> REXB4=0 REXB=0 RM=0x4  REX=0  REX2=0  VEXVALID!=2 | OUTREG=XED_REG_AH*/
case 448: /*(0, 0, 0, 0, 4, 3) -> REXB4=0 REXB=0 RM=0x4  REX=0  REX2=0  VEXVALID!=2 | OUTREG=XED_REG_AH*/
    xed3_operand_set_outreg(d, XED_REG_AH);
/*pacify the compiler */
(void)d;
    break;
case 65: /*(1, 0, 0, 0, 4, 0) -> REXB4=0 REXB=0 RM=0x4  REX=1  REX2=0 | OUTREG=XED_REG_SPL*/
case 193: /*(1, 0, 0, 0, 4, 1) -> REXB4=0 REXB=0 RM=0x4  REX=1  REX2=0 | OUTREG=XED_REG_SPL*/
case 321: /*(1, 0, 0, 0, 4, 2) -> REXB4=0 REXB=0 RM=0x4  REX=1  REX2=0 | OUTREG=XED_REG_SPL*/
case 449: /*(1, 0, 0, 0, 4, 3) -> REXB4=0 REXB=0 RM=0x4  REX=1  REX2=0 | OUTREG=XED_REG_SPL*/
    xed3_operand_set_outreg(d, XED_REG_SPL);
/*pacify the compiler */
(void)d;
    break;
case 66: /*(0, 1, 0, 0, 4, 0) -> REXB4=0 REXB=0 RM=0x4         REX2=1 | OUTREG=XED_REG_SPL*/
case 194: /*(0, 1, 0, 0, 4, 1) -> REXB4=0 REXB=0 RM=0x4         REX2=1 | OUTREG=XED_REG_SPL*/
case 322: /*(0, 1, 0, 0, 4, 2) -> REXB4=0 REXB=0 RM=0x4         REX2=1 | OUTREG=XED_REG_SPL*/
case 450: /*(0, 1, 0, 0, 4, 3) -> REXB4=0 REXB=0 RM=0x4         REX2=1 | OUTREG=XED_REG_SPL*/
case 67: /*(1, 1, 0, 0, 4, 0) -> REXB4=0 REXB=0 RM=0x4         REX2=1 | OUTREG=XED_REG_SPL*/
case 195: /*(1, 1, 0, 0, 4, 1) -> REXB4=0 REXB=0 RM=0x4         REX2=1 | OUTREG=XED_REG_SPL*/
case 323: /*(1, 1, 0, 0, 4, 2) -> REXB4=0 REXB=0 RM=0x4         REX2=1 | OUTREG=XED_REG_SPL*/
case 451: /*(1, 1, 0, 0, 4, 3) -> REXB4=0 REXB=0 RM=0x4         REX2=1 | OUTREG=XED_REG_SPL*/
    xed3_operand_set_outreg(d, XED_REG_SPL);
/*pacify the compiler */
(void)d;
    break;
case 68: /*(0, 0, 1, 0, 4, 0) -> REXB4=0 REXB=1 RM=0x4  | OUTREG=XED_REG_R12B*/
case 196: /*(0, 0, 1, 0, 4, 1) -> REXB4=0 REXB=1 RM=0x4  | OUTREG=XED_REG_R12B*/
case 324: /*(0, 0, 1, 0, 4, 2) -> REXB4=0 REXB=1 RM=0x4  | OUTREG=XED_REG_R12B*/
case 452: /*(0, 0, 1, 0, 4, 3) -> REXB4=0 REXB=1 RM=0x4  | OUTREG=XED_REG_R12B*/
case 70: /*(0, 1, 1, 0, 4, 0) -> REXB4=0 REXB=1 RM=0x4  | OUTREG=XED_REG_R12B*/
case 198: /*(0, 1, 1, 0, 4, 1) -> REXB4=0 REXB=1 RM=0x4  | OUTREG=XED_REG_R12B*/
case 326: /*(0, 1, 1, 0, 4, 2) -> REXB4=0 REXB=1 RM=0x4  | OUTREG=XED_REG_R12B*/
case 454: /*(0, 1, 1, 0, 4, 3) -> REXB4=0 REXB=1 RM=0x4  | OUTREG=XED_REG_R12B*/
case 69: /*(1, 0, 1, 0, 4, 0) -> REXB4=0 REXB=1 RM=0x4  | OUTREG=XED_REG_R12B*/
case 197: /*(1, 0, 1, 0, 4, 1) -> REXB4=0 REXB=1 RM=0x4  | OUTREG=XED_REG_R12B*/
case 325: /*(1, 0, 1, 0, 4, 2) -> REXB4=0 REXB=1 RM=0x4  | OUTREG=XED_REG_R12B*/
case 453: /*(1, 0, 1, 0, 4, 3) -> REXB4=0 REXB=1 RM=0x4  | OUTREG=XED_REG_R12B*/
case 71: /*(1, 1, 1, 0, 4, 0) -> REXB4=0 REXB=1 RM=0x4  | OUTREG=XED_REG_R12B*/
case 199: /*(1, 1, 1, 0, 4, 1) -> REXB4=0 REXB=1 RM=0x4  | OUTREG=XED_REG_R12B*/
case 327: /*(1, 1, 1, 0, 4, 2) -> REXB4=0 REXB=1 RM=0x4  | OUTREG=XED_REG_R12B*/
case 455: /*(1, 1, 1, 0, 4, 3) -> REXB4=0 REXB=1 RM=0x4  | OUTREG=XED_REG_R12B*/
    xed3_operand_set_outreg(d, XED_REG_R12B);
/*pacify the compiler */
(void)d;
    break;
case 72: /*(0, 0, 0, 1, 4, 0) -> REXB4=1 REXB=0 RM=0x4  | OUTREG=XED_REG_R20B HAS_EGPR=1*/
case 200: /*(0, 0, 0, 1, 4, 1) -> REXB4=1 REXB=0 RM=0x4  | OUTREG=XED_REG_R20B HAS_EGPR=1*/
case 328: /*(0, 0, 0, 1, 4, 2) -> REXB4=1 REXB=0 RM=0x4  | OUTREG=XED_REG_R20B HAS_EGPR=1*/
case 456: /*(0, 0, 0, 1, 4, 3) -> REXB4=1 REXB=0 RM=0x4  | OUTREG=XED_REG_R20B HAS_EGPR=1*/
case 74: /*(0, 1, 0, 1, 4, 0) -> REXB4=1 REXB=0 RM=0x4  | OUTREG=XED_REG_R20B HAS_EGPR=1*/
case 202: /*(0, 1, 0, 1, 4, 1) -> REXB4=1 REXB=0 RM=0x4  | OUTREG=XED_REG_R20B HAS_EGPR=1*/
case 330: /*(0, 1, 0, 1, 4, 2) -> REXB4=1 REXB=0 RM=0x4  | OUTREG=XED_REG_R20B HAS_EGPR=1*/
case 458: /*(0, 1, 0, 1, 4, 3) -> REXB4=1 REXB=0 RM=0x4  | OUTREG=XED_REG_R20B HAS_EGPR=1*/
case 73: /*(1, 0, 0, 1, 4, 0) -> REXB4=1 REXB=0 RM=0x4  | OUTREG=XED_REG_R20B HAS_EGPR=1*/
case 201: /*(1, 0, 0, 1, 4, 1) -> REXB4=1 REXB=0 RM=0x4  | OUTREG=XED_REG_R20B HAS_EGPR=1*/
case 329: /*(1, 0, 0, 1, 4, 2) -> REXB4=1 REXB=0 RM=0x4  | OUTREG=XED_REG_R20B HAS_EGPR=1*/
case 457: /*(1, 0, 0, 1, 4, 3) -> REXB4=1 REXB=0 RM=0x4  | OUTREG=XED_REG_R20B HAS_EGPR=1*/
case 75: /*(1, 1, 0, 1, 4, 0) -> REXB4=1 REXB=0 RM=0x4  | OUTREG=XED_REG_R20B HAS_EGPR=1*/
case 203: /*(1, 1, 0, 1, 4, 1) -> REXB4=1 REXB=0 RM=0x4  | OUTREG=XED_REG_R20B HAS_EGPR=1*/
case 331: /*(1, 1, 0, 1, 4, 2) -> REXB4=1 REXB=0 RM=0x4  | OUTREG=XED_REG_R20B HAS_EGPR=1*/
case 459: /*(1, 1, 0, 1, 4, 3) -> REXB4=1 REXB=0 RM=0x4  | OUTREG=XED_REG_R20B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R20B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 76: /*(0, 0, 1, 1, 4, 0) -> REXB4=1 REXB=1 RM=0x4  | OUTREG=XED_REG_R28B HAS_EGPR=1*/
case 204: /*(0, 0, 1, 1, 4, 1) -> REXB4=1 REXB=1 RM=0x4  | OUTREG=XED_REG_R28B HAS_EGPR=1*/
case 332: /*(0, 0, 1, 1, 4, 2) -> REXB4=1 REXB=1 RM=0x4  | OUTREG=XED_REG_R28B HAS_EGPR=1*/
case 460: /*(0, 0, 1, 1, 4, 3) -> REXB4=1 REXB=1 RM=0x4  | OUTREG=XED_REG_R28B HAS_EGPR=1*/
case 78: /*(0, 1, 1, 1, 4, 0) -> REXB4=1 REXB=1 RM=0x4  | OUTREG=XED_REG_R28B HAS_EGPR=1*/
case 206: /*(0, 1, 1, 1, 4, 1) -> REXB4=1 REXB=1 RM=0x4  | OUTREG=XED_REG_R28B HAS_EGPR=1*/
case 334: /*(0, 1, 1, 1, 4, 2) -> REXB4=1 REXB=1 RM=0x4  | OUTREG=XED_REG_R28B HAS_EGPR=1*/
case 462: /*(0, 1, 1, 1, 4, 3) -> REXB4=1 REXB=1 RM=0x4  | OUTREG=XED_REG_R28B HAS_EGPR=1*/
case 77: /*(1, 0, 1, 1, 4, 0) -> REXB4=1 REXB=1 RM=0x4  | OUTREG=XED_REG_R28B HAS_EGPR=1*/
case 205: /*(1, 0, 1, 1, 4, 1) -> REXB4=1 REXB=1 RM=0x4  | OUTREG=XED_REG_R28B HAS_EGPR=1*/
case 333: /*(1, 0, 1, 1, 4, 2) -> REXB4=1 REXB=1 RM=0x4  | OUTREG=XED_REG_R28B HAS_EGPR=1*/
case 461: /*(1, 0, 1, 1, 4, 3) -> REXB4=1 REXB=1 RM=0x4  | OUTREG=XED_REG_R28B HAS_EGPR=1*/
case 79: /*(1, 1, 1, 1, 4, 0) -> REXB4=1 REXB=1 RM=0x4  | OUTREG=XED_REG_R28B HAS_EGPR=1*/
case 207: /*(1, 1, 1, 1, 4, 1) -> REXB4=1 REXB=1 RM=0x4  | OUTREG=XED_REG_R28B HAS_EGPR=1*/
case 335: /*(1, 1, 1, 1, 4, 2) -> REXB4=1 REXB=1 RM=0x4  | OUTREG=XED_REG_R28B HAS_EGPR=1*/
case 463: /*(1, 1, 1, 1, 4, 3) -> REXB4=1 REXB=1 RM=0x4  | OUTREG=XED_REG_R28B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R28B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 80: /*(0, 0, 0, 0, 5, 0) -> REXB4=0 REXB=0 RM=0x5  REX=0  REX2=0  VEXVALID!=2 | OUTREG=XED_REG_CH*/
case 208: /*(0, 0, 0, 0, 5, 1) -> REXB4=0 REXB=0 RM=0x5  REX=0  REX2=0  VEXVALID!=2 | OUTREG=XED_REG_CH*/
case 464: /*(0, 0, 0, 0, 5, 3) -> REXB4=0 REXB=0 RM=0x5  REX=0  REX2=0  VEXVALID!=2 | OUTREG=XED_REG_CH*/
    xed3_operand_set_outreg(d, XED_REG_CH);
/*pacify the compiler */
(void)d;
    break;
case 81: /*(1, 0, 0, 0, 5, 0) -> REXB4=0 REXB=0 RM=0x5  REX=1  REX2=0 | OUTREG=XED_REG_BPL*/
case 209: /*(1, 0, 0, 0, 5, 1) -> REXB4=0 REXB=0 RM=0x5  REX=1  REX2=0 | OUTREG=XED_REG_BPL*/
case 337: /*(1, 0, 0, 0, 5, 2) -> REXB4=0 REXB=0 RM=0x5  REX=1  REX2=0 | OUTREG=XED_REG_BPL*/
case 465: /*(1, 0, 0, 0, 5, 3) -> REXB4=0 REXB=0 RM=0x5  REX=1  REX2=0 | OUTREG=XED_REG_BPL*/
    xed3_operand_set_outreg(d, XED_REG_BPL);
/*pacify the compiler */
(void)d;
    break;
case 82: /*(0, 1, 0, 0, 5, 0) -> REXB4=0 REXB=0 RM=0x5         REX2=1 | OUTREG=XED_REG_BPL*/
case 210: /*(0, 1, 0, 0, 5, 1) -> REXB4=0 REXB=0 RM=0x5         REX2=1 | OUTREG=XED_REG_BPL*/
case 338: /*(0, 1, 0, 0, 5, 2) -> REXB4=0 REXB=0 RM=0x5         REX2=1 | OUTREG=XED_REG_BPL*/
case 466: /*(0, 1, 0, 0, 5, 3) -> REXB4=0 REXB=0 RM=0x5         REX2=1 | OUTREG=XED_REG_BPL*/
case 83: /*(1, 1, 0, 0, 5, 0) -> REXB4=0 REXB=0 RM=0x5         REX2=1 | OUTREG=XED_REG_BPL*/
case 211: /*(1, 1, 0, 0, 5, 1) -> REXB4=0 REXB=0 RM=0x5         REX2=1 | OUTREG=XED_REG_BPL*/
case 339: /*(1, 1, 0, 0, 5, 2) -> REXB4=0 REXB=0 RM=0x5         REX2=1 | OUTREG=XED_REG_BPL*/
case 467: /*(1, 1, 0, 0, 5, 3) -> REXB4=0 REXB=0 RM=0x5         REX2=1 | OUTREG=XED_REG_BPL*/
    xed3_operand_set_outreg(d, XED_REG_BPL);
/*pacify the compiler */
(void)d;
    break;
case 84: /*(0, 0, 1, 0, 5, 0) -> REXB4=0 REXB=1 RM=0x5  | OUTREG=XED_REG_R13B*/
case 212: /*(0, 0, 1, 0, 5, 1) -> REXB4=0 REXB=1 RM=0x5  | OUTREG=XED_REG_R13B*/
case 340: /*(0, 0, 1, 0, 5, 2) -> REXB4=0 REXB=1 RM=0x5  | OUTREG=XED_REG_R13B*/
case 468: /*(0, 0, 1, 0, 5, 3) -> REXB4=0 REXB=1 RM=0x5  | OUTREG=XED_REG_R13B*/
case 86: /*(0, 1, 1, 0, 5, 0) -> REXB4=0 REXB=1 RM=0x5  | OUTREG=XED_REG_R13B*/
case 214: /*(0, 1, 1, 0, 5, 1) -> REXB4=0 REXB=1 RM=0x5  | OUTREG=XED_REG_R13B*/
case 342: /*(0, 1, 1, 0, 5, 2) -> REXB4=0 REXB=1 RM=0x5  | OUTREG=XED_REG_R13B*/
case 470: /*(0, 1, 1, 0, 5, 3) -> REXB4=0 REXB=1 RM=0x5  | OUTREG=XED_REG_R13B*/
case 85: /*(1, 0, 1, 0, 5, 0) -> REXB4=0 REXB=1 RM=0x5  | OUTREG=XED_REG_R13B*/
case 213: /*(1, 0, 1, 0, 5, 1) -> REXB4=0 REXB=1 RM=0x5  | OUTREG=XED_REG_R13B*/
case 341: /*(1, 0, 1, 0, 5, 2) -> REXB4=0 REXB=1 RM=0x5  | OUTREG=XED_REG_R13B*/
case 469: /*(1, 0, 1, 0, 5, 3) -> REXB4=0 REXB=1 RM=0x5  | OUTREG=XED_REG_R13B*/
case 87: /*(1, 1, 1, 0, 5, 0) -> REXB4=0 REXB=1 RM=0x5  | OUTREG=XED_REG_R13B*/
case 215: /*(1, 1, 1, 0, 5, 1) -> REXB4=0 REXB=1 RM=0x5  | OUTREG=XED_REG_R13B*/
case 343: /*(1, 1, 1, 0, 5, 2) -> REXB4=0 REXB=1 RM=0x5  | OUTREG=XED_REG_R13B*/
case 471: /*(1, 1, 1, 0, 5, 3) -> REXB4=0 REXB=1 RM=0x5  | OUTREG=XED_REG_R13B*/
    xed3_operand_set_outreg(d, XED_REG_R13B);
/*pacify the compiler */
(void)d;
    break;
case 88: /*(0, 0, 0, 1, 5, 0) -> REXB4=1 REXB=0 RM=0x5  | OUTREG=XED_REG_R21B HAS_EGPR=1*/
case 216: /*(0, 0, 0, 1, 5, 1) -> REXB4=1 REXB=0 RM=0x5  | OUTREG=XED_REG_R21B HAS_EGPR=1*/
case 344: /*(0, 0, 0, 1, 5, 2) -> REXB4=1 REXB=0 RM=0x5  | OUTREG=XED_REG_R21B HAS_EGPR=1*/
case 472: /*(0, 0, 0, 1, 5, 3) -> REXB4=1 REXB=0 RM=0x5  | OUTREG=XED_REG_R21B HAS_EGPR=1*/
case 90: /*(0, 1, 0, 1, 5, 0) -> REXB4=1 REXB=0 RM=0x5  | OUTREG=XED_REG_R21B HAS_EGPR=1*/
case 218: /*(0, 1, 0, 1, 5, 1) -> REXB4=1 REXB=0 RM=0x5  | OUTREG=XED_REG_R21B HAS_EGPR=1*/
case 346: /*(0, 1, 0, 1, 5, 2) -> REXB4=1 REXB=0 RM=0x5  | OUTREG=XED_REG_R21B HAS_EGPR=1*/
case 474: /*(0, 1, 0, 1, 5, 3) -> REXB4=1 REXB=0 RM=0x5  | OUTREG=XED_REG_R21B HAS_EGPR=1*/
case 89: /*(1, 0, 0, 1, 5, 0) -> REXB4=1 REXB=0 RM=0x5  | OUTREG=XED_REG_R21B HAS_EGPR=1*/
case 217: /*(1, 0, 0, 1, 5, 1) -> REXB4=1 REXB=0 RM=0x5  | OUTREG=XED_REG_R21B HAS_EGPR=1*/
case 345: /*(1, 0, 0, 1, 5, 2) -> REXB4=1 REXB=0 RM=0x5  | OUTREG=XED_REG_R21B HAS_EGPR=1*/
case 473: /*(1, 0, 0, 1, 5, 3) -> REXB4=1 REXB=0 RM=0x5  | OUTREG=XED_REG_R21B HAS_EGPR=1*/
case 91: /*(1, 1, 0, 1, 5, 0) -> REXB4=1 REXB=0 RM=0x5  | OUTREG=XED_REG_R21B HAS_EGPR=1*/
case 219: /*(1, 1, 0, 1, 5, 1) -> REXB4=1 REXB=0 RM=0x5  | OUTREG=XED_REG_R21B HAS_EGPR=1*/
case 347: /*(1, 1, 0, 1, 5, 2) -> REXB4=1 REXB=0 RM=0x5  | OUTREG=XED_REG_R21B HAS_EGPR=1*/
case 475: /*(1, 1, 0, 1, 5, 3) -> REXB4=1 REXB=0 RM=0x5  | OUTREG=XED_REG_R21B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R21B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 92: /*(0, 0, 1, 1, 5, 0) -> REXB4=1 REXB=1 RM=0x5  | OUTREG=XED_REG_R29B HAS_EGPR=1*/
case 220: /*(0, 0, 1, 1, 5, 1) -> REXB4=1 REXB=1 RM=0x5  | OUTREG=XED_REG_R29B HAS_EGPR=1*/
case 348: /*(0, 0, 1, 1, 5, 2) -> REXB4=1 REXB=1 RM=0x5  | OUTREG=XED_REG_R29B HAS_EGPR=1*/
case 476: /*(0, 0, 1, 1, 5, 3) -> REXB4=1 REXB=1 RM=0x5  | OUTREG=XED_REG_R29B HAS_EGPR=1*/
case 94: /*(0, 1, 1, 1, 5, 0) -> REXB4=1 REXB=1 RM=0x5  | OUTREG=XED_REG_R29B HAS_EGPR=1*/
case 222: /*(0, 1, 1, 1, 5, 1) -> REXB4=1 REXB=1 RM=0x5  | OUTREG=XED_REG_R29B HAS_EGPR=1*/
case 350: /*(0, 1, 1, 1, 5, 2) -> REXB4=1 REXB=1 RM=0x5  | OUTREG=XED_REG_R29B HAS_EGPR=1*/
case 478: /*(0, 1, 1, 1, 5, 3) -> REXB4=1 REXB=1 RM=0x5  | OUTREG=XED_REG_R29B HAS_EGPR=1*/
case 93: /*(1, 0, 1, 1, 5, 0) -> REXB4=1 REXB=1 RM=0x5  | OUTREG=XED_REG_R29B HAS_EGPR=1*/
case 221: /*(1, 0, 1, 1, 5, 1) -> REXB4=1 REXB=1 RM=0x5  | OUTREG=XED_REG_R29B HAS_EGPR=1*/
case 349: /*(1, 0, 1, 1, 5, 2) -> REXB4=1 REXB=1 RM=0x5  | OUTREG=XED_REG_R29B HAS_EGPR=1*/
case 477: /*(1, 0, 1, 1, 5, 3) -> REXB4=1 REXB=1 RM=0x5  | OUTREG=XED_REG_R29B HAS_EGPR=1*/
case 95: /*(1, 1, 1, 1, 5, 0) -> REXB4=1 REXB=1 RM=0x5  | OUTREG=XED_REG_R29B HAS_EGPR=1*/
case 223: /*(1, 1, 1, 1, 5, 1) -> REXB4=1 REXB=1 RM=0x5  | OUTREG=XED_REG_R29B HAS_EGPR=1*/
case 351: /*(1, 1, 1, 1, 5, 2) -> REXB4=1 REXB=1 RM=0x5  | OUTREG=XED_REG_R29B HAS_EGPR=1*/
case 479: /*(1, 1, 1, 1, 5, 3) -> REXB4=1 REXB=1 RM=0x5  | OUTREG=XED_REG_R29B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R29B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 96: /*(0, 0, 0, 0, 6, 0) -> REXB4=0 REXB=0 RM=0x6  REX=0  REX2=0  VEXVALID!=2 | OUTREG=XED_REG_DH*/
case 224: /*(0, 0, 0, 0, 6, 1) -> REXB4=0 REXB=0 RM=0x6  REX=0  REX2=0  VEXVALID!=2 | OUTREG=XED_REG_DH*/
case 480: /*(0, 0, 0, 0, 6, 3) -> REXB4=0 REXB=0 RM=0x6  REX=0  REX2=0  VEXVALID!=2 | OUTREG=XED_REG_DH*/
    xed3_operand_set_outreg(d, XED_REG_DH);
/*pacify the compiler */
(void)d;
    break;
case 97: /*(1, 0, 0, 0, 6, 0) -> REXB4=0 REXB=0 RM=0x6  REX=1  REX2=0 | OUTREG=XED_REG_SIL*/
case 225: /*(1, 0, 0, 0, 6, 1) -> REXB4=0 REXB=0 RM=0x6  REX=1  REX2=0 | OUTREG=XED_REG_SIL*/
case 353: /*(1, 0, 0, 0, 6, 2) -> REXB4=0 REXB=0 RM=0x6  REX=1  REX2=0 | OUTREG=XED_REG_SIL*/
case 481: /*(1, 0, 0, 0, 6, 3) -> REXB4=0 REXB=0 RM=0x6  REX=1  REX2=0 | OUTREG=XED_REG_SIL*/
    xed3_operand_set_outreg(d, XED_REG_SIL);
/*pacify the compiler */
(void)d;
    break;
case 98: /*(0, 1, 0, 0, 6, 0) -> REXB4=0 REXB=0 RM=0x6         REX2=1 | OUTREG=XED_REG_SIL*/
case 226: /*(0, 1, 0, 0, 6, 1) -> REXB4=0 REXB=0 RM=0x6         REX2=1 | OUTREG=XED_REG_SIL*/
case 354: /*(0, 1, 0, 0, 6, 2) -> REXB4=0 REXB=0 RM=0x6         REX2=1 | OUTREG=XED_REG_SIL*/
case 482: /*(0, 1, 0, 0, 6, 3) -> REXB4=0 REXB=0 RM=0x6         REX2=1 | OUTREG=XED_REG_SIL*/
case 99: /*(1, 1, 0, 0, 6, 0) -> REXB4=0 REXB=0 RM=0x6         REX2=1 | OUTREG=XED_REG_SIL*/
case 227: /*(1, 1, 0, 0, 6, 1) -> REXB4=0 REXB=0 RM=0x6         REX2=1 | OUTREG=XED_REG_SIL*/
case 355: /*(1, 1, 0, 0, 6, 2) -> REXB4=0 REXB=0 RM=0x6         REX2=1 | OUTREG=XED_REG_SIL*/
case 483: /*(1, 1, 0, 0, 6, 3) -> REXB4=0 REXB=0 RM=0x6         REX2=1 | OUTREG=XED_REG_SIL*/
    xed3_operand_set_outreg(d, XED_REG_SIL);
/*pacify the compiler */
(void)d;
    break;
case 100: /*(0, 0, 1, 0, 6, 0) -> REXB4=0 REXB=1 RM=0x6  | OUTREG=XED_REG_R14B*/
case 228: /*(0, 0, 1, 0, 6, 1) -> REXB4=0 REXB=1 RM=0x6  | OUTREG=XED_REG_R14B*/
case 356: /*(0, 0, 1, 0, 6, 2) -> REXB4=0 REXB=1 RM=0x6  | OUTREG=XED_REG_R14B*/
case 484: /*(0, 0, 1, 0, 6, 3) -> REXB4=0 REXB=1 RM=0x6  | OUTREG=XED_REG_R14B*/
case 102: /*(0, 1, 1, 0, 6, 0) -> REXB4=0 REXB=1 RM=0x6  | OUTREG=XED_REG_R14B*/
case 230: /*(0, 1, 1, 0, 6, 1) -> REXB4=0 REXB=1 RM=0x6  | OUTREG=XED_REG_R14B*/
case 358: /*(0, 1, 1, 0, 6, 2) -> REXB4=0 REXB=1 RM=0x6  | OUTREG=XED_REG_R14B*/
case 486: /*(0, 1, 1, 0, 6, 3) -> REXB4=0 REXB=1 RM=0x6  | OUTREG=XED_REG_R14B*/
case 101: /*(1, 0, 1, 0, 6, 0) -> REXB4=0 REXB=1 RM=0x6  | OUTREG=XED_REG_R14B*/
case 229: /*(1, 0, 1, 0, 6, 1) -> REXB4=0 REXB=1 RM=0x6  | OUTREG=XED_REG_R14B*/
case 357: /*(1, 0, 1, 0, 6, 2) -> REXB4=0 REXB=1 RM=0x6  | OUTREG=XED_REG_R14B*/
case 485: /*(1, 0, 1, 0, 6, 3) -> REXB4=0 REXB=1 RM=0x6  | OUTREG=XED_REG_R14B*/
case 103: /*(1, 1, 1, 0, 6, 0) -> REXB4=0 REXB=1 RM=0x6  | OUTREG=XED_REG_R14B*/
case 231: /*(1, 1, 1, 0, 6, 1) -> REXB4=0 REXB=1 RM=0x6  | OUTREG=XED_REG_R14B*/
case 359: /*(1, 1, 1, 0, 6, 2) -> REXB4=0 REXB=1 RM=0x6  | OUTREG=XED_REG_R14B*/
case 487: /*(1, 1, 1, 0, 6, 3) -> REXB4=0 REXB=1 RM=0x6  | OUTREG=XED_REG_R14B*/
    xed3_operand_set_outreg(d, XED_REG_R14B);
/*pacify the compiler */
(void)d;
    break;
case 104: /*(0, 0, 0, 1, 6, 0) -> REXB4=1 REXB=0 RM=0x6  | OUTREG=XED_REG_R22B HAS_EGPR=1*/
case 232: /*(0, 0, 0, 1, 6, 1) -> REXB4=1 REXB=0 RM=0x6  | OUTREG=XED_REG_R22B HAS_EGPR=1*/
case 360: /*(0, 0, 0, 1, 6, 2) -> REXB4=1 REXB=0 RM=0x6  | OUTREG=XED_REG_R22B HAS_EGPR=1*/
case 488: /*(0, 0, 0, 1, 6, 3) -> REXB4=1 REXB=0 RM=0x6  | OUTREG=XED_REG_R22B HAS_EGPR=1*/
case 106: /*(0, 1, 0, 1, 6, 0) -> REXB4=1 REXB=0 RM=0x6  | OUTREG=XED_REG_R22B HAS_EGPR=1*/
case 234: /*(0, 1, 0, 1, 6, 1) -> REXB4=1 REXB=0 RM=0x6  | OUTREG=XED_REG_R22B HAS_EGPR=1*/
case 362: /*(0, 1, 0, 1, 6, 2) -> REXB4=1 REXB=0 RM=0x6  | OUTREG=XED_REG_R22B HAS_EGPR=1*/
case 490: /*(0, 1, 0, 1, 6, 3) -> REXB4=1 REXB=0 RM=0x6  | OUTREG=XED_REG_R22B HAS_EGPR=1*/
case 105: /*(1, 0, 0, 1, 6, 0) -> REXB4=1 REXB=0 RM=0x6  | OUTREG=XED_REG_R22B HAS_EGPR=1*/
case 233: /*(1, 0, 0, 1, 6, 1) -> REXB4=1 REXB=0 RM=0x6  | OUTREG=XED_REG_R22B HAS_EGPR=1*/
case 361: /*(1, 0, 0, 1, 6, 2) -> REXB4=1 REXB=0 RM=0x6  | OUTREG=XED_REG_R22B HAS_EGPR=1*/
case 489: /*(1, 0, 0, 1, 6, 3) -> REXB4=1 REXB=0 RM=0x6  | OUTREG=XED_REG_R22B HAS_EGPR=1*/
case 107: /*(1, 1, 0, 1, 6, 0) -> REXB4=1 REXB=0 RM=0x6  | OUTREG=XED_REG_R22B HAS_EGPR=1*/
case 235: /*(1, 1, 0, 1, 6, 1) -> REXB4=1 REXB=0 RM=0x6  | OUTREG=XED_REG_R22B HAS_EGPR=1*/
case 363: /*(1, 1, 0, 1, 6, 2) -> REXB4=1 REXB=0 RM=0x6  | OUTREG=XED_REG_R22B HAS_EGPR=1*/
case 491: /*(1, 1, 0, 1, 6, 3) -> REXB4=1 REXB=0 RM=0x6  | OUTREG=XED_REG_R22B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R22B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 108: /*(0, 0, 1, 1, 6, 0) -> REXB4=1 REXB=1 RM=0x6  | OUTREG=XED_REG_R30B HAS_EGPR=1*/
case 236: /*(0, 0, 1, 1, 6, 1) -> REXB4=1 REXB=1 RM=0x6  | OUTREG=XED_REG_R30B HAS_EGPR=1*/
case 364: /*(0, 0, 1, 1, 6, 2) -> REXB4=1 REXB=1 RM=0x6  | OUTREG=XED_REG_R30B HAS_EGPR=1*/
case 492: /*(0, 0, 1, 1, 6, 3) -> REXB4=1 REXB=1 RM=0x6  | OUTREG=XED_REG_R30B HAS_EGPR=1*/
case 110: /*(0, 1, 1, 1, 6, 0) -> REXB4=1 REXB=1 RM=0x6  | OUTREG=XED_REG_R30B HAS_EGPR=1*/
case 238: /*(0, 1, 1, 1, 6, 1) -> REXB4=1 REXB=1 RM=0x6  | OUTREG=XED_REG_R30B HAS_EGPR=1*/
case 366: /*(0, 1, 1, 1, 6, 2) -> REXB4=1 REXB=1 RM=0x6  | OUTREG=XED_REG_R30B HAS_EGPR=1*/
case 494: /*(0, 1, 1, 1, 6, 3) -> REXB4=1 REXB=1 RM=0x6  | OUTREG=XED_REG_R30B HAS_EGPR=1*/
case 109: /*(1, 0, 1, 1, 6, 0) -> REXB4=1 REXB=1 RM=0x6  | OUTREG=XED_REG_R30B HAS_EGPR=1*/
case 237: /*(1, 0, 1, 1, 6, 1) -> REXB4=1 REXB=1 RM=0x6  | OUTREG=XED_REG_R30B HAS_EGPR=1*/
case 365: /*(1, 0, 1, 1, 6, 2) -> REXB4=1 REXB=1 RM=0x6  | OUTREG=XED_REG_R30B HAS_EGPR=1*/
case 493: /*(1, 0, 1, 1, 6, 3) -> REXB4=1 REXB=1 RM=0x6  | OUTREG=XED_REG_R30B HAS_EGPR=1*/
case 111: /*(1, 1, 1, 1, 6, 0) -> REXB4=1 REXB=1 RM=0x6  | OUTREG=XED_REG_R30B HAS_EGPR=1*/
case 239: /*(1, 1, 1, 1, 6, 1) -> REXB4=1 REXB=1 RM=0x6  | OUTREG=XED_REG_R30B HAS_EGPR=1*/
case 367: /*(1, 1, 1, 1, 6, 2) -> REXB4=1 REXB=1 RM=0x6  | OUTREG=XED_REG_R30B HAS_EGPR=1*/
case 495: /*(1, 1, 1, 1, 6, 3) -> REXB4=1 REXB=1 RM=0x6  | OUTREG=XED_REG_R30B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R30B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 112: /*(0, 0, 0, 0, 7, 0) -> REXB4=0 REXB=0 RM=0x7  REX=0  REX2=0  VEXVALID!=2 | OUTREG=XED_REG_BH*/
case 240: /*(0, 0, 0, 0, 7, 1) -> REXB4=0 REXB=0 RM=0x7  REX=0  REX2=0  VEXVALID!=2 | OUTREG=XED_REG_BH*/
case 496: /*(0, 0, 0, 0, 7, 3) -> REXB4=0 REXB=0 RM=0x7  REX=0  REX2=0  VEXVALID!=2 | OUTREG=XED_REG_BH*/
    xed3_operand_set_outreg(d, XED_REG_BH);
/*pacify the compiler */
(void)d;
    break;
case 113: /*(1, 0, 0, 0, 7, 0) -> REXB4=0 REXB=0 RM=0x7  REX=1  REX2=0 | OUTREG=XED_REG_DIL*/
case 241: /*(1, 0, 0, 0, 7, 1) -> REXB4=0 REXB=0 RM=0x7  REX=1  REX2=0 | OUTREG=XED_REG_DIL*/
case 369: /*(1, 0, 0, 0, 7, 2) -> REXB4=0 REXB=0 RM=0x7  REX=1  REX2=0 | OUTREG=XED_REG_DIL*/
case 497: /*(1, 0, 0, 0, 7, 3) -> REXB4=0 REXB=0 RM=0x7  REX=1  REX2=0 | OUTREG=XED_REG_DIL*/
    xed3_operand_set_outreg(d, XED_REG_DIL);
/*pacify the compiler */
(void)d;
    break;
case 114: /*(0, 1, 0, 0, 7, 0) -> REXB4=0 REXB=0 RM=0x7         REX2=1 | OUTREG=XED_REG_DIL*/
case 242: /*(0, 1, 0, 0, 7, 1) -> REXB4=0 REXB=0 RM=0x7         REX2=1 | OUTREG=XED_REG_DIL*/
case 370: /*(0, 1, 0, 0, 7, 2) -> REXB4=0 REXB=0 RM=0x7         REX2=1 | OUTREG=XED_REG_DIL*/
case 498: /*(0, 1, 0, 0, 7, 3) -> REXB4=0 REXB=0 RM=0x7         REX2=1 | OUTREG=XED_REG_DIL*/
case 115: /*(1, 1, 0, 0, 7, 0) -> REXB4=0 REXB=0 RM=0x7         REX2=1 | OUTREG=XED_REG_DIL*/
case 243: /*(1, 1, 0, 0, 7, 1) -> REXB4=0 REXB=0 RM=0x7         REX2=1 | OUTREG=XED_REG_DIL*/
case 371: /*(1, 1, 0, 0, 7, 2) -> REXB4=0 REXB=0 RM=0x7         REX2=1 | OUTREG=XED_REG_DIL*/
case 499: /*(1, 1, 0, 0, 7, 3) -> REXB4=0 REXB=0 RM=0x7         REX2=1 | OUTREG=XED_REG_DIL*/
    xed3_operand_set_outreg(d, XED_REG_DIL);
/*pacify the compiler */
(void)d;
    break;
case 116: /*(0, 0, 1, 0, 7, 0) -> REXB4=0 REXB=1 RM=0x7  | OUTREG=XED_REG_R15B*/
case 244: /*(0, 0, 1, 0, 7, 1) -> REXB4=0 REXB=1 RM=0x7  | OUTREG=XED_REG_R15B*/
case 372: /*(0, 0, 1, 0, 7, 2) -> REXB4=0 REXB=1 RM=0x7  | OUTREG=XED_REG_R15B*/
case 500: /*(0, 0, 1, 0, 7, 3) -> REXB4=0 REXB=1 RM=0x7  | OUTREG=XED_REG_R15B*/
case 118: /*(0, 1, 1, 0, 7, 0) -> REXB4=0 REXB=1 RM=0x7  | OUTREG=XED_REG_R15B*/
case 246: /*(0, 1, 1, 0, 7, 1) -> REXB4=0 REXB=1 RM=0x7  | OUTREG=XED_REG_R15B*/
case 374: /*(0, 1, 1, 0, 7, 2) -> REXB4=0 REXB=1 RM=0x7  | OUTREG=XED_REG_R15B*/
case 502: /*(0, 1, 1, 0, 7, 3) -> REXB4=0 REXB=1 RM=0x7  | OUTREG=XED_REG_R15B*/
case 117: /*(1, 0, 1, 0, 7, 0) -> REXB4=0 REXB=1 RM=0x7  | OUTREG=XED_REG_R15B*/
case 245: /*(1, 0, 1, 0, 7, 1) -> REXB4=0 REXB=1 RM=0x7  | OUTREG=XED_REG_R15B*/
case 373: /*(1, 0, 1, 0, 7, 2) -> REXB4=0 REXB=1 RM=0x7  | OUTREG=XED_REG_R15B*/
case 501: /*(1, 0, 1, 0, 7, 3) -> REXB4=0 REXB=1 RM=0x7  | OUTREG=XED_REG_R15B*/
case 119: /*(1, 1, 1, 0, 7, 0) -> REXB4=0 REXB=1 RM=0x7  | OUTREG=XED_REG_R15B*/
case 247: /*(1, 1, 1, 0, 7, 1) -> REXB4=0 REXB=1 RM=0x7  | OUTREG=XED_REG_R15B*/
case 375: /*(1, 1, 1, 0, 7, 2) -> REXB4=0 REXB=1 RM=0x7  | OUTREG=XED_REG_R15B*/
case 503: /*(1, 1, 1, 0, 7, 3) -> REXB4=0 REXB=1 RM=0x7  | OUTREG=XED_REG_R15B*/
    xed3_operand_set_outreg(d, XED_REG_R15B);
/*pacify the compiler */
(void)d;
    break;
case 120: /*(0, 0, 0, 1, 7, 0) -> REXB4=1 REXB=0 RM=0x7  | OUTREG=XED_REG_R23B HAS_EGPR=1*/
case 248: /*(0, 0, 0, 1, 7, 1) -> REXB4=1 REXB=0 RM=0x7  | OUTREG=XED_REG_R23B HAS_EGPR=1*/
case 376: /*(0, 0, 0, 1, 7, 2) -> REXB4=1 REXB=0 RM=0x7  | OUTREG=XED_REG_R23B HAS_EGPR=1*/
case 504: /*(0, 0, 0, 1, 7, 3) -> REXB4=1 REXB=0 RM=0x7  | OUTREG=XED_REG_R23B HAS_EGPR=1*/
case 122: /*(0, 1, 0, 1, 7, 0) -> REXB4=1 REXB=0 RM=0x7  | OUTREG=XED_REG_R23B HAS_EGPR=1*/
case 250: /*(0, 1, 0, 1, 7, 1) -> REXB4=1 REXB=0 RM=0x7  | OUTREG=XED_REG_R23B HAS_EGPR=1*/
case 378: /*(0, 1, 0, 1, 7, 2) -> REXB4=1 REXB=0 RM=0x7  | OUTREG=XED_REG_R23B HAS_EGPR=1*/
case 506: /*(0, 1, 0, 1, 7, 3) -> REXB4=1 REXB=0 RM=0x7  | OUTREG=XED_REG_R23B HAS_EGPR=1*/
case 121: /*(1, 0, 0, 1, 7, 0) -> REXB4=1 REXB=0 RM=0x7  | OUTREG=XED_REG_R23B HAS_EGPR=1*/
case 249: /*(1, 0, 0, 1, 7, 1) -> REXB4=1 REXB=0 RM=0x7  | OUTREG=XED_REG_R23B HAS_EGPR=1*/
case 377: /*(1, 0, 0, 1, 7, 2) -> REXB4=1 REXB=0 RM=0x7  | OUTREG=XED_REG_R23B HAS_EGPR=1*/
case 505: /*(1, 0, 0, 1, 7, 3) -> REXB4=1 REXB=0 RM=0x7  | OUTREG=XED_REG_R23B HAS_EGPR=1*/
case 123: /*(1, 1, 0, 1, 7, 0) -> REXB4=1 REXB=0 RM=0x7  | OUTREG=XED_REG_R23B HAS_EGPR=1*/
case 251: /*(1, 1, 0, 1, 7, 1) -> REXB4=1 REXB=0 RM=0x7  | OUTREG=XED_REG_R23B HAS_EGPR=1*/
case 379: /*(1, 1, 0, 1, 7, 2) -> REXB4=1 REXB=0 RM=0x7  | OUTREG=XED_REG_R23B HAS_EGPR=1*/
case 507: /*(1, 1, 0, 1, 7, 3) -> REXB4=1 REXB=0 RM=0x7  | OUTREG=XED_REG_R23B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R23B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 124: /*(0, 0, 1, 1, 7, 0) -> REXB4=1 REXB=1 RM=0x7  | OUTREG=XED_REG_R31B HAS_EGPR=1*/
case 252: /*(0, 0, 1, 1, 7, 1) -> REXB4=1 REXB=1 RM=0x7  | OUTREG=XED_REG_R31B HAS_EGPR=1*/
case 380: /*(0, 0, 1, 1, 7, 2) -> REXB4=1 REXB=1 RM=0x7  | OUTREG=XED_REG_R31B HAS_EGPR=1*/
case 508: /*(0, 0, 1, 1, 7, 3) -> REXB4=1 REXB=1 RM=0x7  | OUTREG=XED_REG_R31B HAS_EGPR=1*/
case 126: /*(0, 1, 1, 1, 7, 0) -> REXB4=1 REXB=1 RM=0x7  | OUTREG=XED_REG_R31B HAS_EGPR=1*/
case 254: /*(0, 1, 1, 1, 7, 1) -> REXB4=1 REXB=1 RM=0x7  | OUTREG=XED_REG_R31B HAS_EGPR=1*/
case 382: /*(0, 1, 1, 1, 7, 2) -> REXB4=1 REXB=1 RM=0x7  | OUTREG=XED_REG_R31B HAS_EGPR=1*/
case 510: /*(0, 1, 1, 1, 7, 3) -> REXB4=1 REXB=1 RM=0x7  | OUTREG=XED_REG_R31B HAS_EGPR=1*/
case 125: /*(1, 0, 1, 1, 7, 0) -> REXB4=1 REXB=1 RM=0x7  | OUTREG=XED_REG_R31B HAS_EGPR=1*/
case 253: /*(1, 0, 1, 1, 7, 1) -> REXB4=1 REXB=1 RM=0x7  | OUTREG=XED_REG_R31B HAS_EGPR=1*/
case 381: /*(1, 0, 1, 1, 7, 2) -> REXB4=1 REXB=1 RM=0x7  | OUTREG=XED_REG_R31B HAS_EGPR=1*/
case 509: /*(1, 0, 1, 1, 7, 3) -> REXB4=1 REXB=1 RM=0x7  | OUTREG=XED_REG_R31B HAS_EGPR=1*/
case 127: /*(1, 1, 1, 1, 7, 0) -> REXB4=1 REXB=1 RM=0x7  | OUTREG=XED_REG_R31B HAS_EGPR=1*/
case 255: /*(1, 1, 1, 1, 7, 1) -> REXB4=1 REXB=1 RM=0x7  | OUTREG=XED_REG_R31B HAS_EGPR=1*/
case 383: /*(1, 1, 1, 1, 7, 2) -> REXB4=1 REXB=1 RM=0x7  | OUTREG=XED_REG_R31B HAS_EGPR=1*/
case 511: /*(1, 1, 1, 1, 7, 3) -> REXB4=1 REXB=1 RM=0x7  | OUTREG=XED_REG_R31B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R31B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 320: /*(0, 0, 0, 0, 4, 2) -> REXB4=0 REXB=0 RM=0x4  REX=0  REX2=0  EVV | OUTREG=XED_REG_SPL*/
    xed3_operand_set_outreg(d, XED_REG_SPL);
/*pacify the compiler */
(void)d;
    break;
case 336: /*(0, 0, 0, 0, 5, 2) -> REXB4=0 REXB=0 RM=0x5  REX=0  REX2=0  EVV | OUTREG=XED_REG_BPL*/
    xed3_operand_set_outreg(d, XED_REG_BPL);
/*pacify the compiler */
(void)d;
    break;
case 352: /*(0, 0, 0, 0, 6, 2) -> REXB4=0 REXB=0 RM=0x6  REX=0  REX2=0  EVV | OUTREG=XED_REG_SIL*/
    xed3_operand_set_outreg(d, XED_REG_SIL);
/*pacify the compiler */
(void)d;
    break;
case 368: /*(0, 0, 0, 0, 7, 2) -> REXB4=0 REXB=0 RM=0x7  REX=0  REX2=0  EVV | OUTREG=XED_REG_DIL*/
    xed3_operand_set_outreg(d, XED_REG_DIL);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_GPR8_SB(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_rex(d)) << ((0));
key += (xed3_operand_get_rex2(d)) << ((1));
key += (xed3_operand_get_rexb(d)) << ((2));
key += (xed3_operand_get_rexb4(d)) << ((3));
key += (xed3_operand_get_srm(d)) << ((4));
key += (xed3_operand_get_vexvalid(d)) << ((7));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0, 0, 0, 0, 0) -> REXB4=0 REXB=0 SRM=0x0  | OUTREG=XED_REG_AL*/
case 128: /*(0, 0, 0, 0, 0, 1) -> REXB4=0 REXB=0 SRM=0x0  | OUTREG=XED_REG_AL*/
case 256: /*(0, 0, 0, 0, 0, 2) -> REXB4=0 REXB=0 SRM=0x0  | OUTREG=XED_REG_AL*/
case 384: /*(0, 0, 0, 0, 0, 3) -> REXB4=0 REXB=0 SRM=0x0  | OUTREG=XED_REG_AL*/
case 2: /*(0, 1, 0, 0, 0, 0) -> REXB4=0 REXB=0 SRM=0x0  | OUTREG=XED_REG_AL*/
case 130: /*(0, 1, 0, 0, 0, 1) -> REXB4=0 REXB=0 SRM=0x0  | OUTREG=XED_REG_AL*/
case 258: /*(0, 1, 0, 0, 0, 2) -> REXB4=0 REXB=0 SRM=0x0  | OUTREG=XED_REG_AL*/
case 386: /*(0, 1, 0, 0, 0, 3) -> REXB4=0 REXB=0 SRM=0x0  | OUTREG=XED_REG_AL*/
case 1: /*(1, 0, 0, 0, 0, 0) -> REXB4=0 REXB=0 SRM=0x0  | OUTREG=XED_REG_AL*/
case 129: /*(1, 0, 0, 0, 0, 1) -> REXB4=0 REXB=0 SRM=0x0  | OUTREG=XED_REG_AL*/
case 257: /*(1, 0, 0, 0, 0, 2) -> REXB4=0 REXB=0 SRM=0x0  | OUTREG=XED_REG_AL*/
case 385: /*(1, 0, 0, 0, 0, 3) -> REXB4=0 REXB=0 SRM=0x0  | OUTREG=XED_REG_AL*/
case 3: /*(1, 1, 0, 0, 0, 0) -> REXB4=0 REXB=0 SRM=0x0  | OUTREG=XED_REG_AL*/
case 131: /*(1, 1, 0, 0, 0, 1) -> REXB4=0 REXB=0 SRM=0x0  | OUTREG=XED_REG_AL*/
case 259: /*(1, 1, 0, 0, 0, 2) -> REXB4=0 REXB=0 SRM=0x0  | OUTREG=XED_REG_AL*/
case 387: /*(1, 1, 0, 0, 0, 3) -> REXB4=0 REXB=0 SRM=0x0  | OUTREG=XED_REG_AL*/
    xed3_operand_set_outreg(d, XED_REG_AL);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(0, 0, 1, 0, 0, 0) -> REXB4=0 REXB=1 SRM=0x0  | OUTREG=XED_REG_R8B*/
case 132: /*(0, 0, 1, 0, 0, 1) -> REXB4=0 REXB=1 SRM=0x0  | OUTREG=XED_REG_R8B*/
case 260: /*(0, 0, 1, 0, 0, 2) -> REXB4=0 REXB=1 SRM=0x0  | OUTREG=XED_REG_R8B*/
case 388: /*(0, 0, 1, 0, 0, 3) -> REXB4=0 REXB=1 SRM=0x0  | OUTREG=XED_REG_R8B*/
case 6: /*(0, 1, 1, 0, 0, 0) -> REXB4=0 REXB=1 SRM=0x0  | OUTREG=XED_REG_R8B*/
case 134: /*(0, 1, 1, 0, 0, 1) -> REXB4=0 REXB=1 SRM=0x0  | OUTREG=XED_REG_R8B*/
case 262: /*(0, 1, 1, 0, 0, 2) -> REXB4=0 REXB=1 SRM=0x0  | OUTREG=XED_REG_R8B*/
case 390: /*(0, 1, 1, 0, 0, 3) -> REXB4=0 REXB=1 SRM=0x0  | OUTREG=XED_REG_R8B*/
case 5: /*(1, 0, 1, 0, 0, 0) -> REXB4=0 REXB=1 SRM=0x0  | OUTREG=XED_REG_R8B*/
case 133: /*(1, 0, 1, 0, 0, 1) -> REXB4=0 REXB=1 SRM=0x0  | OUTREG=XED_REG_R8B*/
case 261: /*(1, 0, 1, 0, 0, 2) -> REXB4=0 REXB=1 SRM=0x0  | OUTREG=XED_REG_R8B*/
case 389: /*(1, 0, 1, 0, 0, 3) -> REXB4=0 REXB=1 SRM=0x0  | OUTREG=XED_REG_R8B*/
case 7: /*(1, 1, 1, 0, 0, 0) -> REXB4=0 REXB=1 SRM=0x0  | OUTREG=XED_REG_R8B*/
case 135: /*(1, 1, 1, 0, 0, 1) -> REXB4=0 REXB=1 SRM=0x0  | OUTREG=XED_REG_R8B*/
case 263: /*(1, 1, 1, 0, 0, 2) -> REXB4=0 REXB=1 SRM=0x0  | OUTREG=XED_REG_R8B*/
case 391: /*(1, 1, 1, 0, 0, 3) -> REXB4=0 REXB=1 SRM=0x0  | OUTREG=XED_REG_R8B*/
    xed3_operand_set_outreg(d, XED_REG_R8B);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 0, 0, 1, 0, 0) -> REXB4=1 REXB=0 SRM=0x0  | OUTREG=XED_REG_R16B HAS_EGPR=1*/
case 136: /*(0, 0, 0, 1, 0, 1) -> REXB4=1 REXB=0 SRM=0x0  | OUTREG=XED_REG_R16B HAS_EGPR=1*/
case 264: /*(0, 0, 0, 1, 0, 2) -> REXB4=1 REXB=0 SRM=0x0  | OUTREG=XED_REG_R16B HAS_EGPR=1*/
case 392: /*(0, 0, 0, 1, 0, 3) -> REXB4=1 REXB=0 SRM=0x0  | OUTREG=XED_REG_R16B HAS_EGPR=1*/
case 10: /*(0, 1, 0, 1, 0, 0) -> REXB4=1 REXB=0 SRM=0x0  | OUTREG=XED_REG_R16B HAS_EGPR=1*/
case 138: /*(0, 1, 0, 1, 0, 1) -> REXB4=1 REXB=0 SRM=0x0  | OUTREG=XED_REG_R16B HAS_EGPR=1*/
case 266: /*(0, 1, 0, 1, 0, 2) -> REXB4=1 REXB=0 SRM=0x0  | OUTREG=XED_REG_R16B HAS_EGPR=1*/
case 394: /*(0, 1, 0, 1, 0, 3) -> REXB4=1 REXB=0 SRM=0x0  | OUTREG=XED_REG_R16B HAS_EGPR=1*/
case 9: /*(1, 0, 0, 1, 0, 0) -> REXB4=1 REXB=0 SRM=0x0  | OUTREG=XED_REG_R16B HAS_EGPR=1*/
case 137: /*(1, 0, 0, 1, 0, 1) -> REXB4=1 REXB=0 SRM=0x0  | OUTREG=XED_REG_R16B HAS_EGPR=1*/
case 265: /*(1, 0, 0, 1, 0, 2) -> REXB4=1 REXB=0 SRM=0x0  | OUTREG=XED_REG_R16B HAS_EGPR=1*/
case 393: /*(1, 0, 0, 1, 0, 3) -> REXB4=1 REXB=0 SRM=0x0  | OUTREG=XED_REG_R16B HAS_EGPR=1*/
case 11: /*(1, 1, 0, 1, 0, 0) -> REXB4=1 REXB=0 SRM=0x0  | OUTREG=XED_REG_R16B HAS_EGPR=1*/
case 139: /*(1, 1, 0, 1, 0, 1) -> REXB4=1 REXB=0 SRM=0x0  | OUTREG=XED_REG_R16B HAS_EGPR=1*/
case 267: /*(1, 1, 0, 1, 0, 2) -> REXB4=1 REXB=0 SRM=0x0  | OUTREG=XED_REG_R16B HAS_EGPR=1*/
case 395: /*(1, 1, 0, 1, 0, 3) -> REXB4=1 REXB=0 SRM=0x0  | OUTREG=XED_REG_R16B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R16B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(0, 0, 1, 1, 0, 0) -> REXB4=1 REXB=1 SRM=0x0  | OUTREG=XED_REG_R24B HAS_EGPR=1*/
case 140: /*(0, 0, 1, 1, 0, 1) -> REXB4=1 REXB=1 SRM=0x0  | OUTREG=XED_REG_R24B HAS_EGPR=1*/
case 268: /*(0, 0, 1, 1, 0, 2) -> REXB4=1 REXB=1 SRM=0x0  | OUTREG=XED_REG_R24B HAS_EGPR=1*/
case 396: /*(0, 0, 1, 1, 0, 3) -> REXB4=1 REXB=1 SRM=0x0  | OUTREG=XED_REG_R24B HAS_EGPR=1*/
case 14: /*(0, 1, 1, 1, 0, 0) -> REXB4=1 REXB=1 SRM=0x0  | OUTREG=XED_REG_R24B HAS_EGPR=1*/
case 142: /*(0, 1, 1, 1, 0, 1) -> REXB4=1 REXB=1 SRM=0x0  | OUTREG=XED_REG_R24B HAS_EGPR=1*/
case 270: /*(0, 1, 1, 1, 0, 2) -> REXB4=1 REXB=1 SRM=0x0  | OUTREG=XED_REG_R24B HAS_EGPR=1*/
case 398: /*(0, 1, 1, 1, 0, 3) -> REXB4=1 REXB=1 SRM=0x0  | OUTREG=XED_REG_R24B HAS_EGPR=1*/
case 13: /*(1, 0, 1, 1, 0, 0) -> REXB4=1 REXB=1 SRM=0x0  | OUTREG=XED_REG_R24B HAS_EGPR=1*/
case 141: /*(1, 0, 1, 1, 0, 1) -> REXB4=1 REXB=1 SRM=0x0  | OUTREG=XED_REG_R24B HAS_EGPR=1*/
case 269: /*(1, 0, 1, 1, 0, 2) -> REXB4=1 REXB=1 SRM=0x0  | OUTREG=XED_REG_R24B HAS_EGPR=1*/
case 397: /*(1, 0, 1, 1, 0, 3) -> REXB4=1 REXB=1 SRM=0x0  | OUTREG=XED_REG_R24B HAS_EGPR=1*/
case 15: /*(1, 1, 1, 1, 0, 0) -> REXB4=1 REXB=1 SRM=0x0  | OUTREG=XED_REG_R24B HAS_EGPR=1*/
case 143: /*(1, 1, 1, 1, 0, 1) -> REXB4=1 REXB=1 SRM=0x0  | OUTREG=XED_REG_R24B HAS_EGPR=1*/
case 271: /*(1, 1, 1, 1, 0, 2) -> REXB4=1 REXB=1 SRM=0x0  | OUTREG=XED_REG_R24B HAS_EGPR=1*/
case 399: /*(1, 1, 1, 1, 0, 3) -> REXB4=1 REXB=1 SRM=0x0  | OUTREG=XED_REG_R24B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R24B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 16: /*(0, 0, 0, 0, 1, 0) -> REXB4=0 REXB=0 SRM=0x1  | OUTREG=XED_REG_CL*/
case 144: /*(0, 0, 0, 0, 1, 1) -> REXB4=0 REXB=0 SRM=0x1  | OUTREG=XED_REG_CL*/
case 272: /*(0, 0, 0, 0, 1, 2) -> REXB4=0 REXB=0 SRM=0x1  | OUTREG=XED_REG_CL*/
case 400: /*(0, 0, 0, 0, 1, 3) -> REXB4=0 REXB=0 SRM=0x1  | OUTREG=XED_REG_CL*/
case 18: /*(0, 1, 0, 0, 1, 0) -> REXB4=0 REXB=0 SRM=0x1  | OUTREG=XED_REG_CL*/
case 146: /*(0, 1, 0, 0, 1, 1) -> REXB4=0 REXB=0 SRM=0x1  | OUTREG=XED_REG_CL*/
case 274: /*(0, 1, 0, 0, 1, 2) -> REXB4=0 REXB=0 SRM=0x1  | OUTREG=XED_REG_CL*/
case 402: /*(0, 1, 0, 0, 1, 3) -> REXB4=0 REXB=0 SRM=0x1  | OUTREG=XED_REG_CL*/
case 17: /*(1, 0, 0, 0, 1, 0) -> REXB4=0 REXB=0 SRM=0x1  | OUTREG=XED_REG_CL*/
case 145: /*(1, 0, 0, 0, 1, 1) -> REXB4=0 REXB=0 SRM=0x1  | OUTREG=XED_REG_CL*/
case 273: /*(1, 0, 0, 0, 1, 2) -> REXB4=0 REXB=0 SRM=0x1  | OUTREG=XED_REG_CL*/
case 401: /*(1, 0, 0, 0, 1, 3) -> REXB4=0 REXB=0 SRM=0x1  | OUTREG=XED_REG_CL*/
case 19: /*(1, 1, 0, 0, 1, 0) -> REXB4=0 REXB=0 SRM=0x1  | OUTREG=XED_REG_CL*/
case 147: /*(1, 1, 0, 0, 1, 1) -> REXB4=0 REXB=0 SRM=0x1  | OUTREG=XED_REG_CL*/
case 275: /*(1, 1, 0, 0, 1, 2) -> REXB4=0 REXB=0 SRM=0x1  | OUTREG=XED_REG_CL*/
case 403: /*(1, 1, 0, 0, 1, 3) -> REXB4=0 REXB=0 SRM=0x1  | OUTREG=XED_REG_CL*/
    xed3_operand_set_outreg(d, XED_REG_CL);
/*pacify the compiler */
(void)d;
    break;
case 20: /*(0, 0, 1, 0, 1, 0) -> REXB4=0 REXB=1 SRM=0x1  | OUTREG=XED_REG_R9B*/
case 148: /*(0, 0, 1, 0, 1, 1) -> REXB4=0 REXB=1 SRM=0x1  | OUTREG=XED_REG_R9B*/
case 276: /*(0, 0, 1, 0, 1, 2) -> REXB4=0 REXB=1 SRM=0x1  | OUTREG=XED_REG_R9B*/
case 404: /*(0, 0, 1, 0, 1, 3) -> REXB4=0 REXB=1 SRM=0x1  | OUTREG=XED_REG_R9B*/
case 22: /*(0, 1, 1, 0, 1, 0) -> REXB4=0 REXB=1 SRM=0x1  | OUTREG=XED_REG_R9B*/
case 150: /*(0, 1, 1, 0, 1, 1) -> REXB4=0 REXB=1 SRM=0x1  | OUTREG=XED_REG_R9B*/
case 278: /*(0, 1, 1, 0, 1, 2) -> REXB4=0 REXB=1 SRM=0x1  | OUTREG=XED_REG_R9B*/
case 406: /*(0, 1, 1, 0, 1, 3) -> REXB4=0 REXB=1 SRM=0x1  | OUTREG=XED_REG_R9B*/
case 21: /*(1, 0, 1, 0, 1, 0) -> REXB4=0 REXB=1 SRM=0x1  | OUTREG=XED_REG_R9B*/
case 149: /*(1, 0, 1, 0, 1, 1) -> REXB4=0 REXB=1 SRM=0x1  | OUTREG=XED_REG_R9B*/
case 277: /*(1, 0, 1, 0, 1, 2) -> REXB4=0 REXB=1 SRM=0x1  | OUTREG=XED_REG_R9B*/
case 405: /*(1, 0, 1, 0, 1, 3) -> REXB4=0 REXB=1 SRM=0x1  | OUTREG=XED_REG_R9B*/
case 23: /*(1, 1, 1, 0, 1, 0) -> REXB4=0 REXB=1 SRM=0x1  | OUTREG=XED_REG_R9B*/
case 151: /*(1, 1, 1, 0, 1, 1) -> REXB4=0 REXB=1 SRM=0x1  | OUTREG=XED_REG_R9B*/
case 279: /*(1, 1, 1, 0, 1, 2) -> REXB4=0 REXB=1 SRM=0x1  | OUTREG=XED_REG_R9B*/
case 407: /*(1, 1, 1, 0, 1, 3) -> REXB4=0 REXB=1 SRM=0x1  | OUTREG=XED_REG_R9B*/
    xed3_operand_set_outreg(d, XED_REG_R9B);
/*pacify the compiler */
(void)d;
    break;
case 24: /*(0, 0, 0, 1, 1, 0) -> REXB4=1 REXB=0 SRM=0x1  | OUTREG=XED_REG_R17B HAS_EGPR=1*/
case 152: /*(0, 0, 0, 1, 1, 1) -> REXB4=1 REXB=0 SRM=0x1  | OUTREG=XED_REG_R17B HAS_EGPR=1*/
case 280: /*(0, 0, 0, 1, 1, 2) -> REXB4=1 REXB=0 SRM=0x1  | OUTREG=XED_REG_R17B HAS_EGPR=1*/
case 408: /*(0, 0, 0, 1, 1, 3) -> REXB4=1 REXB=0 SRM=0x1  | OUTREG=XED_REG_R17B HAS_EGPR=1*/
case 26: /*(0, 1, 0, 1, 1, 0) -> REXB4=1 REXB=0 SRM=0x1  | OUTREG=XED_REG_R17B HAS_EGPR=1*/
case 154: /*(0, 1, 0, 1, 1, 1) -> REXB4=1 REXB=0 SRM=0x1  | OUTREG=XED_REG_R17B HAS_EGPR=1*/
case 282: /*(0, 1, 0, 1, 1, 2) -> REXB4=1 REXB=0 SRM=0x1  | OUTREG=XED_REG_R17B HAS_EGPR=1*/
case 410: /*(0, 1, 0, 1, 1, 3) -> REXB4=1 REXB=0 SRM=0x1  | OUTREG=XED_REG_R17B HAS_EGPR=1*/
case 25: /*(1, 0, 0, 1, 1, 0) -> REXB4=1 REXB=0 SRM=0x1  | OUTREG=XED_REG_R17B HAS_EGPR=1*/
case 153: /*(1, 0, 0, 1, 1, 1) -> REXB4=1 REXB=0 SRM=0x1  | OUTREG=XED_REG_R17B HAS_EGPR=1*/
case 281: /*(1, 0, 0, 1, 1, 2) -> REXB4=1 REXB=0 SRM=0x1  | OUTREG=XED_REG_R17B HAS_EGPR=1*/
case 409: /*(1, 0, 0, 1, 1, 3) -> REXB4=1 REXB=0 SRM=0x1  | OUTREG=XED_REG_R17B HAS_EGPR=1*/
case 27: /*(1, 1, 0, 1, 1, 0) -> REXB4=1 REXB=0 SRM=0x1  | OUTREG=XED_REG_R17B HAS_EGPR=1*/
case 155: /*(1, 1, 0, 1, 1, 1) -> REXB4=1 REXB=0 SRM=0x1  | OUTREG=XED_REG_R17B HAS_EGPR=1*/
case 283: /*(1, 1, 0, 1, 1, 2) -> REXB4=1 REXB=0 SRM=0x1  | OUTREG=XED_REG_R17B HAS_EGPR=1*/
case 411: /*(1, 1, 0, 1, 1, 3) -> REXB4=1 REXB=0 SRM=0x1  | OUTREG=XED_REG_R17B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R17B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 28: /*(0, 0, 1, 1, 1, 0) -> REXB4=1 REXB=1 SRM=0x1  | OUTREG=XED_REG_R25B HAS_EGPR=1*/
case 156: /*(0, 0, 1, 1, 1, 1) -> REXB4=1 REXB=1 SRM=0x1  | OUTREG=XED_REG_R25B HAS_EGPR=1*/
case 284: /*(0, 0, 1, 1, 1, 2) -> REXB4=1 REXB=1 SRM=0x1  | OUTREG=XED_REG_R25B HAS_EGPR=1*/
case 412: /*(0, 0, 1, 1, 1, 3) -> REXB4=1 REXB=1 SRM=0x1  | OUTREG=XED_REG_R25B HAS_EGPR=1*/
case 30: /*(0, 1, 1, 1, 1, 0) -> REXB4=1 REXB=1 SRM=0x1  | OUTREG=XED_REG_R25B HAS_EGPR=1*/
case 158: /*(0, 1, 1, 1, 1, 1) -> REXB4=1 REXB=1 SRM=0x1  | OUTREG=XED_REG_R25B HAS_EGPR=1*/
case 286: /*(0, 1, 1, 1, 1, 2) -> REXB4=1 REXB=1 SRM=0x1  | OUTREG=XED_REG_R25B HAS_EGPR=1*/
case 414: /*(0, 1, 1, 1, 1, 3) -> REXB4=1 REXB=1 SRM=0x1  | OUTREG=XED_REG_R25B HAS_EGPR=1*/
case 29: /*(1, 0, 1, 1, 1, 0) -> REXB4=1 REXB=1 SRM=0x1  | OUTREG=XED_REG_R25B HAS_EGPR=1*/
case 157: /*(1, 0, 1, 1, 1, 1) -> REXB4=1 REXB=1 SRM=0x1  | OUTREG=XED_REG_R25B HAS_EGPR=1*/
case 285: /*(1, 0, 1, 1, 1, 2) -> REXB4=1 REXB=1 SRM=0x1  | OUTREG=XED_REG_R25B HAS_EGPR=1*/
case 413: /*(1, 0, 1, 1, 1, 3) -> REXB4=1 REXB=1 SRM=0x1  | OUTREG=XED_REG_R25B HAS_EGPR=1*/
case 31: /*(1, 1, 1, 1, 1, 0) -> REXB4=1 REXB=1 SRM=0x1  | OUTREG=XED_REG_R25B HAS_EGPR=1*/
case 159: /*(1, 1, 1, 1, 1, 1) -> REXB4=1 REXB=1 SRM=0x1  | OUTREG=XED_REG_R25B HAS_EGPR=1*/
case 287: /*(1, 1, 1, 1, 1, 2) -> REXB4=1 REXB=1 SRM=0x1  | OUTREG=XED_REG_R25B HAS_EGPR=1*/
case 415: /*(1, 1, 1, 1, 1, 3) -> REXB4=1 REXB=1 SRM=0x1  | OUTREG=XED_REG_R25B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R25B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 32: /*(0, 0, 0, 0, 2, 0) -> REXB4=0 REXB=0 SRM=0x2  | OUTREG=XED_REG_DL*/
case 160: /*(0, 0, 0, 0, 2, 1) -> REXB4=0 REXB=0 SRM=0x2  | OUTREG=XED_REG_DL*/
case 288: /*(0, 0, 0, 0, 2, 2) -> REXB4=0 REXB=0 SRM=0x2  | OUTREG=XED_REG_DL*/
case 416: /*(0, 0, 0, 0, 2, 3) -> REXB4=0 REXB=0 SRM=0x2  | OUTREG=XED_REG_DL*/
case 34: /*(0, 1, 0, 0, 2, 0) -> REXB4=0 REXB=0 SRM=0x2  | OUTREG=XED_REG_DL*/
case 162: /*(0, 1, 0, 0, 2, 1) -> REXB4=0 REXB=0 SRM=0x2  | OUTREG=XED_REG_DL*/
case 290: /*(0, 1, 0, 0, 2, 2) -> REXB4=0 REXB=0 SRM=0x2  | OUTREG=XED_REG_DL*/
case 418: /*(0, 1, 0, 0, 2, 3) -> REXB4=0 REXB=0 SRM=0x2  | OUTREG=XED_REG_DL*/
case 33: /*(1, 0, 0, 0, 2, 0) -> REXB4=0 REXB=0 SRM=0x2  | OUTREG=XED_REG_DL*/
case 161: /*(1, 0, 0, 0, 2, 1) -> REXB4=0 REXB=0 SRM=0x2  | OUTREG=XED_REG_DL*/
case 289: /*(1, 0, 0, 0, 2, 2) -> REXB4=0 REXB=0 SRM=0x2  | OUTREG=XED_REG_DL*/
case 417: /*(1, 0, 0, 0, 2, 3) -> REXB4=0 REXB=0 SRM=0x2  | OUTREG=XED_REG_DL*/
case 35: /*(1, 1, 0, 0, 2, 0) -> REXB4=0 REXB=0 SRM=0x2  | OUTREG=XED_REG_DL*/
case 163: /*(1, 1, 0, 0, 2, 1) -> REXB4=0 REXB=0 SRM=0x2  | OUTREG=XED_REG_DL*/
case 291: /*(1, 1, 0, 0, 2, 2) -> REXB4=0 REXB=0 SRM=0x2  | OUTREG=XED_REG_DL*/
case 419: /*(1, 1, 0, 0, 2, 3) -> REXB4=0 REXB=0 SRM=0x2  | OUTREG=XED_REG_DL*/
    xed3_operand_set_outreg(d, XED_REG_DL);
/*pacify the compiler */
(void)d;
    break;
case 36: /*(0, 0, 1, 0, 2, 0) -> REXB4=0 REXB=1 SRM=0x2  | OUTREG=XED_REG_R10B*/
case 164: /*(0, 0, 1, 0, 2, 1) -> REXB4=0 REXB=1 SRM=0x2  | OUTREG=XED_REG_R10B*/
case 292: /*(0, 0, 1, 0, 2, 2) -> REXB4=0 REXB=1 SRM=0x2  | OUTREG=XED_REG_R10B*/
case 420: /*(0, 0, 1, 0, 2, 3) -> REXB4=0 REXB=1 SRM=0x2  | OUTREG=XED_REG_R10B*/
case 38: /*(0, 1, 1, 0, 2, 0) -> REXB4=0 REXB=1 SRM=0x2  | OUTREG=XED_REG_R10B*/
case 166: /*(0, 1, 1, 0, 2, 1) -> REXB4=0 REXB=1 SRM=0x2  | OUTREG=XED_REG_R10B*/
case 294: /*(0, 1, 1, 0, 2, 2) -> REXB4=0 REXB=1 SRM=0x2  | OUTREG=XED_REG_R10B*/
case 422: /*(0, 1, 1, 0, 2, 3) -> REXB4=0 REXB=1 SRM=0x2  | OUTREG=XED_REG_R10B*/
case 37: /*(1, 0, 1, 0, 2, 0) -> REXB4=0 REXB=1 SRM=0x2  | OUTREG=XED_REG_R10B*/
case 165: /*(1, 0, 1, 0, 2, 1) -> REXB4=0 REXB=1 SRM=0x2  | OUTREG=XED_REG_R10B*/
case 293: /*(1, 0, 1, 0, 2, 2) -> REXB4=0 REXB=1 SRM=0x2  | OUTREG=XED_REG_R10B*/
case 421: /*(1, 0, 1, 0, 2, 3) -> REXB4=0 REXB=1 SRM=0x2  | OUTREG=XED_REG_R10B*/
case 39: /*(1, 1, 1, 0, 2, 0) -> REXB4=0 REXB=1 SRM=0x2  | OUTREG=XED_REG_R10B*/
case 167: /*(1, 1, 1, 0, 2, 1) -> REXB4=0 REXB=1 SRM=0x2  | OUTREG=XED_REG_R10B*/
case 295: /*(1, 1, 1, 0, 2, 2) -> REXB4=0 REXB=1 SRM=0x2  | OUTREG=XED_REG_R10B*/
case 423: /*(1, 1, 1, 0, 2, 3) -> REXB4=0 REXB=1 SRM=0x2  | OUTREG=XED_REG_R10B*/
    xed3_operand_set_outreg(d, XED_REG_R10B);
/*pacify the compiler */
(void)d;
    break;
case 40: /*(0, 0, 0, 1, 2, 0) -> REXB4=1 REXB=0 SRM=0x2  | OUTREG=XED_REG_R18B HAS_EGPR=1*/
case 168: /*(0, 0, 0, 1, 2, 1) -> REXB4=1 REXB=0 SRM=0x2  | OUTREG=XED_REG_R18B HAS_EGPR=1*/
case 296: /*(0, 0, 0, 1, 2, 2) -> REXB4=1 REXB=0 SRM=0x2  | OUTREG=XED_REG_R18B HAS_EGPR=1*/
case 424: /*(0, 0, 0, 1, 2, 3) -> REXB4=1 REXB=0 SRM=0x2  | OUTREG=XED_REG_R18B HAS_EGPR=1*/
case 42: /*(0, 1, 0, 1, 2, 0) -> REXB4=1 REXB=0 SRM=0x2  | OUTREG=XED_REG_R18B HAS_EGPR=1*/
case 170: /*(0, 1, 0, 1, 2, 1) -> REXB4=1 REXB=0 SRM=0x2  | OUTREG=XED_REG_R18B HAS_EGPR=1*/
case 298: /*(0, 1, 0, 1, 2, 2) -> REXB4=1 REXB=0 SRM=0x2  | OUTREG=XED_REG_R18B HAS_EGPR=1*/
case 426: /*(0, 1, 0, 1, 2, 3) -> REXB4=1 REXB=0 SRM=0x2  | OUTREG=XED_REG_R18B HAS_EGPR=1*/
case 41: /*(1, 0, 0, 1, 2, 0) -> REXB4=1 REXB=0 SRM=0x2  | OUTREG=XED_REG_R18B HAS_EGPR=1*/
case 169: /*(1, 0, 0, 1, 2, 1) -> REXB4=1 REXB=0 SRM=0x2  | OUTREG=XED_REG_R18B HAS_EGPR=1*/
case 297: /*(1, 0, 0, 1, 2, 2) -> REXB4=1 REXB=0 SRM=0x2  | OUTREG=XED_REG_R18B HAS_EGPR=1*/
case 425: /*(1, 0, 0, 1, 2, 3) -> REXB4=1 REXB=0 SRM=0x2  | OUTREG=XED_REG_R18B HAS_EGPR=1*/
case 43: /*(1, 1, 0, 1, 2, 0) -> REXB4=1 REXB=0 SRM=0x2  | OUTREG=XED_REG_R18B HAS_EGPR=1*/
case 171: /*(1, 1, 0, 1, 2, 1) -> REXB4=1 REXB=0 SRM=0x2  | OUTREG=XED_REG_R18B HAS_EGPR=1*/
case 299: /*(1, 1, 0, 1, 2, 2) -> REXB4=1 REXB=0 SRM=0x2  | OUTREG=XED_REG_R18B HAS_EGPR=1*/
case 427: /*(1, 1, 0, 1, 2, 3) -> REXB4=1 REXB=0 SRM=0x2  | OUTREG=XED_REG_R18B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R18B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 44: /*(0, 0, 1, 1, 2, 0) -> REXB4=1 REXB=1 SRM=0x2  | OUTREG=XED_REG_R26B HAS_EGPR=1*/
case 172: /*(0, 0, 1, 1, 2, 1) -> REXB4=1 REXB=1 SRM=0x2  | OUTREG=XED_REG_R26B HAS_EGPR=1*/
case 300: /*(0, 0, 1, 1, 2, 2) -> REXB4=1 REXB=1 SRM=0x2  | OUTREG=XED_REG_R26B HAS_EGPR=1*/
case 428: /*(0, 0, 1, 1, 2, 3) -> REXB4=1 REXB=1 SRM=0x2  | OUTREG=XED_REG_R26B HAS_EGPR=1*/
case 46: /*(0, 1, 1, 1, 2, 0) -> REXB4=1 REXB=1 SRM=0x2  | OUTREG=XED_REG_R26B HAS_EGPR=1*/
case 174: /*(0, 1, 1, 1, 2, 1) -> REXB4=1 REXB=1 SRM=0x2  | OUTREG=XED_REG_R26B HAS_EGPR=1*/
case 302: /*(0, 1, 1, 1, 2, 2) -> REXB4=1 REXB=1 SRM=0x2  | OUTREG=XED_REG_R26B HAS_EGPR=1*/
case 430: /*(0, 1, 1, 1, 2, 3) -> REXB4=1 REXB=1 SRM=0x2  | OUTREG=XED_REG_R26B HAS_EGPR=1*/
case 45: /*(1, 0, 1, 1, 2, 0) -> REXB4=1 REXB=1 SRM=0x2  | OUTREG=XED_REG_R26B HAS_EGPR=1*/
case 173: /*(1, 0, 1, 1, 2, 1) -> REXB4=1 REXB=1 SRM=0x2  | OUTREG=XED_REG_R26B HAS_EGPR=1*/
case 301: /*(1, 0, 1, 1, 2, 2) -> REXB4=1 REXB=1 SRM=0x2  | OUTREG=XED_REG_R26B HAS_EGPR=1*/
case 429: /*(1, 0, 1, 1, 2, 3) -> REXB4=1 REXB=1 SRM=0x2  | OUTREG=XED_REG_R26B HAS_EGPR=1*/
case 47: /*(1, 1, 1, 1, 2, 0) -> REXB4=1 REXB=1 SRM=0x2  | OUTREG=XED_REG_R26B HAS_EGPR=1*/
case 175: /*(1, 1, 1, 1, 2, 1) -> REXB4=1 REXB=1 SRM=0x2  | OUTREG=XED_REG_R26B HAS_EGPR=1*/
case 303: /*(1, 1, 1, 1, 2, 2) -> REXB4=1 REXB=1 SRM=0x2  | OUTREG=XED_REG_R26B HAS_EGPR=1*/
case 431: /*(1, 1, 1, 1, 2, 3) -> REXB4=1 REXB=1 SRM=0x2  | OUTREG=XED_REG_R26B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R26B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 48: /*(0, 0, 0, 0, 3, 0) -> REXB4=0 REXB=0 SRM=0x3  | OUTREG=XED_REG_BL*/
case 176: /*(0, 0, 0, 0, 3, 1) -> REXB4=0 REXB=0 SRM=0x3  | OUTREG=XED_REG_BL*/
case 304: /*(0, 0, 0, 0, 3, 2) -> REXB4=0 REXB=0 SRM=0x3  | OUTREG=XED_REG_BL*/
case 432: /*(0, 0, 0, 0, 3, 3) -> REXB4=0 REXB=0 SRM=0x3  | OUTREG=XED_REG_BL*/
case 50: /*(0, 1, 0, 0, 3, 0) -> REXB4=0 REXB=0 SRM=0x3  | OUTREG=XED_REG_BL*/
case 178: /*(0, 1, 0, 0, 3, 1) -> REXB4=0 REXB=0 SRM=0x3  | OUTREG=XED_REG_BL*/
case 306: /*(0, 1, 0, 0, 3, 2) -> REXB4=0 REXB=0 SRM=0x3  | OUTREG=XED_REG_BL*/
case 434: /*(0, 1, 0, 0, 3, 3) -> REXB4=0 REXB=0 SRM=0x3  | OUTREG=XED_REG_BL*/
case 49: /*(1, 0, 0, 0, 3, 0) -> REXB4=0 REXB=0 SRM=0x3  | OUTREG=XED_REG_BL*/
case 177: /*(1, 0, 0, 0, 3, 1) -> REXB4=0 REXB=0 SRM=0x3  | OUTREG=XED_REG_BL*/
case 305: /*(1, 0, 0, 0, 3, 2) -> REXB4=0 REXB=0 SRM=0x3  | OUTREG=XED_REG_BL*/
case 433: /*(1, 0, 0, 0, 3, 3) -> REXB4=0 REXB=0 SRM=0x3  | OUTREG=XED_REG_BL*/
case 51: /*(1, 1, 0, 0, 3, 0) -> REXB4=0 REXB=0 SRM=0x3  | OUTREG=XED_REG_BL*/
case 179: /*(1, 1, 0, 0, 3, 1) -> REXB4=0 REXB=0 SRM=0x3  | OUTREG=XED_REG_BL*/
case 307: /*(1, 1, 0, 0, 3, 2) -> REXB4=0 REXB=0 SRM=0x3  | OUTREG=XED_REG_BL*/
case 435: /*(1, 1, 0, 0, 3, 3) -> REXB4=0 REXB=0 SRM=0x3  | OUTREG=XED_REG_BL*/
    xed3_operand_set_outreg(d, XED_REG_BL);
/*pacify the compiler */
(void)d;
    break;
case 52: /*(0, 0, 1, 0, 3, 0) -> REXB4=0 REXB=1 SRM=0x3  | OUTREG=XED_REG_R11B*/
case 180: /*(0, 0, 1, 0, 3, 1) -> REXB4=0 REXB=1 SRM=0x3  | OUTREG=XED_REG_R11B*/
case 308: /*(0, 0, 1, 0, 3, 2) -> REXB4=0 REXB=1 SRM=0x3  | OUTREG=XED_REG_R11B*/
case 436: /*(0, 0, 1, 0, 3, 3) -> REXB4=0 REXB=1 SRM=0x3  | OUTREG=XED_REG_R11B*/
case 54: /*(0, 1, 1, 0, 3, 0) -> REXB4=0 REXB=1 SRM=0x3  | OUTREG=XED_REG_R11B*/
case 182: /*(0, 1, 1, 0, 3, 1) -> REXB4=0 REXB=1 SRM=0x3  | OUTREG=XED_REG_R11B*/
case 310: /*(0, 1, 1, 0, 3, 2) -> REXB4=0 REXB=1 SRM=0x3  | OUTREG=XED_REG_R11B*/
case 438: /*(0, 1, 1, 0, 3, 3) -> REXB4=0 REXB=1 SRM=0x3  | OUTREG=XED_REG_R11B*/
case 53: /*(1, 0, 1, 0, 3, 0) -> REXB4=0 REXB=1 SRM=0x3  | OUTREG=XED_REG_R11B*/
case 181: /*(1, 0, 1, 0, 3, 1) -> REXB4=0 REXB=1 SRM=0x3  | OUTREG=XED_REG_R11B*/
case 309: /*(1, 0, 1, 0, 3, 2) -> REXB4=0 REXB=1 SRM=0x3  | OUTREG=XED_REG_R11B*/
case 437: /*(1, 0, 1, 0, 3, 3) -> REXB4=0 REXB=1 SRM=0x3  | OUTREG=XED_REG_R11B*/
case 55: /*(1, 1, 1, 0, 3, 0) -> REXB4=0 REXB=1 SRM=0x3  | OUTREG=XED_REG_R11B*/
case 183: /*(1, 1, 1, 0, 3, 1) -> REXB4=0 REXB=1 SRM=0x3  | OUTREG=XED_REG_R11B*/
case 311: /*(1, 1, 1, 0, 3, 2) -> REXB4=0 REXB=1 SRM=0x3  | OUTREG=XED_REG_R11B*/
case 439: /*(1, 1, 1, 0, 3, 3) -> REXB4=0 REXB=1 SRM=0x3  | OUTREG=XED_REG_R11B*/
    xed3_operand_set_outreg(d, XED_REG_R11B);
/*pacify the compiler */
(void)d;
    break;
case 56: /*(0, 0, 0, 1, 3, 0) -> REXB4=1 REXB=0 SRM=0x3  | OUTREG=XED_REG_R19B HAS_EGPR=1*/
case 184: /*(0, 0, 0, 1, 3, 1) -> REXB4=1 REXB=0 SRM=0x3  | OUTREG=XED_REG_R19B HAS_EGPR=1*/
case 312: /*(0, 0, 0, 1, 3, 2) -> REXB4=1 REXB=0 SRM=0x3  | OUTREG=XED_REG_R19B HAS_EGPR=1*/
case 440: /*(0, 0, 0, 1, 3, 3) -> REXB4=1 REXB=0 SRM=0x3  | OUTREG=XED_REG_R19B HAS_EGPR=1*/
case 58: /*(0, 1, 0, 1, 3, 0) -> REXB4=1 REXB=0 SRM=0x3  | OUTREG=XED_REG_R19B HAS_EGPR=1*/
case 186: /*(0, 1, 0, 1, 3, 1) -> REXB4=1 REXB=0 SRM=0x3  | OUTREG=XED_REG_R19B HAS_EGPR=1*/
case 314: /*(0, 1, 0, 1, 3, 2) -> REXB4=1 REXB=0 SRM=0x3  | OUTREG=XED_REG_R19B HAS_EGPR=1*/
case 442: /*(0, 1, 0, 1, 3, 3) -> REXB4=1 REXB=0 SRM=0x3  | OUTREG=XED_REG_R19B HAS_EGPR=1*/
case 57: /*(1, 0, 0, 1, 3, 0) -> REXB4=1 REXB=0 SRM=0x3  | OUTREG=XED_REG_R19B HAS_EGPR=1*/
case 185: /*(1, 0, 0, 1, 3, 1) -> REXB4=1 REXB=0 SRM=0x3  | OUTREG=XED_REG_R19B HAS_EGPR=1*/
case 313: /*(1, 0, 0, 1, 3, 2) -> REXB4=1 REXB=0 SRM=0x3  | OUTREG=XED_REG_R19B HAS_EGPR=1*/
case 441: /*(1, 0, 0, 1, 3, 3) -> REXB4=1 REXB=0 SRM=0x3  | OUTREG=XED_REG_R19B HAS_EGPR=1*/
case 59: /*(1, 1, 0, 1, 3, 0) -> REXB4=1 REXB=0 SRM=0x3  | OUTREG=XED_REG_R19B HAS_EGPR=1*/
case 187: /*(1, 1, 0, 1, 3, 1) -> REXB4=1 REXB=0 SRM=0x3  | OUTREG=XED_REG_R19B HAS_EGPR=1*/
case 315: /*(1, 1, 0, 1, 3, 2) -> REXB4=1 REXB=0 SRM=0x3  | OUTREG=XED_REG_R19B HAS_EGPR=1*/
case 443: /*(1, 1, 0, 1, 3, 3) -> REXB4=1 REXB=0 SRM=0x3  | OUTREG=XED_REG_R19B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R19B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 60: /*(0, 0, 1, 1, 3, 0) -> REXB4=1 REXB=1 SRM=0x3  | OUTREG=XED_REG_R27B HAS_EGPR=1*/
case 188: /*(0, 0, 1, 1, 3, 1) -> REXB4=1 REXB=1 SRM=0x3  | OUTREG=XED_REG_R27B HAS_EGPR=1*/
case 316: /*(0, 0, 1, 1, 3, 2) -> REXB4=1 REXB=1 SRM=0x3  | OUTREG=XED_REG_R27B HAS_EGPR=1*/
case 444: /*(0, 0, 1, 1, 3, 3) -> REXB4=1 REXB=1 SRM=0x3  | OUTREG=XED_REG_R27B HAS_EGPR=1*/
case 62: /*(0, 1, 1, 1, 3, 0) -> REXB4=1 REXB=1 SRM=0x3  | OUTREG=XED_REG_R27B HAS_EGPR=1*/
case 190: /*(0, 1, 1, 1, 3, 1) -> REXB4=1 REXB=1 SRM=0x3  | OUTREG=XED_REG_R27B HAS_EGPR=1*/
case 318: /*(0, 1, 1, 1, 3, 2) -> REXB4=1 REXB=1 SRM=0x3  | OUTREG=XED_REG_R27B HAS_EGPR=1*/
case 446: /*(0, 1, 1, 1, 3, 3) -> REXB4=1 REXB=1 SRM=0x3  | OUTREG=XED_REG_R27B HAS_EGPR=1*/
case 61: /*(1, 0, 1, 1, 3, 0) -> REXB4=1 REXB=1 SRM=0x3  | OUTREG=XED_REG_R27B HAS_EGPR=1*/
case 189: /*(1, 0, 1, 1, 3, 1) -> REXB4=1 REXB=1 SRM=0x3  | OUTREG=XED_REG_R27B HAS_EGPR=1*/
case 317: /*(1, 0, 1, 1, 3, 2) -> REXB4=1 REXB=1 SRM=0x3  | OUTREG=XED_REG_R27B HAS_EGPR=1*/
case 445: /*(1, 0, 1, 1, 3, 3) -> REXB4=1 REXB=1 SRM=0x3  | OUTREG=XED_REG_R27B HAS_EGPR=1*/
case 63: /*(1, 1, 1, 1, 3, 0) -> REXB4=1 REXB=1 SRM=0x3  | OUTREG=XED_REG_R27B HAS_EGPR=1*/
case 191: /*(1, 1, 1, 1, 3, 1) -> REXB4=1 REXB=1 SRM=0x3  | OUTREG=XED_REG_R27B HAS_EGPR=1*/
case 319: /*(1, 1, 1, 1, 3, 2) -> REXB4=1 REXB=1 SRM=0x3  | OUTREG=XED_REG_R27B HAS_EGPR=1*/
case 447: /*(1, 1, 1, 1, 3, 3) -> REXB4=1 REXB=1 SRM=0x3  | OUTREG=XED_REG_R27B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R27B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 64: /*(0, 0, 0, 0, 4, 0) -> REXB4=0 REXB=0 SRM=0x4  REX=0  REX2=0  VEXVALID!=2 | OUTREG=XED_REG_AH*/
case 192: /*(0, 0, 0, 0, 4, 1) -> REXB4=0 REXB=0 SRM=0x4  REX=0  REX2=0  VEXVALID!=2 | OUTREG=XED_REG_AH*/
case 448: /*(0, 0, 0, 0, 4, 3) -> REXB4=0 REXB=0 SRM=0x4  REX=0  REX2=0  VEXVALID!=2 | OUTREG=XED_REG_AH*/
    xed3_operand_set_outreg(d, XED_REG_AH);
/*pacify the compiler */
(void)d;
    break;
case 65: /*(1, 0, 0, 0, 4, 0) -> REXB4=0 REXB=0 SRM=0x4  REX=1  REX2=0 | OUTREG=XED_REG_SPL*/
case 193: /*(1, 0, 0, 0, 4, 1) -> REXB4=0 REXB=0 SRM=0x4  REX=1  REX2=0 | OUTREG=XED_REG_SPL*/
case 321: /*(1, 0, 0, 0, 4, 2) -> REXB4=0 REXB=0 SRM=0x4  REX=1  REX2=0 | OUTREG=XED_REG_SPL*/
case 449: /*(1, 0, 0, 0, 4, 3) -> REXB4=0 REXB=0 SRM=0x4  REX=1  REX2=0 | OUTREG=XED_REG_SPL*/
    xed3_operand_set_outreg(d, XED_REG_SPL);
/*pacify the compiler */
(void)d;
    break;
case 66: /*(0, 1, 0, 0, 4, 0) -> REXB4=0 REXB=0 SRM=0x4         REX2=1 | OUTREG=XED_REG_SPL*/
case 194: /*(0, 1, 0, 0, 4, 1) -> REXB4=0 REXB=0 SRM=0x4         REX2=1 | OUTREG=XED_REG_SPL*/
case 322: /*(0, 1, 0, 0, 4, 2) -> REXB4=0 REXB=0 SRM=0x4         REX2=1 | OUTREG=XED_REG_SPL*/
case 450: /*(0, 1, 0, 0, 4, 3) -> REXB4=0 REXB=0 SRM=0x4         REX2=1 | OUTREG=XED_REG_SPL*/
case 67: /*(1, 1, 0, 0, 4, 0) -> REXB4=0 REXB=0 SRM=0x4         REX2=1 | OUTREG=XED_REG_SPL*/
case 195: /*(1, 1, 0, 0, 4, 1) -> REXB4=0 REXB=0 SRM=0x4         REX2=1 | OUTREG=XED_REG_SPL*/
case 323: /*(1, 1, 0, 0, 4, 2) -> REXB4=0 REXB=0 SRM=0x4         REX2=1 | OUTREG=XED_REG_SPL*/
case 451: /*(1, 1, 0, 0, 4, 3) -> REXB4=0 REXB=0 SRM=0x4         REX2=1 | OUTREG=XED_REG_SPL*/
    xed3_operand_set_outreg(d, XED_REG_SPL);
/*pacify the compiler */
(void)d;
    break;
case 68: /*(0, 0, 1, 0, 4, 0) -> REXB4=0 REXB=1 SRM=0x4  | OUTREG=XED_REG_R12B*/
case 196: /*(0, 0, 1, 0, 4, 1) -> REXB4=0 REXB=1 SRM=0x4  | OUTREG=XED_REG_R12B*/
case 324: /*(0, 0, 1, 0, 4, 2) -> REXB4=0 REXB=1 SRM=0x4  | OUTREG=XED_REG_R12B*/
case 452: /*(0, 0, 1, 0, 4, 3) -> REXB4=0 REXB=1 SRM=0x4  | OUTREG=XED_REG_R12B*/
case 70: /*(0, 1, 1, 0, 4, 0) -> REXB4=0 REXB=1 SRM=0x4  | OUTREG=XED_REG_R12B*/
case 198: /*(0, 1, 1, 0, 4, 1) -> REXB4=0 REXB=1 SRM=0x4  | OUTREG=XED_REG_R12B*/
case 326: /*(0, 1, 1, 0, 4, 2) -> REXB4=0 REXB=1 SRM=0x4  | OUTREG=XED_REG_R12B*/
case 454: /*(0, 1, 1, 0, 4, 3) -> REXB4=0 REXB=1 SRM=0x4  | OUTREG=XED_REG_R12B*/
case 69: /*(1, 0, 1, 0, 4, 0) -> REXB4=0 REXB=1 SRM=0x4  | OUTREG=XED_REG_R12B*/
case 197: /*(1, 0, 1, 0, 4, 1) -> REXB4=0 REXB=1 SRM=0x4  | OUTREG=XED_REG_R12B*/
case 325: /*(1, 0, 1, 0, 4, 2) -> REXB4=0 REXB=1 SRM=0x4  | OUTREG=XED_REG_R12B*/
case 453: /*(1, 0, 1, 0, 4, 3) -> REXB4=0 REXB=1 SRM=0x4  | OUTREG=XED_REG_R12B*/
case 71: /*(1, 1, 1, 0, 4, 0) -> REXB4=0 REXB=1 SRM=0x4  | OUTREG=XED_REG_R12B*/
case 199: /*(1, 1, 1, 0, 4, 1) -> REXB4=0 REXB=1 SRM=0x4  | OUTREG=XED_REG_R12B*/
case 327: /*(1, 1, 1, 0, 4, 2) -> REXB4=0 REXB=1 SRM=0x4  | OUTREG=XED_REG_R12B*/
case 455: /*(1, 1, 1, 0, 4, 3) -> REXB4=0 REXB=1 SRM=0x4  | OUTREG=XED_REG_R12B*/
    xed3_operand_set_outreg(d, XED_REG_R12B);
/*pacify the compiler */
(void)d;
    break;
case 72: /*(0, 0, 0, 1, 4, 0) -> REXB4=1 REXB=0 SRM=0x4  | OUTREG=XED_REG_R20B HAS_EGPR=1*/
case 200: /*(0, 0, 0, 1, 4, 1) -> REXB4=1 REXB=0 SRM=0x4  | OUTREG=XED_REG_R20B HAS_EGPR=1*/
case 328: /*(0, 0, 0, 1, 4, 2) -> REXB4=1 REXB=0 SRM=0x4  | OUTREG=XED_REG_R20B HAS_EGPR=1*/
case 456: /*(0, 0, 0, 1, 4, 3) -> REXB4=1 REXB=0 SRM=0x4  | OUTREG=XED_REG_R20B HAS_EGPR=1*/
case 74: /*(0, 1, 0, 1, 4, 0) -> REXB4=1 REXB=0 SRM=0x4  | OUTREG=XED_REG_R20B HAS_EGPR=1*/
case 202: /*(0, 1, 0, 1, 4, 1) -> REXB4=1 REXB=0 SRM=0x4  | OUTREG=XED_REG_R20B HAS_EGPR=1*/
case 330: /*(0, 1, 0, 1, 4, 2) -> REXB4=1 REXB=0 SRM=0x4  | OUTREG=XED_REG_R20B HAS_EGPR=1*/
case 458: /*(0, 1, 0, 1, 4, 3) -> REXB4=1 REXB=0 SRM=0x4  | OUTREG=XED_REG_R20B HAS_EGPR=1*/
case 73: /*(1, 0, 0, 1, 4, 0) -> REXB4=1 REXB=0 SRM=0x4  | OUTREG=XED_REG_R20B HAS_EGPR=1*/
case 201: /*(1, 0, 0, 1, 4, 1) -> REXB4=1 REXB=0 SRM=0x4  | OUTREG=XED_REG_R20B HAS_EGPR=1*/
case 329: /*(1, 0, 0, 1, 4, 2) -> REXB4=1 REXB=0 SRM=0x4  | OUTREG=XED_REG_R20B HAS_EGPR=1*/
case 457: /*(1, 0, 0, 1, 4, 3) -> REXB4=1 REXB=0 SRM=0x4  | OUTREG=XED_REG_R20B HAS_EGPR=1*/
case 75: /*(1, 1, 0, 1, 4, 0) -> REXB4=1 REXB=0 SRM=0x4  | OUTREG=XED_REG_R20B HAS_EGPR=1*/
case 203: /*(1, 1, 0, 1, 4, 1) -> REXB4=1 REXB=0 SRM=0x4  | OUTREG=XED_REG_R20B HAS_EGPR=1*/
case 331: /*(1, 1, 0, 1, 4, 2) -> REXB4=1 REXB=0 SRM=0x4  | OUTREG=XED_REG_R20B HAS_EGPR=1*/
case 459: /*(1, 1, 0, 1, 4, 3) -> REXB4=1 REXB=0 SRM=0x4  | OUTREG=XED_REG_R20B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R20B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 76: /*(0, 0, 1, 1, 4, 0) -> REXB4=1 REXB=1 SRM=0x4  | OUTREG=XED_REG_R28B HAS_EGPR=1*/
case 204: /*(0, 0, 1, 1, 4, 1) -> REXB4=1 REXB=1 SRM=0x4  | OUTREG=XED_REG_R28B HAS_EGPR=1*/
case 332: /*(0, 0, 1, 1, 4, 2) -> REXB4=1 REXB=1 SRM=0x4  | OUTREG=XED_REG_R28B HAS_EGPR=1*/
case 460: /*(0, 0, 1, 1, 4, 3) -> REXB4=1 REXB=1 SRM=0x4  | OUTREG=XED_REG_R28B HAS_EGPR=1*/
case 78: /*(0, 1, 1, 1, 4, 0) -> REXB4=1 REXB=1 SRM=0x4  | OUTREG=XED_REG_R28B HAS_EGPR=1*/
case 206: /*(0, 1, 1, 1, 4, 1) -> REXB4=1 REXB=1 SRM=0x4  | OUTREG=XED_REG_R28B HAS_EGPR=1*/
case 334: /*(0, 1, 1, 1, 4, 2) -> REXB4=1 REXB=1 SRM=0x4  | OUTREG=XED_REG_R28B HAS_EGPR=1*/
case 462: /*(0, 1, 1, 1, 4, 3) -> REXB4=1 REXB=1 SRM=0x4  | OUTREG=XED_REG_R28B HAS_EGPR=1*/
case 77: /*(1, 0, 1, 1, 4, 0) -> REXB4=1 REXB=1 SRM=0x4  | OUTREG=XED_REG_R28B HAS_EGPR=1*/
case 205: /*(1, 0, 1, 1, 4, 1) -> REXB4=1 REXB=1 SRM=0x4  | OUTREG=XED_REG_R28B HAS_EGPR=1*/
case 333: /*(1, 0, 1, 1, 4, 2) -> REXB4=1 REXB=1 SRM=0x4  | OUTREG=XED_REG_R28B HAS_EGPR=1*/
case 461: /*(1, 0, 1, 1, 4, 3) -> REXB4=1 REXB=1 SRM=0x4  | OUTREG=XED_REG_R28B HAS_EGPR=1*/
case 79: /*(1, 1, 1, 1, 4, 0) -> REXB4=1 REXB=1 SRM=0x4  | OUTREG=XED_REG_R28B HAS_EGPR=1*/
case 207: /*(1, 1, 1, 1, 4, 1) -> REXB4=1 REXB=1 SRM=0x4  | OUTREG=XED_REG_R28B HAS_EGPR=1*/
case 335: /*(1, 1, 1, 1, 4, 2) -> REXB4=1 REXB=1 SRM=0x4  | OUTREG=XED_REG_R28B HAS_EGPR=1*/
case 463: /*(1, 1, 1, 1, 4, 3) -> REXB4=1 REXB=1 SRM=0x4  | OUTREG=XED_REG_R28B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R28B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 80: /*(0, 0, 0, 0, 5, 0) -> REXB4=0 REXB=0 SRM=0x5  REX=0  REX2=0  VEXVALID!=2 | OUTREG=XED_REG_CH*/
case 208: /*(0, 0, 0, 0, 5, 1) -> REXB4=0 REXB=0 SRM=0x5  REX=0  REX2=0  VEXVALID!=2 | OUTREG=XED_REG_CH*/
case 464: /*(0, 0, 0, 0, 5, 3) -> REXB4=0 REXB=0 SRM=0x5  REX=0  REX2=0  VEXVALID!=2 | OUTREG=XED_REG_CH*/
    xed3_operand_set_outreg(d, XED_REG_CH);
/*pacify the compiler */
(void)d;
    break;
case 81: /*(1, 0, 0, 0, 5, 0) -> REXB4=0 REXB=0 SRM=0x5  REX=1  REX2=0 | OUTREG=XED_REG_BPL*/
case 209: /*(1, 0, 0, 0, 5, 1) -> REXB4=0 REXB=0 SRM=0x5  REX=1  REX2=0 | OUTREG=XED_REG_BPL*/
case 337: /*(1, 0, 0, 0, 5, 2) -> REXB4=0 REXB=0 SRM=0x5  REX=1  REX2=0 | OUTREG=XED_REG_BPL*/
case 465: /*(1, 0, 0, 0, 5, 3) -> REXB4=0 REXB=0 SRM=0x5  REX=1  REX2=0 | OUTREG=XED_REG_BPL*/
    xed3_operand_set_outreg(d, XED_REG_BPL);
/*pacify the compiler */
(void)d;
    break;
case 82: /*(0, 1, 0, 0, 5, 0) -> REXB4=0 REXB=0 SRM=0x5         REX2=1 | OUTREG=XED_REG_BPL*/
case 210: /*(0, 1, 0, 0, 5, 1) -> REXB4=0 REXB=0 SRM=0x5         REX2=1 | OUTREG=XED_REG_BPL*/
case 338: /*(0, 1, 0, 0, 5, 2) -> REXB4=0 REXB=0 SRM=0x5         REX2=1 | OUTREG=XED_REG_BPL*/
case 466: /*(0, 1, 0, 0, 5, 3) -> REXB4=0 REXB=0 SRM=0x5         REX2=1 | OUTREG=XED_REG_BPL*/
case 83: /*(1, 1, 0, 0, 5, 0) -> REXB4=0 REXB=0 SRM=0x5         REX2=1 | OUTREG=XED_REG_BPL*/
case 211: /*(1, 1, 0, 0, 5, 1) -> REXB4=0 REXB=0 SRM=0x5         REX2=1 | OUTREG=XED_REG_BPL*/
case 339: /*(1, 1, 0, 0, 5, 2) -> REXB4=0 REXB=0 SRM=0x5         REX2=1 | OUTREG=XED_REG_BPL*/
case 467: /*(1, 1, 0, 0, 5, 3) -> REXB4=0 REXB=0 SRM=0x5         REX2=1 | OUTREG=XED_REG_BPL*/
    xed3_operand_set_outreg(d, XED_REG_BPL);
/*pacify the compiler */
(void)d;
    break;
case 84: /*(0, 0, 1, 0, 5, 0) -> REXB4=0 REXB=1 SRM=0x5  | OUTREG=XED_REG_R13B*/
case 212: /*(0, 0, 1, 0, 5, 1) -> REXB4=0 REXB=1 SRM=0x5  | OUTREG=XED_REG_R13B*/
case 340: /*(0, 0, 1, 0, 5, 2) -> REXB4=0 REXB=1 SRM=0x5  | OUTREG=XED_REG_R13B*/
case 468: /*(0, 0, 1, 0, 5, 3) -> REXB4=0 REXB=1 SRM=0x5  | OUTREG=XED_REG_R13B*/
case 86: /*(0, 1, 1, 0, 5, 0) -> REXB4=0 REXB=1 SRM=0x5  | OUTREG=XED_REG_R13B*/
case 214: /*(0, 1, 1, 0, 5, 1) -> REXB4=0 REXB=1 SRM=0x5  | OUTREG=XED_REG_R13B*/
case 342: /*(0, 1, 1, 0, 5, 2) -> REXB4=0 REXB=1 SRM=0x5  | OUTREG=XED_REG_R13B*/
case 470: /*(0, 1, 1, 0, 5, 3) -> REXB4=0 REXB=1 SRM=0x5  | OUTREG=XED_REG_R13B*/
case 85: /*(1, 0, 1, 0, 5, 0) -> REXB4=0 REXB=1 SRM=0x5  | OUTREG=XED_REG_R13B*/
case 213: /*(1, 0, 1, 0, 5, 1) -> REXB4=0 REXB=1 SRM=0x5  | OUTREG=XED_REG_R13B*/
case 341: /*(1, 0, 1, 0, 5, 2) -> REXB4=0 REXB=1 SRM=0x5  | OUTREG=XED_REG_R13B*/
case 469: /*(1, 0, 1, 0, 5, 3) -> REXB4=0 REXB=1 SRM=0x5  | OUTREG=XED_REG_R13B*/
case 87: /*(1, 1, 1, 0, 5, 0) -> REXB4=0 REXB=1 SRM=0x5  | OUTREG=XED_REG_R13B*/
case 215: /*(1, 1, 1, 0, 5, 1) -> REXB4=0 REXB=1 SRM=0x5  | OUTREG=XED_REG_R13B*/
case 343: /*(1, 1, 1, 0, 5, 2) -> REXB4=0 REXB=1 SRM=0x5  | OUTREG=XED_REG_R13B*/
case 471: /*(1, 1, 1, 0, 5, 3) -> REXB4=0 REXB=1 SRM=0x5  | OUTREG=XED_REG_R13B*/
    xed3_operand_set_outreg(d, XED_REG_R13B);
/*pacify the compiler */
(void)d;
    break;
case 88: /*(0, 0, 0, 1, 5, 0) -> REXB4=1 REXB=0 SRM=0x5  | OUTREG=XED_REG_R21B HAS_EGPR=1*/
case 216: /*(0, 0, 0, 1, 5, 1) -> REXB4=1 REXB=0 SRM=0x5  | OUTREG=XED_REG_R21B HAS_EGPR=1*/
case 344: /*(0, 0, 0, 1, 5, 2) -> REXB4=1 REXB=0 SRM=0x5  | OUTREG=XED_REG_R21B HAS_EGPR=1*/
case 472: /*(0, 0, 0, 1, 5, 3) -> REXB4=1 REXB=0 SRM=0x5  | OUTREG=XED_REG_R21B HAS_EGPR=1*/
case 90: /*(0, 1, 0, 1, 5, 0) -> REXB4=1 REXB=0 SRM=0x5  | OUTREG=XED_REG_R21B HAS_EGPR=1*/
case 218: /*(0, 1, 0, 1, 5, 1) -> REXB4=1 REXB=0 SRM=0x5  | OUTREG=XED_REG_R21B HAS_EGPR=1*/
case 346: /*(0, 1, 0, 1, 5, 2) -> REXB4=1 REXB=0 SRM=0x5  | OUTREG=XED_REG_R21B HAS_EGPR=1*/
case 474: /*(0, 1, 0, 1, 5, 3) -> REXB4=1 REXB=0 SRM=0x5  | OUTREG=XED_REG_R21B HAS_EGPR=1*/
case 89: /*(1, 0, 0, 1, 5, 0) -> REXB4=1 REXB=0 SRM=0x5  | OUTREG=XED_REG_R21B HAS_EGPR=1*/
case 217: /*(1, 0, 0, 1, 5, 1) -> REXB4=1 REXB=0 SRM=0x5  | OUTREG=XED_REG_R21B HAS_EGPR=1*/
case 345: /*(1, 0, 0, 1, 5, 2) -> REXB4=1 REXB=0 SRM=0x5  | OUTREG=XED_REG_R21B HAS_EGPR=1*/
case 473: /*(1, 0, 0, 1, 5, 3) -> REXB4=1 REXB=0 SRM=0x5  | OUTREG=XED_REG_R21B HAS_EGPR=1*/
case 91: /*(1, 1, 0, 1, 5, 0) -> REXB4=1 REXB=0 SRM=0x5  | OUTREG=XED_REG_R21B HAS_EGPR=1*/
case 219: /*(1, 1, 0, 1, 5, 1) -> REXB4=1 REXB=0 SRM=0x5  | OUTREG=XED_REG_R21B HAS_EGPR=1*/
case 347: /*(1, 1, 0, 1, 5, 2) -> REXB4=1 REXB=0 SRM=0x5  | OUTREG=XED_REG_R21B HAS_EGPR=1*/
case 475: /*(1, 1, 0, 1, 5, 3) -> REXB4=1 REXB=0 SRM=0x5  | OUTREG=XED_REG_R21B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R21B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 92: /*(0, 0, 1, 1, 5, 0) -> REXB4=1 REXB=1 SRM=0x5  | OUTREG=XED_REG_R29B HAS_EGPR=1*/
case 220: /*(0, 0, 1, 1, 5, 1) -> REXB4=1 REXB=1 SRM=0x5  | OUTREG=XED_REG_R29B HAS_EGPR=1*/
case 348: /*(0, 0, 1, 1, 5, 2) -> REXB4=1 REXB=1 SRM=0x5  | OUTREG=XED_REG_R29B HAS_EGPR=1*/
case 476: /*(0, 0, 1, 1, 5, 3) -> REXB4=1 REXB=1 SRM=0x5  | OUTREG=XED_REG_R29B HAS_EGPR=1*/
case 94: /*(0, 1, 1, 1, 5, 0) -> REXB4=1 REXB=1 SRM=0x5  | OUTREG=XED_REG_R29B HAS_EGPR=1*/
case 222: /*(0, 1, 1, 1, 5, 1) -> REXB4=1 REXB=1 SRM=0x5  | OUTREG=XED_REG_R29B HAS_EGPR=1*/
case 350: /*(0, 1, 1, 1, 5, 2) -> REXB4=1 REXB=1 SRM=0x5  | OUTREG=XED_REG_R29B HAS_EGPR=1*/
case 478: /*(0, 1, 1, 1, 5, 3) -> REXB4=1 REXB=1 SRM=0x5  | OUTREG=XED_REG_R29B HAS_EGPR=1*/
case 93: /*(1, 0, 1, 1, 5, 0) -> REXB4=1 REXB=1 SRM=0x5  | OUTREG=XED_REG_R29B HAS_EGPR=1*/
case 221: /*(1, 0, 1, 1, 5, 1) -> REXB4=1 REXB=1 SRM=0x5  | OUTREG=XED_REG_R29B HAS_EGPR=1*/
case 349: /*(1, 0, 1, 1, 5, 2) -> REXB4=1 REXB=1 SRM=0x5  | OUTREG=XED_REG_R29B HAS_EGPR=1*/
case 477: /*(1, 0, 1, 1, 5, 3) -> REXB4=1 REXB=1 SRM=0x5  | OUTREG=XED_REG_R29B HAS_EGPR=1*/
case 95: /*(1, 1, 1, 1, 5, 0) -> REXB4=1 REXB=1 SRM=0x5  | OUTREG=XED_REG_R29B HAS_EGPR=1*/
case 223: /*(1, 1, 1, 1, 5, 1) -> REXB4=1 REXB=1 SRM=0x5  | OUTREG=XED_REG_R29B HAS_EGPR=1*/
case 351: /*(1, 1, 1, 1, 5, 2) -> REXB4=1 REXB=1 SRM=0x5  | OUTREG=XED_REG_R29B HAS_EGPR=1*/
case 479: /*(1, 1, 1, 1, 5, 3) -> REXB4=1 REXB=1 SRM=0x5  | OUTREG=XED_REG_R29B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R29B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 96: /*(0, 0, 0, 0, 6, 0) -> REXB4=0 REXB=0 SRM=0x6  REX=0  REX2=0  VEXVALID!=2 | OUTREG=XED_REG_DH*/
case 224: /*(0, 0, 0, 0, 6, 1) -> REXB4=0 REXB=0 SRM=0x6  REX=0  REX2=0  VEXVALID!=2 | OUTREG=XED_REG_DH*/
case 480: /*(0, 0, 0, 0, 6, 3) -> REXB4=0 REXB=0 SRM=0x6  REX=0  REX2=0  VEXVALID!=2 | OUTREG=XED_REG_DH*/
    xed3_operand_set_outreg(d, XED_REG_DH);
/*pacify the compiler */
(void)d;
    break;
case 97: /*(1, 0, 0, 0, 6, 0) -> REXB4=0 REXB=0 SRM=0x6  REX=1  REX2=0 | OUTREG=XED_REG_SIL*/
case 225: /*(1, 0, 0, 0, 6, 1) -> REXB4=0 REXB=0 SRM=0x6  REX=1  REX2=0 | OUTREG=XED_REG_SIL*/
case 353: /*(1, 0, 0, 0, 6, 2) -> REXB4=0 REXB=0 SRM=0x6  REX=1  REX2=0 | OUTREG=XED_REG_SIL*/
case 481: /*(1, 0, 0, 0, 6, 3) -> REXB4=0 REXB=0 SRM=0x6  REX=1  REX2=0 | OUTREG=XED_REG_SIL*/
    xed3_operand_set_outreg(d, XED_REG_SIL);
/*pacify the compiler */
(void)d;
    break;
case 98: /*(0, 1, 0, 0, 6, 0) -> REXB4=0 REXB=0 SRM=0x6         REX2=1 | OUTREG=XED_REG_SIL*/
case 226: /*(0, 1, 0, 0, 6, 1) -> REXB4=0 REXB=0 SRM=0x6         REX2=1 | OUTREG=XED_REG_SIL*/
case 354: /*(0, 1, 0, 0, 6, 2) -> REXB4=0 REXB=0 SRM=0x6         REX2=1 | OUTREG=XED_REG_SIL*/
case 482: /*(0, 1, 0, 0, 6, 3) -> REXB4=0 REXB=0 SRM=0x6         REX2=1 | OUTREG=XED_REG_SIL*/
case 99: /*(1, 1, 0, 0, 6, 0) -> REXB4=0 REXB=0 SRM=0x6         REX2=1 | OUTREG=XED_REG_SIL*/
case 227: /*(1, 1, 0, 0, 6, 1) -> REXB4=0 REXB=0 SRM=0x6         REX2=1 | OUTREG=XED_REG_SIL*/
case 355: /*(1, 1, 0, 0, 6, 2) -> REXB4=0 REXB=0 SRM=0x6         REX2=1 | OUTREG=XED_REG_SIL*/
case 483: /*(1, 1, 0, 0, 6, 3) -> REXB4=0 REXB=0 SRM=0x6         REX2=1 | OUTREG=XED_REG_SIL*/
    xed3_operand_set_outreg(d, XED_REG_SIL);
/*pacify the compiler */
(void)d;
    break;
case 100: /*(0, 0, 1, 0, 6, 0) -> REXB4=0 REXB=1 SRM=0x6  | OUTREG=XED_REG_R14B*/
case 228: /*(0, 0, 1, 0, 6, 1) -> REXB4=0 REXB=1 SRM=0x6  | OUTREG=XED_REG_R14B*/
case 356: /*(0, 0, 1, 0, 6, 2) -> REXB4=0 REXB=1 SRM=0x6  | OUTREG=XED_REG_R14B*/
case 484: /*(0, 0, 1, 0, 6, 3) -> REXB4=0 REXB=1 SRM=0x6  | OUTREG=XED_REG_R14B*/
case 102: /*(0, 1, 1, 0, 6, 0) -> REXB4=0 REXB=1 SRM=0x6  | OUTREG=XED_REG_R14B*/
case 230: /*(0, 1, 1, 0, 6, 1) -> REXB4=0 REXB=1 SRM=0x6  | OUTREG=XED_REG_R14B*/
case 358: /*(0, 1, 1, 0, 6, 2) -> REXB4=0 REXB=1 SRM=0x6  | OUTREG=XED_REG_R14B*/
case 486: /*(0, 1, 1, 0, 6, 3) -> REXB4=0 REXB=1 SRM=0x6  | OUTREG=XED_REG_R14B*/
case 101: /*(1, 0, 1, 0, 6, 0) -> REXB4=0 REXB=1 SRM=0x6  | OUTREG=XED_REG_R14B*/
case 229: /*(1, 0, 1, 0, 6, 1) -> REXB4=0 REXB=1 SRM=0x6  | OUTREG=XED_REG_R14B*/
case 357: /*(1, 0, 1, 0, 6, 2) -> REXB4=0 REXB=1 SRM=0x6  | OUTREG=XED_REG_R14B*/
case 485: /*(1, 0, 1, 0, 6, 3) -> REXB4=0 REXB=1 SRM=0x6  | OUTREG=XED_REG_R14B*/
case 103: /*(1, 1, 1, 0, 6, 0) -> REXB4=0 REXB=1 SRM=0x6  | OUTREG=XED_REG_R14B*/
case 231: /*(1, 1, 1, 0, 6, 1) -> REXB4=0 REXB=1 SRM=0x6  | OUTREG=XED_REG_R14B*/
case 359: /*(1, 1, 1, 0, 6, 2) -> REXB4=0 REXB=1 SRM=0x6  | OUTREG=XED_REG_R14B*/
case 487: /*(1, 1, 1, 0, 6, 3) -> REXB4=0 REXB=1 SRM=0x6  | OUTREG=XED_REG_R14B*/
    xed3_operand_set_outreg(d, XED_REG_R14B);
/*pacify the compiler */
(void)d;
    break;
case 104: /*(0, 0, 0, 1, 6, 0) -> REXB4=1 REXB=0 SRM=0x6  | OUTREG=XED_REG_R22B HAS_EGPR=1*/
case 232: /*(0, 0, 0, 1, 6, 1) -> REXB4=1 REXB=0 SRM=0x6  | OUTREG=XED_REG_R22B HAS_EGPR=1*/
case 360: /*(0, 0, 0, 1, 6, 2) -> REXB4=1 REXB=0 SRM=0x6  | OUTREG=XED_REG_R22B HAS_EGPR=1*/
case 488: /*(0, 0, 0, 1, 6, 3) -> REXB4=1 REXB=0 SRM=0x6  | OUTREG=XED_REG_R22B HAS_EGPR=1*/
case 106: /*(0, 1, 0, 1, 6, 0) -> REXB4=1 REXB=0 SRM=0x6  | OUTREG=XED_REG_R22B HAS_EGPR=1*/
case 234: /*(0, 1, 0, 1, 6, 1) -> REXB4=1 REXB=0 SRM=0x6  | OUTREG=XED_REG_R22B HAS_EGPR=1*/
case 362: /*(0, 1, 0, 1, 6, 2) -> REXB4=1 REXB=0 SRM=0x6  | OUTREG=XED_REG_R22B HAS_EGPR=1*/
case 490: /*(0, 1, 0, 1, 6, 3) -> REXB4=1 REXB=0 SRM=0x6  | OUTREG=XED_REG_R22B HAS_EGPR=1*/
case 105: /*(1, 0, 0, 1, 6, 0) -> REXB4=1 REXB=0 SRM=0x6  | OUTREG=XED_REG_R22B HAS_EGPR=1*/
case 233: /*(1, 0, 0, 1, 6, 1) -> REXB4=1 REXB=0 SRM=0x6  | OUTREG=XED_REG_R22B HAS_EGPR=1*/
case 361: /*(1, 0, 0, 1, 6, 2) -> REXB4=1 REXB=0 SRM=0x6  | OUTREG=XED_REG_R22B HAS_EGPR=1*/
case 489: /*(1, 0, 0, 1, 6, 3) -> REXB4=1 REXB=0 SRM=0x6  | OUTREG=XED_REG_R22B HAS_EGPR=1*/
case 107: /*(1, 1, 0, 1, 6, 0) -> REXB4=1 REXB=0 SRM=0x6  | OUTREG=XED_REG_R22B HAS_EGPR=1*/
case 235: /*(1, 1, 0, 1, 6, 1) -> REXB4=1 REXB=0 SRM=0x6  | OUTREG=XED_REG_R22B HAS_EGPR=1*/
case 363: /*(1, 1, 0, 1, 6, 2) -> REXB4=1 REXB=0 SRM=0x6  | OUTREG=XED_REG_R22B HAS_EGPR=1*/
case 491: /*(1, 1, 0, 1, 6, 3) -> REXB4=1 REXB=0 SRM=0x6  | OUTREG=XED_REG_R22B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R22B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 108: /*(0, 0, 1, 1, 6, 0) -> REXB4=1 REXB=1 SRM=0x6  | OUTREG=XED_REG_R30B HAS_EGPR=1*/
case 236: /*(0, 0, 1, 1, 6, 1) -> REXB4=1 REXB=1 SRM=0x6  | OUTREG=XED_REG_R30B HAS_EGPR=1*/
case 364: /*(0, 0, 1, 1, 6, 2) -> REXB4=1 REXB=1 SRM=0x6  | OUTREG=XED_REG_R30B HAS_EGPR=1*/
case 492: /*(0, 0, 1, 1, 6, 3) -> REXB4=1 REXB=1 SRM=0x6  | OUTREG=XED_REG_R30B HAS_EGPR=1*/
case 110: /*(0, 1, 1, 1, 6, 0) -> REXB4=1 REXB=1 SRM=0x6  | OUTREG=XED_REG_R30B HAS_EGPR=1*/
case 238: /*(0, 1, 1, 1, 6, 1) -> REXB4=1 REXB=1 SRM=0x6  | OUTREG=XED_REG_R30B HAS_EGPR=1*/
case 366: /*(0, 1, 1, 1, 6, 2) -> REXB4=1 REXB=1 SRM=0x6  | OUTREG=XED_REG_R30B HAS_EGPR=1*/
case 494: /*(0, 1, 1, 1, 6, 3) -> REXB4=1 REXB=1 SRM=0x6  | OUTREG=XED_REG_R30B HAS_EGPR=1*/
case 109: /*(1, 0, 1, 1, 6, 0) -> REXB4=1 REXB=1 SRM=0x6  | OUTREG=XED_REG_R30B HAS_EGPR=1*/
case 237: /*(1, 0, 1, 1, 6, 1) -> REXB4=1 REXB=1 SRM=0x6  | OUTREG=XED_REG_R30B HAS_EGPR=1*/
case 365: /*(1, 0, 1, 1, 6, 2) -> REXB4=1 REXB=1 SRM=0x6  | OUTREG=XED_REG_R30B HAS_EGPR=1*/
case 493: /*(1, 0, 1, 1, 6, 3) -> REXB4=1 REXB=1 SRM=0x6  | OUTREG=XED_REG_R30B HAS_EGPR=1*/
case 111: /*(1, 1, 1, 1, 6, 0) -> REXB4=1 REXB=1 SRM=0x6  | OUTREG=XED_REG_R30B HAS_EGPR=1*/
case 239: /*(1, 1, 1, 1, 6, 1) -> REXB4=1 REXB=1 SRM=0x6  | OUTREG=XED_REG_R30B HAS_EGPR=1*/
case 367: /*(1, 1, 1, 1, 6, 2) -> REXB4=1 REXB=1 SRM=0x6  | OUTREG=XED_REG_R30B HAS_EGPR=1*/
case 495: /*(1, 1, 1, 1, 6, 3) -> REXB4=1 REXB=1 SRM=0x6  | OUTREG=XED_REG_R30B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R30B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 112: /*(0, 0, 0, 0, 7, 0) -> REXB4=0 REXB=0 SRM=0x7  REX=0  REX2=0  VEXVALID!=2 | OUTREG=XED_REG_BH*/
case 240: /*(0, 0, 0, 0, 7, 1) -> REXB4=0 REXB=0 SRM=0x7  REX=0  REX2=0  VEXVALID!=2 | OUTREG=XED_REG_BH*/
case 496: /*(0, 0, 0, 0, 7, 3) -> REXB4=0 REXB=0 SRM=0x7  REX=0  REX2=0  VEXVALID!=2 | OUTREG=XED_REG_BH*/
    xed3_operand_set_outreg(d, XED_REG_BH);
/*pacify the compiler */
(void)d;
    break;
case 113: /*(1, 0, 0, 0, 7, 0) -> REXB4=0 REXB=0 SRM=0x7  REX=1  REX2=0 | OUTREG=XED_REG_DIL*/
case 241: /*(1, 0, 0, 0, 7, 1) -> REXB4=0 REXB=0 SRM=0x7  REX=1  REX2=0 | OUTREG=XED_REG_DIL*/
case 369: /*(1, 0, 0, 0, 7, 2) -> REXB4=0 REXB=0 SRM=0x7  REX=1  REX2=0 | OUTREG=XED_REG_DIL*/
case 497: /*(1, 0, 0, 0, 7, 3) -> REXB4=0 REXB=0 SRM=0x7  REX=1  REX2=0 | OUTREG=XED_REG_DIL*/
    xed3_operand_set_outreg(d, XED_REG_DIL);
/*pacify the compiler */
(void)d;
    break;
case 114: /*(0, 1, 0, 0, 7, 0) -> REXB4=0 REXB=0 SRM=0x7         REX2=1 | OUTREG=XED_REG_DIL*/
case 242: /*(0, 1, 0, 0, 7, 1) -> REXB4=0 REXB=0 SRM=0x7         REX2=1 | OUTREG=XED_REG_DIL*/
case 370: /*(0, 1, 0, 0, 7, 2) -> REXB4=0 REXB=0 SRM=0x7         REX2=1 | OUTREG=XED_REG_DIL*/
case 498: /*(0, 1, 0, 0, 7, 3) -> REXB4=0 REXB=0 SRM=0x7         REX2=1 | OUTREG=XED_REG_DIL*/
case 115: /*(1, 1, 0, 0, 7, 0) -> REXB4=0 REXB=0 SRM=0x7         REX2=1 | OUTREG=XED_REG_DIL*/
case 243: /*(1, 1, 0, 0, 7, 1) -> REXB4=0 REXB=0 SRM=0x7         REX2=1 | OUTREG=XED_REG_DIL*/
case 371: /*(1, 1, 0, 0, 7, 2) -> REXB4=0 REXB=0 SRM=0x7         REX2=1 | OUTREG=XED_REG_DIL*/
case 499: /*(1, 1, 0, 0, 7, 3) -> REXB4=0 REXB=0 SRM=0x7         REX2=1 | OUTREG=XED_REG_DIL*/
    xed3_operand_set_outreg(d, XED_REG_DIL);
/*pacify the compiler */
(void)d;
    break;
case 116: /*(0, 0, 1, 0, 7, 0) -> REXB4=0 REXB=1 SRM=0x7  | OUTREG=XED_REG_R15B*/
case 244: /*(0, 0, 1, 0, 7, 1) -> REXB4=0 REXB=1 SRM=0x7  | OUTREG=XED_REG_R15B*/
case 372: /*(0, 0, 1, 0, 7, 2) -> REXB4=0 REXB=1 SRM=0x7  | OUTREG=XED_REG_R15B*/
case 500: /*(0, 0, 1, 0, 7, 3) -> REXB4=0 REXB=1 SRM=0x7  | OUTREG=XED_REG_R15B*/
case 118: /*(0, 1, 1, 0, 7, 0) -> REXB4=0 REXB=1 SRM=0x7  | OUTREG=XED_REG_R15B*/
case 246: /*(0, 1, 1, 0, 7, 1) -> REXB4=0 REXB=1 SRM=0x7  | OUTREG=XED_REG_R15B*/
case 374: /*(0, 1, 1, 0, 7, 2) -> REXB4=0 REXB=1 SRM=0x7  | OUTREG=XED_REG_R15B*/
case 502: /*(0, 1, 1, 0, 7, 3) -> REXB4=0 REXB=1 SRM=0x7  | OUTREG=XED_REG_R15B*/
case 117: /*(1, 0, 1, 0, 7, 0) -> REXB4=0 REXB=1 SRM=0x7  | OUTREG=XED_REG_R15B*/
case 245: /*(1, 0, 1, 0, 7, 1) -> REXB4=0 REXB=1 SRM=0x7  | OUTREG=XED_REG_R15B*/
case 373: /*(1, 0, 1, 0, 7, 2) -> REXB4=0 REXB=1 SRM=0x7  | OUTREG=XED_REG_R15B*/
case 501: /*(1, 0, 1, 0, 7, 3) -> REXB4=0 REXB=1 SRM=0x7  | OUTREG=XED_REG_R15B*/
case 119: /*(1, 1, 1, 0, 7, 0) -> REXB4=0 REXB=1 SRM=0x7  | OUTREG=XED_REG_R15B*/
case 247: /*(1, 1, 1, 0, 7, 1) -> REXB4=0 REXB=1 SRM=0x7  | OUTREG=XED_REG_R15B*/
case 375: /*(1, 1, 1, 0, 7, 2) -> REXB4=0 REXB=1 SRM=0x7  | OUTREG=XED_REG_R15B*/
case 503: /*(1, 1, 1, 0, 7, 3) -> REXB4=0 REXB=1 SRM=0x7  | OUTREG=XED_REG_R15B*/
    xed3_operand_set_outreg(d, XED_REG_R15B);
/*pacify the compiler */
(void)d;
    break;
case 120: /*(0, 0, 0, 1, 7, 0) -> REXB4=1 REXB=0 SRM=0x7  | OUTREG=XED_REG_R23B HAS_EGPR=1*/
case 248: /*(0, 0, 0, 1, 7, 1) -> REXB4=1 REXB=0 SRM=0x7  | OUTREG=XED_REG_R23B HAS_EGPR=1*/
case 376: /*(0, 0, 0, 1, 7, 2) -> REXB4=1 REXB=0 SRM=0x7  | OUTREG=XED_REG_R23B HAS_EGPR=1*/
case 504: /*(0, 0, 0, 1, 7, 3) -> REXB4=1 REXB=0 SRM=0x7  | OUTREG=XED_REG_R23B HAS_EGPR=1*/
case 122: /*(0, 1, 0, 1, 7, 0) -> REXB4=1 REXB=0 SRM=0x7  | OUTREG=XED_REG_R23B HAS_EGPR=1*/
case 250: /*(0, 1, 0, 1, 7, 1) -> REXB4=1 REXB=0 SRM=0x7  | OUTREG=XED_REG_R23B HAS_EGPR=1*/
case 378: /*(0, 1, 0, 1, 7, 2) -> REXB4=1 REXB=0 SRM=0x7  | OUTREG=XED_REG_R23B HAS_EGPR=1*/
case 506: /*(0, 1, 0, 1, 7, 3) -> REXB4=1 REXB=0 SRM=0x7  | OUTREG=XED_REG_R23B HAS_EGPR=1*/
case 121: /*(1, 0, 0, 1, 7, 0) -> REXB4=1 REXB=0 SRM=0x7  | OUTREG=XED_REG_R23B HAS_EGPR=1*/
case 249: /*(1, 0, 0, 1, 7, 1) -> REXB4=1 REXB=0 SRM=0x7  | OUTREG=XED_REG_R23B HAS_EGPR=1*/
case 377: /*(1, 0, 0, 1, 7, 2) -> REXB4=1 REXB=0 SRM=0x7  | OUTREG=XED_REG_R23B HAS_EGPR=1*/
case 505: /*(1, 0, 0, 1, 7, 3) -> REXB4=1 REXB=0 SRM=0x7  | OUTREG=XED_REG_R23B HAS_EGPR=1*/
case 123: /*(1, 1, 0, 1, 7, 0) -> REXB4=1 REXB=0 SRM=0x7  | OUTREG=XED_REG_R23B HAS_EGPR=1*/
case 251: /*(1, 1, 0, 1, 7, 1) -> REXB4=1 REXB=0 SRM=0x7  | OUTREG=XED_REG_R23B HAS_EGPR=1*/
case 379: /*(1, 1, 0, 1, 7, 2) -> REXB4=1 REXB=0 SRM=0x7  | OUTREG=XED_REG_R23B HAS_EGPR=1*/
case 507: /*(1, 1, 0, 1, 7, 3) -> REXB4=1 REXB=0 SRM=0x7  | OUTREG=XED_REG_R23B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R23B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 124: /*(0, 0, 1, 1, 7, 0) -> REXB4=1 REXB=1 SRM=0x7  | OUTREG=XED_REG_R31B HAS_EGPR=1*/
case 252: /*(0, 0, 1, 1, 7, 1) -> REXB4=1 REXB=1 SRM=0x7  | OUTREG=XED_REG_R31B HAS_EGPR=1*/
case 380: /*(0, 0, 1, 1, 7, 2) -> REXB4=1 REXB=1 SRM=0x7  | OUTREG=XED_REG_R31B HAS_EGPR=1*/
case 508: /*(0, 0, 1, 1, 7, 3) -> REXB4=1 REXB=1 SRM=0x7  | OUTREG=XED_REG_R31B HAS_EGPR=1*/
case 126: /*(0, 1, 1, 1, 7, 0) -> REXB4=1 REXB=1 SRM=0x7  | OUTREG=XED_REG_R31B HAS_EGPR=1*/
case 254: /*(0, 1, 1, 1, 7, 1) -> REXB4=1 REXB=1 SRM=0x7  | OUTREG=XED_REG_R31B HAS_EGPR=1*/
case 382: /*(0, 1, 1, 1, 7, 2) -> REXB4=1 REXB=1 SRM=0x7  | OUTREG=XED_REG_R31B HAS_EGPR=1*/
case 510: /*(0, 1, 1, 1, 7, 3) -> REXB4=1 REXB=1 SRM=0x7  | OUTREG=XED_REG_R31B HAS_EGPR=1*/
case 125: /*(1, 0, 1, 1, 7, 0) -> REXB4=1 REXB=1 SRM=0x7  | OUTREG=XED_REG_R31B HAS_EGPR=1*/
case 253: /*(1, 0, 1, 1, 7, 1) -> REXB4=1 REXB=1 SRM=0x7  | OUTREG=XED_REG_R31B HAS_EGPR=1*/
case 381: /*(1, 0, 1, 1, 7, 2) -> REXB4=1 REXB=1 SRM=0x7  | OUTREG=XED_REG_R31B HAS_EGPR=1*/
case 509: /*(1, 0, 1, 1, 7, 3) -> REXB4=1 REXB=1 SRM=0x7  | OUTREG=XED_REG_R31B HAS_EGPR=1*/
case 127: /*(1, 1, 1, 1, 7, 0) -> REXB4=1 REXB=1 SRM=0x7  | OUTREG=XED_REG_R31B HAS_EGPR=1*/
case 255: /*(1, 1, 1, 1, 7, 1) -> REXB4=1 REXB=1 SRM=0x7  | OUTREG=XED_REG_R31B HAS_EGPR=1*/
case 383: /*(1, 1, 1, 1, 7, 2) -> REXB4=1 REXB=1 SRM=0x7  | OUTREG=XED_REG_R31B HAS_EGPR=1*/
case 511: /*(1, 1, 1, 1, 7, 3) -> REXB4=1 REXB=1 SRM=0x7  | OUTREG=XED_REG_R31B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R31B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 320: /*(0, 0, 0, 0, 4, 2) -> REXB4=0 REXB=0 SRM=0x4  REX=0  REX2=0  EVV | OUTREG=XED_REG_SPL*/
    xed3_operand_set_outreg(d, XED_REG_SPL);
/*pacify the compiler */
(void)d;
    break;
case 336: /*(0, 0, 0, 0, 5, 2) -> REXB4=0 REXB=0 SRM=0x5  REX=0  REX2=0  EVV | OUTREG=XED_REG_BPL*/
    xed3_operand_set_outreg(d, XED_REG_BPL);
/*pacify the compiler */
(void)d;
    break;
case 352: /*(0, 0, 0, 0, 6, 2) -> REXB4=0 REXB=0 SRM=0x6  REX=0  REX2=0  EVV | OUTREG=XED_REG_SIL*/
    xed3_operand_set_outreg(d, XED_REG_SIL);
/*pacify the compiler */
(void)d;
    break;
case 368: /*(0, 0, 0, 0, 7, 2) -> REXB4=0 REXB=0 SRM=0x7  REX=0  REX2=0  EVV | OUTREG=XED_REG_DIL*/
    xed3_operand_set_outreg(d, XED_REG_DIL);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_OSZ_NONTERM(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mode(d)) << ((0));
key += (xed3_operand_get_osz(d)) << ((2));
key += (xed3_operand_get_rexw(d)) << ((3));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0, 0) -> mode16 no66_prefix | EOSZ=1*/
case 8: /*(0, 0, 1) -> mode16 no66_prefix | EOSZ=1*/
    xed3_operand_set_eosz(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0, 0) -> mode32 no66_prefix | EOSZ=2*/
case 9: /*(1, 0, 1) -> mode32 no66_prefix | EOSZ=2*/
    xed3_operand_set_eosz(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2, 0, 0) -> mode64 no66_prefix REXW=0 | EOSZ=2*/
    xed3_operand_set_eosz(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(0, 1, 0) -> mode16   66_prefix | EOSZ=2*/
case 12: /*(0, 1, 1) -> mode16   66_prefix | EOSZ=2*/
    xed3_operand_set_eosz(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(1, 1, 0) -> mode32   66_prefix | EOSZ=1*/
case 13: /*(1, 1, 1) -> mode32   66_prefix | EOSZ=1*/
    xed3_operand_set_eosz(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(2, 1, 0) -> mode64   66_prefix REXW=0 | EOSZ=1*/
    xed3_operand_set_eosz(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(2, 0, 1) -> mode64 no66_prefix REXW=1 | EOSZ=3*/
    xed3_operand_set_eosz(d, 0x3);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(2, 1, 1) -> mode64   66_prefix REXW=1 | EOSZ=3*/
    xed3_operand_set_eosz(d, 0x3);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_DF64(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mode(d)) << ((0));
key += (xed3_operand_get_osz(d)) << ((2));
key += (xed3_operand_get_rexw(d)) << ((3));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0, 0) -> mode16                     |*/
case 8: /*(0, 0, 1) -> mode16                     |*/
case 4: /*(0, 1, 0) -> mode16                     |*/
case 12: /*(0, 1, 1) -> mode16                     |*/
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0, 0) -> mode32                     |*/
case 9: /*(1, 0, 1) -> mode32                     |*/
case 5: /*(1, 1, 0) -> mode32                     |*/
case 13: /*(1, 1, 1) -> mode32                     |*/
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2, 0, 0) -> mode64 no66_prefix REXW=0  | EOSZ=3 df64*/
    xed3_operand_set_eosz(d, 0x3);
    xed3_operand_set_df64(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(2, 1, 0) -> mode64   66_prefix REXW=0  | EOSZ=1 df64*/
    xed3_operand_set_eosz(d, 0x1);
    xed3_operand_set_df64(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(2, 0, 1) -> mode64 no66_prefix REXW=1  | EOSZ=3 df64*/
    xed3_operand_set_eosz(d, 0x3);
    xed3_operand_set_df64(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(2, 1, 1) -> mode64   66_prefix REXW=1  | EOSZ=3 df64*/
    xed3_operand_set_eosz(d, 0x3);
    xed3_operand_set_df64(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_REFINING66(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mode(d)) << ((0));
key += (xed3_operand_get_rexw(d)) << ((2));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0) -> mode16        | EOSZ=1 no66_prefix*/
case 4: /*(0, 1) -> mode16        | EOSZ=1 no66_prefix*/
    xed3_operand_set_eosz(d, 0x1);
    xed3_operand_set_osz(d, 0x0);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0) -> mode32        | EOSZ=2 no66_prefix*/
case 5: /*(1, 1) -> mode32        | EOSZ=2 no66_prefix*/
    xed3_operand_set_eosz(d, 0x2);
    xed3_operand_set_osz(d, 0x0);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2, 0) -> mode64 REXW=0 | EOSZ=2 no66_prefix*/
    xed3_operand_set_eosz(d, 0x2);
    xed3_operand_set_osz(d, 0x0);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(2, 1) -> mode64 REXW=1 | EOSZ=3 no66_prefix*/
    xed3_operand_set_eosz(d, 0x3);
    xed3_operand_set_osz(d, 0x0);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_IGNORE66(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mode(d)) << ((0));
key += (xed3_operand_get_rexw(d)) << ((2));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0) -> mode16         | EOSZ=1 no66_prefix*/
case 4: /*(0, 1) -> mode16         | EOSZ=1 no66_prefix*/
    xed3_operand_set_eosz(d, 0x1);
    xed3_operand_set_osz(d, 0x0);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0) -> mode32         | EOSZ=2 no66_prefix*/
case 5: /*(1, 1) -> mode32         | EOSZ=2 no66_prefix*/
    xed3_operand_set_eosz(d, 0x2);
    xed3_operand_set_osz(d, 0x0);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2, 0) -> mode64 REXW=0  | EOSZ=2 no66_prefix*/
    xed3_operand_set_eosz(d, 0x2);
    xed3_operand_set_osz(d, 0x0);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(2, 1) -> mode64 REXW=1  | EOSZ=3 no66_prefix*/
    xed3_operand_set_eosz(d, 0x3);
    xed3_operand_set_osz(d, 0x0);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_IMMUNE66(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mode(d)) << ((0));
key += (xed3_operand_get_rexw(d)) << ((2));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0) -> mode16          | EOSZ=2 no66_prefix*/
case 4: /*(0, 1) -> mode16          | EOSZ=2 no66_prefix*/
    xed3_operand_set_eosz(d, 0x2);
    xed3_operand_set_osz(d, 0x0);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0) -> mode32          | EOSZ=2 no66_prefix*/
case 5: /*(1, 1) -> mode32          | EOSZ=2 no66_prefix*/
    xed3_operand_set_eosz(d, 0x2);
    xed3_operand_set_osz(d, 0x0);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2, 0) -> mode64 REXW=0   | EOSZ=2 no66_prefix*/
    xed3_operand_set_eosz(d, 0x2);
    xed3_operand_set_osz(d, 0x0);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(2, 1) -> mode64 REXW=1   | EOSZ=3 no66_prefix*/
    xed3_operand_set_eosz(d, 0x3);
    xed3_operand_set_osz(d, 0x0);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_CR_WIDTH(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mode(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> mode16  | EOSZ=2 DF32=1 no66_prefix*/
    xed3_operand_set_eosz(d, 0x2);
    xed3_operand_set_df32(d, 0x1);
    xed3_operand_set_osz(d, 0x0);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> mode32  | EOSZ=2 DF32=1 no66_prefix*/
    xed3_operand_set_eosz(d, 0x2);
    xed3_operand_set_df32(d, 0x1);
    xed3_operand_set_osz(d, 0x0);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> mode64  | EOSZ=3 DF64=1 no66_prefix*/
    xed3_operand_set_eosz(d, 0x3);
    xed3_operand_set_df64(d, 0x1);
    xed3_operand_set_osz(d, 0x0);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_IMMUNE66_LOOP64(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mode(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> mode16  |*/
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> mode32  |*/
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> mode64  | EOSZ=3 no66_prefix*/
    xed3_operand_set_eosz(d, 0x3);
    xed3_operand_set_osz(d, 0x0);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_IMMUNE_REXW(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mode(d)) << ((0));
key += (xed3_operand_get_osz(d)) << ((2));
key += (xed3_operand_get_rexw(d)) << ((3));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0, 0) -> mode16                   |*/
case 8: /*(0, 0, 1) -> mode16                   |*/
case 4: /*(0, 1, 0) -> mode16                   |*/
case 12: /*(0, 1, 1) -> mode16                   |*/
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0, 0) -> mode32                   |*/
case 9: /*(1, 0, 1) -> mode32                   |*/
case 5: /*(1, 1, 0) -> mode32                   |*/
case 13: /*(1, 1, 1) -> mode32                   |*/
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2, 0, 0) -> mode64 no66_prefix       | EOSZ=2*/
case 10: /*(2, 0, 1) -> mode64 no66_prefix       | EOSZ=2*/
    xed3_operand_set_eosz(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(2, 1, 0) -> mode64 66_prefix REXW=0  | EOSZ=1*/
    xed3_operand_set_eosz(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(2, 1, 1) -> mode64 66_prefix REXW=1  | EOSZ=2*/
    xed3_operand_set_eosz(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_FORCE64(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mode(d)) << ((0));
/* now switch code..*/
switch(key) {
case 2: /*(2,) -> mode64    | EOSZ=3 no66_prefix*/
    xed3_operand_set_eosz(d, 0x3);
    xed3_operand_set_osz(d, 0x0);
/*pacify the compiler */
(void)d;
    break;
default:
/* otherwise_ok */
    break;
}
}
static XED_INLINE void xed3_capture_nt_ASZ_NONTERM(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_asz(d)) << ((0));
key += (xed3_operand_get_mode(d)) << ((1));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0) -> mode16 no67_prefix  | eamode16*/
    xed3_operand_set_easz(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0) -> mode16   67_prefix  | eamode32*/
    xed3_operand_set_easz(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(0, 1) -> mode32 no67_prefix  | eamode32*/
    xed3_operand_set_easz(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(1, 1) -> mode32   67_prefix  | eamode16*/
    xed3_operand_set_easz(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(0, 2) -> mode64 no67_prefix  | eamode64*/
    xed3_operand_set_easz(d, 0x3);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(1, 2) -> mode64   67_prefix  | eamode32*/
    xed3_operand_set_easz(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_ONE(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mode(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> mode16  | IMM_WIDTH=8 UIMM0=1*/
    xed3_operand_set_imm_width(d, 0x8);
    xed3_operand_set_uimm0(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> mode32  | IMM_WIDTH=8 UIMM0=1*/
    xed3_operand_set_imm_width(d, 0x8);
    xed3_operand_set_uimm0(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> mode64  | IMM_WIDTH=8 UIMM0=1*/
    xed3_operand_set_imm_width(d, 0x8);
    xed3_operand_set_uimm0(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_UIMMv(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_eosz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EOSZ=1 UIMM0[iiiiiiiiiiiiiiii] | IMM_WIDTH=16*/
    xed3_operand_set_imm_width(d, 0x10);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EOSZ=2 UIMM0[iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii] | IMM_WIDTH=32*/
    xed3_operand_set_imm_width(d, 0x20);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EOSZ=3 UIMM0[iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii] | IMM_WIDTH=64*/
    xed3_operand_set_imm_width(d, 0x40);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_SIMMz(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_eosz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EOSZ=1 UIMM0[iiiiiiiiiiiiiiii] | IMM_WIDTH=16 IMM0SIGNED=1*/
    xed3_operand_set_imm_width(d, 0x10);
    xed3_operand_set_imm0signed(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EOSZ=2 UIMM0[iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii] | IMM_WIDTH=32 IMM0SIGNED=1*/
    xed3_operand_set_imm_width(d, 0x20);
    xed3_operand_set_imm0signed(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EOSZ=3 UIMM0[iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii] | IMM_WIDTH=32 IMM0SIGNED=1*/
    xed3_operand_set_imm_width(d, 0x20);
    xed3_operand_set_imm0signed(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_SIMM8(xed_decoded_inst_t* d)
{
    xed3_operand_set_imm_width(d, 0x8);
    xed3_operand_set_imm0signed(d, 0x1);
/*pacify the compiler */
(void)d;
}
static XED_INLINE void xed3_capture_nt_UIMM8(xed_decoded_inst_t* d)
{
    xed3_operand_set_imm_width(d, 0x8);
/*pacify the compiler */
(void)d;
}
static XED_INLINE void xed3_capture_nt_UIMM8_1(xed_decoded_inst_t* d)
{
    xed3_operand_set_dummy(d, 0x0);
/*pacify the compiler */
(void)d;
}
static XED_INLINE void xed3_capture_nt_UIMM16(xed_decoded_inst_t* d)
{
    xed3_operand_set_imm_width(d, 0x10);
/*pacify the compiler */
(void)d;
}
static XED_INLINE void xed3_capture_nt_UIMM32(xed_decoded_inst_t* d)
{
    xed3_operand_set_imm_width(d, 0x20);
/*pacify the compiler */
(void)d;
}
static XED_INLINE void xed3_capture_nt_BRDISP8(xed_decoded_inst_t* d)
{
    xed3_operand_set_brdisp_width(d, 0x8);
/*pacify the compiler */
(void)d;
}
static XED_INLINE void xed3_capture_nt_BRDISP32(xed_decoded_inst_t* d)
{
    xed3_operand_set_brdisp_width(d, 0x20);
/*pacify the compiler */
(void)d;
}
static XED_INLINE void xed3_capture_nt_BRDISP64(xed_decoded_inst_t* d)
{
    xed3_operand_set_brdisp_width(d, 0x40);
/*pacify the compiler */
(void)d;
}
static XED_INLINE void xed3_capture_nt_BRDISPz(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_eosz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EOSZ=1 DISP[dddddddddddddddd]  | BRDISP_WIDTH=16*/
    xed3_operand_set_brdisp_width(d, 0x10);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EOSZ=2 DISP[dddddddddddddddddddddddddddddddd]  | BRDISP_WIDTH=32*/
    xed3_operand_set_brdisp_width(d, 0x20);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EOSZ=3 DISP[dddddddddddddddddddddddddddddddd]  | BRDISP_WIDTH=32*/
    xed3_operand_set_brdisp_width(d, 0x20);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_MEMDISPv(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_easz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EASZ=1 DISP[aaaaaaaaaaaaaaaa]  | DISP_WIDTH=16*/
    xed3_operand_set_disp_width(d, 0x10);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EASZ=2 DISP[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa]  | DISP_WIDTH=32*/
    xed3_operand_set_disp_width(d, 0x20);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EASZ=3 DISP[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa]  | DISP_WIDTH=64*/
    xed3_operand_set_disp_width(d, 0x40);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_MEMDISP32(xed_decoded_inst_t* d)
{
    xed3_operand_set_disp_width(d, 0x20);
/*pacify the compiler */
(void)d;
}
static XED_INLINE void xed3_capture_nt_MEMDISP16(xed_decoded_inst_t* d)
{
    xed3_operand_set_disp_width(d, 0x10);
/*pacify the compiler */
(void)d;
}
static XED_INLINE void xed3_capture_nt_MEMDISP8(xed_decoded_inst_t* d)
{
    xed3_operand_set_disp_width(d, 0x8);
/*pacify the compiler */
(void)d;
}
static XED_INLINE void xed3_capture_nt_MEMDISP(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_need_memdisp(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> NEED_MEMDISP=0               | DISP_WIDTH=0*/
    xed3_operand_set_disp_width(d, 0x0);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(8,) -> NEED_MEMDISP=8   DISP[aaaaaaaa]   | DISP_WIDTH=8*/
    xed3_operand_set_disp_width(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 16: /*(16,) -> NEED_MEMDISP=16  DISP[aaaaaaaaaaaaaaaa]  | DISP_WIDTH=16*/
    xed3_operand_set_disp_width(d, 0x10);
/*pacify the compiler */
(void)d;
    break;
case 32: /*(32,) -> NEED_MEMDISP=32  DISP[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa]  | DISP_WIDTH=32*/
    xed3_operand_set_disp_width(d, 0x20);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_MODRM(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_easz(d)) << ((0));
key += (xed3_operand_get_mode(d)) << ((2));
/* now switch code..*/
switch(key) {
case 1: /*(1, 0) -> mode16 eamode16   MODRM16()      MEMDISP() |*/
    xed3_capture_nt_MODRM16(d);
    xed3_capture_nt_MEMDISP(d);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2, 0) -> mode16 eamode32   MODRM32()      MEMDISP() |*/
    xed3_capture_nt_MODRM32(d);
    xed3_capture_nt_MEMDISP(d);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(1, 1) -> mode32 eamode16   MODRM16()      MEMDISP() |*/
    xed3_capture_nt_MODRM16(d);
    xed3_capture_nt_MEMDISP(d);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(2, 1) -> mode32 eamode32   MODRM32()      MEMDISP() |*/
    xed3_capture_nt_MODRM32(d);
    xed3_capture_nt_MEMDISP(d);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(2, 2) -> mode64 eamode32   MODRM64alt32() MEMDISP() |*/
    xed3_capture_nt_MODRM64alt32(d);
    xed3_capture_nt_MEMDISP(d);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(3, 2) -> mode64 eamode64   MODRM64alt32() MEMDISP() |*/
    xed3_capture_nt_MODRM64alt32(d);
    xed3_capture_nt_MEMDISP(d);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_MODRM64alt32(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mod(d)) << ((0));
key += (xed3_operand_get_rexb(d)) << ((2));
key += (xed3_operand_get_rexb4(d)) << ((3));
key += (xed3_operand_get_rm(d)) << ((4));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0, 0, 0) -> REXB4=0 REXB=0    MOD=0b00 RM=0b000    |  BASE0=ArAX() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_ArAX(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0, 0, 0) -> REXB4=0 REXB=0    MOD=0b01 RM=0b000   | NEED_MEMDISP=8   BASE0=ArAX() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x8);
    xed3_capture_nt_ArAX(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2, 0, 0, 0) -> REXB4=0 REXB=0     MOD=0b10 RM=0b000   | NEED_MEMDISP=32   BASE0=ArAX() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x20);
    xed3_capture_nt_ArAX(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 4: /*(0, 1, 0, 0) -> REXB4=0 REXB=1    MOD=0b00 RM=0b000    |  BASE0=Ar8()  SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar8(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 5: /*(1, 1, 0, 0) -> REXB4=0 REXB=1    MOD=0b01 RM=0b000   | NEED_MEMDISP=8   BASE0=Ar8()  SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x8);
    xed3_capture_nt_Ar8(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 6: /*(2, 1, 0, 0) -> REXB4=0 REXB=1     MOD=0b10 RM=0b000   | NEED_MEMDISP=32   BASE0=Ar8() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x20);
    xed3_capture_nt_Ar8(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 0, 1, 0) -> REXB4=1 REXB=0    MOD=0b00 RM=0b000    |  BASE0=Ar16() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar16(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 0, 1, 0) -> REXB4=1 REXB=0    MOD=0b01 RM=0b000   | NEED_MEMDISP=8   BASE0=Ar16() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x8);
    xed3_capture_nt_Ar16(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 10: /*(2, 0, 1, 0) -> REXB4=1 REXB=0     MOD=0b10 RM=0b000   | NEED_MEMDISP=32    BASE0=Ar16() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x20);
    xed3_capture_nt_Ar16(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 12: /*(0, 1, 1, 0) -> REXB4=1 REXB=1    MOD=0b00 RM=0b000    |  BASE0=Ar24() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar24(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 13: /*(1, 1, 1, 0) -> REXB4=1 REXB=1    MOD=0b01 RM=0b000   | NEED_MEMDISP=8   BASE0=Ar24() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x8);
    xed3_capture_nt_Ar24(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 14: /*(2, 1, 1, 0) -> REXB4=1 REXB=1     MOD=0b10 RM=0b000   | NEED_MEMDISP=32    BASE0=Ar24() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x20);
    xed3_capture_nt_Ar24(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 16: /*(0, 0, 0, 1) -> REXB4=0 REXB=0    MOD=0b00 RM=0b001    |  BASE0=ArCX() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_ArCX(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 17: /*(1, 0, 0, 1) -> REXB4=0 REXB=0    MOD=0b01 RM=0b001   | NEED_MEMDISP=8   BASE0=ArCX() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x8);
    xed3_capture_nt_ArCX(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 18: /*(2, 0, 0, 1) -> REXB4=0 REXB=0     MOD=0b10 RM=0b001   | NEED_MEMDISP=32   BASE0=ArCX() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x20);
    xed3_capture_nt_ArCX(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 20: /*(0, 1, 0, 1) -> REXB4=0 REXB=1    MOD=0b00 RM=0b001    |  BASE0=Ar9()  SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar9(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 21: /*(1, 1, 0, 1) -> REXB4=0 REXB=1    MOD=0b01 RM=0b001   | NEED_MEMDISP=8   BASE0=Ar9()  SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x8);
    xed3_capture_nt_Ar9(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 22: /*(2, 1, 0, 1) -> REXB4=0 REXB=1     MOD=0b10 RM=0b001   | NEED_MEMDISP=32   BASE0=Ar9() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x20);
    xed3_capture_nt_Ar9(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 24: /*(0, 0, 1, 1) -> REXB4=1 REXB=0    MOD=0b00 RM=0b001    |  BASE0=Ar17() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar17(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 25: /*(1, 0, 1, 1) -> REXB4=1 REXB=0    MOD=0b01 RM=0b001   | NEED_MEMDISP=8   BASE0=Ar17() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x8);
    xed3_capture_nt_Ar17(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 26: /*(2, 0, 1, 1) -> REXB4=1 REXB=0     MOD=0b10 RM=0b001   | NEED_MEMDISP=32   BASE0=Ar17() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x20);
    xed3_capture_nt_Ar17(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 28: /*(0, 1, 1, 1) -> REXB4=1 REXB=1    MOD=0b00 RM=0b001    |  BASE0=Ar25() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar25(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 29: /*(1, 1, 1, 1) -> REXB4=1 REXB=1    MOD=0b01 RM=0b001   | NEED_MEMDISP=8   BASE0=Ar25() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x8);
    xed3_capture_nt_Ar25(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 30: /*(2, 1, 1, 1) -> REXB4=1 REXB=1     MOD=0b10 RM=0b001   | NEED_MEMDISP=32   BASE0=Ar25() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x20);
    xed3_capture_nt_Ar25(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 32: /*(0, 0, 0, 2) -> REXB4=0 REXB=0    MOD=0b00 RM=0b010    |  BASE0=ArDX() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_ArDX(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 33: /*(1, 0, 0, 2) -> REXB4=0 REXB=0    MOD=0b01 RM=0b010   | NEED_MEMDISP=8   BASE0=ArDX() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x8);
    xed3_capture_nt_ArDX(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 34: /*(2, 0, 0, 2) -> REXB4=0 REXB=0     MOD=0b10 RM=0b010   | NEED_MEMDISP=32   BASE0=ArDX() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x20);
    xed3_capture_nt_ArDX(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 36: /*(0, 1, 0, 2) -> REXB4=0 REXB=1    MOD=0b00 RM=0b010    |  BASE0=Ar10() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar10(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 37: /*(1, 1, 0, 2) -> REXB4=0 REXB=1    MOD=0b01 RM=0b010   | NEED_MEMDISP=8   BASE0=Ar10() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x8);
    xed3_capture_nt_Ar10(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 38: /*(2, 1, 0, 2) -> REXB4=0 REXB=1     MOD=0b10 RM=0b010   | NEED_MEMDISP=32   BASE0=Ar10() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x20);
    xed3_capture_nt_Ar10(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 40: /*(0, 0, 1, 2) -> REXB4=1 REXB=0    MOD=0b00 RM=0b010    |  BASE0=Ar18() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar18(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 41: /*(1, 0, 1, 2) -> REXB4=1 REXB=0    MOD=0b01 RM=0b010   | NEED_MEMDISP=8   BASE0=Ar18() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x8);
    xed3_capture_nt_Ar18(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 42: /*(2, 0, 1, 2) -> REXB4=1 REXB=0     MOD=0b10 RM=0b010   | NEED_MEMDISP=32   BASE0=Ar18() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x20);
    xed3_capture_nt_Ar18(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 44: /*(0, 1, 1, 2) -> REXB4=1 REXB=1    MOD=0b00 RM=0b010    |  BASE0=Ar26() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar26(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 45: /*(1, 1, 1, 2) -> REXB4=1 REXB=1    MOD=0b01 RM=0b010   | NEED_MEMDISP=8   BASE0=Ar26() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x8);
    xed3_capture_nt_Ar26(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 46: /*(2, 1, 1, 2) -> REXB4=1 REXB=1     MOD=0b10 RM=0b010   | NEED_MEMDISP=32   BASE0=Ar26() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x20);
    xed3_capture_nt_Ar26(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 48: /*(0, 0, 0, 3) -> REXB4=0 REXB=0    MOD=0b00 RM=0b011    |  BASE0=ArBX() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_ArBX(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 49: /*(1, 0, 0, 3) -> REXB4=0 REXB=0    MOD=0b01 RM=0b011   | NEED_MEMDISP=8   BASE0=ArBX() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x8);
    xed3_capture_nt_ArBX(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 50: /*(2, 0, 0, 3) -> REXB4=0 REXB=0     MOD=0b10 RM=0b011   | NEED_MEMDISP=32   BASE0=ArBX() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x20);
    xed3_capture_nt_ArBX(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 52: /*(0, 1, 0, 3) -> REXB4=0 REXB=1    MOD=0b00 RM=0b011    |  BASE0=Ar11() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar11(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 53: /*(1, 1, 0, 3) -> REXB4=0 REXB=1    MOD=0b01 RM=0b011   | NEED_MEMDISP=8   BASE0=Ar11() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x8);
    xed3_capture_nt_Ar11(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 54: /*(2, 1, 0, 3) -> REXB4=0 REXB=1     MOD=0b10 RM=0b011   | NEED_MEMDISP=32   BASE0=Ar11() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x20);
    xed3_capture_nt_Ar11(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 56: /*(0, 0, 1, 3) -> REXB4=1 REXB=0    MOD=0b00 RM=0b011    |  BASE0=Ar19() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar19(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 57: /*(1, 0, 1, 3) -> REXB4=1 REXB=0    MOD=0b01 RM=0b011   | NEED_MEMDISP=8   BASE0=Ar19() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x8);
    xed3_capture_nt_Ar19(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 58: /*(2, 0, 1, 3) -> REXB4=1 REXB=0     MOD=0b10 RM=0b011   | NEED_MEMDISP=32   BASE0=Ar19() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x20);
    xed3_capture_nt_Ar19(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 60: /*(0, 1, 1, 3) -> REXB4=1 REXB=1    MOD=0b00 RM=0b011    |  BASE0=Ar27() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar27(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 61: /*(1, 1, 1, 3) -> REXB4=1 REXB=1    MOD=0b01 RM=0b011   | NEED_MEMDISP=8   BASE0=Ar27() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x8);
    xed3_capture_nt_Ar27(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 62: /*(2, 1, 1, 3) -> REXB4=1 REXB=1     MOD=0b10 RM=0b011   | NEED_MEMDISP=32   BASE0=Ar27() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x20);
    xed3_capture_nt_Ar27(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 64: /*(0, 0, 0, 4) -> REXB4=0 REXB=0    MOD=0b00 RM=0b100   SIB()  |*/
    xed3_capture_nt_SIB(d);
/*pacify the compiler */
(void)d;
    break;
case 65: /*(1, 0, 0, 4) -> REXB4=0 REXB=0    MOD=0b01 RM=0b100   SIB() | NEED_MEMDISP=8*/
    xed3_capture_nt_SIB(d);
    xed3_operand_set_need_memdisp(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 66: /*(2, 0, 0, 4) -> REXB4=0 REXB=0     MOD=0b10 RM=0b100   SIB() | NEED_MEMDISP=32*/
    xed3_capture_nt_SIB(d);
    xed3_operand_set_need_memdisp(d, 0x20);
/*pacify the compiler */
(void)d;
    break;
case 68: /*(0, 1, 0, 4) -> REXB4=0 REXB=1    MOD=0b00 RM=0b100   SIB()  |*/
    xed3_capture_nt_SIB(d);
/*pacify the compiler */
(void)d;
    break;
case 69: /*(1, 1, 0, 4) -> REXB4=0 REXB=1    MOD=0b01 RM=0b100   SIB() | NEED_MEMDISP=8*/
    xed3_capture_nt_SIB(d);
    xed3_operand_set_need_memdisp(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 70: /*(2, 1, 0, 4) -> REXB4=0 REXB=1     MOD=0b10 RM=0b100   SIB() | NEED_MEMDISP=32*/
    xed3_capture_nt_SIB(d);
    xed3_operand_set_need_memdisp(d, 0x20);
/*pacify the compiler */
(void)d;
    break;
case 72: /*(0, 0, 1, 4) -> REXB4=1 REXB=0    MOD=0b00 RM=0b100   SIB()  |*/
    xed3_capture_nt_SIB(d);
/*pacify the compiler */
(void)d;
    break;
case 73: /*(1, 0, 1, 4) -> REXB4=1 REXB=0    MOD=0b01 RM=0b100   SIB() | NEED_MEMDISP=8*/
    xed3_capture_nt_SIB(d);
    xed3_operand_set_need_memdisp(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 74: /*(2, 0, 1, 4) -> REXB4=1 REXB=0     MOD=0b10 RM=0b100   SIB() | NEED_MEMDISP=32*/
    xed3_capture_nt_SIB(d);
    xed3_operand_set_need_memdisp(d, 0x20);
/*pacify the compiler */
(void)d;
    break;
case 76: /*(0, 1, 1, 4) -> REXB4=1 REXB=1    MOD=0b00 RM=0b100   SIB()  |*/
    xed3_capture_nt_SIB(d);
/*pacify the compiler */
(void)d;
    break;
case 77: /*(1, 1, 1, 4) -> REXB4=1 REXB=1    MOD=0b01 RM=0b100   SIB() | NEED_MEMDISP=8*/
    xed3_capture_nt_SIB(d);
    xed3_operand_set_need_memdisp(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 78: /*(2, 1, 1, 4) -> REXB4=1 REXB=1     MOD=0b10 RM=0b100   SIB() | NEED_MEMDISP=32*/
    xed3_capture_nt_SIB(d);
    xed3_operand_set_need_memdisp(d, 0x20);
/*pacify the compiler */
(void)d;
    break;
case 80: /*(0, 0, 0, 5) -> REXB4=0 REXB=0    MOD=0b00 RM=0b101   | NEED_MEMDISP=32   BASE0=rIPa() SEG0=FINAL_DSEG() enc*/
    xed3_operand_set_need_memdisp(d, 0x20);
    xed3_capture_nt_rIPa(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 81: /*(1, 0, 0, 5) -> REXB4=0 REXB=0    MOD=0b01 RM=0b101   | NEED_MEMDISP=8   BASE0=ArBP() SEG0=FINAL_SSEG()*/
    xed3_operand_set_need_memdisp(d, 0x8);
    xed3_capture_nt_ArBP(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_SSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 82: /*(2, 0, 0, 5) -> REXB4=0 REXB=0     MOD=0b10 RM=0b101   | NEED_MEMDISP=32   BASE0=ArBP() SEG0=FINAL_SSEG()*/
    xed3_operand_set_need_memdisp(d, 0x20);
    xed3_capture_nt_ArBP(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_SSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 84: /*(0, 1, 0, 5) -> REXB4=0 REXB=1    MOD=0b00 RM=0b101   | NEED_MEMDISP=32   BASE0=rIPa() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x20);
    xed3_capture_nt_rIPa(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 85: /*(1, 1, 0, 5) -> REXB4=0 REXB=1    MOD=0b01 RM=0b101   | NEED_MEMDISP=8   BASE0=Ar13() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x8);
    xed3_capture_nt_Ar13(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 86: /*(2, 1, 0, 5) -> REXB4=0 REXB=1     MOD=0b10 RM=0b101   | NEED_MEMDISP=32   BASE0=Ar13() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x20);
    xed3_capture_nt_Ar13(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 88: /*(0, 0, 1, 5) -> REXB4=1 REXB=0    MOD=0b00 RM=0b101   | NEED_MEMDISP=32   BASE0=rIPa() SEG0=FINAL_DSEG() enc*/
    xed3_operand_set_need_memdisp(d, 0x20);
    xed3_capture_nt_rIPa(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 89: /*(1, 0, 1, 5) -> REXB4=1 REXB=0    MOD=0b01 RM=0b101   | NEED_MEMDISP=8   BASE0=Ar21() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x8);
    xed3_capture_nt_Ar21(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 90: /*(2, 0, 1, 5) -> REXB4=1 REXB=0     MOD=0b10 RM=0b101   | NEED_MEMDISP=32   BASE0=Ar21() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x20);
    xed3_capture_nt_Ar21(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 92: /*(0, 1, 1, 5) -> REXB4=1 REXB=1    MOD=0b00 RM=0b101   | NEED_MEMDISP=32   BASE0=rIPa() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x20);
    xed3_capture_nt_rIPa(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 93: /*(1, 1, 1, 5) -> REXB4=1 REXB=1    MOD=0b01 RM=0b101   | NEED_MEMDISP=8   BASE0=Ar29() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x8);
    xed3_capture_nt_Ar29(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 94: /*(2, 1, 1, 5) -> REXB4=1 REXB=1     MOD=0b10 RM=0b101   | NEED_MEMDISP=32   BASE0=Ar29() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x20);
    xed3_capture_nt_Ar29(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 96: /*(0, 0, 0, 6) -> REXB4=0 REXB=0    MOD=0b00 RM=0b110    |  BASE0=ArSI() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_ArSI(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 97: /*(1, 0, 0, 6) -> REXB4=0 REXB=0    MOD=0b01 RM=0b110   | NEED_MEMDISP=8   BASE0=ArSI() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x8);
    xed3_capture_nt_ArSI(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 98: /*(2, 0, 0, 6) -> REXB4=0 REXB=0     MOD=0b10 RM=0b110   | NEED_MEMDISP=32   BASE0=ArSI() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x20);
    xed3_capture_nt_ArSI(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 100: /*(0, 1, 0, 6) -> REXB4=0 REXB=1    MOD=0b00 RM=0b110    |  BASE0=Ar14() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar14(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 101: /*(1, 1, 0, 6) -> REXB4=0 REXB=1    MOD=0b01 RM=0b110   | NEED_MEMDISP=8   BASE0=Ar14() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x8);
    xed3_capture_nt_Ar14(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 102: /*(2, 1, 0, 6) -> REXB4=0 REXB=1     MOD=0b10 RM=0b110   | NEED_MEMDISP=32   BASE0=Ar14() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x20);
    xed3_capture_nt_Ar14(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 104: /*(0, 0, 1, 6) -> REXB4=1 REXB=0    MOD=0b00 RM=0b110    |  BASE0=Ar22() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar22(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 105: /*(1, 0, 1, 6) -> REXB4=1 REXB=0    MOD=0b01 RM=0b110   | NEED_MEMDISP=8   BASE0=Ar22() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x8);
    xed3_capture_nt_Ar22(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 106: /*(2, 0, 1, 6) -> REXB4=1 REXB=0     MOD=0b10 RM=0b110   | NEED_MEMDISP=32   BASE0=Ar22() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x20);
    xed3_capture_nt_Ar22(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 108: /*(0, 1, 1, 6) -> REXB4=1 REXB=1    MOD=0b00 RM=0b110    |  BASE0=Ar30() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar30(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 109: /*(1, 1, 1, 6) -> REXB4=1 REXB=1    MOD=0b01 RM=0b110   | NEED_MEMDISP=8   BASE0=Ar30() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x8);
    xed3_capture_nt_Ar30(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 110: /*(2, 1, 1, 6) -> REXB4=1 REXB=1     MOD=0b10 RM=0b110   | NEED_MEMDISP=32   BASE0=Ar30() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x20);
    xed3_capture_nt_Ar30(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 112: /*(0, 0, 0, 7) -> REXB4=0 REXB=0    MOD=0b00 RM=0b111    |  BASE0=ArDI() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_ArDI(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 113: /*(1, 0, 0, 7) -> REXB4=0 REXB=0    MOD=0b01 RM=0b111   | NEED_MEMDISP=8   BASE0=ArDI() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x8);
    xed3_capture_nt_ArDI(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 114: /*(2, 0, 0, 7) -> REXB4=0 REXB=0     MOD=0b10 RM=0b111   | NEED_MEMDISP=32   BASE0=ArDI() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x20);
    xed3_capture_nt_ArDI(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 116: /*(0, 1, 0, 7) -> REXB4=0 REXB=1    MOD=0b00 RM=0b111    |  BASE0=Ar15() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar15(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 117: /*(1, 1, 0, 7) -> REXB4=0 REXB=1    MOD=0b01 RM=0b111   | NEED_MEMDISP=8   BASE0=Ar15() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x8);
    xed3_capture_nt_Ar15(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 118: /*(2, 1, 0, 7) -> REXB4=0 REXB=1     MOD=0b10 RM=0b111   | NEED_MEMDISP=32   BASE0=Ar15() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x20);
    xed3_capture_nt_Ar15(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 120: /*(0, 0, 1, 7) -> REXB4=1 REXB=0    MOD=0b00 RM=0b111    |  BASE0=Ar23() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar23(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 121: /*(1, 0, 1, 7) -> REXB4=1 REXB=0    MOD=0b01 RM=0b111   | NEED_MEMDISP=8   BASE0=Ar23() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x8);
    xed3_capture_nt_Ar23(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 122: /*(2, 0, 1, 7) -> REXB4=1 REXB=0     MOD=0b10 RM=0b111   | NEED_MEMDISP=32   BASE0=Ar23() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x20);
    xed3_capture_nt_Ar23(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 124: /*(0, 1, 1, 7) -> REXB4=1 REXB=1    MOD=0b00 RM=0b111    |  BASE0=Ar31() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar31(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 125: /*(1, 1, 1, 7) -> REXB4=1 REXB=1    MOD=0b01 RM=0b111   | NEED_MEMDISP=8   BASE0=Ar31() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x8);
    xed3_capture_nt_Ar31(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 126: /*(2, 1, 1, 7) -> REXB4=1 REXB=1     MOD=0b10 RM=0b111   | NEED_MEMDISP=32   BASE0=Ar31() SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x20);
    xed3_capture_nt_Ar31(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_MODRM32(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mod(d)) << ((0));
key += (xed3_operand_get_rm(d)) << ((2));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0) -> MOD=0b00 RM=0b000    |  BASE0=XED_REG_EAX SEG0=FINAL_DSEG()*/
    xed3_operand_set_base0(d, XED_REG_EAX);
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0) -> MOD=0b01 RM=0b000   | NEED_MEMDISP=8   BASE0=XED_REG_EAX SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x8);
    xed3_operand_set_base0(d, XED_REG_EAX);
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2, 0) -> MOD=0b10 RM=0b000   | NEED_MEMDISP=32   BASE0=XED_REG_EAX SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x20);
    xed3_operand_set_base0(d, XED_REG_EAX);
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 4: /*(0, 1) -> MOD=0b00 RM=0b001    |  BASE0=XED_REG_ECX SEG0=FINAL_DSEG()*/
    xed3_operand_set_base0(d, XED_REG_ECX);
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 5: /*(1, 1) -> MOD=0b01 RM=0b001   | NEED_MEMDISP=8   BASE0=XED_REG_ECX SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x8);
    xed3_operand_set_base0(d, XED_REG_ECX);
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 6: /*(2, 1) -> MOD=0b10 RM=0b001   | NEED_MEMDISP=32   BASE0=XED_REG_ECX SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x20);
    xed3_operand_set_base0(d, XED_REG_ECX);
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 2) -> MOD=0b00 RM=0b010    |  BASE0=XED_REG_EDX SEG0=FINAL_DSEG()*/
    xed3_operand_set_base0(d, XED_REG_EDX);
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 2) -> MOD=0b01 RM=0b010   | NEED_MEMDISP=8   BASE0=XED_REG_EDX SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x8);
    xed3_operand_set_base0(d, XED_REG_EDX);
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 10: /*(2, 2) -> MOD=0b10 RM=0b010   | NEED_MEMDISP=32   BASE0=XED_REG_EDX SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x20);
    xed3_operand_set_base0(d, XED_REG_EDX);
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 12: /*(0, 3) -> MOD=0b00 RM=0b011    |  BASE0=XED_REG_EBX SEG0=FINAL_DSEG()*/
    xed3_operand_set_base0(d, XED_REG_EBX);
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 13: /*(1, 3) -> MOD=0b01 RM=0b011   | NEED_MEMDISP=8   BASE0=XED_REG_EBX SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x8);
    xed3_operand_set_base0(d, XED_REG_EBX);
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 14: /*(2, 3) -> MOD=0b10 RM=0b011   | NEED_MEMDISP=32   BASE0=XED_REG_EBX SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x20);
    xed3_operand_set_base0(d, XED_REG_EBX);
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 16: /*(0, 4) -> MOD=0b00 RM=0b100   SIB()  |*/
    xed3_capture_nt_SIB(d);
/*pacify the compiler */
(void)d;
    break;
case 17: /*(1, 4) -> MOD=0b01 RM=0b100   SIB() | NEED_MEMDISP=8*/
    xed3_capture_nt_SIB(d);
    xed3_operand_set_need_memdisp(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 18: /*(2, 4) -> MOD=0b10 RM=0b100   SIB() | NEED_MEMDISP=32*/
    xed3_capture_nt_SIB(d);
    xed3_operand_set_need_memdisp(d, 0x20);
/*pacify the compiler */
(void)d;
    break;
case 20: /*(0, 5) -> MOD=0b00 RM=0b101   | NEED_MEMDISP=32    SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x20);
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 21: /*(1, 5) -> MOD=0b01 RM=0b101   | NEED_MEMDISP=8   BASE0=XED_REG_EBP SEG0=FINAL_SSEG()*/
    xed3_operand_set_need_memdisp(d, 0x8);
    xed3_operand_set_base0(d, XED_REG_EBP);
    xed3_capture_nt_FINAL_SSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 22: /*(2, 5) -> MOD=0b10 RM=0b101   | NEED_MEMDISP=32   BASE0=XED_REG_EBP SEG0=FINAL_SSEG()*/
    xed3_operand_set_need_memdisp(d, 0x20);
    xed3_operand_set_base0(d, XED_REG_EBP);
    xed3_capture_nt_FINAL_SSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 24: /*(0, 6) -> MOD=0b00 RM=0b110    |  BASE0=XED_REG_ESI SEG0=FINAL_DSEG()*/
    xed3_operand_set_base0(d, XED_REG_ESI);
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 25: /*(1, 6) -> MOD=0b01 RM=0b110   | NEED_MEMDISP=8   BASE0=XED_REG_ESI SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x8);
    xed3_operand_set_base0(d, XED_REG_ESI);
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 26: /*(2, 6) -> MOD=0b10 RM=0b110   | NEED_MEMDISP=32   BASE0=XED_REG_ESI SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x20);
    xed3_operand_set_base0(d, XED_REG_ESI);
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 28: /*(0, 7) -> MOD=0b00 RM=0b111    |  BASE0=XED_REG_EDI SEG0=FINAL_DSEG()*/
    xed3_operand_set_base0(d, XED_REG_EDI);
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 29: /*(1, 7) -> MOD=0b01 RM=0b111   | NEED_MEMDISP=8   BASE0=XED_REG_EDI SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x8);
    xed3_operand_set_base0(d, XED_REG_EDI);
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 30: /*(2, 7) -> MOD=0b10 RM=0b111   | NEED_MEMDISP=32   BASE0=XED_REG_EDI SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x20);
    xed3_operand_set_base0(d, XED_REG_EDI);
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_MODRM16(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mod(d)) << ((0));
key += (xed3_operand_get_rm(d)) << ((2));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0) -> MOD=0b00 RM=0b000    |  BASE0=XED_REG_BX  SEG0=FINAL_DSEG() INDEX=XED_REG_SI SCALE=1*/
    xed3_operand_set_base0(d, XED_REG_BX);
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
    xed3_operand_set_index(d, XED_REG_SI);
    xed3_operand_set_scale(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0) -> MOD=0b01 RM=0b000   | NEED_MEMDISP=8   BASE0=XED_REG_BX  SEG0=FINAL_DSEG() INDEX=XED_REG_SI SCALE=1*/
    xed3_operand_set_need_memdisp(d, 0x8);
    xed3_operand_set_base0(d, XED_REG_BX);
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
    xed3_operand_set_index(d, XED_REG_SI);
    xed3_operand_set_scale(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2, 0) -> MOD=0b10 RM=0b000   | NEED_MEMDISP=16   BASE0=XED_REG_BX  SEG0=FINAL_DSEG() INDEX=XED_REG_SI SCALE=1*/
    xed3_operand_set_need_memdisp(d, 0x10);
    xed3_operand_set_base0(d, XED_REG_BX);
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
    xed3_operand_set_index(d, XED_REG_SI);
    xed3_operand_set_scale(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(0, 1) -> MOD=0b00 RM=0b001    |  BASE0=XED_REG_BX  SEG0=FINAL_DSEG() INDEX=XED_REG_DI SCALE=1*/
    xed3_operand_set_base0(d, XED_REG_BX);
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
    xed3_operand_set_index(d, XED_REG_DI);
    xed3_operand_set_scale(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(1, 1) -> MOD=0b01 RM=0b001   | NEED_MEMDISP=8   BASE0=XED_REG_BX  SEG0=FINAL_DSEG() INDEX=XED_REG_DI SCALE=1*/
    xed3_operand_set_need_memdisp(d, 0x8);
    xed3_operand_set_base0(d, XED_REG_BX);
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
    xed3_operand_set_index(d, XED_REG_DI);
    xed3_operand_set_scale(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(2, 1) -> MOD=0b10 RM=0b001   | NEED_MEMDISP=16   BASE0=XED_REG_BX  SEG0=FINAL_DSEG() INDEX=XED_REG_DI SCALE=1*/
    xed3_operand_set_need_memdisp(d, 0x10);
    xed3_operand_set_base0(d, XED_REG_BX);
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
    xed3_operand_set_index(d, XED_REG_DI);
    xed3_operand_set_scale(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 2) -> MOD=0b00 RM=0b010    |  BASE0=XED_REG_BP  SEG0=FINAL_SSEG() INDEX=XED_REG_SI SCALE=1*/
    xed3_operand_set_base0(d, XED_REG_BP);
    xed3_capture_nt_FINAL_SSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
    xed3_operand_set_index(d, XED_REG_SI);
    xed3_operand_set_scale(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 2) -> MOD=0b01 RM=0b010   | NEED_MEMDISP=8   BASE0=XED_REG_BP  SEG0=FINAL_SSEG() INDEX=XED_REG_SI SCALE=1*/
    xed3_operand_set_need_memdisp(d, 0x8);
    xed3_operand_set_base0(d, XED_REG_BP);
    xed3_capture_nt_FINAL_SSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
    xed3_operand_set_index(d, XED_REG_SI);
    xed3_operand_set_scale(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(2, 2) -> MOD=0b10 RM=0b010   | NEED_MEMDISP=16   BASE0=XED_REG_BP  SEG0=FINAL_SSEG() INDEX=XED_REG_SI SCALE=1*/
    xed3_operand_set_need_memdisp(d, 0x10);
    xed3_operand_set_base0(d, XED_REG_BP);
    xed3_capture_nt_FINAL_SSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
    xed3_operand_set_index(d, XED_REG_SI);
    xed3_operand_set_scale(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(0, 3) -> MOD=0b00 RM=0b011    |  BASE0=XED_REG_BP  SEG0=FINAL_SSEG() INDEX=XED_REG_DI SCALE=1*/
    xed3_operand_set_base0(d, XED_REG_BP);
    xed3_capture_nt_FINAL_SSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
    xed3_operand_set_index(d, XED_REG_DI);
    xed3_operand_set_scale(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(1, 3) -> MOD=0b01 RM=0b011   | NEED_MEMDISP=8   BASE0=XED_REG_BP  SEG0=FINAL_SSEG() INDEX=XED_REG_DI SCALE=1*/
    xed3_operand_set_need_memdisp(d, 0x8);
    xed3_operand_set_base0(d, XED_REG_BP);
    xed3_capture_nt_FINAL_SSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
    xed3_operand_set_index(d, XED_REG_DI);
    xed3_operand_set_scale(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(2, 3) -> MOD=0b10 RM=0b011   | NEED_MEMDISP=16   BASE0=XED_REG_BP  SEG0=FINAL_SSEG() INDEX=XED_REG_DI SCALE=1*/
    xed3_operand_set_need_memdisp(d, 0x10);
    xed3_operand_set_base0(d, XED_REG_BP);
    xed3_capture_nt_FINAL_SSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
    xed3_operand_set_index(d, XED_REG_DI);
    xed3_operand_set_scale(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 16: /*(0, 4) -> MOD=0b00 RM=0b100    |  BASE0=XED_REG_SI  SEG0=FINAL_DSEG() INDEX=XED_REG_INVALID*/
    xed3_operand_set_base0(d, XED_REG_SI);
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
    xed3_operand_set_index(d, XED_REG_INVALID);
/*pacify the compiler */
(void)d;
    break;
case 17: /*(1, 4) -> MOD=0b01 RM=0b100   | NEED_MEMDISP=8   BASE0=XED_REG_SI  SEG0=FINAL_DSEG() INDEX=XED_REG_INVALID*/
    xed3_operand_set_need_memdisp(d, 0x8);
    xed3_operand_set_base0(d, XED_REG_SI);
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
    xed3_operand_set_index(d, XED_REG_INVALID);
/*pacify the compiler */
(void)d;
    break;
case 18: /*(2, 4) -> MOD=0b10 RM=0b100   | NEED_MEMDISP=16   BASE0=XED_REG_SI  SEG0=FINAL_DSEG() INDEX=XED_REG_INVALID*/
    xed3_operand_set_need_memdisp(d, 0x10);
    xed3_operand_set_base0(d, XED_REG_SI);
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
    xed3_operand_set_index(d, XED_REG_INVALID);
/*pacify the compiler */
(void)d;
    break;
case 20: /*(0, 5) -> MOD=0b00 RM=0b101    |  BASE0=XED_REG_DI  SEG0=FINAL_DSEG() INDEX=XED_REG_INVALID*/
    xed3_operand_set_base0(d, XED_REG_DI);
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
    xed3_operand_set_index(d, XED_REG_INVALID);
/*pacify the compiler */
(void)d;
    break;
case 21: /*(1, 5) -> MOD=0b01 RM=0b101   | NEED_MEMDISP=8   BASE0=XED_REG_DI  SEG0=FINAL_DSEG() INDEX=XED_REG_INVALID*/
    xed3_operand_set_need_memdisp(d, 0x8);
    xed3_operand_set_base0(d, XED_REG_DI);
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
    xed3_operand_set_index(d, XED_REG_INVALID);
/*pacify the compiler */
(void)d;
    break;
case 22: /*(2, 5) -> MOD=0b10 RM=0b101   | NEED_MEMDISP=16   BASE0=XED_REG_DI  SEG0=FINAL_DSEG() INDEX=XED_REG_INVALID*/
    xed3_operand_set_need_memdisp(d, 0x10);
    xed3_operand_set_base0(d, XED_REG_DI);
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
    xed3_operand_set_index(d, XED_REG_INVALID);
/*pacify the compiler */
(void)d;
    break;
case 24: /*(0, 6) -> MOD=0b00 RM=0b110    | NEED_MEMDISP=16   BASE0=XED_REG_INVALID  SEG0=FINAL_DSEG()  INDEX=XED_REG_INVALID*/
    xed3_operand_set_need_memdisp(d, 0x10);
    xed3_operand_set_base0(d, XED_REG_INVALID);
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
    xed3_operand_set_index(d, XED_REG_INVALID);
/*pacify the compiler */
(void)d;
    break;
case 25: /*(1, 6) -> MOD=0b01 RM=0b110   | NEED_MEMDISP=8   BASE0=XED_REG_BP  SEG0=FINAL_SSEG() INDEX=XED_REG_INVALID*/
    xed3_operand_set_need_memdisp(d, 0x8);
    xed3_operand_set_base0(d, XED_REG_BP);
    xed3_capture_nt_FINAL_SSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
    xed3_operand_set_index(d, XED_REG_INVALID);
/*pacify the compiler */
(void)d;
    break;
case 26: /*(2, 6) -> MOD=0b10 RM=0b110   | NEED_MEMDISP=16   BASE0=XED_REG_BP  SEG0=FINAL_SSEG() INDEX=XED_REG_INVALID*/
    xed3_operand_set_need_memdisp(d, 0x10);
    xed3_operand_set_base0(d, XED_REG_BP);
    xed3_capture_nt_FINAL_SSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
    xed3_operand_set_index(d, XED_REG_INVALID);
/*pacify the compiler */
(void)d;
    break;
case 28: /*(0, 7) -> MOD=0b00 RM=0b111    |  BASE0=XED_REG_BX SEG0=FINAL_DSEG()  INDEX=XED_REG_INVALID*/
    xed3_operand_set_base0(d, XED_REG_BX);
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
    xed3_operand_set_index(d, XED_REG_INVALID);
/*pacify the compiler */
(void)d;
    break;
case 29: /*(1, 7) -> MOD=0b01 RM=0b111   | NEED_MEMDISP=8   BASE0=XED_REG_BX  SEG0=FINAL_DSEG() INDEX=XED_REG_INVALID*/
    xed3_operand_set_need_memdisp(d, 0x8);
    xed3_operand_set_base0(d, XED_REG_BX);
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
    xed3_operand_set_index(d, XED_REG_INVALID);
/*pacify the compiler */
(void)d;
    break;
case 30: /*(2, 7) -> MOD=0b10 RM=0b111   | NEED_MEMDISP=16   BASE0=XED_REG_BX  SEG0=FINAL_DSEG() INDEX=XED_REG_INVALID*/
    xed3_operand_set_need_memdisp(d, 0x10);
    xed3_operand_set_base0(d, XED_REG_BX);
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
    xed3_operand_set_index(d, XED_REG_INVALID);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_SIB(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_rexx(d)) << ((0));
key += (xed3_operand_get_rexx4(d)) << ((1));
key += (xed3_operand_get_sibindex(d)) << ((2));
key += (xed3_operand_get_sibscale(d)) << ((5));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0, 0, 0) -> REXX4=0 REXX=0    SIBSCALE[0b00] SIBINDEX[0b000] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArAX() SCALE=1*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_ArAX(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0, 0, 0) -> REXX4=0 REXX=1    SIBSCALE[0b00] SIBINDEX[0b000] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar8()  SCALE=1*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar8(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(0, 1, 0, 0) -> REXX4=1 REXX=0    SIBSCALE[0b00] SIBINDEX[0b000] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar16() SCALE=1*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar16(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(1, 1, 0, 0) -> REXX4=1 REXX=1    SIBSCALE[0b00] SIBINDEX[0b000] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar24() SCALE=1*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar24(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(0, 0, 1, 0) -> REXX4=0 REXX=0    SIBSCALE[0b00] SIBINDEX[0b001] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArCX() SCALE=1*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_ArCX(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(1, 0, 1, 0) -> REXX4=0 REXX=1    SIBSCALE[0b00] SIBINDEX[0b001] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar9()  SCALE=1*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar9(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(0, 1, 1, 0) -> REXX4=1 REXX=0    SIBSCALE[0b00] SIBINDEX[0b001] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar17() SCALE=1*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar17(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(1, 1, 1, 0) -> REXX4=1 REXX=1    SIBSCALE[0b00] SIBINDEX[0b001] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar25() SCALE=1*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar25(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 0, 2, 0) -> REXX4=0 REXX=0    SIBSCALE[0b00] SIBINDEX[0b010] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArDX() SCALE=1*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_ArDX(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 0, 2, 0) -> REXX4=0 REXX=1    SIBSCALE[0b00] SIBINDEX[0b010] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar10() SCALE=1*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar10(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(0, 1, 2, 0) -> REXX4=1 REXX=0    SIBSCALE[0b00] SIBINDEX[0b010] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar18() SCALE=1*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar18(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(1, 1, 2, 0) -> REXX4=1 REXX=1    SIBSCALE[0b00] SIBINDEX[0b010] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar26() SCALE=1*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar26(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(0, 0, 3, 0) -> REXX4=0 REXX=0    SIBSCALE[0b00] SIBINDEX[0b011] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArBX() SCALE=1*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_ArBX(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(1, 0, 3, 0) -> REXX4=0 REXX=1    SIBSCALE[0b00] SIBINDEX[0b011] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar11() SCALE=1*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar11(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(0, 1, 3, 0) -> REXX4=1 REXX=0    SIBSCALE[0b00] SIBINDEX[0b011] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar19() SCALE=1*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar19(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(1, 1, 3, 0) -> REXX4=1 REXX=1    SIBSCALE[0b00] SIBINDEX[0b011] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar27() SCALE=1*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar27(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 16: /*(0, 0, 4, 0) -> REXX4=0 REXX=0    SIBSCALE[0b00] SIBINDEX[0b100] SIBBASE[bbb] SIB_BASE0()  |  INDEX=XED_REG_INVALID SCALE=1 enc*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_operand_set_index(d, XED_REG_INVALID);
    xed3_operand_set_scale(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 17: /*(1, 0, 4, 0) -> REXX4=0 REXX=1    SIBSCALE[0b00] SIBINDEX[0b100] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar12() SCALE=1*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar12(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 18: /*(0, 1, 4, 0) -> REXX4=1 REXX=0    SIBSCALE[0b00] SIBINDEX[0b100] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar20() SCALE=1*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar20(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 19: /*(1, 1, 4, 0) -> REXX4=1 REXX=1    SIBSCALE[0b00] SIBINDEX[0b100] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar28() SCALE=1*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar28(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 20: /*(0, 0, 5, 0) -> REXX4=0 REXX=0    SIBSCALE[0b00] SIBINDEX[0b101] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArBP() SCALE=1*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_ArBP(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 21: /*(1, 0, 5, 0) -> REXX4=0 REXX=1    SIBSCALE[0b00] SIBINDEX[0b101] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar13() SCALE=1*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar13(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 22: /*(0, 1, 5, 0) -> REXX4=1 REXX=0    SIBSCALE[0b00] SIBINDEX[0b101] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar21() SCALE=1*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar21(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 23: /*(1, 1, 5, 0) -> REXX4=1 REXX=1    SIBSCALE[0b00] SIBINDEX[0b101] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar29() SCALE=1*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar29(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 24: /*(0, 0, 6, 0) -> REXX4=0 REXX=0    SIBSCALE[0b00] SIBINDEX[0b110] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArSI() SCALE=1*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_ArSI(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 25: /*(1, 0, 6, 0) -> REXX4=0 REXX=1    SIBSCALE[0b00] SIBINDEX[0b110] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar14() SCALE=1*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar14(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 26: /*(0, 1, 6, 0) -> REXX4=1 REXX=0    SIBSCALE[0b00] SIBINDEX[0b110] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar22() SCALE=1*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar22(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 27: /*(1, 1, 6, 0) -> REXX4=1 REXX=1    SIBSCALE[0b00] SIBINDEX[0b110] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar30() SCALE=1*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar30(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 28: /*(0, 0, 7, 0) -> REXX4=0 REXX=0    SIBSCALE[0b00] SIBINDEX[0b111] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArDI() SCALE=1*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_ArDI(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 29: /*(1, 0, 7, 0) -> REXX4=0 REXX=1    SIBSCALE[0b00] SIBINDEX[0b111] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar15() SCALE=1*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar15(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 30: /*(0, 1, 7, 0) -> REXX4=1 REXX=0    SIBSCALE[0b00] SIBINDEX[0b111] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar23() SCALE=1*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar23(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 31: /*(1, 1, 7, 0) -> REXX4=1 REXX=1    SIBSCALE[0b00] SIBINDEX[0b111] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar31() SCALE=1*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar31(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 32: /*(0, 0, 0, 1) -> REXX4=0 REXX=0    SIBSCALE[0b01] SIBINDEX[0b000] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArAX() SCALE=2*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_ArAX(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 33: /*(1, 0, 0, 1) -> REXX4=0 REXX=1    SIBSCALE[0b01] SIBINDEX[0b000] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar8()  SCALE=2*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar8(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 34: /*(0, 1, 0, 1) -> REXX4=1 REXX=0    SIBSCALE[0b01] SIBINDEX[0b000] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar16() SCALE=2*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar16(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 35: /*(1, 1, 0, 1) -> REXX4=1 REXX=1    SIBSCALE[0b01] SIBINDEX[0b000] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar24() SCALE=2*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar24(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 36: /*(0, 0, 1, 1) -> REXX4=0 REXX=0    SIBSCALE[0b01] SIBINDEX[0b001] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArCX() SCALE=2*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_ArCX(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 37: /*(1, 0, 1, 1) -> REXX4=0 REXX=1    SIBSCALE[0b01] SIBINDEX[0b001] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar9()  SCALE=2*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar9(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 38: /*(0, 1, 1, 1) -> REXX4=1 REXX=0    SIBSCALE[0b01] SIBINDEX[0b001] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar17() SCALE=2*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar17(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 39: /*(1, 1, 1, 1) -> REXX4=1 REXX=1    SIBSCALE[0b01] SIBINDEX[0b001] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar25() SCALE=2*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar25(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 40: /*(0, 0, 2, 1) -> REXX4=0 REXX=0    SIBSCALE[0b01] SIBINDEX[0b010] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArDX() SCALE=2*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_ArDX(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 41: /*(1, 0, 2, 1) -> REXX4=0 REXX=1    SIBSCALE[0b01] SIBINDEX[0b010] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar10() SCALE=2*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar10(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 42: /*(0, 1, 2, 1) -> REXX4=1 REXX=0    SIBSCALE[0b01] SIBINDEX[0b010] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar18() SCALE=2*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar18(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 43: /*(1, 1, 2, 1) -> REXX4=1 REXX=1    SIBSCALE[0b01] SIBINDEX[0b010] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar26() SCALE=2*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar26(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 44: /*(0, 0, 3, 1) -> REXX4=0 REXX=0    SIBSCALE[0b01] SIBINDEX[0b011] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArBX() SCALE=2*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_ArBX(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 45: /*(1, 0, 3, 1) -> REXX4=0 REXX=1    SIBSCALE[0b01] SIBINDEX[0b011] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar11() SCALE=2*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar11(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 46: /*(0, 1, 3, 1) -> REXX4=1 REXX=0    SIBSCALE[0b01] SIBINDEX[0b011] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar19() SCALE=2*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar19(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 47: /*(1, 1, 3, 1) -> REXX4=1 REXX=1    SIBSCALE[0b01] SIBINDEX[0b011] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar27() SCALE=2*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar27(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 48: /*(0, 0, 4, 1) -> REXX4=0 REXX=0    SIBSCALE[0b01] SIBINDEX[0b100] SIBBASE[bbb] SIB_BASE0()  |  INDEX=XED_REG_INVALID SCALE=1*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_operand_set_index(d, XED_REG_INVALID);
    xed3_operand_set_scale(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 49: /*(1, 0, 4, 1) -> REXX4=0 REXX=1    SIBSCALE[0b01] SIBINDEX[0b100] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar12() SCALE=2*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar12(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 50: /*(0, 1, 4, 1) -> REXX4=1 REXX=0    SIBSCALE[0b01] SIBINDEX[0b100] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar20() SCALE=2*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar20(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 51: /*(1, 1, 4, 1) -> REXX4=1 REXX=1    SIBSCALE[0b01] SIBINDEX[0b100] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar28() SCALE=2*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar28(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 52: /*(0, 0, 5, 1) -> REXX4=0 REXX=0    SIBSCALE[0b01] SIBINDEX[0b101] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArBP() SCALE=2*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_ArBP(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 53: /*(1, 0, 5, 1) -> REXX4=0 REXX=1    SIBSCALE[0b01] SIBINDEX[0b101] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar13() SCALE=2*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar13(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 54: /*(0, 1, 5, 1) -> REXX4=1 REXX=0    SIBSCALE[0b01] SIBINDEX[0b101] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar21() SCALE=2*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar21(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 55: /*(1, 1, 5, 1) -> REXX4=1 REXX=1    SIBSCALE[0b01] SIBINDEX[0b101] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar29() SCALE=2*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar29(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 56: /*(0, 0, 6, 1) -> REXX4=0 REXX=0    SIBSCALE[0b01] SIBINDEX[0b110] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArSI() SCALE=2*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_ArSI(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 57: /*(1, 0, 6, 1) -> REXX4=0 REXX=1    SIBSCALE[0b01] SIBINDEX[0b110] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar14() SCALE=2*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar14(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 58: /*(0, 1, 6, 1) -> REXX4=1 REXX=0    SIBSCALE[0b01] SIBINDEX[0b110] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar22() SCALE=2*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar22(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 59: /*(1, 1, 6, 1) -> REXX4=1 REXX=1    SIBSCALE[0b01] SIBINDEX[0b110] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar30() SCALE=2*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar30(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 60: /*(0, 0, 7, 1) -> REXX4=0 REXX=0    SIBSCALE[0b01] SIBINDEX[0b111] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArDI() SCALE=2*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_ArDI(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 61: /*(1, 0, 7, 1) -> REXX4=0 REXX=1    SIBSCALE[0b01] SIBINDEX[0b111] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar15() SCALE=2*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar15(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 62: /*(0, 1, 7, 1) -> REXX4=1 REXX=0    SIBSCALE[0b01] SIBINDEX[0b111] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar23() SCALE=2*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar23(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 63: /*(1, 1, 7, 1) -> REXX4=1 REXX=1    SIBSCALE[0b01] SIBINDEX[0b111] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar31() SCALE=2*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar31(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 64: /*(0, 0, 0, 2) -> REXX4=0 REXX=0    SIBSCALE[0b10] SIBINDEX[0b000] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArAX() SCALE=4*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_ArAX(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 65: /*(1, 0, 0, 2) -> REXX4=0 REXX=1    SIBSCALE[0b10] SIBINDEX[0b000] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar8()  SCALE=4*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar8(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 66: /*(0, 1, 0, 2) -> REXX4=1 REXX=0    SIBSCALE[0b10] SIBINDEX[0b000] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar16() SCALE=4*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar16(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 67: /*(1, 1, 0, 2) -> REXX4=1 REXX=1    SIBSCALE[0b10] SIBINDEX[0b000] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar24() SCALE=4*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar24(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 68: /*(0, 0, 1, 2) -> REXX4=0 REXX=0    SIBSCALE[0b10] SIBINDEX[0b001] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArCX() SCALE=4*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_ArCX(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 69: /*(1, 0, 1, 2) -> REXX4=0 REXX=1    SIBSCALE[0b10] SIBINDEX[0b001] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar9()  SCALE=4*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar9(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 70: /*(0, 1, 1, 2) -> REXX4=1 REXX=0    SIBSCALE[0b10] SIBINDEX[0b001] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar17() SCALE=4*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar17(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 71: /*(1, 1, 1, 2) -> REXX4=1 REXX=1    SIBSCALE[0b10] SIBINDEX[0b001] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar25() SCALE=4*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar25(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 72: /*(0, 0, 2, 2) -> REXX4=0 REXX=0    SIBSCALE[0b10] SIBINDEX[0b010] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArDX() SCALE=4*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_ArDX(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 73: /*(1, 0, 2, 2) -> REXX4=0 REXX=1    SIBSCALE[0b10] SIBINDEX[0b010] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar10() SCALE=4*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar10(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 74: /*(0, 1, 2, 2) -> REXX4=1 REXX=0    SIBSCALE[0b10] SIBINDEX[0b010] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar18() SCALE=4*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar18(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 75: /*(1, 1, 2, 2) -> REXX4=1 REXX=1    SIBSCALE[0b10] SIBINDEX[0b010] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar26() SCALE=4*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar26(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 76: /*(0, 0, 3, 2) -> REXX4=0 REXX=0    SIBSCALE[0b10] SIBINDEX[0b011] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArBX() SCALE=4*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_ArBX(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 77: /*(1, 0, 3, 2) -> REXX4=0 REXX=1    SIBSCALE[0b10] SIBINDEX[0b011] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar11() SCALE=4*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar11(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 78: /*(0, 1, 3, 2) -> REXX4=1 REXX=0    SIBSCALE[0b10] SIBINDEX[0b011] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar19() SCALE=4*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar19(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 79: /*(1, 1, 3, 2) -> REXX4=1 REXX=1    SIBSCALE[0b10] SIBINDEX[0b011] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar27() SCALE=4*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar27(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 80: /*(0, 0, 4, 2) -> REXX4=0 REXX=0    SIBSCALE[0b10] SIBINDEX[0b100] SIBBASE[bbb] SIB_BASE0()  |  INDEX=XED_REG_INVALID SCALE=1*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_operand_set_index(d, XED_REG_INVALID);
    xed3_operand_set_scale(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 81: /*(1, 0, 4, 2) -> REXX4=0 REXX=1    SIBSCALE[0b10] SIBINDEX[0b100] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar12() SCALE=4*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar12(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 82: /*(0, 1, 4, 2) -> REXX4=1 REXX=0    SIBSCALE[0b10] SIBINDEX[0b100] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar20() SCALE=4*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar20(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 83: /*(1, 1, 4, 2) -> REXX4=1 REXX=1    SIBSCALE[0b10] SIBINDEX[0b100] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar28() SCALE=4*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar28(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 84: /*(0, 0, 5, 2) -> REXX4=0 REXX=0    SIBSCALE[0b10] SIBINDEX[0b101] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArBP() SCALE=4*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_ArBP(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 85: /*(1, 0, 5, 2) -> REXX4=0 REXX=1    SIBSCALE[0b10] SIBINDEX[0b101] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar13() SCALE=4*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar13(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 86: /*(0, 1, 5, 2) -> REXX4=1 REXX=0    SIBSCALE[0b10] SIBINDEX[0b101] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar21() SCALE=4*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar21(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 87: /*(1, 1, 5, 2) -> REXX4=1 REXX=1    SIBSCALE[0b10] SIBINDEX[0b101] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar29() SCALE=4*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar29(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 88: /*(0, 0, 6, 2) -> REXX4=0 REXX=0    SIBSCALE[0b10] SIBINDEX[0b110] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArSI() SCALE=4*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_ArSI(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 89: /*(1, 0, 6, 2) -> REXX4=0 REXX=1    SIBSCALE[0b10] SIBINDEX[0b110] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar14() SCALE=4*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar14(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 90: /*(0, 1, 6, 2) -> REXX4=1 REXX=0    SIBSCALE[0b10] SIBINDEX[0b110] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar22() SCALE=4*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar22(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 91: /*(1, 1, 6, 2) -> REXX4=1 REXX=1    SIBSCALE[0b10] SIBINDEX[0b110] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar30() SCALE=4*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar30(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 92: /*(0, 0, 7, 2) -> REXX4=0 REXX=0    SIBSCALE[0b10] SIBINDEX[0b111] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArDI() SCALE=4*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_ArDI(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 93: /*(1, 0, 7, 2) -> REXX4=0 REXX=1    SIBSCALE[0b10] SIBINDEX[0b111] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar15() SCALE=4*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar15(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 94: /*(0, 1, 7, 2) -> REXX4=1 REXX=0    SIBSCALE[0b10] SIBINDEX[0b111] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar23() SCALE=4*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar23(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 95: /*(1, 1, 7, 2) -> REXX4=1 REXX=1    SIBSCALE[0b10] SIBINDEX[0b111] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar31() SCALE=4*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar31(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 96: /*(0, 0, 0, 3) -> REXX4=0 REXX=0    SIBSCALE[0b11] SIBINDEX[0b000] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArAX() SCALE=8*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_ArAX(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 97: /*(1, 0, 0, 3) -> REXX4=0 REXX=1    SIBSCALE[0b11] SIBINDEX[0b000] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar8()  SCALE=8*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar8(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 98: /*(0, 1, 0, 3) -> REXX4=1 REXX=0    SIBSCALE[0b11] SIBINDEX[0b000] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar16() SCALE=8*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar16(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 99: /*(1, 1, 0, 3) -> REXX4=1 REXX=1    SIBSCALE[0b11] SIBINDEX[0b000] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar24() SCALE=8*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar24(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 100: /*(0, 0, 1, 3) -> REXX4=0 REXX=0    SIBSCALE[0b11] SIBINDEX[0b001] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArCX() SCALE=8*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_ArCX(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 101: /*(1, 0, 1, 3) -> REXX4=0 REXX=1    SIBSCALE[0b11] SIBINDEX[0b001] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar9()  SCALE=8*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar9(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 102: /*(0, 1, 1, 3) -> REXX4=1 REXX=0    SIBSCALE[0b11] SIBINDEX[0b001] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar17() SCALE=8*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar17(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 103: /*(1, 1, 1, 3) -> REXX4=1 REXX=1    SIBSCALE[0b11] SIBINDEX[0b001] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar25() SCALE=8*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar25(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 104: /*(0, 0, 2, 3) -> REXX4=0 REXX=0    SIBSCALE[0b11] SIBINDEX[0b010] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArDX() SCALE=8*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_ArDX(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 105: /*(1, 0, 2, 3) -> REXX4=0 REXX=1    SIBSCALE[0b11] SIBINDEX[0b010] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar10() SCALE=8*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar10(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 106: /*(0, 1, 2, 3) -> REXX4=1 REXX=0    SIBSCALE[0b11] SIBINDEX[0b010] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar18() SCALE=8*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar18(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 107: /*(1, 1, 2, 3) -> REXX4=1 REXX=1    SIBSCALE[0b11] SIBINDEX[0b010] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar26() SCALE=8*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar26(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 108: /*(0, 0, 3, 3) -> REXX4=0 REXX=0    SIBSCALE[0b11] SIBINDEX[0b011] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArBX() SCALE=8*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_ArBX(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 109: /*(1, 0, 3, 3) -> REXX4=0 REXX=1    SIBSCALE[0b11] SIBINDEX[0b011] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar11() SCALE=8*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar11(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 110: /*(0, 1, 3, 3) -> REXX4=1 REXX=0    SIBSCALE[0b11] SIBINDEX[0b011] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar19() SCALE=8*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar19(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 111: /*(1, 1, 3, 3) -> REXX4=1 REXX=1    SIBSCALE[0b11] SIBINDEX[0b011] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar27() SCALE=8*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar27(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 112: /*(0, 0, 4, 3) -> REXX4=0 REXX=0    SIBSCALE[0b11] SIBINDEX[0b100] SIBBASE[bbb] SIB_BASE0()  |  INDEX=XED_REG_INVALID SCALE=1*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_operand_set_index(d, XED_REG_INVALID);
    xed3_operand_set_scale(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 113: /*(1, 0, 4, 3) -> REXX4=0 REXX=1    SIBSCALE[0b11] SIBINDEX[0b100] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar12() SCALE=8*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar12(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 114: /*(0, 1, 4, 3) -> REXX4=1 REXX=0    SIBSCALE[0b11] SIBINDEX[0b100] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar20() SCALE=8*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar20(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 115: /*(1, 1, 4, 3) -> REXX4=1 REXX=1    SIBSCALE[0b11] SIBINDEX[0b100] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar28() SCALE=8*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar28(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 116: /*(0, 0, 5, 3) -> REXX4=0 REXX=0    SIBSCALE[0b11] SIBINDEX[0b101] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArBP() SCALE=8*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_ArBP(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 117: /*(1, 0, 5, 3) -> REXX4=0 REXX=1    SIBSCALE[0b11] SIBINDEX[0b101] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar13() SCALE=8*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar13(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 118: /*(0, 1, 5, 3) -> REXX4=1 REXX=0    SIBSCALE[0b11] SIBINDEX[0b101] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar21() SCALE=8*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar21(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 119: /*(1, 1, 5, 3) -> REXX4=1 REXX=1    SIBSCALE[0b11] SIBINDEX[0b101] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar29() SCALE=8*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar29(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 120: /*(0, 0, 6, 3) -> REXX4=0 REXX=0    SIBSCALE[0b11] SIBINDEX[0b110] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArSI() SCALE=8*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_ArSI(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 121: /*(1, 0, 6, 3) -> REXX4=0 REXX=1    SIBSCALE[0b11] SIBINDEX[0b110] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar14() SCALE=8*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar14(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 122: /*(0, 1, 6, 3) -> REXX4=1 REXX=0    SIBSCALE[0b11] SIBINDEX[0b110] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar22() SCALE=8*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar22(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 123: /*(1, 1, 6, 3) -> REXX4=1 REXX=1    SIBSCALE[0b11] SIBINDEX[0b110] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar30() SCALE=8*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar30(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 124: /*(0, 0, 7, 3) -> REXX4=0 REXX=0    SIBSCALE[0b11] SIBINDEX[0b111] SIBBASE[bbb] SIB_BASE0()  |  INDEX=ArDI() SCALE=8*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_ArDI(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 125: /*(1, 0, 7, 3) -> REXX4=0 REXX=1    SIBSCALE[0b11] SIBINDEX[0b111] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar15() SCALE=8*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar15(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 126: /*(0, 1, 7, 3) -> REXX4=1 REXX=0    SIBSCALE[0b11] SIBINDEX[0b111] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar23() SCALE=8*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar23(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 127: /*(1, 1, 7, 3) -> REXX4=1 REXX=1    SIBSCALE[0b11] SIBINDEX[0b111] SIBBASE[bbb] SIB_BASE0()  |  INDEX=Ar31() SCALE=8*/
    xed3_capture_nt_SIB_BASE0(d);
    xed3_capture_nt_Ar31(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_SIB_BASE0(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mod(d)) << ((0));
key += (xed3_operand_get_rexb(d)) << ((2));
key += (xed3_operand_get_rexb4(d)) << ((3));
key += (xed3_operand_get_sibbase(d)) << ((4));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0, 0, 0) -> REXB4=0 REXB=0    SIBBASE=0b000     |   BASE0=ArAX() SEG0=FINAL_DSEG()*/
case 1: /*(1, 0, 0, 0) -> REXB4=0 REXB=0    SIBBASE=0b000     |   BASE0=ArAX() SEG0=FINAL_DSEG()*/
case 2: /*(2, 0, 0, 0) -> REXB4=0 REXB=0    SIBBASE=0b000     |   BASE0=ArAX() SEG0=FINAL_DSEG()*/
case 3: /*(3, 0, 0, 0) -> REXB4=0 REXB=0    SIBBASE=0b000     |   BASE0=ArAX() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_ArAX(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 4: /*(0, 1, 0, 0) -> REXB4=0 REXB=1    SIBBASE=0b000     |   BASE0=Ar8()  SEG0=FINAL_DSEG()*/
case 5: /*(1, 1, 0, 0) -> REXB4=0 REXB=1    SIBBASE=0b000     |   BASE0=Ar8()  SEG0=FINAL_DSEG()*/
case 6: /*(2, 1, 0, 0) -> REXB4=0 REXB=1    SIBBASE=0b000     |   BASE0=Ar8()  SEG0=FINAL_DSEG()*/
case 7: /*(3, 1, 0, 0) -> REXB4=0 REXB=1    SIBBASE=0b000     |   BASE0=Ar8()  SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar8(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 0, 1, 0) -> REXB4=1 REXB=0    SIBBASE=0b000     |   BASE0=Ar16() SEG0=FINAL_DSEG()*/
case 9: /*(1, 0, 1, 0) -> REXB4=1 REXB=0    SIBBASE=0b000     |   BASE0=Ar16() SEG0=FINAL_DSEG()*/
case 10: /*(2, 0, 1, 0) -> REXB4=1 REXB=0    SIBBASE=0b000     |   BASE0=Ar16() SEG0=FINAL_DSEG()*/
case 11: /*(3, 0, 1, 0) -> REXB4=1 REXB=0    SIBBASE=0b000     |   BASE0=Ar16() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar16(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 12: /*(0, 1, 1, 0) -> REXB4=1 REXB=1    SIBBASE=0b000     |   BASE0=Ar24() SEG0=FINAL_DSEG()*/
case 13: /*(1, 1, 1, 0) -> REXB4=1 REXB=1    SIBBASE=0b000     |   BASE0=Ar24() SEG0=FINAL_DSEG()*/
case 14: /*(2, 1, 1, 0) -> REXB4=1 REXB=1    SIBBASE=0b000     |   BASE0=Ar24() SEG0=FINAL_DSEG()*/
case 15: /*(3, 1, 1, 0) -> REXB4=1 REXB=1    SIBBASE=0b000     |   BASE0=Ar24() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar24(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 16: /*(0, 0, 0, 1) -> REXB4=0 REXB=0    SIBBASE=0b001     |   BASE0=ArCX() SEG0=FINAL_DSEG()*/
case 17: /*(1, 0, 0, 1) -> REXB4=0 REXB=0    SIBBASE=0b001     |   BASE0=ArCX() SEG0=FINAL_DSEG()*/
case 18: /*(2, 0, 0, 1) -> REXB4=0 REXB=0    SIBBASE=0b001     |   BASE0=ArCX() SEG0=FINAL_DSEG()*/
case 19: /*(3, 0, 0, 1) -> REXB4=0 REXB=0    SIBBASE=0b001     |   BASE0=ArCX() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_ArCX(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 20: /*(0, 1, 0, 1) -> REXB4=0 REXB=1    SIBBASE=0b001     |   BASE0=Ar9()  SEG0=FINAL_DSEG()*/
case 21: /*(1, 1, 0, 1) -> REXB4=0 REXB=1    SIBBASE=0b001     |   BASE0=Ar9()  SEG0=FINAL_DSEG()*/
case 22: /*(2, 1, 0, 1) -> REXB4=0 REXB=1    SIBBASE=0b001     |   BASE0=Ar9()  SEG0=FINAL_DSEG()*/
case 23: /*(3, 1, 0, 1) -> REXB4=0 REXB=1    SIBBASE=0b001     |   BASE0=Ar9()  SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar9(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 24: /*(0, 0, 1, 1) -> REXB4=1 REXB=0    SIBBASE=0b001     |   BASE0=Ar17() SEG0=FINAL_DSEG()*/
case 25: /*(1, 0, 1, 1) -> REXB4=1 REXB=0    SIBBASE=0b001     |   BASE0=Ar17() SEG0=FINAL_DSEG()*/
case 26: /*(2, 0, 1, 1) -> REXB4=1 REXB=0    SIBBASE=0b001     |   BASE0=Ar17() SEG0=FINAL_DSEG()*/
case 27: /*(3, 0, 1, 1) -> REXB4=1 REXB=0    SIBBASE=0b001     |   BASE0=Ar17() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar17(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 28: /*(0, 1, 1, 1) -> REXB4=1 REXB=1    SIBBASE=0b001     |   BASE0=Ar25() SEG0=FINAL_DSEG()*/
case 29: /*(1, 1, 1, 1) -> REXB4=1 REXB=1    SIBBASE=0b001     |   BASE0=Ar25() SEG0=FINAL_DSEG()*/
case 30: /*(2, 1, 1, 1) -> REXB4=1 REXB=1    SIBBASE=0b001     |   BASE0=Ar25() SEG0=FINAL_DSEG()*/
case 31: /*(3, 1, 1, 1) -> REXB4=1 REXB=1    SIBBASE=0b001     |   BASE0=Ar25() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar25(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 32: /*(0, 0, 0, 2) -> REXB4=0 REXB=0    SIBBASE=0b010     |   BASE0=ArDX() SEG0=FINAL_DSEG()*/
case 33: /*(1, 0, 0, 2) -> REXB4=0 REXB=0    SIBBASE=0b010     |   BASE0=ArDX() SEG0=FINAL_DSEG()*/
case 34: /*(2, 0, 0, 2) -> REXB4=0 REXB=0    SIBBASE=0b010     |   BASE0=ArDX() SEG0=FINAL_DSEG()*/
case 35: /*(3, 0, 0, 2) -> REXB4=0 REXB=0    SIBBASE=0b010     |   BASE0=ArDX() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_ArDX(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 36: /*(0, 1, 0, 2) -> REXB4=0 REXB=1    SIBBASE=0b010     |   BASE0=Ar10() SEG0=FINAL_DSEG()*/
case 37: /*(1, 1, 0, 2) -> REXB4=0 REXB=1    SIBBASE=0b010     |   BASE0=Ar10() SEG0=FINAL_DSEG()*/
case 38: /*(2, 1, 0, 2) -> REXB4=0 REXB=1    SIBBASE=0b010     |   BASE0=Ar10() SEG0=FINAL_DSEG()*/
case 39: /*(3, 1, 0, 2) -> REXB4=0 REXB=1    SIBBASE=0b010     |   BASE0=Ar10() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar10(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 40: /*(0, 0, 1, 2) -> REXB4=1 REXB=0    SIBBASE=0b010     |   BASE0=Ar18() SEG0=FINAL_DSEG()*/
case 41: /*(1, 0, 1, 2) -> REXB4=1 REXB=0    SIBBASE=0b010     |   BASE0=Ar18() SEG0=FINAL_DSEG()*/
case 42: /*(2, 0, 1, 2) -> REXB4=1 REXB=0    SIBBASE=0b010     |   BASE0=Ar18() SEG0=FINAL_DSEG()*/
case 43: /*(3, 0, 1, 2) -> REXB4=1 REXB=0    SIBBASE=0b010     |   BASE0=Ar18() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar18(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 44: /*(0, 1, 1, 2) -> REXB4=1 REXB=1    SIBBASE=0b010     |   BASE0=Ar26() SEG0=FINAL_DSEG()*/
case 45: /*(1, 1, 1, 2) -> REXB4=1 REXB=1    SIBBASE=0b010     |   BASE0=Ar26() SEG0=FINAL_DSEG()*/
case 46: /*(2, 1, 1, 2) -> REXB4=1 REXB=1    SIBBASE=0b010     |   BASE0=Ar26() SEG0=FINAL_DSEG()*/
case 47: /*(3, 1, 1, 2) -> REXB4=1 REXB=1    SIBBASE=0b010     |   BASE0=Ar26() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar26(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 48: /*(0, 0, 0, 3) -> REXB4=0 REXB=0    SIBBASE=0b011     |   BASE0=ArBX() SEG0=FINAL_DSEG()*/
case 49: /*(1, 0, 0, 3) -> REXB4=0 REXB=0    SIBBASE=0b011     |   BASE0=ArBX() SEG0=FINAL_DSEG()*/
case 50: /*(2, 0, 0, 3) -> REXB4=0 REXB=0    SIBBASE=0b011     |   BASE0=ArBX() SEG0=FINAL_DSEG()*/
case 51: /*(3, 0, 0, 3) -> REXB4=0 REXB=0    SIBBASE=0b011     |   BASE0=ArBX() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_ArBX(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 52: /*(0, 1, 0, 3) -> REXB4=0 REXB=1    SIBBASE=0b011     |   BASE0=Ar11() SEG0=FINAL_DSEG()*/
case 53: /*(1, 1, 0, 3) -> REXB4=0 REXB=1    SIBBASE=0b011     |   BASE0=Ar11() SEG0=FINAL_DSEG()*/
case 54: /*(2, 1, 0, 3) -> REXB4=0 REXB=1    SIBBASE=0b011     |   BASE0=Ar11() SEG0=FINAL_DSEG()*/
case 55: /*(3, 1, 0, 3) -> REXB4=0 REXB=1    SIBBASE=0b011     |   BASE0=Ar11() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar11(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 56: /*(0, 0, 1, 3) -> REXB4=1 REXB=0    SIBBASE=0b011     |   BASE0=Ar19() SEG0=FINAL_DSEG()*/
case 57: /*(1, 0, 1, 3) -> REXB4=1 REXB=0    SIBBASE=0b011     |   BASE0=Ar19() SEG0=FINAL_DSEG()*/
case 58: /*(2, 0, 1, 3) -> REXB4=1 REXB=0    SIBBASE=0b011     |   BASE0=Ar19() SEG0=FINAL_DSEG()*/
case 59: /*(3, 0, 1, 3) -> REXB4=1 REXB=0    SIBBASE=0b011     |   BASE0=Ar19() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar19(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 60: /*(0, 1, 1, 3) -> REXB4=1 REXB=1    SIBBASE=0b011     |   BASE0=Ar27() SEG0=FINAL_DSEG()*/
case 61: /*(1, 1, 1, 3) -> REXB4=1 REXB=1    SIBBASE=0b011     |   BASE0=Ar27() SEG0=FINAL_DSEG()*/
case 62: /*(2, 1, 1, 3) -> REXB4=1 REXB=1    SIBBASE=0b011     |   BASE0=Ar27() SEG0=FINAL_DSEG()*/
case 63: /*(3, 1, 1, 3) -> REXB4=1 REXB=1    SIBBASE=0b011     |   BASE0=Ar27() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar27(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 64: /*(0, 0, 0, 4) -> REXB4=0 REXB=0    SIBBASE=0b100     |   BASE0=ArSP() SEG0=FINAL_SSEG()*/
case 65: /*(1, 0, 0, 4) -> REXB4=0 REXB=0    SIBBASE=0b100     |   BASE0=ArSP() SEG0=FINAL_SSEG()*/
case 66: /*(2, 0, 0, 4) -> REXB4=0 REXB=0    SIBBASE=0b100     |   BASE0=ArSP() SEG0=FINAL_SSEG()*/
case 67: /*(3, 0, 0, 4) -> REXB4=0 REXB=0    SIBBASE=0b100     |   BASE0=ArSP() SEG0=FINAL_SSEG()*/
    xed3_capture_nt_ArSP(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_SSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 68: /*(0, 1, 0, 4) -> REXB4=0 REXB=1    SIBBASE=0b100     |   BASE0=Ar12() SEG0=FINAL_DSEG()*/
case 69: /*(1, 1, 0, 4) -> REXB4=0 REXB=1    SIBBASE=0b100     |   BASE0=Ar12() SEG0=FINAL_DSEG()*/
case 70: /*(2, 1, 0, 4) -> REXB4=0 REXB=1    SIBBASE=0b100     |   BASE0=Ar12() SEG0=FINAL_DSEG()*/
case 71: /*(3, 1, 0, 4) -> REXB4=0 REXB=1    SIBBASE=0b100     |   BASE0=Ar12() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar12(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 72: /*(0, 0, 1, 4) -> REXB4=1 REXB=0    SIBBASE=0b100     |   BASE0=Ar20() SEG0=FINAL_DSEG()*/
case 73: /*(1, 0, 1, 4) -> REXB4=1 REXB=0    SIBBASE=0b100     |   BASE0=Ar20() SEG0=FINAL_DSEG()*/
case 74: /*(2, 0, 1, 4) -> REXB4=1 REXB=0    SIBBASE=0b100     |   BASE0=Ar20() SEG0=FINAL_DSEG()*/
case 75: /*(3, 0, 1, 4) -> REXB4=1 REXB=0    SIBBASE=0b100     |   BASE0=Ar20() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar20(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 76: /*(0, 1, 1, 4) -> REXB4=1 REXB=1    SIBBASE=0b100     |   BASE0=Ar28() SEG0=FINAL_DSEG()*/
case 77: /*(1, 1, 1, 4) -> REXB4=1 REXB=1    SIBBASE=0b100     |   BASE0=Ar28() SEG0=FINAL_DSEG()*/
case 78: /*(2, 1, 1, 4) -> REXB4=1 REXB=1    SIBBASE=0b100     |   BASE0=Ar28() SEG0=FINAL_DSEG()*/
case 79: /*(3, 1, 1, 4) -> REXB4=1 REXB=1    SIBBASE=0b100     |   BASE0=Ar28() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar28(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 80: /*(0, 0, 0, 5) -> REXB4=0 REXB=0 SIBBASE=0b101  MOD=0b00 | NEED_MEMDISP=32  BASE0=XED_REG_INVALID SEG0=FINAL_DSEG() enc*/
    xed3_operand_set_need_memdisp(d, 0x20);
    xed3_operand_set_base0(d, XED_REG_INVALID);
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 81: /*(1, 0, 0, 5) -> REXB4=0 REXB=0 SIBBASE=0b101  MOD=0b01      | BASE0=ArBP() SEG0=FINAL_SSEG() DISP_WIDTH=8*/
    xed3_capture_nt_ArBP(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_SSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
    xed3_operand_set_disp_width(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 82: /*(2, 0, 0, 5) -> REXB4=0 REXB=0 SIBBASE=0b101  MOD=0b10      | BASE0=ArBP() SEG0=FINAL_SSEG() DISP_WIDTH=32*/
    xed3_capture_nt_ArBP(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_SSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
    xed3_operand_set_disp_width(d, 0x20);
/*pacify the compiler */
(void)d;
    break;
case 84: /*(0, 1, 0, 5) -> REXB4=0 REXB=1 SIBBASE=0b101  MOD=0b00 | NEED_MEMDISP=32  BASE0=XED_REG_INVALID SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x20);
    xed3_operand_set_base0(d, XED_REG_INVALID);
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 85: /*(1, 1, 0, 5) -> REXB4=0 REXB=1 SIBBASE=0b101  MOD=0b01      | BASE0=Ar13() SEG0=FINAL_DSEG() DISP_WIDTH=8*/
    xed3_capture_nt_Ar13(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
    xed3_operand_set_disp_width(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 86: /*(2, 1, 0, 5) -> REXB4=0 REXB=1 SIBBASE=0b101  MOD=0b10      | BASE0=Ar13() SEG0=FINAL_DSEG() DISP_WIDTH=32*/
    xed3_capture_nt_Ar13(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
    xed3_operand_set_disp_width(d, 0x20);
/*pacify the compiler */
(void)d;
    break;
case 88: /*(0, 0, 1, 5) -> REXB4=1 REXB=0 SIBBASE=0b101  MOD=0b00 | NEED_MEMDISP=32  BASE0=XED_REG_INVALID SEG0=FINAL_DSEG() enc*/
    xed3_operand_set_need_memdisp(d, 0x20);
    xed3_operand_set_base0(d, XED_REG_INVALID);
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 89: /*(1, 0, 1, 5) -> REXB4=1 REXB=0 SIBBASE=0b101  MOD=0b01      | BASE0=Ar21() SEG0=FINAL_SSEG() DISP_WIDTH=8*/
    xed3_capture_nt_Ar21(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_SSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
    xed3_operand_set_disp_width(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 90: /*(2, 0, 1, 5) -> REXB4=1 REXB=0 SIBBASE=0b101  MOD=0b10      | BASE0=Ar21() SEG0=FINAL_SSEG() DISP_WIDTH=32*/
    xed3_capture_nt_Ar21(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_SSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
    xed3_operand_set_disp_width(d, 0x20);
/*pacify the compiler */
(void)d;
    break;
case 92: /*(0, 1, 1, 5) -> REXB4=1 REXB=1 SIBBASE=0b101  MOD=0b00 | NEED_MEMDISP=32  BASE0=XED_REG_INVALID SEG0=FINAL_DSEG()*/
    xed3_operand_set_need_memdisp(d, 0x20);
    xed3_operand_set_base0(d, XED_REG_INVALID);
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 93: /*(1, 1, 1, 5) -> REXB4=1 REXB=1 SIBBASE=0b101  MOD=0b01      | BASE0=Ar29() SEG0=FINAL_DSEG() DISP_WIDTH=8*/
    xed3_capture_nt_Ar29(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
    xed3_operand_set_disp_width(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 94: /*(2, 1, 1, 5) -> REXB4=1 REXB=1 SIBBASE=0b101  MOD=0b10      | BASE0=Ar29() SEG0=FINAL_DSEG() DISP_WIDTH=32*/
    xed3_capture_nt_Ar29(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
    xed3_operand_set_disp_width(d, 0x20);
/*pacify the compiler */
(void)d;
    break;
case 96: /*(0, 0, 0, 6) -> REXB4=0 REXB=0 SIBBASE=0b110     |   BASE0=ArSI() SEG0=FINAL_DSEG()*/
case 97: /*(1, 0, 0, 6) -> REXB4=0 REXB=0 SIBBASE=0b110     |   BASE0=ArSI() SEG0=FINAL_DSEG()*/
case 98: /*(2, 0, 0, 6) -> REXB4=0 REXB=0 SIBBASE=0b110     |   BASE0=ArSI() SEG0=FINAL_DSEG()*/
case 99: /*(3, 0, 0, 6) -> REXB4=0 REXB=0 SIBBASE=0b110     |   BASE0=ArSI() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_ArSI(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 100: /*(0, 1, 0, 6) -> REXB4=0 REXB=1 SIBBASE=0b110     |   BASE0=Ar14() SEG0=FINAL_DSEG()*/
case 101: /*(1, 1, 0, 6) -> REXB4=0 REXB=1 SIBBASE=0b110     |   BASE0=Ar14() SEG0=FINAL_DSEG()*/
case 102: /*(2, 1, 0, 6) -> REXB4=0 REXB=1 SIBBASE=0b110     |   BASE0=Ar14() SEG0=FINAL_DSEG()*/
case 103: /*(3, 1, 0, 6) -> REXB4=0 REXB=1 SIBBASE=0b110     |   BASE0=Ar14() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar14(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 104: /*(0, 0, 1, 6) -> REXB4=1 REXB=0 SIBBASE=0b110     |   BASE0=Ar22() SEG0=FINAL_DSEG()*/
case 105: /*(1, 0, 1, 6) -> REXB4=1 REXB=0 SIBBASE=0b110     |   BASE0=Ar22() SEG0=FINAL_DSEG()*/
case 106: /*(2, 0, 1, 6) -> REXB4=1 REXB=0 SIBBASE=0b110     |   BASE0=Ar22() SEG0=FINAL_DSEG()*/
case 107: /*(3, 0, 1, 6) -> REXB4=1 REXB=0 SIBBASE=0b110     |   BASE0=Ar22() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar22(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 108: /*(0, 1, 1, 6) -> REXB4=1 REXB=1 SIBBASE=0b110     |   BASE0=Ar30() SEG0=FINAL_DSEG()*/
case 109: /*(1, 1, 1, 6) -> REXB4=1 REXB=1 SIBBASE=0b110     |   BASE0=Ar30() SEG0=FINAL_DSEG()*/
case 110: /*(2, 1, 1, 6) -> REXB4=1 REXB=1 SIBBASE=0b110     |   BASE0=Ar30() SEG0=FINAL_DSEG()*/
case 111: /*(3, 1, 1, 6) -> REXB4=1 REXB=1 SIBBASE=0b110     |   BASE0=Ar30() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar30(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 112: /*(0, 0, 0, 7) -> REXB4=0 REXB=0 SIBBASE=0b111     |   BASE0=ArDI() SEG0=FINAL_DSEG()*/
case 113: /*(1, 0, 0, 7) -> REXB4=0 REXB=0 SIBBASE=0b111     |   BASE0=ArDI() SEG0=FINAL_DSEG()*/
case 114: /*(2, 0, 0, 7) -> REXB4=0 REXB=0 SIBBASE=0b111     |   BASE0=ArDI() SEG0=FINAL_DSEG()*/
case 115: /*(3, 0, 0, 7) -> REXB4=0 REXB=0 SIBBASE=0b111     |   BASE0=ArDI() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_ArDI(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 116: /*(0, 1, 0, 7) -> REXB4=0 REXB=1 SIBBASE=0b111     |   BASE0=Ar15() SEG0=FINAL_DSEG()*/
case 117: /*(1, 1, 0, 7) -> REXB4=0 REXB=1 SIBBASE=0b111     |   BASE0=Ar15() SEG0=FINAL_DSEG()*/
case 118: /*(2, 1, 0, 7) -> REXB4=0 REXB=1 SIBBASE=0b111     |   BASE0=Ar15() SEG0=FINAL_DSEG()*/
case 119: /*(3, 1, 0, 7) -> REXB4=0 REXB=1 SIBBASE=0b111     |   BASE0=Ar15() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar15(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 120: /*(0, 0, 1, 7) -> REXB4=1 REXB=0 SIBBASE=0b111     |   BASE0=Ar23() SEG0=FINAL_DSEG()*/
case 121: /*(1, 0, 1, 7) -> REXB4=1 REXB=0 SIBBASE=0b111     |   BASE0=Ar23() SEG0=FINAL_DSEG()*/
case 122: /*(2, 0, 1, 7) -> REXB4=1 REXB=0 SIBBASE=0b111     |   BASE0=Ar23() SEG0=FINAL_DSEG()*/
case 123: /*(3, 0, 1, 7) -> REXB4=1 REXB=0 SIBBASE=0b111     |   BASE0=Ar23() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar23(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 124: /*(0, 1, 1, 7) -> REXB4=1 REXB=1 SIBBASE=0b111     |   BASE0=Ar31() SEG0=FINAL_DSEG()*/
case 125: /*(1, 1, 1, 7) -> REXB4=1 REXB=1 SIBBASE=0b111     |   BASE0=Ar31() SEG0=FINAL_DSEG()*/
case 126: /*(2, 1, 1, 7) -> REXB4=1 REXB=1 SIBBASE=0b111     |   BASE0=Ar31() SEG0=FINAL_DSEG()*/
case 127: /*(3, 1, 1, 7) -> REXB4=1 REXB=1 SIBBASE=0b111     |   BASE0=Ar31() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar31(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_OVERRIDE_SEG0(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mode(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> mode16 |*/
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> mode32 |*/
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> mode64 |*/
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_OVERRIDE_SEG1(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mode(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> mode16 |*/
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> mode32 |*/
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> mode64 |*/
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_XMM_R(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mode(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> mode16 | OUTREG=XMM_R_32()*/
    xed3_capture_nt_XMM_R_32(d);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> mode32 | OUTREG=XMM_R_32()*/
    xed3_capture_nt_XMM_R_32(d);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> mode64 | OUTREG=XMM_R_64()*/
    xed3_capture_nt_XMM_R_64(d);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_XMM_R_32(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_reg(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> REG=0x0  | OUTREG=XED_REG_XMM0*/
    xed3_operand_set_outreg(d, XED_REG_XMM0);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> REG=0x1  | OUTREG=XED_REG_XMM1*/
    xed3_operand_set_outreg(d, XED_REG_XMM1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> REG=0x2  | OUTREG=XED_REG_XMM2*/
    xed3_operand_set_outreg(d, XED_REG_XMM2);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> REG=0x3  | OUTREG=XED_REG_XMM3*/
    xed3_operand_set_outreg(d, XED_REG_XMM3);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4,) -> REG=0x4  | OUTREG=XED_REG_XMM4*/
    xed3_operand_set_outreg(d, XED_REG_XMM4);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5,) -> REG=0x5  | OUTREG=XED_REG_XMM5*/
    xed3_operand_set_outreg(d, XED_REG_XMM5);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6,) -> REG=0x6  | OUTREG=XED_REG_XMM6*/
    xed3_operand_set_outreg(d, XED_REG_XMM6);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7,) -> REG=0x7  | OUTREG=XED_REG_XMM7*/
    xed3_operand_set_outreg(d, XED_REG_XMM7);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_XMM_R_64(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_reg(d)) << ((0));
key += (xed3_operand_get_rexr(d)) << ((3));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0) -> REXR=0 REG=0x0  | OUTREG=XED_REG_XMM0*/
    xed3_operand_set_outreg(d, XED_REG_XMM0);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0) -> REXR=0 REG=0x1  | OUTREG=XED_REG_XMM1*/
    xed3_operand_set_outreg(d, XED_REG_XMM1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2, 0) -> REXR=0 REG=0x2  | OUTREG=XED_REG_XMM2*/
    xed3_operand_set_outreg(d, XED_REG_XMM2);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3, 0) -> REXR=0 REG=0x3  | OUTREG=XED_REG_XMM3*/
    xed3_operand_set_outreg(d, XED_REG_XMM3);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4, 0) -> REXR=0 REG=0x4  | OUTREG=XED_REG_XMM4*/
    xed3_operand_set_outreg(d, XED_REG_XMM4);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5, 0) -> REXR=0 REG=0x5  | OUTREG=XED_REG_XMM5*/
    xed3_operand_set_outreg(d, XED_REG_XMM5);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6, 0) -> REXR=0 REG=0x6  | OUTREG=XED_REG_XMM6*/
    xed3_operand_set_outreg(d, XED_REG_XMM6);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7, 0) -> REXR=0 REG=0x7  | OUTREG=XED_REG_XMM7*/
    xed3_operand_set_outreg(d, XED_REG_XMM7);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 1) -> REXR=1 REG=0x0  | OUTREG=XED_REG_XMM8*/
    xed3_operand_set_outreg(d, XED_REG_XMM8);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 1) -> REXR=1 REG=0x1  | OUTREG=XED_REG_XMM9*/
    xed3_operand_set_outreg(d, XED_REG_XMM9);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(2, 1) -> REXR=1 REG=0x2  | OUTREG=XED_REG_XMM10*/
    xed3_operand_set_outreg(d, XED_REG_XMM10);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(3, 1) -> REXR=1 REG=0x3  | OUTREG=XED_REG_XMM11*/
    xed3_operand_set_outreg(d, XED_REG_XMM11);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(4, 1) -> REXR=1 REG=0x4  | OUTREG=XED_REG_XMM12*/
    xed3_operand_set_outreg(d, XED_REG_XMM12);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(5, 1) -> REXR=1 REG=0x5  | OUTREG=XED_REG_XMM13*/
    xed3_operand_set_outreg(d, XED_REG_XMM13);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(6, 1) -> REXR=1 REG=0x6  | OUTREG=XED_REG_XMM14*/
    xed3_operand_set_outreg(d, XED_REG_XMM14);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(7, 1) -> REXR=1 REG=0x7  | OUTREG=XED_REG_XMM15*/
    xed3_operand_set_outreg(d, XED_REG_XMM15);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_XMM_B(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mode(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> mode16 | OUTREG=XMM_B_32()*/
    xed3_capture_nt_XMM_B_32(d);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> mode32 | OUTREG=XMM_B_32()*/
    xed3_capture_nt_XMM_B_32(d);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> mode64 | OUTREG=XMM_B_64()*/
    xed3_capture_nt_XMM_B_64(d);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_XMM_B_32(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_rm(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> RM=0x0  | OUTREG=XED_REG_XMM0*/
    xed3_operand_set_outreg(d, XED_REG_XMM0);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> RM=0x1  | OUTREG=XED_REG_XMM1*/
    xed3_operand_set_outreg(d, XED_REG_XMM1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> RM=0x2  | OUTREG=XED_REG_XMM2*/
    xed3_operand_set_outreg(d, XED_REG_XMM2);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> RM=0x3  | OUTREG=XED_REG_XMM3*/
    xed3_operand_set_outreg(d, XED_REG_XMM3);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4,) -> RM=0x4  | OUTREG=XED_REG_XMM4*/
    xed3_operand_set_outreg(d, XED_REG_XMM4);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5,) -> RM=0x5  | OUTREG=XED_REG_XMM5*/
    xed3_operand_set_outreg(d, XED_REG_XMM5);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6,) -> RM=0x6  | OUTREG=XED_REG_XMM6*/
    xed3_operand_set_outreg(d, XED_REG_XMM6);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7,) -> RM=0x7  | OUTREG=XED_REG_XMM7*/
    xed3_operand_set_outreg(d, XED_REG_XMM7);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_XMM_B_64(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_rexb(d)) << ((0));
key += (xed3_operand_get_rm(d)) << ((1));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0) -> REXB=0 RM=0x0  | OUTREG=XED_REG_XMM0*/
    xed3_operand_set_outreg(d, XED_REG_XMM0);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0) -> REXB=1 RM=0x0  | OUTREG=XED_REG_XMM8*/
    xed3_operand_set_outreg(d, XED_REG_XMM8);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(0, 1) -> REXB=0 RM=0x1  | OUTREG=XED_REG_XMM1*/
    xed3_operand_set_outreg(d, XED_REG_XMM1);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(1, 1) -> REXB=1 RM=0x1  | OUTREG=XED_REG_XMM9*/
    xed3_operand_set_outreg(d, XED_REG_XMM9);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(0, 2) -> REXB=0 RM=0x2  | OUTREG=XED_REG_XMM2*/
    xed3_operand_set_outreg(d, XED_REG_XMM2);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(1, 2) -> REXB=1 RM=0x2  | OUTREG=XED_REG_XMM10*/
    xed3_operand_set_outreg(d, XED_REG_XMM10);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(0, 3) -> REXB=0 RM=0x3  | OUTREG=XED_REG_XMM3*/
    xed3_operand_set_outreg(d, XED_REG_XMM3);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(1, 3) -> REXB=1 RM=0x3  | OUTREG=XED_REG_XMM11*/
    xed3_operand_set_outreg(d, XED_REG_XMM11);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 4) -> REXB=0 RM=0x4  | OUTREG=XED_REG_XMM4*/
    xed3_operand_set_outreg(d, XED_REG_XMM4);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 4) -> REXB=1 RM=0x4  | OUTREG=XED_REG_XMM12*/
    xed3_operand_set_outreg(d, XED_REG_XMM12);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(0, 5) -> REXB=0 RM=0x5  | OUTREG=XED_REG_XMM5*/
    xed3_operand_set_outreg(d, XED_REG_XMM5);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(1, 5) -> REXB=1 RM=0x5  | OUTREG=XED_REG_XMM13*/
    xed3_operand_set_outreg(d, XED_REG_XMM13);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(0, 6) -> REXB=0 RM=0x6  | OUTREG=XED_REG_XMM6*/
    xed3_operand_set_outreg(d, XED_REG_XMM6);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(1, 6) -> REXB=1 RM=0x6  | OUTREG=XED_REG_XMM14*/
    xed3_operand_set_outreg(d, XED_REG_XMM14);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(0, 7) -> REXB=0 RM=0x7  | OUTREG=XED_REG_XMM7*/
    xed3_operand_set_outreg(d, XED_REG_XMM7);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(1, 7) -> REXB=1 RM=0x7  | OUTREG=XED_REG_XMM15*/
    xed3_operand_set_outreg(d, XED_REG_XMM15);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_BND_R_CHECK(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_reg(d)) << ((0));
key += (xed3_operand_get_rexr(d)) << ((3));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0) -> REXR=0 REG=0x0  |*/
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0) -> REXR=0 REG=0x1  |*/
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2, 0) -> REXR=0 REG=0x2  |*/
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3, 0) -> REXR=0 REG=0x3  |*/
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4, 0) -> REXR=0 REG=0x4  | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
case 5: /*(5, 0) -> REXR=0 REG=0x5  | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
case 6: /*(6, 0) -> REXR=0 REG=0x6  | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
case 7: /*(7, 0) -> REXR=0 REG=0x7  | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
case 8: /*(0, 1) -> REXR=1 REG=0x0  | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
case 9: /*(1, 1) -> REXR=1 REG=0x1  | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
case 10: /*(2, 1) -> REXR=1 REG=0x2  | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
case 11: /*(3, 1) -> REXR=1 REG=0x3  | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
case 12: /*(4, 1) -> REXR=1 REG=0x4  | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
case 13: /*(5, 1) -> REXR=1 REG=0x5  | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
case 14: /*(6, 1) -> REXR=1 REG=0x6  | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
case 15: /*(7, 1) -> REXR=1 REG=0x7  | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_BND_B_CHECK(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_rexb(d)) << ((0));
key += (xed3_operand_get_rm(d)) << ((1));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0) -> REXB=0 RM=0x0  |*/
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0) -> REXB=1 RM=0x0  | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
case 2: /*(0, 1) -> REXB=0 RM=0x1  |*/
/*pacify the compiler */
(void)d;
    break;
case 3: /*(1, 1) -> REXB=1 RM=0x1  | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
case 4: /*(0, 2) -> REXB=0 RM=0x2  |*/
/*pacify the compiler */
(void)d;
    break;
case 5: /*(1, 2) -> REXB=1 RM=0x2  | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
case 6: /*(0, 3) -> REXB=0 RM=0x3  |*/
/*pacify the compiler */
(void)d;
    break;
case 7: /*(1, 3) -> REXB=1 RM=0x3  | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
case 8: /*(0, 4) -> REXB=0 RM=0x4  | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
case 9: /*(1, 4) -> REXB=1 RM=0x4  | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
case 10: /*(0, 5) -> REXB=0 RM=0x5  | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
case 11: /*(1, 5) -> REXB=1 RM=0x5  | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
case 12: /*(0, 6) -> REXB=0 RM=0x6  | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
case 13: /*(1, 6) -> REXB=1 RM=0x6  | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
case 14: /*(0, 7) -> REXB=0 RM=0x7  | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
case 15: /*(1, 7) -> REXB=1 RM=0x7  | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_BND_R(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_reg(d)) << ((0));
key += (xed3_operand_get_rexr(d)) << ((3));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0) -> REXR=0 REG=0x0  | OUTREG=XED_REG_BND0*/
    xed3_operand_set_outreg(d, XED_REG_BND0);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0) -> REXR=0 REG=0x1  | OUTREG=XED_REG_BND1*/
    xed3_operand_set_outreg(d, XED_REG_BND1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2, 0) -> REXR=0 REG=0x2  | OUTREG=XED_REG_BND2*/
    xed3_operand_set_outreg(d, XED_REG_BND2);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3, 0) -> REXR=0 REG=0x3  | OUTREG=XED_REG_BND3*/
    xed3_operand_set_outreg(d, XED_REG_BND3);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4, 0) -> REXR=0 REG=0x4  | OUTREG=XED_REG_ERROR  enc*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5, 0) -> REXR=0 REG=0x5  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6, 0) -> REXR=0 REG=0x6  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7, 0) -> REXR=0 REG=0x7  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 1) -> REXR=1 REG=0x0  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 1) -> REXR=1 REG=0x1  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(2, 1) -> REXR=1 REG=0x2  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(3, 1) -> REXR=1 REG=0x3  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(4, 1) -> REXR=1 REG=0x4  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(5, 1) -> REXR=1 REG=0x5  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(6, 1) -> REXR=1 REG=0x6  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(7, 1) -> REXR=1 REG=0x7  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_BND_B(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_rexb(d)) << ((0));
key += (xed3_operand_get_rm(d)) << ((1));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0) -> REXB=0 RM=0x0  | OUTREG=XED_REG_BND0*/
    xed3_operand_set_outreg(d, XED_REG_BND0);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0) -> REXB=1 RM=0x0  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(0, 1) -> REXB=0 RM=0x1  | OUTREG=XED_REG_BND1*/
    xed3_operand_set_outreg(d, XED_REG_BND1);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(1, 1) -> REXB=1 RM=0x1  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(0, 2) -> REXB=0 RM=0x2  | OUTREG=XED_REG_BND2*/
    xed3_operand_set_outreg(d, XED_REG_BND2);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(1, 2) -> REXB=1 RM=0x2  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(0, 3) -> REXB=0 RM=0x3  | OUTREG=XED_REG_BND3*/
    xed3_operand_set_outreg(d, XED_REG_BND3);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(1, 3) -> REXB=1 RM=0x3  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 4) -> REXB=0 RM=0x4  | OUTREG=XED_REG_ERROR   enc*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 4) -> REXB=1 RM=0x4  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(0, 5) -> REXB=0 RM=0x5  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(1, 5) -> REXB=1 RM=0x5  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(0, 6) -> REXB=0 RM=0x6  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(1, 6) -> REXB=1 RM=0x6  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(0, 7) -> REXB=0 RM=0x7  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(1, 7) -> REXB=1 RM=0x7  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_A_GPR_R(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_reg(d)) << ((0));
key += (xed3_operand_get_rexr(d)) << ((3));
key += (xed3_operand_get_rexr4(d)) << ((4));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0, 0) -> REXR4=0 REXR=0 REG=0x0  | OUTREG=ArAX()*/
    xed3_capture_nt_ArAX(d);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0, 0) -> REXR4=0 REXR=0 REG=0x1  | OUTREG=ArCX()*/
    xed3_capture_nt_ArCX(d);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2, 0, 0) -> REXR4=0 REXR=0 REG=0x2  | OUTREG=ArDX()*/
    xed3_capture_nt_ArDX(d);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3, 0, 0) -> REXR4=0 REXR=0 REG=0x3  | OUTREG=ArBX()*/
    xed3_capture_nt_ArBX(d);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4, 0, 0) -> REXR4=0 REXR=0 REG=0x4  | OUTREG=ArSP()*/
    xed3_capture_nt_ArSP(d);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5, 0, 0) -> REXR4=0 REXR=0 REG=0x5  | OUTREG=ArBP()*/
    xed3_capture_nt_ArBP(d);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6, 0, 0) -> REXR4=0 REXR=0 REG=0x6  | OUTREG=ArSI()*/
    xed3_capture_nt_ArSI(d);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7, 0, 0) -> REXR4=0 REXR=0 REG=0x7  | OUTREG=ArDI()*/
    xed3_capture_nt_ArDI(d);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 1, 0) -> REXR4=0 REXR=1 REG=0x0  | OUTREG=Ar8()*/
    xed3_capture_nt_Ar8(d);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 1, 0) -> REXR4=0 REXR=1 REG=0x1  | OUTREG=Ar9()*/
    xed3_capture_nt_Ar9(d);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(2, 1, 0) -> REXR4=0 REXR=1 REG=0x2  | OUTREG=Ar10()*/
    xed3_capture_nt_Ar10(d);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(3, 1, 0) -> REXR4=0 REXR=1 REG=0x3  | OUTREG=Ar11()*/
    xed3_capture_nt_Ar11(d);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(4, 1, 0) -> REXR4=0 REXR=1 REG=0x4  | OUTREG=Ar12()*/
    xed3_capture_nt_Ar12(d);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(5, 1, 0) -> REXR4=0 REXR=1 REG=0x5  | OUTREG=Ar13()*/
    xed3_capture_nt_Ar13(d);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(6, 1, 0) -> REXR4=0 REXR=1 REG=0x6  | OUTREG=Ar14()*/
    xed3_capture_nt_Ar14(d);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(7, 1, 0) -> REXR4=0 REXR=1 REG=0x7  | OUTREG=Ar15()*/
    xed3_capture_nt_Ar15(d);
/*pacify the compiler */
(void)d;
    break;
case 16: /*(0, 0, 1) -> REXR4=1 REXR=0 REG=0x0  | OUTREG=Ar16()*/
    xed3_capture_nt_Ar16(d);
/*pacify the compiler */
(void)d;
    break;
case 17: /*(1, 0, 1) -> REXR4=1 REXR=0 REG=0x1  | OUTREG=Ar17()*/
    xed3_capture_nt_Ar17(d);
/*pacify the compiler */
(void)d;
    break;
case 18: /*(2, 0, 1) -> REXR4=1 REXR=0 REG=0x2  | OUTREG=Ar18()*/
    xed3_capture_nt_Ar18(d);
/*pacify the compiler */
(void)d;
    break;
case 19: /*(3, 0, 1) -> REXR4=1 REXR=0 REG=0x3  | OUTREG=Ar19()*/
    xed3_capture_nt_Ar19(d);
/*pacify the compiler */
(void)d;
    break;
case 20: /*(4, 0, 1) -> REXR4=1 REXR=0 REG=0x4  | OUTREG=Ar20()*/
    xed3_capture_nt_Ar20(d);
/*pacify the compiler */
(void)d;
    break;
case 21: /*(5, 0, 1) -> REXR4=1 REXR=0 REG=0x5  | OUTREG=Ar21()*/
    xed3_capture_nt_Ar21(d);
/*pacify the compiler */
(void)d;
    break;
case 22: /*(6, 0, 1) -> REXR4=1 REXR=0 REG=0x6  | OUTREG=Ar22()*/
    xed3_capture_nt_Ar22(d);
/*pacify the compiler */
(void)d;
    break;
case 23: /*(7, 0, 1) -> REXR4=1 REXR=0 REG=0x7  | OUTREG=Ar23()*/
    xed3_capture_nt_Ar23(d);
/*pacify the compiler */
(void)d;
    break;
case 24: /*(0, 1, 1) -> REXR4=1 REXR=1 REG=0x0  | OUTREG=Ar24()*/
    xed3_capture_nt_Ar24(d);
/*pacify the compiler */
(void)d;
    break;
case 25: /*(1, 1, 1) -> REXR4=1 REXR=1 REG=0x1  | OUTREG=Ar25()*/
    xed3_capture_nt_Ar25(d);
/*pacify the compiler */
(void)d;
    break;
case 26: /*(2, 1, 1) -> REXR4=1 REXR=1 REG=0x2  | OUTREG=Ar26()*/
    xed3_capture_nt_Ar26(d);
/*pacify the compiler */
(void)d;
    break;
case 27: /*(3, 1, 1) -> REXR4=1 REXR=1 REG=0x3  | OUTREG=Ar27()*/
    xed3_capture_nt_Ar27(d);
/*pacify the compiler */
(void)d;
    break;
case 28: /*(4, 1, 1) -> REXR4=1 REXR=1 REG=0x4  | OUTREG=Ar28()*/
    xed3_capture_nt_Ar28(d);
/*pacify the compiler */
(void)d;
    break;
case 29: /*(5, 1, 1) -> REXR4=1 REXR=1 REG=0x5  | OUTREG=Ar29()*/
    xed3_capture_nt_Ar29(d);
/*pacify the compiler */
(void)d;
    break;
case 30: /*(6, 1, 1) -> REXR4=1 REXR=1 REG=0x6  | OUTREG=Ar30()*/
    xed3_capture_nt_Ar30(d);
/*pacify the compiler */
(void)d;
    break;
case 31: /*(7, 1, 1) -> REXR4=1 REXR=1 REG=0x7  | OUTREG=Ar31()*/
    xed3_capture_nt_Ar31(d);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_A_GPR_B(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_rexb(d)) << ((0));
key += (xed3_operand_get_rexb4(d)) << ((1));
key += (xed3_operand_get_rm(d)) << ((2));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0, 0) -> REXB4=0 REXB=0 RM=0x0  | OUTREG=ArAX()*/
    xed3_capture_nt_ArAX(d);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0, 0) -> REXB4=0 REXB=1 RM=0x0  | OUTREG=Ar8()*/
    xed3_capture_nt_Ar8(d);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(0, 1, 0) -> REXB4=1 REXB=0 RM=0x0  | OUTREG=Ar16()*/
    xed3_capture_nt_Ar16(d);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(1, 1, 0) -> REXB4=1 REXB=1 RM=0x0  | OUTREG=Ar24()*/
    xed3_capture_nt_Ar24(d);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(0, 0, 1) -> REXB4=0 REXB=0 RM=0x1  | OUTREG=ArCX()*/
    xed3_capture_nt_ArCX(d);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(1, 0, 1) -> REXB4=0 REXB=1 RM=0x1  | OUTREG=Ar9()*/
    xed3_capture_nt_Ar9(d);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(0, 1, 1) -> REXB4=1 REXB=0 RM=0x1  | OUTREG=Ar17()*/
    xed3_capture_nt_Ar17(d);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(1, 1, 1) -> REXB4=1 REXB=1 RM=0x1  | OUTREG=Ar25()*/
    xed3_capture_nt_Ar25(d);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 0, 2) -> REXB4=0 REXB=0 RM=0x2  | OUTREG=ArDX()*/
    xed3_capture_nt_ArDX(d);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 0, 2) -> REXB4=0 REXB=1 RM=0x2  | OUTREG=Ar10()*/
    xed3_capture_nt_Ar10(d);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(0, 1, 2) -> REXB4=1 REXB=0 RM=0x2  | OUTREG=Ar18()*/
    xed3_capture_nt_Ar18(d);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(1, 1, 2) -> REXB4=1 REXB=1 RM=0x2  | OUTREG=Ar26()*/
    xed3_capture_nt_Ar26(d);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(0, 0, 3) -> REXB4=0 REXB=0 RM=0x3  | OUTREG=ArBX()*/
    xed3_capture_nt_ArBX(d);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(1, 0, 3) -> REXB4=0 REXB=1 RM=0x3  | OUTREG=Ar11()*/
    xed3_capture_nt_Ar11(d);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(0, 1, 3) -> REXB4=1 REXB=0 RM=0x3  | OUTREG=Ar19()*/
    xed3_capture_nt_Ar19(d);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(1, 1, 3) -> REXB4=1 REXB=1 RM=0x3  | OUTREG=Ar27()*/
    xed3_capture_nt_Ar27(d);
/*pacify the compiler */
(void)d;
    break;
case 16: /*(0, 0, 4) -> REXB4=0 REXB=0 RM=0x4  | OUTREG=ArSP()*/
    xed3_capture_nt_ArSP(d);
/*pacify the compiler */
(void)d;
    break;
case 17: /*(1, 0, 4) -> REXB4=0 REXB=1 RM=0x4  | OUTREG=Ar12()*/
    xed3_capture_nt_Ar12(d);
/*pacify the compiler */
(void)d;
    break;
case 18: /*(0, 1, 4) -> REXB4=1 REXB=0 RM=0x4  | OUTREG=Ar20()*/
    xed3_capture_nt_Ar20(d);
/*pacify the compiler */
(void)d;
    break;
case 19: /*(1, 1, 4) -> REXB4=1 REXB=1 RM=0x4  | OUTREG=Ar28()*/
    xed3_capture_nt_Ar28(d);
/*pacify the compiler */
(void)d;
    break;
case 20: /*(0, 0, 5) -> REXB4=0 REXB=0 RM=0x5  | OUTREG=ArBP()*/
    xed3_capture_nt_ArBP(d);
/*pacify the compiler */
(void)d;
    break;
case 21: /*(1, 0, 5) -> REXB4=0 REXB=1 RM=0x5  | OUTREG=Ar13()*/
    xed3_capture_nt_Ar13(d);
/*pacify the compiler */
(void)d;
    break;
case 22: /*(0, 1, 5) -> REXB4=1 REXB=0 RM=0x5  | OUTREG=Ar21()*/
    xed3_capture_nt_Ar21(d);
/*pacify the compiler */
(void)d;
    break;
case 23: /*(1, 1, 5) -> REXB4=1 REXB=1 RM=0x5  | OUTREG=Ar29()*/
    xed3_capture_nt_Ar29(d);
/*pacify the compiler */
(void)d;
    break;
case 24: /*(0, 0, 6) -> REXB4=0 REXB=0 RM=0x6  | OUTREG=ArSI()*/
    xed3_capture_nt_ArSI(d);
/*pacify the compiler */
(void)d;
    break;
case 25: /*(1, 0, 6) -> REXB4=0 REXB=1 RM=0x6  | OUTREG=Ar14()*/
    xed3_capture_nt_Ar14(d);
/*pacify the compiler */
(void)d;
    break;
case 26: /*(0, 1, 6) -> REXB4=1 REXB=0 RM=0x6  | OUTREG=Ar22()*/
    xed3_capture_nt_Ar22(d);
/*pacify the compiler */
(void)d;
    break;
case 27: /*(1, 1, 6) -> REXB4=1 REXB=1 RM=0x6  | OUTREG=Ar30()*/
    xed3_capture_nt_Ar30(d);
/*pacify the compiler */
(void)d;
    break;
case 28: /*(0, 0, 7) -> REXB4=0 REXB=0 RM=0x7  | OUTREG=ArDI()*/
    xed3_capture_nt_ArDI(d);
/*pacify the compiler */
(void)d;
    break;
case 29: /*(1, 0, 7) -> REXB4=0 REXB=1 RM=0x7  | OUTREG=Ar15()*/
    xed3_capture_nt_Ar15(d);
/*pacify the compiler */
(void)d;
    break;
case 30: /*(0, 1, 7) -> REXB4=1 REXB=0 RM=0x7  | OUTREG=Ar23()*/
    xed3_capture_nt_Ar23(d);
/*pacify the compiler */
(void)d;
    break;
case 31: /*(1, 1, 7) -> REXB4=1 REXB=1 RM=0x7  | OUTREG=Ar31()*/
    xed3_capture_nt_Ar31(d);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_XMM_SE(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mode(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> mode16 | OUTREG=XMM_SE32()*/
    xed3_capture_nt_XMM_SE32(d);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> mode32 | OUTREG=XMM_SE32()*/
    xed3_capture_nt_XMM_SE32(d);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> mode64 | OUTREG=XMM_SE64()*/
    xed3_capture_nt_XMM_SE64(d);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_XMM_SE64(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_esrc(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> ESRC=0x0 | OUTREG=XED_REG_XMM0*/
    xed3_operand_set_outreg(d, XED_REG_XMM0);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> ESRC=0x1 | OUTREG=XED_REG_XMM1*/
    xed3_operand_set_outreg(d, XED_REG_XMM1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> ESRC=0x2 | OUTREG=XED_REG_XMM2*/
    xed3_operand_set_outreg(d, XED_REG_XMM2);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> ESRC=0x3 | OUTREG=XED_REG_XMM3*/
    xed3_operand_set_outreg(d, XED_REG_XMM3);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4,) -> ESRC=0x4 | OUTREG=XED_REG_XMM4*/
    xed3_operand_set_outreg(d, XED_REG_XMM4);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5,) -> ESRC=0x5 | OUTREG=XED_REG_XMM5*/
    xed3_operand_set_outreg(d, XED_REG_XMM5);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6,) -> ESRC=0x6 | OUTREG=XED_REG_XMM6*/
    xed3_operand_set_outreg(d, XED_REG_XMM6);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7,) -> ESRC=0x7 | OUTREG=XED_REG_XMM7*/
    xed3_operand_set_outreg(d, XED_REG_XMM7);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(8,) -> ESRC=0x8 | OUTREG=XED_REG_XMM8*/
    xed3_operand_set_outreg(d, XED_REG_XMM8);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(9,) -> ESRC=0x9 | OUTREG=XED_REG_XMM9*/
    xed3_operand_set_outreg(d, XED_REG_XMM9);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(10,) -> ESRC=0xA | OUTREG=XED_REG_XMM10*/
    xed3_operand_set_outreg(d, XED_REG_XMM10);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(11,) -> ESRC=0xB | OUTREG=XED_REG_XMM11*/
    xed3_operand_set_outreg(d, XED_REG_XMM11);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(12,) -> ESRC=0xC | OUTREG=XED_REG_XMM12*/
    xed3_operand_set_outreg(d, XED_REG_XMM12);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(13,) -> ESRC=0xD | OUTREG=XED_REG_XMM13*/
    xed3_operand_set_outreg(d, XED_REG_XMM13);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(14,) -> ESRC=0xE | OUTREG=XED_REG_XMM14*/
    xed3_operand_set_outreg(d, XED_REG_XMM14);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(15,) -> ESRC=0xF | OUTREG=XED_REG_XMM15*/
    xed3_operand_set_outreg(d, XED_REG_XMM15);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_XMM_SE32(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_esrc(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> ESRC=0 | OUTREG=XED_REG_XMM0    enc*/
    xed3_operand_set_outreg(d, XED_REG_XMM0);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> ESRC=1 | OUTREG=XED_REG_XMM1    enc*/
    xed3_operand_set_outreg(d, XED_REG_XMM1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> ESRC=2 | OUTREG=XED_REG_XMM2    enc*/
    xed3_operand_set_outreg(d, XED_REG_XMM2);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> ESRC=3 | OUTREG=XED_REG_XMM3    enc*/
    xed3_operand_set_outreg(d, XED_REG_XMM3);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4,) -> ESRC=4 | OUTREG=XED_REG_XMM4    enc*/
    xed3_operand_set_outreg(d, XED_REG_XMM4);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5,) -> ESRC=5 | OUTREG=XED_REG_XMM5    enc*/
    xed3_operand_set_outreg(d, XED_REG_XMM5);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6,) -> ESRC=6 | OUTREG=XED_REG_XMM6    enc*/
    xed3_operand_set_outreg(d, XED_REG_XMM6);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7,) -> ESRC=7 | OUTREG=XED_REG_XMM7    enc*/
    xed3_operand_set_outreg(d, XED_REG_XMM7);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(8,) -> ESRC=0x8 | OUTREG=XED_REG_XMM0*/
    xed3_operand_set_outreg(d, XED_REG_XMM0);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(9,) -> ESRC=0x9 | OUTREG=XED_REG_XMM1*/
    xed3_operand_set_outreg(d, XED_REG_XMM1);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(10,) -> ESRC=0xA | OUTREG=XED_REG_XMM2*/
    xed3_operand_set_outreg(d, XED_REG_XMM2);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(11,) -> ESRC=0xB | OUTREG=XED_REG_XMM3*/
    xed3_operand_set_outreg(d, XED_REG_XMM3);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(12,) -> ESRC=0xC | OUTREG=XED_REG_XMM4*/
    xed3_operand_set_outreg(d, XED_REG_XMM4);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(13,) -> ESRC=0xD | OUTREG=XED_REG_XMM5*/
    xed3_operand_set_outreg(d, XED_REG_XMM5);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(14,) -> ESRC=0xE | OUTREG=XED_REG_XMM6*/
    xed3_operand_set_outreg(d, XED_REG_XMM6);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(15,) -> ESRC=0xF | OUTREG=XED_REG_XMM7*/
    xed3_operand_set_outreg(d, XED_REG_XMM7);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_YMM_SE(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mode(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> mode16 | OUTREG=YMM_SE32()*/
    xed3_capture_nt_YMM_SE32(d);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> mode32 | OUTREG=YMM_SE32()*/
    xed3_capture_nt_YMM_SE32(d);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> mode64 | OUTREG=YMM_SE64()*/
    xed3_capture_nt_YMM_SE64(d);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_YMM_SE64(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_esrc(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> ESRC=0x0 | OUTREG=XED_REG_YMM0*/
    xed3_operand_set_outreg(d, XED_REG_YMM0);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> ESRC=0x1 | OUTREG=XED_REG_YMM1*/
    xed3_operand_set_outreg(d, XED_REG_YMM1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> ESRC=0x2 | OUTREG=XED_REG_YMM2*/
    xed3_operand_set_outreg(d, XED_REG_YMM2);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> ESRC=0x3 | OUTREG=XED_REG_YMM3*/
    xed3_operand_set_outreg(d, XED_REG_YMM3);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4,) -> ESRC=0x4 | OUTREG=XED_REG_YMM4*/
    xed3_operand_set_outreg(d, XED_REG_YMM4);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5,) -> ESRC=0x5 | OUTREG=XED_REG_YMM5*/
    xed3_operand_set_outreg(d, XED_REG_YMM5);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6,) -> ESRC=0x6 | OUTREG=XED_REG_YMM6*/
    xed3_operand_set_outreg(d, XED_REG_YMM6);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7,) -> ESRC=0x7 | OUTREG=XED_REG_YMM7*/
    xed3_operand_set_outreg(d, XED_REG_YMM7);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(8,) -> ESRC=0x8 | OUTREG=XED_REG_YMM8*/
    xed3_operand_set_outreg(d, XED_REG_YMM8);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(9,) -> ESRC=0x9 | OUTREG=XED_REG_YMM9*/
    xed3_operand_set_outreg(d, XED_REG_YMM9);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(10,) -> ESRC=0xA | OUTREG=XED_REG_YMM10*/
    xed3_operand_set_outreg(d, XED_REG_YMM10);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(11,) -> ESRC=0xB | OUTREG=XED_REG_YMM11*/
    xed3_operand_set_outreg(d, XED_REG_YMM11);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(12,) -> ESRC=0xC | OUTREG=XED_REG_YMM12*/
    xed3_operand_set_outreg(d, XED_REG_YMM12);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(13,) -> ESRC=0xD | OUTREG=XED_REG_YMM13*/
    xed3_operand_set_outreg(d, XED_REG_YMM13);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(14,) -> ESRC=0xE | OUTREG=XED_REG_YMM14*/
    xed3_operand_set_outreg(d, XED_REG_YMM14);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(15,) -> ESRC=0xF | OUTREG=XED_REG_YMM15*/
    xed3_operand_set_outreg(d, XED_REG_YMM15);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_YMM_SE32(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_esrc(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> ESRC=0 | OUTREG=XED_REG_YMM0        enc*/
    xed3_operand_set_outreg(d, XED_REG_YMM0);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> ESRC=1 | OUTREG=XED_REG_YMM1        enc*/
    xed3_operand_set_outreg(d, XED_REG_YMM1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> ESRC=2 | OUTREG=XED_REG_YMM2        enc*/
    xed3_operand_set_outreg(d, XED_REG_YMM2);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> ESRC=3 | OUTREG=XED_REG_YMM3        enc*/
    xed3_operand_set_outreg(d, XED_REG_YMM3);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4,) -> ESRC=4 | OUTREG=XED_REG_YMM4        enc*/
    xed3_operand_set_outreg(d, XED_REG_YMM4);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5,) -> ESRC=5 | OUTREG=XED_REG_YMM5        enc*/
    xed3_operand_set_outreg(d, XED_REG_YMM5);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6,) -> ESRC=6 | OUTREG=XED_REG_YMM6        enc*/
    xed3_operand_set_outreg(d, XED_REG_YMM6);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7,) -> ESRC=7 | OUTREG=XED_REG_YMM7        enc*/
    xed3_operand_set_outreg(d, XED_REG_YMM7);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(8,) -> ESRC=0x8 | OUTREG=XED_REG_YMM0*/
    xed3_operand_set_outreg(d, XED_REG_YMM0);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(9,) -> ESRC=0x9 | OUTREG=XED_REG_YMM1*/
    xed3_operand_set_outreg(d, XED_REG_YMM1);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(10,) -> ESRC=0xA | OUTREG=XED_REG_YMM2*/
    xed3_operand_set_outreg(d, XED_REG_YMM2);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(11,) -> ESRC=0xB | OUTREG=XED_REG_YMM3*/
    xed3_operand_set_outreg(d, XED_REG_YMM3);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(12,) -> ESRC=0xC | OUTREG=XED_REG_YMM4*/
    xed3_operand_set_outreg(d, XED_REG_YMM4);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(13,) -> ESRC=0xD | OUTREG=XED_REG_YMM5*/
    xed3_operand_set_outreg(d, XED_REG_YMM5);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(14,) -> ESRC=0xE | OUTREG=XED_REG_YMM6*/
    xed3_operand_set_outreg(d, XED_REG_YMM6);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(15,) -> ESRC=0xF | OUTREG=XED_REG_YMM7*/
    xed3_operand_set_outreg(d, XED_REG_YMM7);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_XMM_N(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mode(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> mode16 | OUTREG=XMM_N_32():*/
    xed3_capture_nt_XMM_N_32(d);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> mode32 | OUTREG=XMM_N_32():*/
    xed3_capture_nt_XMM_N_32(d);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> mode64 | OUTREG=XMM_N_64():*/
    xed3_capture_nt_XMM_N_64(d);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_XMM_N_32(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_vexdest210(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> VEXDEST210=0 | OUTREG=XED_REG_XMM7*/
    xed3_operand_set_outreg(d, XED_REG_XMM7);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> VEXDEST210=1 | OUTREG=XED_REG_XMM6*/
    xed3_operand_set_outreg(d, XED_REG_XMM6);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> VEXDEST210=2 | OUTREG=XED_REG_XMM5*/
    xed3_operand_set_outreg(d, XED_REG_XMM5);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> VEXDEST210=3 | OUTREG=XED_REG_XMM4*/
    xed3_operand_set_outreg(d, XED_REG_XMM4);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4,) -> VEXDEST210=4 | OUTREG=XED_REG_XMM3*/
    xed3_operand_set_outreg(d, XED_REG_XMM3);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5,) -> VEXDEST210=5 | OUTREG=XED_REG_XMM2*/
    xed3_operand_set_outreg(d, XED_REG_XMM2);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6,) -> VEXDEST210=6 | OUTREG=XED_REG_XMM1*/
    xed3_operand_set_outreg(d, XED_REG_XMM1);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7,) -> VEXDEST210=7 | OUTREG=XED_REG_XMM0*/
    xed3_operand_set_outreg(d, XED_REG_XMM0);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_XMM_N_64(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_vexdest210(d)) << ((0));
key += (xed3_operand_get_vexdest3(d)) << ((3));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0) -> VEXDEST3=0 VEXDEST210=0 | OUTREG=XED_REG_XMM15*/
    xed3_operand_set_outreg(d, XED_REG_XMM15);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0) -> VEXDEST3=0 VEXDEST210=1 | OUTREG=XED_REG_XMM14*/
    xed3_operand_set_outreg(d, XED_REG_XMM14);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2, 0) -> VEXDEST3=0 VEXDEST210=2 | OUTREG=XED_REG_XMM13*/
    xed3_operand_set_outreg(d, XED_REG_XMM13);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3, 0) -> VEXDEST3=0 VEXDEST210=3 | OUTREG=XED_REG_XMM12*/
    xed3_operand_set_outreg(d, XED_REG_XMM12);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4, 0) -> VEXDEST3=0 VEXDEST210=4 | OUTREG=XED_REG_XMM11*/
    xed3_operand_set_outreg(d, XED_REG_XMM11);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5, 0) -> VEXDEST3=0 VEXDEST210=5 | OUTREG=XED_REG_XMM10*/
    xed3_operand_set_outreg(d, XED_REG_XMM10);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6, 0) -> VEXDEST3=0 VEXDEST210=6 | OUTREG=XED_REG_XMM9*/
    xed3_operand_set_outreg(d, XED_REG_XMM9);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7, 0) -> VEXDEST3=0 VEXDEST210=7 | OUTREG=XED_REG_XMM8*/
    xed3_operand_set_outreg(d, XED_REG_XMM8);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 1) -> VEXDEST3=1 VEXDEST210=0 | OUTREG=XED_REG_XMM7*/
    xed3_operand_set_outreg(d, XED_REG_XMM7);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 1) -> VEXDEST3=1 VEXDEST210=1 | OUTREG=XED_REG_XMM6*/
    xed3_operand_set_outreg(d, XED_REG_XMM6);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(2, 1) -> VEXDEST3=1 VEXDEST210=2 | OUTREG=XED_REG_XMM5*/
    xed3_operand_set_outreg(d, XED_REG_XMM5);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(3, 1) -> VEXDEST3=1 VEXDEST210=3 | OUTREG=XED_REG_XMM4*/
    xed3_operand_set_outreg(d, XED_REG_XMM4);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(4, 1) -> VEXDEST3=1 VEXDEST210=4 | OUTREG=XED_REG_XMM3*/
    xed3_operand_set_outreg(d, XED_REG_XMM3);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(5, 1) -> VEXDEST3=1 VEXDEST210=5 | OUTREG=XED_REG_XMM2*/
    xed3_operand_set_outreg(d, XED_REG_XMM2);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(6, 1) -> VEXDEST3=1 VEXDEST210=6 | OUTREG=XED_REG_XMM1*/
    xed3_operand_set_outreg(d, XED_REG_XMM1);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(7, 1) -> VEXDEST3=1 VEXDEST210=7 | OUTREG=XED_REG_XMM0*/
    xed3_operand_set_outreg(d, XED_REG_XMM0);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_YMM_N(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mode(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> mode16 | OUTREG=YMM_N_32():*/
    xed3_capture_nt_YMM_N_32(d);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> mode32 | OUTREG=YMM_N_32():*/
    xed3_capture_nt_YMM_N_32(d);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> mode64 | OUTREG=YMM_N_64():*/
    xed3_capture_nt_YMM_N_64(d);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_YMM_N_32(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_vexdest210(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> VEXDEST210=0 | OUTREG=XED_REG_YMM7*/
    xed3_operand_set_outreg(d, XED_REG_YMM7);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> VEXDEST210=1 | OUTREG=XED_REG_YMM6*/
    xed3_operand_set_outreg(d, XED_REG_YMM6);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> VEXDEST210=2 | OUTREG=XED_REG_YMM5*/
    xed3_operand_set_outreg(d, XED_REG_YMM5);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> VEXDEST210=3 | OUTREG=XED_REG_YMM4*/
    xed3_operand_set_outreg(d, XED_REG_YMM4);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4,) -> VEXDEST210=4 | OUTREG=XED_REG_YMM3*/
    xed3_operand_set_outreg(d, XED_REG_YMM3);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5,) -> VEXDEST210=5 | OUTREG=XED_REG_YMM2*/
    xed3_operand_set_outreg(d, XED_REG_YMM2);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6,) -> VEXDEST210=6 | OUTREG=XED_REG_YMM1*/
    xed3_operand_set_outreg(d, XED_REG_YMM1);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7,) -> VEXDEST210=7 | OUTREG=XED_REG_YMM0*/
    xed3_operand_set_outreg(d, XED_REG_YMM0);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_YMM_N_64(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_vexdest210(d)) << ((0));
key += (xed3_operand_get_vexdest3(d)) << ((3));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0) -> VEXDEST3=0 VEXDEST210=0 | OUTREG=XED_REG_YMM15*/
    xed3_operand_set_outreg(d, XED_REG_YMM15);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0) -> VEXDEST3=0 VEXDEST210=1 | OUTREG=XED_REG_YMM14*/
    xed3_operand_set_outreg(d, XED_REG_YMM14);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2, 0) -> VEXDEST3=0 VEXDEST210=2 | OUTREG=XED_REG_YMM13*/
    xed3_operand_set_outreg(d, XED_REG_YMM13);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3, 0) -> VEXDEST3=0 VEXDEST210=3 | OUTREG=XED_REG_YMM12*/
    xed3_operand_set_outreg(d, XED_REG_YMM12);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4, 0) -> VEXDEST3=0 VEXDEST210=4 | OUTREG=XED_REG_YMM11*/
    xed3_operand_set_outreg(d, XED_REG_YMM11);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5, 0) -> VEXDEST3=0 VEXDEST210=5 | OUTREG=XED_REG_YMM10*/
    xed3_operand_set_outreg(d, XED_REG_YMM10);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6, 0) -> VEXDEST3=0 VEXDEST210=6 | OUTREG=XED_REG_YMM9*/
    xed3_operand_set_outreg(d, XED_REG_YMM9);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7, 0) -> VEXDEST3=0 VEXDEST210=7 | OUTREG=XED_REG_YMM8*/
    xed3_operand_set_outreg(d, XED_REG_YMM8);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 1) -> VEXDEST3=1 VEXDEST210=0 | OUTREG=XED_REG_YMM7*/
    xed3_operand_set_outreg(d, XED_REG_YMM7);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 1) -> VEXDEST3=1 VEXDEST210=1 | OUTREG=XED_REG_YMM6*/
    xed3_operand_set_outreg(d, XED_REG_YMM6);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(2, 1) -> VEXDEST3=1 VEXDEST210=2 | OUTREG=XED_REG_YMM5*/
    xed3_operand_set_outreg(d, XED_REG_YMM5);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(3, 1) -> VEXDEST3=1 VEXDEST210=3 | OUTREG=XED_REG_YMM4*/
    xed3_operand_set_outreg(d, XED_REG_YMM4);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(4, 1) -> VEXDEST3=1 VEXDEST210=4 | OUTREG=XED_REG_YMM3*/
    xed3_operand_set_outreg(d, XED_REG_YMM3);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(5, 1) -> VEXDEST3=1 VEXDEST210=5 | OUTREG=XED_REG_YMM2*/
    xed3_operand_set_outreg(d, XED_REG_YMM2);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(6, 1) -> VEXDEST3=1 VEXDEST210=6 | OUTREG=XED_REG_YMM1*/
    xed3_operand_set_outreg(d, XED_REG_YMM1);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(7, 1) -> VEXDEST3=1 VEXDEST210=7 | OUTREG=XED_REG_YMM0*/
    xed3_operand_set_outreg(d, XED_REG_YMM0);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_YMM_R(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mode(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> mode16 | OUTREG=YMM_R_32():*/
    xed3_capture_nt_YMM_R_32(d);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> mode32 | OUTREG=YMM_R_32():*/
    xed3_capture_nt_YMM_R_32(d);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> mode64 | OUTREG=YMM_R_64():*/
    xed3_capture_nt_YMM_R_64(d);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_YMM_R_32(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_reg(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> REG=0  | OUTREG=XED_REG_YMM0*/
    xed3_operand_set_outreg(d, XED_REG_YMM0);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> REG=1  | OUTREG=XED_REG_YMM1*/
    xed3_operand_set_outreg(d, XED_REG_YMM1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> REG=2  | OUTREG=XED_REG_YMM2*/
    xed3_operand_set_outreg(d, XED_REG_YMM2);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> REG=3  | OUTREG=XED_REG_YMM3*/
    xed3_operand_set_outreg(d, XED_REG_YMM3);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4,) -> REG=4  | OUTREG=XED_REG_YMM4*/
    xed3_operand_set_outreg(d, XED_REG_YMM4);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5,) -> REG=5  | OUTREG=XED_REG_YMM5*/
    xed3_operand_set_outreg(d, XED_REG_YMM5);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6,) -> REG=6  | OUTREG=XED_REG_YMM6*/
    xed3_operand_set_outreg(d, XED_REG_YMM6);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7,) -> REG=7  | OUTREG=XED_REG_YMM7*/
    xed3_operand_set_outreg(d, XED_REG_YMM7);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_YMM_R_64(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_reg(d)) << ((0));
key += (xed3_operand_get_rexr(d)) << ((3));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0) -> REXR=0 REG=0  | OUTREG=XED_REG_YMM0*/
    xed3_operand_set_outreg(d, XED_REG_YMM0);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0) -> REXR=0 REG=1  | OUTREG=XED_REG_YMM1*/
    xed3_operand_set_outreg(d, XED_REG_YMM1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2, 0) -> REXR=0 REG=2  | OUTREG=XED_REG_YMM2*/
    xed3_operand_set_outreg(d, XED_REG_YMM2);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3, 0) -> REXR=0 REG=3  | OUTREG=XED_REG_YMM3*/
    xed3_operand_set_outreg(d, XED_REG_YMM3);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4, 0) -> REXR=0 REG=4  | OUTREG=XED_REG_YMM4*/
    xed3_operand_set_outreg(d, XED_REG_YMM4);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5, 0) -> REXR=0 REG=5  | OUTREG=XED_REG_YMM5*/
    xed3_operand_set_outreg(d, XED_REG_YMM5);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6, 0) -> REXR=0 REG=6  | OUTREG=XED_REG_YMM6*/
    xed3_operand_set_outreg(d, XED_REG_YMM6);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7, 0) -> REXR=0 REG=7  | OUTREG=XED_REG_YMM7*/
    xed3_operand_set_outreg(d, XED_REG_YMM7);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 1) -> REXR=1 REG=0  | OUTREG=XED_REG_YMM8*/
    xed3_operand_set_outreg(d, XED_REG_YMM8);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 1) -> REXR=1 REG=1  | OUTREG=XED_REG_YMM9*/
    xed3_operand_set_outreg(d, XED_REG_YMM9);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(2, 1) -> REXR=1 REG=2  | OUTREG=XED_REG_YMM10*/
    xed3_operand_set_outreg(d, XED_REG_YMM10);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(3, 1) -> REXR=1 REG=3  | OUTREG=XED_REG_YMM11*/
    xed3_operand_set_outreg(d, XED_REG_YMM11);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(4, 1) -> REXR=1 REG=4  | OUTREG=XED_REG_YMM12*/
    xed3_operand_set_outreg(d, XED_REG_YMM12);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(5, 1) -> REXR=1 REG=5  | OUTREG=XED_REG_YMM13*/
    xed3_operand_set_outreg(d, XED_REG_YMM13);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(6, 1) -> REXR=1 REG=6  | OUTREG=XED_REG_YMM14*/
    xed3_operand_set_outreg(d, XED_REG_YMM14);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(7, 1) -> REXR=1 REG=7  | OUTREG=XED_REG_YMM15*/
    xed3_operand_set_outreg(d, XED_REG_YMM15);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_YMM_B(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mode(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> mode16 | OUTREG=YMM_B_32():*/
    xed3_capture_nt_YMM_B_32(d);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> mode32 | OUTREG=YMM_B_32():*/
    xed3_capture_nt_YMM_B_32(d);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> mode64 | OUTREG=YMM_B_64():*/
    xed3_capture_nt_YMM_B_64(d);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_YMM_B_32(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_rm(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> RM=0  | OUTREG=XED_REG_YMM0*/
    xed3_operand_set_outreg(d, XED_REG_YMM0);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> RM=1  | OUTREG=XED_REG_YMM1*/
    xed3_operand_set_outreg(d, XED_REG_YMM1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> RM=2  | OUTREG=XED_REG_YMM2*/
    xed3_operand_set_outreg(d, XED_REG_YMM2);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> RM=3  | OUTREG=XED_REG_YMM3*/
    xed3_operand_set_outreg(d, XED_REG_YMM3);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4,) -> RM=4  | OUTREG=XED_REG_YMM4*/
    xed3_operand_set_outreg(d, XED_REG_YMM4);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5,) -> RM=5  | OUTREG=XED_REG_YMM5*/
    xed3_operand_set_outreg(d, XED_REG_YMM5);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6,) -> RM=6  | OUTREG=XED_REG_YMM6*/
    xed3_operand_set_outreg(d, XED_REG_YMM6);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7,) -> RM=7  | OUTREG=XED_REG_YMM7*/
    xed3_operand_set_outreg(d, XED_REG_YMM7);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_YMM_B_64(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_rexb(d)) << ((0));
key += (xed3_operand_get_rm(d)) << ((1));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0) -> REXB=0 RM=0  | OUTREG=XED_REG_YMM0*/
    xed3_operand_set_outreg(d, XED_REG_YMM0);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0) -> REXB=1 RM=0  | OUTREG=XED_REG_YMM8*/
    xed3_operand_set_outreg(d, XED_REG_YMM8);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(0, 1) -> REXB=0 RM=1  | OUTREG=XED_REG_YMM1*/
    xed3_operand_set_outreg(d, XED_REG_YMM1);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(1, 1) -> REXB=1 RM=1  | OUTREG=XED_REG_YMM9*/
    xed3_operand_set_outreg(d, XED_REG_YMM9);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(0, 2) -> REXB=0 RM=2  | OUTREG=XED_REG_YMM2*/
    xed3_operand_set_outreg(d, XED_REG_YMM2);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(1, 2) -> REXB=1 RM=2  | OUTREG=XED_REG_YMM10*/
    xed3_operand_set_outreg(d, XED_REG_YMM10);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(0, 3) -> REXB=0 RM=3  | OUTREG=XED_REG_YMM3*/
    xed3_operand_set_outreg(d, XED_REG_YMM3);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(1, 3) -> REXB=1 RM=3  | OUTREG=XED_REG_YMM11*/
    xed3_operand_set_outreg(d, XED_REG_YMM11);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 4) -> REXB=0 RM=4  | OUTREG=XED_REG_YMM4*/
    xed3_operand_set_outreg(d, XED_REG_YMM4);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 4) -> REXB=1 RM=4  | OUTREG=XED_REG_YMM12*/
    xed3_operand_set_outreg(d, XED_REG_YMM12);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(0, 5) -> REXB=0 RM=5  | OUTREG=XED_REG_YMM5*/
    xed3_operand_set_outreg(d, XED_REG_YMM5);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(1, 5) -> REXB=1 RM=5  | OUTREG=XED_REG_YMM13*/
    xed3_operand_set_outreg(d, XED_REG_YMM13);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(0, 6) -> REXB=0 RM=6  | OUTREG=XED_REG_YMM6*/
    xed3_operand_set_outreg(d, XED_REG_YMM6);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(1, 6) -> REXB=1 RM=6  | OUTREG=XED_REG_YMM14*/
    xed3_operand_set_outreg(d, XED_REG_YMM14);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(0, 7) -> REXB=0 RM=7  | OUTREG=XED_REG_YMM7*/
    xed3_operand_set_outreg(d, XED_REG_YMM7);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(1, 7) -> REXB=1 RM=7  | OUTREG=XED_REG_YMM15*/
    xed3_operand_set_outreg(d, XED_REG_YMM15);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_SE_IMM8(xed_decoded_inst_t* d)
{
    xed3_operand_set_imm_width(d, 0x8);
/*pacify the compiler */
(void)d;
}
static XED_INLINE void xed3_capture_nt_VMODRM_YMM(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mod(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> MOD=0b00  VSIB_YMM()             |*/
    xed3_capture_nt_VSIB_YMM(d);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> MOD=0b01  VSIB_YMM() MEMDISP8()  |*/
    xed3_capture_nt_VSIB_YMM(d);
    xed3_capture_nt_MEMDISP8(d);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> MOD=0b10  VSIB_YMM() MEMDISP32() |*/
    xed3_capture_nt_VSIB_YMM(d);
    xed3_capture_nt_MEMDISP32(d);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_VMODRM_XMM(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mod(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> MOD=0b00  VSIB_XMM()             |*/
    xed3_capture_nt_VSIB_XMM(d);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> MOD=0b01  VSIB_XMM() MEMDISP8()  |*/
    xed3_capture_nt_VSIB_XMM(d);
    xed3_capture_nt_MEMDISP8(d);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> MOD=0b10  VSIB_XMM() MEMDISP32() |*/
    xed3_capture_nt_VSIB_XMM(d);
    xed3_capture_nt_MEMDISP32(d);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_VSIB_YMM(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_sibscale(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> SIBSCALE[0b00] SIBINDEX[iii] SIBBASE[bbb] VSIB_BASE()  | INDEX=VSIB_INDEX_YMM()  SCALE=1*/
    xed3_capture_nt_VSIB_BASE(d);
    xed3_capture_nt_VSIB_INDEX_YMM(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> SIBSCALE[0b01] SIBINDEX[iii] SIBBASE[bbb] VSIB_BASE()  | INDEX=VSIB_INDEX_YMM()  SCALE=2*/
    xed3_capture_nt_VSIB_BASE(d);
    xed3_capture_nt_VSIB_INDEX_YMM(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> SIBSCALE[0b10] SIBINDEX[iii] SIBBASE[bbb] VSIB_BASE()  | INDEX=VSIB_INDEX_YMM()  SCALE=4*/
    xed3_capture_nt_VSIB_BASE(d);
    xed3_capture_nt_VSIB_INDEX_YMM(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> SIBSCALE[0b11] SIBINDEX[iii] SIBBASE[bbb] VSIB_BASE()  | INDEX=VSIB_INDEX_YMM()  SCALE=8*/
    xed3_capture_nt_VSIB_BASE(d);
    xed3_capture_nt_VSIB_INDEX_YMM(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_VSIB_XMM(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_sibscale(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> SIBSCALE[0b00] SIBINDEX[iii] SIBBASE[bbb] VSIB_BASE()  | INDEX=VSIB_INDEX_XMM()  SCALE=1*/
    xed3_capture_nt_VSIB_BASE(d);
    xed3_capture_nt_VSIB_INDEX_XMM(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> SIBSCALE[0b01] SIBINDEX[iii] SIBBASE[bbb] VSIB_BASE()  | INDEX=VSIB_INDEX_XMM()  SCALE=2*/
    xed3_capture_nt_VSIB_BASE(d);
    xed3_capture_nt_VSIB_INDEX_XMM(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> SIBSCALE[0b10] SIBINDEX[iii] SIBBASE[bbb] VSIB_BASE()  | INDEX=VSIB_INDEX_XMM()  SCALE=4*/
    xed3_capture_nt_VSIB_BASE(d);
    xed3_capture_nt_VSIB_INDEX_XMM(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> SIBSCALE[0b11] SIBINDEX[iii] SIBBASE[bbb] VSIB_BASE()  | INDEX=VSIB_INDEX_XMM()  SCALE=8*/
    xed3_capture_nt_VSIB_BASE(d);
    xed3_capture_nt_VSIB_INDEX_XMM(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_VSIB_INDEX_YMM(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_rexx(d)) << ((0));
key += (xed3_operand_get_sibindex(d)) << ((1));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0) -> REXX=0   SIBINDEX=0 | OUTREG=XED_REG_YMM0*/
    xed3_operand_set_outreg(d, XED_REG_YMM0);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0) -> REXX=1   SIBINDEX=0 | OUTREG=XED_REG_YMM8*/
    xed3_operand_set_outreg(d, XED_REG_YMM8);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(0, 1) -> REXX=0   SIBINDEX=1 | OUTREG=XED_REG_YMM1*/
    xed3_operand_set_outreg(d, XED_REG_YMM1);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(1, 1) -> REXX=1   SIBINDEX=1 | OUTREG=XED_REG_YMM9*/
    xed3_operand_set_outreg(d, XED_REG_YMM9);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(0, 2) -> REXX=0   SIBINDEX=2 | OUTREG=XED_REG_YMM2*/
    xed3_operand_set_outreg(d, XED_REG_YMM2);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(1, 2) -> REXX=1   SIBINDEX=2 | OUTREG=XED_REG_YMM10*/
    xed3_operand_set_outreg(d, XED_REG_YMM10);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(0, 3) -> REXX=0   SIBINDEX=3 | OUTREG=XED_REG_YMM3*/
    xed3_operand_set_outreg(d, XED_REG_YMM3);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(1, 3) -> REXX=1   SIBINDEX=3 | OUTREG=XED_REG_YMM11*/
    xed3_operand_set_outreg(d, XED_REG_YMM11);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 4) -> REXX=0   SIBINDEX=4 | OUTREG=XED_REG_YMM4*/
    xed3_operand_set_outreg(d, XED_REG_YMM4);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 4) -> REXX=1   SIBINDEX=4 | OUTREG=XED_REG_YMM12*/
    xed3_operand_set_outreg(d, XED_REG_YMM12);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(0, 5) -> REXX=0   SIBINDEX=5 | OUTREG=XED_REG_YMM5*/
    xed3_operand_set_outreg(d, XED_REG_YMM5);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(1, 5) -> REXX=1   SIBINDEX=5 | OUTREG=XED_REG_YMM13*/
    xed3_operand_set_outreg(d, XED_REG_YMM13);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(0, 6) -> REXX=0   SIBINDEX=6 | OUTREG=XED_REG_YMM6*/
    xed3_operand_set_outreg(d, XED_REG_YMM6);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(1, 6) -> REXX=1   SIBINDEX=6 | OUTREG=XED_REG_YMM14*/
    xed3_operand_set_outreg(d, XED_REG_YMM14);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(0, 7) -> REXX=0   SIBINDEX=7 | OUTREG=XED_REG_YMM7*/
    xed3_operand_set_outreg(d, XED_REG_YMM7);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(1, 7) -> REXX=1   SIBINDEX=7 | OUTREG=XED_REG_YMM15*/
    xed3_operand_set_outreg(d, XED_REG_YMM15);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_VSIB_INDEX_XMM(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_rexx(d)) << ((0));
key += (xed3_operand_get_sibindex(d)) << ((1));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0) -> REXX=0   SIBINDEX=0 | OUTREG=XED_REG_XMM0*/
    xed3_operand_set_outreg(d, XED_REG_XMM0);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0) -> REXX=1   SIBINDEX=0 | OUTREG=XED_REG_XMM8*/
    xed3_operand_set_outreg(d, XED_REG_XMM8);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(0, 1) -> REXX=0   SIBINDEX=1 | OUTREG=XED_REG_XMM1*/
    xed3_operand_set_outreg(d, XED_REG_XMM1);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(1, 1) -> REXX=1   SIBINDEX=1 | OUTREG=XED_REG_XMM9*/
    xed3_operand_set_outreg(d, XED_REG_XMM9);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(0, 2) -> REXX=0   SIBINDEX=2 | OUTREG=XED_REG_XMM2*/
    xed3_operand_set_outreg(d, XED_REG_XMM2);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(1, 2) -> REXX=1   SIBINDEX=2 | OUTREG=XED_REG_XMM10*/
    xed3_operand_set_outreg(d, XED_REG_XMM10);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(0, 3) -> REXX=0   SIBINDEX=3 | OUTREG=XED_REG_XMM3*/
    xed3_operand_set_outreg(d, XED_REG_XMM3);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(1, 3) -> REXX=1   SIBINDEX=3 | OUTREG=XED_REG_XMM11*/
    xed3_operand_set_outreg(d, XED_REG_XMM11);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 4) -> REXX=0   SIBINDEX=4 | OUTREG=XED_REG_XMM4*/
    xed3_operand_set_outreg(d, XED_REG_XMM4);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 4) -> REXX=1   SIBINDEX=4 | OUTREG=XED_REG_XMM12*/
    xed3_operand_set_outreg(d, XED_REG_XMM12);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(0, 5) -> REXX=0   SIBINDEX=5 | OUTREG=XED_REG_XMM5*/
    xed3_operand_set_outreg(d, XED_REG_XMM5);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(1, 5) -> REXX=1   SIBINDEX=5 | OUTREG=XED_REG_XMM13*/
    xed3_operand_set_outreg(d, XED_REG_XMM13);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(0, 6) -> REXX=0   SIBINDEX=6 | OUTREG=XED_REG_XMM6*/
    xed3_operand_set_outreg(d, XED_REG_XMM6);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(1, 6) -> REXX=1   SIBINDEX=6 | OUTREG=XED_REG_XMM14*/
    xed3_operand_set_outreg(d, XED_REG_XMM14);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(0, 7) -> REXX=0   SIBINDEX=7 | OUTREG=XED_REG_XMM7*/
    xed3_operand_set_outreg(d, XED_REG_XMM7);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(1, 7) -> REXX=1   SIBINDEX=7 | OUTREG=XED_REG_XMM15*/
    xed3_operand_set_outreg(d, XED_REG_XMM15);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_VSIB_BASE(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mod(d)) << ((0));
key += (xed3_operand_get_rexb(d)) << ((2));
key += (xed3_operand_get_sibbase(d)) << ((3));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0, 0) -> REXB=0 SIBBASE=0 | BASE0=ArAX() SEG0=FINAL_DSEG()*/
case 1: /*(1, 0, 0) -> REXB=0 SIBBASE=0 | BASE0=ArAX() SEG0=FINAL_DSEG()*/
case 2: /*(2, 0, 0) -> REXB=0 SIBBASE=0 | BASE0=ArAX() SEG0=FINAL_DSEG()*/
case 3: /*(3, 0, 0) -> REXB=0 SIBBASE=0 | BASE0=ArAX() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_ArAX(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 4: /*(0, 1, 0) -> REXB=1 SIBBASE=0 | BASE0=Ar8() SEG0=FINAL_DSEG()*/
case 5: /*(1, 1, 0) -> REXB=1 SIBBASE=0 | BASE0=Ar8() SEG0=FINAL_DSEG()*/
case 6: /*(2, 1, 0) -> REXB=1 SIBBASE=0 | BASE0=Ar8() SEG0=FINAL_DSEG()*/
case 7: /*(3, 1, 0) -> REXB=1 SIBBASE=0 | BASE0=Ar8() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar8(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 0, 1) -> REXB=0 SIBBASE=1 | BASE0=ArCX() SEG0=FINAL_DSEG()*/
case 9: /*(1, 0, 1) -> REXB=0 SIBBASE=1 | BASE0=ArCX() SEG0=FINAL_DSEG()*/
case 10: /*(2, 0, 1) -> REXB=0 SIBBASE=1 | BASE0=ArCX() SEG0=FINAL_DSEG()*/
case 11: /*(3, 0, 1) -> REXB=0 SIBBASE=1 | BASE0=ArCX() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_ArCX(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 12: /*(0, 1, 1) -> REXB=1 SIBBASE=1 | BASE0=Ar9() SEG0=FINAL_DSEG()*/
case 13: /*(1, 1, 1) -> REXB=1 SIBBASE=1 | BASE0=Ar9() SEG0=FINAL_DSEG()*/
case 14: /*(2, 1, 1) -> REXB=1 SIBBASE=1 | BASE0=Ar9() SEG0=FINAL_DSEG()*/
case 15: /*(3, 1, 1) -> REXB=1 SIBBASE=1 | BASE0=Ar9() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar9(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 16: /*(0, 0, 2) -> REXB=0 SIBBASE=2 | BASE0=ArDX() SEG0=FINAL_DSEG()*/
case 17: /*(1, 0, 2) -> REXB=0 SIBBASE=2 | BASE0=ArDX() SEG0=FINAL_DSEG()*/
case 18: /*(2, 0, 2) -> REXB=0 SIBBASE=2 | BASE0=ArDX() SEG0=FINAL_DSEG()*/
case 19: /*(3, 0, 2) -> REXB=0 SIBBASE=2 | BASE0=ArDX() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_ArDX(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 20: /*(0, 1, 2) -> REXB=1 SIBBASE=2 | BASE0=Ar10() SEG0=FINAL_DSEG()*/
case 21: /*(1, 1, 2) -> REXB=1 SIBBASE=2 | BASE0=Ar10() SEG0=FINAL_DSEG()*/
case 22: /*(2, 1, 2) -> REXB=1 SIBBASE=2 | BASE0=Ar10() SEG0=FINAL_DSEG()*/
case 23: /*(3, 1, 2) -> REXB=1 SIBBASE=2 | BASE0=Ar10() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar10(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 24: /*(0, 0, 3) -> REXB=0 SIBBASE=3 | BASE0=ArBX() SEG0=FINAL_DSEG()*/
case 25: /*(1, 0, 3) -> REXB=0 SIBBASE=3 | BASE0=ArBX() SEG0=FINAL_DSEG()*/
case 26: /*(2, 0, 3) -> REXB=0 SIBBASE=3 | BASE0=ArBX() SEG0=FINAL_DSEG()*/
case 27: /*(3, 0, 3) -> REXB=0 SIBBASE=3 | BASE0=ArBX() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_ArBX(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 28: /*(0, 1, 3) -> REXB=1 SIBBASE=3 | BASE0=Ar11() SEG0=FINAL_DSEG()*/
case 29: /*(1, 1, 3) -> REXB=1 SIBBASE=3 | BASE0=Ar11() SEG0=FINAL_DSEG()*/
case 30: /*(2, 1, 3) -> REXB=1 SIBBASE=3 | BASE0=Ar11() SEG0=FINAL_DSEG()*/
case 31: /*(3, 1, 3) -> REXB=1 SIBBASE=3 | BASE0=Ar11() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar11(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 32: /*(0, 0, 4) -> REXB=0 SIBBASE=4 | BASE0=ArSP() SEG0=FINAL_SSEG()*/
case 33: /*(1, 0, 4) -> REXB=0 SIBBASE=4 | BASE0=ArSP() SEG0=FINAL_SSEG()*/
case 34: /*(2, 0, 4) -> REXB=0 SIBBASE=4 | BASE0=ArSP() SEG0=FINAL_SSEG()*/
case 35: /*(3, 0, 4) -> REXB=0 SIBBASE=4 | BASE0=ArSP() SEG0=FINAL_SSEG()*/
    xed3_capture_nt_ArSP(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_SSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 36: /*(0, 1, 4) -> REXB=1 SIBBASE=4 | BASE0=Ar12() SEG0=FINAL_DSEG()*/
case 37: /*(1, 1, 4) -> REXB=1 SIBBASE=4 | BASE0=Ar12() SEG0=FINAL_DSEG()*/
case 38: /*(2, 1, 4) -> REXB=1 SIBBASE=4 | BASE0=Ar12() SEG0=FINAL_DSEG()*/
case 39: /*(3, 1, 4) -> REXB=1 SIBBASE=4 | BASE0=Ar12() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar12(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 40: /*(0, 0, 5) -> REXB=0 SIBBASE=5 MOD=0  MEMDISP32() | BASE0=XED_REG_INVALID SEG0=FINAL_DSEG()*/
    xed3_capture_nt_MEMDISP32(d);
    xed3_operand_set_base0(d, XED_REG_INVALID);
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 41: /*(1, 0, 5) -> REXB=0 SIBBASE=5 MOD!=0             | BASE0=ArBP() SEG0=FINAL_SSEG()*/
case 42: /*(2, 0, 5) -> REXB=0 SIBBASE=5 MOD!=0             | BASE0=ArBP() SEG0=FINAL_SSEG()*/
case 43: /*(3, 0, 5) -> REXB=0 SIBBASE=5 MOD!=0             | BASE0=ArBP() SEG0=FINAL_SSEG()*/
    xed3_capture_nt_ArBP(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_SSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 44: /*(0, 1, 5) -> REXB=1 SIBBASE=5 MOD=0  MEMDISP32() | BASE0=XED_REG_INVALID SEG0=FINAL_DSEG()*/
    xed3_capture_nt_MEMDISP32(d);
    xed3_operand_set_base0(d, XED_REG_INVALID);
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 45: /*(1, 1, 5) -> REXB=1 SIBBASE=5 MOD!=0 | BASE0=Ar13() SEG0=FINAL_DSEG()*/
case 46: /*(2, 1, 5) -> REXB=1 SIBBASE=5 MOD!=0 | BASE0=Ar13() SEG0=FINAL_DSEG()*/
case 47: /*(3, 1, 5) -> REXB=1 SIBBASE=5 MOD!=0 | BASE0=Ar13() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar13(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 48: /*(0, 0, 6) -> REXB=0 SIBBASE=6 | BASE0=ArSI() SEG0=FINAL_DSEG()*/
case 49: /*(1, 0, 6) -> REXB=0 SIBBASE=6 | BASE0=ArSI() SEG0=FINAL_DSEG()*/
case 50: /*(2, 0, 6) -> REXB=0 SIBBASE=6 | BASE0=ArSI() SEG0=FINAL_DSEG()*/
case 51: /*(3, 0, 6) -> REXB=0 SIBBASE=6 | BASE0=ArSI() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_ArSI(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 52: /*(0, 1, 6) -> REXB=1 SIBBASE=6 | BASE0=Ar14() SEG0=FINAL_DSEG()*/
case 53: /*(1, 1, 6) -> REXB=1 SIBBASE=6 | BASE0=Ar14() SEG0=FINAL_DSEG()*/
case 54: /*(2, 1, 6) -> REXB=1 SIBBASE=6 | BASE0=Ar14() SEG0=FINAL_DSEG()*/
case 55: /*(3, 1, 6) -> REXB=1 SIBBASE=6 | BASE0=Ar14() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar14(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 56: /*(0, 0, 7) -> REXB=0 SIBBASE=7 | BASE0=ArDI() SEG0=FINAL_DSEG()*/
case 57: /*(1, 0, 7) -> REXB=0 SIBBASE=7 | BASE0=ArDI() SEG0=FINAL_DSEG()*/
case 58: /*(2, 0, 7) -> REXB=0 SIBBASE=7 | BASE0=ArDI() SEG0=FINAL_DSEG()*/
case 59: /*(3, 0, 7) -> REXB=0 SIBBASE=7 | BASE0=ArDI() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_ArDI(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 60: /*(0, 1, 7) -> REXB=1 SIBBASE=7 | BASE0=Ar15() SEG0=FINAL_DSEG()*/
case 61: /*(1, 1, 7) -> REXB=1 SIBBASE=7 | BASE0=Ar15() SEG0=FINAL_DSEG()*/
case 62: /*(2, 1, 7) -> REXB=1 SIBBASE=7 | BASE0=Ar15() SEG0=FINAL_DSEG()*/
case 63: /*(3, 1, 7) -> REXB=1 SIBBASE=7 | BASE0=Ar15() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar15(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_VGPRy_R(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_eosz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EOSZ=1 | OUTREG=VGPR32_R()*/
    xed3_capture_nt_VGPR32_R(d);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EOSZ=2 | OUTREG=VGPR32_R()*/
    xed3_capture_nt_VGPR32_R(d);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EOSZ=3 | OUTREG=VGPR64_R()*/
    xed3_capture_nt_VGPR64_R(d);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_VGPRy_B(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_eosz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EOSZ=1 | OUTREG=VGPR32_B()*/
    xed3_capture_nt_VGPR32_B(d);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EOSZ=2 | OUTREG=VGPR32_B()*/
    xed3_capture_nt_VGPR32_B(d);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EOSZ=3 | OUTREG=VGPR64_B()*/
    xed3_capture_nt_VGPR64_B(d);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_VGPRy_N(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_eosz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EOSZ=1 | OUTREG=VGPR32_N()*/
    xed3_capture_nt_VGPR32_N(d);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EOSZ=2 | OUTREG=VGPR32_N()*/
    xed3_capture_nt_VGPR32_N(d);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EOSZ=3 | OUTREG=VGPR64_N()*/
    xed3_capture_nt_VGPR64_N(d);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_VGPR32_N(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mode(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> mode16 | OUTREG=VGPR32_N_32()*/
    xed3_capture_nt_VGPR32_N_32(d);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> mode32 | OUTREG=VGPR32_N_32()*/
    xed3_capture_nt_VGPR32_N_32(d);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> mode64 | OUTREG=VGPR32_N_64()*/
    xed3_capture_nt_VGPR32_N_64(d);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_VGPR32_B(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mode(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> mode16 | OUTREG=VGPR32_B_32()*/
    xed3_capture_nt_VGPR32_B_32(d);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> mode32 | OUTREG=VGPR32_B_32()*/
    xed3_capture_nt_VGPR32_B_32(d);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> mode64 | OUTREG=VGPR32_B_64()*/
    xed3_capture_nt_VGPR32_B_64(d);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_VGPR32_R(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mode(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> mode16 | OUTREG=VGPR32_R_32()*/
    xed3_capture_nt_VGPR32_R_32(d);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> mode32 | OUTREG=VGPR32_R_32()*/
    xed3_capture_nt_VGPR32_R_32(d);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> mode64 | OUTREG=VGPR32_R_64()*/
    xed3_capture_nt_VGPR32_R_64(d);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_VGPR32_N_32(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_vexdest210(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> VEXDEST210=0   | OUTREG=XED_REG_EDI*/
    xed3_operand_set_outreg(d, XED_REG_EDI);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> VEXDEST210=1   | OUTREG=XED_REG_ESI*/
    xed3_operand_set_outreg(d, XED_REG_ESI);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> VEXDEST210=2   | OUTREG=XED_REG_EBP*/
    xed3_operand_set_outreg(d, XED_REG_EBP);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> VEXDEST210=3   | OUTREG=XED_REG_ESP*/
    xed3_operand_set_outreg(d, XED_REG_ESP);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4,) -> VEXDEST210=4   | OUTREG=XED_REG_EBX*/
    xed3_operand_set_outreg(d, XED_REG_EBX);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5,) -> VEXDEST210=5   | OUTREG=XED_REG_EDX*/
    xed3_operand_set_outreg(d, XED_REG_EDX);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6,) -> VEXDEST210=6   | OUTREG=XED_REG_ECX*/
    xed3_operand_set_outreg(d, XED_REG_ECX);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7,) -> VEXDEST210=7   | OUTREG=XED_REG_EAX*/
    xed3_operand_set_outreg(d, XED_REG_EAX);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_VGPR32_N_64(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_vexdest210(d)) << ((0));
key += (xed3_operand_get_vexdest3(d)) << ((3));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0) -> VEXDEST3=0 VEXDEST210=0   | OUTREG=XED_REG_R15D*/
    xed3_operand_set_outreg(d, XED_REG_R15D);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0) -> VEXDEST3=0 VEXDEST210=1   | OUTREG=XED_REG_R14D*/
    xed3_operand_set_outreg(d, XED_REG_R14D);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2, 0) -> VEXDEST3=0 VEXDEST210=2   | OUTREG=XED_REG_R13D*/
    xed3_operand_set_outreg(d, XED_REG_R13D);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3, 0) -> VEXDEST3=0 VEXDEST210=3   | OUTREG=XED_REG_R12D*/
    xed3_operand_set_outreg(d, XED_REG_R12D);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4, 0) -> VEXDEST3=0 VEXDEST210=4   | OUTREG=XED_REG_R11D*/
    xed3_operand_set_outreg(d, XED_REG_R11D);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5, 0) -> VEXDEST3=0 VEXDEST210=5   | OUTREG=XED_REG_R10D*/
    xed3_operand_set_outreg(d, XED_REG_R10D);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6, 0) -> VEXDEST3=0 VEXDEST210=6   | OUTREG=XED_REG_R9D*/
    xed3_operand_set_outreg(d, XED_REG_R9D);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7, 0) -> VEXDEST3=0 VEXDEST210=7   | OUTREG=XED_REG_R8D*/
    xed3_operand_set_outreg(d, XED_REG_R8D);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 1) -> VEXDEST3=1 VEXDEST210=0   | OUTREG=XED_REG_EDI*/
    xed3_operand_set_outreg(d, XED_REG_EDI);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 1) -> VEXDEST3=1 VEXDEST210=1   | OUTREG=XED_REG_ESI*/
    xed3_operand_set_outreg(d, XED_REG_ESI);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(2, 1) -> VEXDEST3=1 VEXDEST210=2   | OUTREG=XED_REG_EBP*/
    xed3_operand_set_outreg(d, XED_REG_EBP);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(3, 1) -> VEXDEST3=1 VEXDEST210=3   | OUTREG=XED_REG_ESP*/
    xed3_operand_set_outreg(d, XED_REG_ESP);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(4, 1) -> VEXDEST3=1 VEXDEST210=4   | OUTREG=XED_REG_EBX*/
    xed3_operand_set_outreg(d, XED_REG_EBX);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(5, 1) -> VEXDEST3=1 VEXDEST210=5   | OUTREG=XED_REG_EDX*/
    xed3_operand_set_outreg(d, XED_REG_EDX);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(6, 1) -> VEXDEST3=1 VEXDEST210=6   | OUTREG=XED_REG_ECX*/
    xed3_operand_set_outreg(d, XED_REG_ECX);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(7, 1) -> VEXDEST3=1 VEXDEST210=7   | OUTREG=XED_REG_EAX*/
    xed3_operand_set_outreg(d, XED_REG_EAX);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_VGPR64_N(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_vexdest210(d)) << ((0));
key += (xed3_operand_get_vexdest3(d)) << ((3));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0) -> VEXDEST3=0 VEXDEST210=0  | OUTREG=XED_REG_R15*/
    xed3_operand_set_outreg(d, XED_REG_R15);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0) -> VEXDEST3=0 VEXDEST210=1  | OUTREG=XED_REG_R14*/
    xed3_operand_set_outreg(d, XED_REG_R14);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2, 0) -> VEXDEST3=0 VEXDEST210=2  | OUTREG=XED_REG_R13*/
    xed3_operand_set_outreg(d, XED_REG_R13);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3, 0) -> VEXDEST3=0 VEXDEST210=3  | OUTREG=XED_REG_R12*/
    xed3_operand_set_outreg(d, XED_REG_R12);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4, 0) -> VEXDEST3=0 VEXDEST210=4  | OUTREG=XED_REG_R11*/
    xed3_operand_set_outreg(d, XED_REG_R11);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5, 0) -> VEXDEST3=0 VEXDEST210=5  | OUTREG=XED_REG_R10*/
    xed3_operand_set_outreg(d, XED_REG_R10);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6, 0) -> VEXDEST3=0 VEXDEST210=6  | OUTREG=XED_REG_R9*/
    xed3_operand_set_outreg(d, XED_REG_R9);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7, 0) -> VEXDEST3=0 VEXDEST210=7  | OUTREG=XED_REG_R8*/
    xed3_operand_set_outreg(d, XED_REG_R8);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 1) -> VEXDEST3=1 VEXDEST210=0  | OUTREG=XED_REG_RDI*/
    xed3_operand_set_outreg(d, XED_REG_RDI);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 1) -> VEXDEST3=1 VEXDEST210=1  | OUTREG=XED_REG_RSI*/
    xed3_operand_set_outreg(d, XED_REG_RSI);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(2, 1) -> VEXDEST3=1 VEXDEST210=2  | OUTREG=XED_REG_RBP*/
    xed3_operand_set_outreg(d, XED_REG_RBP);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(3, 1) -> VEXDEST3=1 VEXDEST210=3  | OUTREG=XED_REG_RSP*/
    xed3_operand_set_outreg(d, XED_REG_RSP);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(4, 1) -> VEXDEST3=1 VEXDEST210=4  | OUTREG=XED_REG_RBX*/
    xed3_operand_set_outreg(d, XED_REG_RBX);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(5, 1) -> VEXDEST3=1 VEXDEST210=5  | OUTREG=XED_REG_RDX*/
    xed3_operand_set_outreg(d, XED_REG_RDX);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(6, 1) -> VEXDEST3=1 VEXDEST210=6  | OUTREG=XED_REG_RCX*/
    xed3_operand_set_outreg(d, XED_REG_RCX);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(7, 1) -> VEXDEST3=1 VEXDEST210=7  | OUTREG=XED_REG_RAX*/
    xed3_operand_set_outreg(d, XED_REG_RAX);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_VGPR32_R_32(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_reg(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> REG=0   | OUTREG=XED_REG_EAX*/
    xed3_operand_set_outreg(d, XED_REG_EAX);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> REG=1   | OUTREG=XED_REG_ECX*/
    xed3_operand_set_outreg(d, XED_REG_ECX);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> REG=2   | OUTREG=XED_REG_EDX*/
    xed3_operand_set_outreg(d, XED_REG_EDX);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> REG=3   | OUTREG=XED_REG_EBX*/
    xed3_operand_set_outreg(d, XED_REG_EBX);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4,) -> REG=4   | OUTREG=XED_REG_ESP*/
    xed3_operand_set_outreg(d, XED_REG_ESP);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5,) -> REG=5   | OUTREG=XED_REG_EBP*/
    xed3_operand_set_outreg(d, XED_REG_EBP);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6,) -> REG=6   | OUTREG=XED_REG_ESI*/
    xed3_operand_set_outreg(d, XED_REG_ESI);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7,) -> REG=7   | OUTREG=XED_REG_EDI*/
    xed3_operand_set_outreg(d, XED_REG_EDI);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_VGPR32_R_64(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_reg(d)) << ((0));
key += (xed3_operand_get_rexr(d)) << ((3));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0) -> REXR=0 REG=0  | OUTREG=XED_REG_EAX*/
    xed3_operand_set_outreg(d, XED_REG_EAX);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0) -> REXR=0 REG=1  | OUTREG=XED_REG_ECX*/
    xed3_operand_set_outreg(d, XED_REG_ECX);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2, 0) -> REXR=0 REG=2  | OUTREG=XED_REG_EDX*/
    xed3_operand_set_outreg(d, XED_REG_EDX);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3, 0) -> REXR=0 REG=3  | OUTREG=XED_REG_EBX*/
    xed3_operand_set_outreg(d, XED_REG_EBX);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4, 0) -> REXR=0 REG=4  | OUTREG=XED_REG_ESP*/
    xed3_operand_set_outreg(d, XED_REG_ESP);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5, 0) -> REXR=0 REG=5  | OUTREG=XED_REG_EBP*/
    xed3_operand_set_outreg(d, XED_REG_EBP);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6, 0) -> REXR=0 REG=6  | OUTREG=XED_REG_ESI*/
    xed3_operand_set_outreg(d, XED_REG_ESI);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7, 0) -> REXR=0 REG=7  | OUTREG=XED_REG_EDI*/
    xed3_operand_set_outreg(d, XED_REG_EDI);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 1) -> REXR=1 REG=0  | OUTREG=XED_REG_R8D*/
    xed3_operand_set_outreg(d, XED_REG_R8D);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 1) -> REXR=1 REG=1  | OUTREG=XED_REG_R9D*/
    xed3_operand_set_outreg(d, XED_REG_R9D);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(2, 1) -> REXR=1 REG=2  | OUTREG=XED_REG_R10D*/
    xed3_operand_set_outreg(d, XED_REG_R10D);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(3, 1) -> REXR=1 REG=3  | OUTREG=XED_REG_R11D*/
    xed3_operand_set_outreg(d, XED_REG_R11D);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(4, 1) -> REXR=1 REG=4  | OUTREG=XED_REG_R12D*/
    xed3_operand_set_outreg(d, XED_REG_R12D);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(5, 1) -> REXR=1 REG=5  | OUTREG=XED_REG_R13D*/
    xed3_operand_set_outreg(d, XED_REG_R13D);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(6, 1) -> REXR=1 REG=6  | OUTREG=XED_REG_R14D*/
    xed3_operand_set_outreg(d, XED_REG_R14D);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(7, 1) -> REXR=1 REG=7  | OUTREG=XED_REG_R15D*/
    xed3_operand_set_outreg(d, XED_REG_R15D);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_VGPR64_R(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_reg(d)) << ((0));
key += (xed3_operand_get_rexr(d)) << ((3));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0) -> REXR=0 REG=0  | OUTREG=XED_REG_RAX*/
    xed3_operand_set_outreg(d, XED_REG_RAX);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0) -> REXR=0 REG=1  | OUTREG=XED_REG_RCX*/
    xed3_operand_set_outreg(d, XED_REG_RCX);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2, 0) -> REXR=0 REG=2  | OUTREG=XED_REG_RDX*/
    xed3_operand_set_outreg(d, XED_REG_RDX);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3, 0) -> REXR=0 REG=3  | OUTREG=XED_REG_RBX*/
    xed3_operand_set_outreg(d, XED_REG_RBX);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4, 0) -> REXR=0 REG=4  | OUTREG=XED_REG_RSP*/
    xed3_operand_set_outreg(d, XED_REG_RSP);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5, 0) -> REXR=0 REG=5  | OUTREG=XED_REG_RBP*/
    xed3_operand_set_outreg(d, XED_REG_RBP);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6, 0) -> REXR=0 REG=6  | OUTREG=XED_REG_RSI*/
    xed3_operand_set_outreg(d, XED_REG_RSI);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7, 0) -> REXR=0 REG=7  | OUTREG=XED_REG_RDI*/
    xed3_operand_set_outreg(d, XED_REG_RDI);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 1) -> REXR=1 REG=0  | OUTREG=XED_REG_R8*/
    xed3_operand_set_outreg(d, XED_REG_R8);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 1) -> REXR=1 REG=1  | OUTREG=XED_REG_R9*/
    xed3_operand_set_outreg(d, XED_REG_R9);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(2, 1) -> REXR=1 REG=2  | OUTREG=XED_REG_R10*/
    xed3_operand_set_outreg(d, XED_REG_R10);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(3, 1) -> REXR=1 REG=3  | OUTREG=XED_REG_R11*/
    xed3_operand_set_outreg(d, XED_REG_R11);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(4, 1) -> REXR=1 REG=4  | OUTREG=XED_REG_R12*/
    xed3_operand_set_outreg(d, XED_REG_R12);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(5, 1) -> REXR=1 REG=5  | OUTREG=XED_REG_R13*/
    xed3_operand_set_outreg(d, XED_REG_R13);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(6, 1) -> REXR=1 REG=6  | OUTREG=XED_REG_R14*/
    xed3_operand_set_outreg(d, XED_REG_R14);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(7, 1) -> REXR=1 REG=7  | OUTREG=XED_REG_R15*/
    xed3_operand_set_outreg(d, XED_REG_R15);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_VGPR32_B_32(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_rm(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> RM=0   | OUTREG=XED_REG_EAX*/
    xed3_operand_set_outreg(d, XED_REG_EAX);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> RM=1   | OUTREG=XED_REG_ECX*/
    xed3_operand_set_outreg(d, XED_REG_ECX);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> RM=2   | OUTREG=XED_REG_EDX*/
    xed3_operand_set_outreg(d, XED_REG_EDX);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> RM=3   | OUTREG=XED_REG_EBX*/
    xed3_operand_set_outreg(d, XED_REG_EBX);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4,) -> RM=4   | OUTREG=XED_REG_ESP*/
    xed3_operand_set_outreg(d, XED_REG_ESP);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5,) -> RM=5   | OUTREG=XED_REG_EBP*/
    xed3_operand_set_outreg(d, XED_REG_EBP);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6,) -> RM=6   | OUTREG=XED_REG_ESI*/
    xed3_operand_set_outreg(d, XED_REG_ESI);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7,) -> RM=7   | OUTREG=XED_REG_EDI*/
    xed3_operand_set_outreg(d, XED_REG_EDI);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_VGPR32_B_64(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_rexb(d)) << ((0));
key += (xed3_operand_get_rm(d)) << ((1));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0) -> REXB=0 RM=0  | OUTREG=XED_REG_EAX*/
    xed3_operand_set_outreg(d, XED_REG_EAX);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0) -> REXB=1 RM=0  | OUTREG=XED_REG_R8D*/
    xed3_operand_set_outreg(d, XED_REG_R8D);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(0, 1) -> REXB=0 RM=1  | OUTREG=XED_REG_ECX*/
    xed3_operand_set_outreg(d, XED_REG_ECX);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(1, 1) -> REXB=1 RM=1  | OUTREG=XED_REG_R9D*/
    xed3_operand_set_outreg(d, XED_REG_R9D);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(0, 2) -> REXB=0 RM=2  | OUTREG=XED_REG_EDX*/
    xed3_operand_set_outreg(d, XED_REG_EDX);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(1, 2) -> REXB=1 RM=2  | OUTREG=XED_REG_R10D*/
    xed3_operand_set_outreg(d, XED_REG_R10D);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(0, 3) -> REXB=0 RM=3  | OUTREG=XED_REG_EBX*/
    xed3_operand_set_outreg(d, XED_REG_EBX);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(1, 3) -> REXB=1 RM=3  | OUTREG=XED_REG_R11D*/
    xed3_operand_set_outreg(d, XED_REG_R11D);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 4) -> REXB=0 RM=4  | OUTREG=XED_REG_ESP*/
    xed3_operand_set_outreg(d, XED_REG_ESP);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 4) -> REXB=1 RM=4  | OUTREG=XED_REG_R12D*/
    xed3_operand_set_outreg(d, XED_REG_R12D);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(0, 5) -> REXB=0 RM=5  | OUTREG=XED_REG_EBP*/
    xed3_operand_set_outreg(d, XED_REG_EBP);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(1, 5) -> REXB=1 RM=5  | OUTREG=XED_REG_R13D*/
    xed3_operand_set_outreg(d, XED_REG_R13D);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(0, 6) -> REXB=0 RM=6  | OUTREG=XED_REG_ESI*/
    xed3_operand_set_outreg(d, XED_REG_ESI);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(1, 6) -> REXB=1 RM=6  | OUTREG=XED_REG_R14D*/
    xed3_operand_set_outreg(d, XED_REG_R14D);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(0, 7) -> REXB=0 RM=7  | OUTREG=XED_REG_EDI*/
    xed3_operand_set_outreg(d, XED_REG_EDI);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(1, 7) -> REXB=1 RM=7  | OUTREG=XED_REG_R15D*/
    xed3_operand_set_outreg(d, XED_REG_R15D);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_VGPR64_B(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_rexb(d)) << ((0));
key += (xed3_operand_get_rm(d)) << ((1));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0) -> REXB=0 RM=0  | OUTREG=XED_REG_RAX*/
    xed3_operand_set_outreg(d, XED_REG_RAX);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0) -> REXB=1 RM=0  | OUTREG=XED_REG_R8*/
    xed3_operand_set_outreg(d, XED_REG_R8);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(0, 1) -> REXB=0 RM=1  | OUTREG=XED_REG_RCX*/
    xed3_operand_set_outreg(d, XED_REG_RCX);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(1, 1) -> REXB=1 RM=1  | OUTREG=XED_REG_R9*/
    xed3_operand_set_outreg(d, XED_REG_R9);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(0, 2) -> REXB=0 RM=2  | OUTREG=XED_REG_RDX*/
    xed3_operand_set_outreg(d, XED_REG_RDX);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(1, 2) -> REXB=1 RM=2  | OUTREG=XED_REG_R10*/
    xed3_operand_set_outreg(d, XED_REG_R10);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(0, 3) -> REXB=0 RM=3  | OUTREG=XED_REG_RBX*/
    xed3_operand_set_outreg(d, XED_REG_RBX);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(1, 3) -> REXB=1 RM=3  | OUTREG=XED_REG_R11*/
    xed3_operand_set_outreg(d, XED_REG_R11);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 4) -> REXB=0 RM=4  | OUTREG=XED_REG_RSP*/
    xed3_operand_set_outreg(d, XED_REG_RSP);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 4) -> REXB=1 RM=4  | OUTREG=XED_REG_R12*/
    xed3_operand_set_outreg(d, XED_REG_R12);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(0, 5) -> REXB=0 RM=5  | OUTREG=XED_REG_RBP*/
    xed3_operand_set_outreg(d, XED_REG_RBP);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(1, 5) -> REXB=1 RM=5  | OUTREG=XED_REG_R13*/
    xed3_operand_set_outreg(d, XED_REG_R13);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(0, 6) -> REXB=0 RM=6  | OUTREG=XED_REG_RSI*/
    xed3_operand_set_outreg(d, XED_REG_RSI);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(1, 6) -> REXB=1 RM=6  | OUTREG=XED_REG_R14*/
    xed3_operand_set_outreg(d, XED_REG_R14);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(0, 7) -> REXB=0 RM=7  | OUTREG=XED_REG_RDI*/
    xed3_operand_set_outreg(d, XED_REG_RDI);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(1, 7) -> REXB=1 RM=7  | OUTREG=XED_REG_R15*/
    xed3_operand_set_outreg(d, XED_REG_R15);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_NELEM_TUPLE1_4X(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_vl(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> VL128  | NELEM=4*/
    xed3_operand_set_nelem(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> VL256  | NELEM=4*/
    xed3_operand_set_nelem(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> VL512  | NELEM=4*/
    xed3_operand_set_nelem(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_AVX512_ROUND(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_llrc(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> LLRC=0b00 | ROUNDC=1 SAE=1*/
    xed3_operand_set_roundc(d, 0x1);
    xed3_operand_set_sae(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> LLRC=0b01 | ROUNDC=2 SAE=1*/
    xed3_operand_set_roundc(d, 0x2);
    xed3_operand_set_sae(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> LLRC=0b10 | ROUNDC=3 SAE=1*/
    xed3_operand_set_roundc(d, 0x3);
    xed3_operand_set_sae(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> LLRC=0b11 | ROUNDC=4 SAE=1*/
    xed3_operand_set_roundc(d, 0x4);
    xed3_operand_set_sae(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_SAE(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_bcrc(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> BCRC=0 | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
case 1: /*(1,) -> BCRC=1 | SAE=1*/
    xed3_operand_set_sae(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_EVEXR4_ONE(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_no_apx(d)) << ((0));
key += (xed3_operand_get_rexr4(d)) << ((1));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0) -> REXR4=0   |*/
case 1: /*(1, 0) -> REXR4=0   |*/
/*pacify the compiler */
(void)d;
    break;
case 2: /*(0, 1) -> NO_APX=0 REXR4=1   |*/
/*pacify the compiler */
(void)d;
    break;
case 3: /*(1, 1) -> NO_APX=1 REXR4=1   | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_ESIZE_128_BITS(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_rex(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> REX=0 | ELEMENT_SIZE=128*/
    xed3_operand_set_element_size(d, 0x80);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_ESIZE_64_BITS(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_rex(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> REX=0 | ELEMENT_SIZE=64*/
    xed3_operand_set_element_size(d, 0x40);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_ESIZE_32_BITS(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_rex(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> REX=0 | ELEMENT_SIZE=32*/
    xed3_operand_set_element_size(d, 0x20);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_ESIZE_16_BITS(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_rex(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> REX=0 | ELEMENT_SIZE=16*/
    xed3_operand_set_element_size(d, 0x10);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_ESIZE_8_BITS(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_rex(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> REX=0 | ELEMENT_SIZE=8*/
    xed3_operand_set_element_size(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_ESIZE_4_BITS(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_rex(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> REX=0 | ELEMENT_SIZE=4*/
    xed3_operand_set_element_size(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_ESIZE_2_BITS(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_rex(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> REX=0 | ELEMENT_SIZE=2*/
    xed3_operand_set_element_size(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_ESIZE_1_BITS(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_rex(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> REX=0 | ELEMENT_SIZE=1*/
    xed3_operand_set_element_size(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_NELEM_MOVDDUP(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_element_size(d)) << ((0));
key += (xed3_operand_get_vl(d)) << ((9));
/* now switch code..*/
switch(key) {
case 64: /*(64, 0) -> ELEMENT_SIZE=64  VL128  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 576: /*(64, 1) -> ELEMENT_SIZE=64  VL256  | NELEM=4*/
    xed3_operand_set_nelem(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 1088: /*(64, 2) -> ELEMENT_SIZE=64  VL512  | NELEM=8*/
    xed3_operand_set_nelem(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_NELEM_FULLMEM(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_element_size(d)) << ((0));
key += (xed3_operand_get_vl(d)) << ((9));
/* now switch code..*/
switch(key) {
case 1: /*(1, 0) -> ELEMENT_SIZE=1     VL128  | NELEM=128*/
    xed3_operand_set_nelem(d, 0x80);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2, 0) -> ELEMENT_SIZE=2     VL128  | NELEM=64*/
    xed3_operand_set_nelem(d, 0x40);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4, 0) -> ELEMENT_SIZE=4     VL128  | NELEM=32*/
    xed3_operand_set_nelem(d, 0x20);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(8, 0) -> ELEMENT_SIZE=8     VL128  | NELEM=16*/
    xed3_operand_set_nelem(d, 0x10);
/*pacify the compiler */
(void)d;
    break;
case 16: /*(16, 0) -> ELEMENT_SIZE=16  VL128  | NELEM=8*/
    xed3_operand_set_nelem(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 32: /*(32, 0) -> ELEMENT_SIZE=32  VL128  | NELEM=4*/
    xed3_operand_set_nelem(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 64: /*(64, 0) -> ELEMENT_SIZE=64  VL128  | NELEM=2*/
    xed3_operand_set_nelem(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 128: /*(128, 0) -> ELEMENT_SIZE=128 VL128  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 256: /*(256, 0) -> ELEMENT_SIZE=256 VL128  | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
case 512: /*(512, 0) -> ELEMENT_SIZE=512 VL128  | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
case 513: /*(1, 1) -> ELEMENT_SIZE=1     VL256  | NELEM=256*/
    xed3_operand_set_nelem(d, 0x100);
/*pacify the compiler */
(void)d;
    break;
case 514: /*(2, 1) -> ELEMENT_SIZE=2     VL256  | NELEM=128*/
    xed3_operand_set_nelem(d, 0x80);
/*pacify the compiler */
(void)d;
    break;
case 516: /*(4, 1) -> ELEMENT_SIZE=4     VL256  | NELEM=64*/
    xed3_operand_set_nelem(d, 0x40);
/*pacify the compiler */
(void)d;
    break;
case 520: /*(8, 1) -> ELEMENT_SIZE=8     VL256  | NELEM=32*/
    xed3_operand_set_nelem(d, 0x20);
/*pacify the compiler */
(void)d;
    break;
case 528: /*(16, 1) -> ELEMENT_SIZE=16  VL256  | NELEM=16*/
    xed3_operand_set_nelem(d, 0x10);
/*pacify the compiler */
(void)d;
    break;
case 544: /*(32, 1) -> ELEMENT_SIZE=32  VL256  | NELEM=8*/
    xed3_operand_set_nelem(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 576: /*(64, 1) -> ELEMENT_SIZE=64  VL256  | NELEM=4*/
    xed3_operand_set_nelem(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 640: /*(128, 1) -> ELEMENT_SIZE=128 VL256  | NELEM=2*/
    xed3_operand_set_nelem(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 768: /*(256, 1) -> ELEMENT_SIZE=256 VL256  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 1024: /*(512, 1) -> ELEMENT_SIZE=512 VL256  | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
case 1025: /*(1, 2) -> ELEMENT_SIZE=1     VL512  | NELEM=512*/
    xed3_operand_set_nelem(d, 0x200);
/*pacify the compiler */
(void)d;
    break;
case 1026: /*(2, 2) -> ELEMENT_SIZE=2     VL512  | NELEM=256*/
    xed3_operand_set_nelem(d, 0x100);
/*pacify the compiler */
(void)d;
    break;
case 1028: /*(4, 2) -> ELEMENT_SIZE=4     VL512  | NELEM=128*/
    xed3_operand_set_nelem(d, 0x80);
/*pacify the compiler */
(void)d;
    break;
case 1032: /*(8, 2) -> ELEMENT_SIZE=8     VL512  | NELEM=64*/
    xed3_operand_set_nelem(d, 0x40);
/*pacify the compiler */
(void)d;
    break;
case 1040: /*(16, 2) -> ELEMENT_SIZE=16  VL512  | NELEM=32*/
    xed3_operand_set_nelem(d, 0x20);
/*pacify the compiler */
(void)d;
    break;
case 1056: /*(32, 2) -> ELEMENT_SIZE=32  VL512  | NELEM=16*/
    xed3_operand_set_nelem(d, 0x10);
/*pacify the compiler */
(void)d;
    break;
case 1088: /*(64, 2) -> ELEMENT_SIZE=64  VL512  | NELEM=8*/
    xed3_operand_set_nelem(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 1152: /*(128, 2) -> ELEMENT_SIZE=128 VL512  | NELEM=4*/
    xed3_operand_set_nelem(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 1280: /*(256, 2) -> ELEMENT_SIZE=256 VL512  | NELEM=2*/
    xed3_operand_set_nelem(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 1536: /*(512, 2) -> ELEMENT_SIZE=512 VL512  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_NELEM_HALFMEM(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_element_size(d)) << ((0));
key += (xed3_operand_get_vl(d)) << ((9));
/* now switch code..*/
switch(key) {
case 1: /*(1, 0) -> ELEMENT_SIZE=1     VL128 | NELEM=64*/
    xed3_operand_set_nelem(d, 0x40);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2, 0) -> ELEMENT_SIZE=2     VL128 | NELEM=32*/
    xed3_operand_set_nelem(d, 0x20);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4, 0) -> ELEMENT_SIZE=4     VL128 | NELEM=16*/
    xed3_operand_set_nelem(d, 0x10);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(8, 0) -> ELEMENT_SIZE=8     VL128 | NELEM=8*/
    xed3_operand_set_nelem(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 16: /*(16, 0) -> ELEMENT_SIZE=16  VL128 | NELEM=4*/
    xed3_operand_set_nelem(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 32: /*(32, 0) -> ELEMENT_SIZE=32  VL128 | NELEM=2*/
    xed3_operand_set_nelem(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 64: /*(64, 0) -> ELEMENT_SIZE=64  VL128 | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 128: /*(128, 0) -> ELEMENT_SIZE=128 VL128 | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
case 256: /*(256, 0) -> ELEMENT_SIZE=256 VL128 | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
case 512: /*(512, 0) -> ELEMENT_SIZE=512 VL128 | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
case 513: /*(1, 1) -> ELEMENT_SIZE=1     VL256 | NELEM=128*/
    xed3_operand_set_nelem(d, 0x80);
/*pacify the compiler */
(void)d;
    break;
case 514: /*(2, 1) -> ELEMENT_SIZE=2     VL256 | NELEM=64*/
    xed3_operand_set_nelem(d, 0x40);
/*pacify the compiler */
(void)d;
    break;
case 516: /*(4, 1) -> ELEMENT_SIZE=4     VL256 | NELEM=32*/
    xed3_operand_set_nelem(d, 0x20);
/*pacify the compiler */
(void)d;
    break;
case 520: /*(8, 1) -> ELEMENT_SIZE=8     VL256 | NELEM=16*/
    xed3_operand_set_nelem(d, 0x10);
/*pacify the compiler */
(void)d;
    break;
case 528: /*(16, 1) -> ELEMENT_SIZE=16  VL256 | NELEM=8*/
    xed3_operand_set_nelem(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 544: /*(32, 1) -> ELEMENT_SIZE=32  VL256 | NELEM=4*/
    xed3_operand_set_nelem(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 576: /*(64, 1) -> ELEMENT_SIZE=64  VL256 | NELEM=2*/
    xed3_operand_set_nelem(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 640: /*(128, 1) -> ELEMENT_SIZE=128 VL256 | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 768: /*(256, 1) -> ELEMENT_SIZE=256 VL256 | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
case 1024: /*(512, 1) -> ELEMENT_SIZE=512 VL256 | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
case 1025: /*(1, 2) -> ELEMENT_SIZE=1     VL512 | NELEM=256*/
    xed3_operand_set_nelem(d, 0x100);
/*pacify the compiler */
(void)d;
    break;
case 1026: /*(2, 2) -> ELEMENT_SIZE=2     VL512 | NELEM=128*/
    xed3_operand_set_nelem(d, 0x80);
/*pacify the compiler */
(void)d;
    break;
case 1028: /*(4, 2) -> ELEMENT_SIZE=4     VL512 | NELEM=64*/
    xed3_operand_set_nelem(d, 0x40);
/*pacify the compiler */
(void)d;
    break;
case 1032: /*(8, 2) -> ELEMENT_SIZE=8     VL512 | NELEM=32*/
    xed3_operand_set_nelem(d, 0x20);
/*pacify the compiler */
(void)d;
    break;
case 1040: /*(16, 2) -> ELEMENT_SIZE=16  VL512 | NELEM=16*/
    xed3_operand_set_nelem(d, 0x10);
/*pacify the compiler */
(void)d;
    break;
case 1056: /*(32, 2) -> ELEMENT_SIZE=32  VL512 | NELEM=8*/
    xed3_operand_set_nelem(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 1088: /*(64, 2) -> ELEMENT_SIZE=64  VL512 | NELEM=4*/
    xed3_operand_set_nelem(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 1152: /*(128, 2) -> ELEMENT_SIZE=128 VL512 | NELEM=2*/
    xed3_operand_set_nelem(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 1280: /*(256, 2) -> ELEMENT_SIZE=256 VL512 | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 1536: /*(512, 2) -> ELEMENT_SIZE=512 VL512 | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_NELEM_QUARTERMEM(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_element_size(d)) << ((0));
key += (xed3_operand_get_vl(d)) << ((9));
/* now switch code..*/
switch(key) {
case 1: /*(1, 0) -> ELEMENT_SIZE=1     VL128 | NELEM=32*/
    xed3_operand_set_nelem(d, 0x20);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2, 0) -> ELEMENT_SIZE=2     VL128 | NELEM=16*/
    xed3_operand_set_nelem(d, 0x10);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4, 0) -> ELEMENT_SIZE=4     VL128 | NELEM=8*/
    xed3_operand_set_nelem(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(8, 0) -> ELEMENT_SIZE=8     VL128 | NELEM=4*/
    xed3_operand_set_nelem(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 16: /*(16, 0) -> ELEMENT_SIZE=16  VL128 | NELEM=2*/
    xed3_operand_set_nelem(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 32: /*(32, 0) -> ELEMENT_SIZE=32  VL128 | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 64: /*(64, 0) -> ELEMENT_SIZE=64  VL128 | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
case 128: /*(128, 0) -> ELEMENT_SIZE=128 VL128 | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
case 256: /*(256, 0) -> ELEMENT_SIZE=256 VL128 | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
case 512: /*(512, 0) -> ELEMENT_SIZE=512 VL128 | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
case 513: /*(1, 1) -> ELEMENT_SIZE=1     VL256 | NELEM=64*/
    xed3_operand_set_nelem(d, 0x40);
/*pacify the compiler */
(void)d;
    break;
case 514: /*(2, 1) -> ELEMENT_SIZE=2     VL256 | NELEM=32*/
    xed3_operand_set_nelem(d, 0x20);
/*pacify the compiler */
(void)d;
    break;
case 516: /*(4, 1) -> ELEMENT_SIZE=4     VL256 | NELEM=16*/
    xed3_operand_set_nelem(d, 0x10);
/*pacify the compiler */
(void)d;
    break;
case 520: /*(8, 1) -> ELEMENT_SIZE=8     VL256 | NELEM=8*/
    xed3_operand_set_nelem(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 528: /*(16, 1) -> ELEMENT_SIZE=16  VL256 | NELEM=4*/
    xed3_operand_set_nelem(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 544: /*(32, 1) -> ELEMENT_SIZE=32  VL256 | NELEM=2*/
    xed3_operand_set_nelem(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 576: /*(64, 1) -> ELEMENT_SIZE=64  VL256 | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 640: /*(128, 1) -> ELEMENT_SIZE=128 VL256 | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
case 768: /*(256, 1) -> ELEMENT_SIZE=256 VL256 | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
case 1024: /*(512, 1) -> ELEMENT_SIZE=512 VL256 | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
case 1025: /*(1, 2) -> ELEMENT_SIZE=1     VL512 | NELEM=128*/
    xed3_operand_set_nelem(d, 0x80);
/*pacify the compiler */
(void)d;
    break;
case 1026: /*(2, 2) -> ELEMENT_SIZE=2     VL512 | NELEM=64*/
    xed3_operand_set_nelem(d, 0x40);
/*pacify the compiler */
(void)d;
    break;
case 1028: /*(4, 2) -> ELEMENT_SIZE=4     VL512 | NELEM=32*/
    xed3_operand_set_nelem(d, 0x20);
/*pacify the compiler */
(void)d;
    break;
case 1032: /*(8, 2) -> ELEMENT_SIZE=8     VL512 | NELEM=16*/
    xed3_operand_set_nelem(d, 0x10);
/*pacify the compiler */
(void)d;
    break;
case 1040: /*(16, 2) -> ELEMENT_SIZE=16  VL512 | NELEM=8*/
    xed3_operand_set_nelem(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 1056: /*(32, 2) -> ELEMENT_SIZE=32  VL512 | NELEM=4*/
    xed3_operand_set_nelem(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 1088: /*(64, 2) -> ELEMENT_SIZE=64  VL512 | NELEM=2*/
    xed3_operand_set_nelem(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 1152: /*(128, 2) -> ELEMENT_SIZE=128 VL512 | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 1280: /*(256, 2) -> ELEMENT_SIZE=256 VL512 | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
case 1536: /*(512, 2) -> ELEMENT_SIZE=512 VL512 | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_NELEM_EIGHTHMEM(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_element_size(d)) << ((0));
key += (xed3_operand_get_vl(d)) << ((9));
/* now switch code..*/
switch(key) {
case 1: /*(1, 0) -> ELEMENT_SIZE=1     VL128 | NELEM=16*/
    xed3_operand_set_nelem(d, 0x10);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2, 0) -> ELEMENT_SIZE=2     VL128 | NELEM=8*/
    xed3_operand_set_nelem(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4, 0) -> ELEMENT_SIZE=4     VL128 | NELEM=4*/
    xed3_operand_set_nelem(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(8, 0) -> ELEMENT_SIZE=8     VL128 | NELEM=2*/
    xed3_operand_set_nelem(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 16: /*(16, 0) -> ELEMENT_SIZE=16  VL128 | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 32: /*(32, 0) -> ELEMENT_SIZE=32  VL128 | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
case 64: /*(64, 0) -> ELEMENT_SIZE=64  VL128 | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
case 128: /*(128, 0) -> ELEMENT_SIZE=128 VL128 | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
case 256: /*(256, 0) -> ELEMENT_SIZE=256 VL128 | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
case 512: /*(512, 0) -> ELEMENT_SIZE=512 VL128 | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
case 513: /*(1, 1) -> ELEMENT_SIZE=1     VL256 | NELEM=32*/
    xed3_operand_set_nelem(d, 0x20);
/*pacify the compiler */
(void)d;
    break;
case 514: /*(2, 1) -> ELEMENT_SIZE=2     VL256 | NELEM=16*/
    xed3_operand_set_nelem(d, 0x10);
/*pacify the compiler */
(void)d;
    break;
case 516: /*(4, 1) -> ELEMENT_SIZE=4     VL256 | NELEM=8*/
    xed3_operand_set_nelem(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 520: /*(8, 1) -> ELEMENT_SIZE=8     VL256 | NELEM=4*/
    xed3_operand_set_nelem(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 528: /*(16, 1) -> ELEMENT_SIZE=16  VL256 | NELEM=2*/
    xed3_operand_set_nelem(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 544: /*(32, 1) -> ELEMENT_SIZE=32  VL256 | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 576: /*(64, 1) -> ELEMENT_SIZE=64  VL256 | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
case 640: /*(128, 1) -> ELEMENT_SIZE=128 VL256 | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
case 768: /*(256, 1) -> ELEMENT_SIZE=256 VL256 | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
case 1024: /*(512, 1) -> ELEMENT_SIZE=512 VL256 | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
case 1025: /*(1, 2) -> ELEMENT_SIZE=1     VL512 | NELEM=64*/
    xed3_operand_set_nelem(d, 0x40);
/*pacify the compiler */
(void)d;
    break;
case 1026: /*(2, 2) -> ELEMENT_SIZE=2     VL512 | NELEM=32*/
    xed3_operand_set_nelem(d, 0x20);
/*pacify the compiler */
(void)d;
    break;
case 1028: /*(4, 2) -> ELEMENT_SIZE=4     VL512 | NELEM=16*/
    xed3_operand_set_nelem(d, 0x10);
/*pacify the compiler */
(void)d;
    break;
case 1032: /*(8, 2) -> ELEMENT_SIZE=8     VL512 | NELEM=8*/
    xed3_operand_set_nelem(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 1040: /*(16, 2) -> ELEMENT_SIZE=16  VL512 | NELEM=4*/
    xed3_operand_set_nelem(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 1056: /*(32, 2) -> ELEMENT_SIZE=32  VL512 | NELEM=2*/
    xed3_operand_set_nelem(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 1088: /*(64, 2) -> ELEMENT_SIZE=64  VL512 | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 1152: /*(128, 2) -> ELEMENT_SIZE=128 VL512 | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
case 1280: /*(256, 2) -> ELEMENT_SIZE=256 VL512 | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
case 1536: /*(512, 2) -> ELEMENT_SIZE=512 VL512 | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_NELEM_GPR_READER_BYTE(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_vl(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> VL128  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> VL256  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> VL512  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_NELEM_GPR_READER_WORD(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_vl(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> VL128  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> VL256  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> VL512  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_NELEM_GPR_WRITER_LDOP_D(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_vl(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> VL128  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> VL256  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> VL512  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_NELEM_GPR_WRITER_LDOP_Q(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_vl(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> VL128  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> VL256  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> VL512  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_NELEM_GPR_WRITER_STORE_BYTE(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_vl(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> VL128  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> VL256  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> VL512  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_NELEM_GPR_WRITER_STORE_WORD(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_vl(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> VL128  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> VL256  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> VL512  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_NELEM_TUPLE1_BYTE(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_vl(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> VL128  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> VL256  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> VL512  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_NELEM_TUPLE1_WORD(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_vl(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> VL128  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> VL256  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> VL512  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_NELEM_SCALAR(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_vl(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> VL128  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> VL256  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> VL512  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_NELEM_TUPLE1_SUBDWORD(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_vl(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> VL128  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> VL256  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> VL512  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_NELEM_GPR_READER(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_vl(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> VL128  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> VL256  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> VL512  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_NELEM_GPR_READER_SUBDWORD(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_vl(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> VL128  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> VL256  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> VL512  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_NELEM_GPR_WRITER_LDOP(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_vl(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> VL128  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> VL256  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> VL512  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_NELEM_GPR_WRITER_STORE(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_vl(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> VL128  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> VL256  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> VL512  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_NELEM_GPR_WRITER_STORE_SUBDWORD(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_vl(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> VL128  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> VL256  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> VL512  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_NELEM_TUPLE1(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_vl(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> VL128  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> VL256  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> VL512  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_NELEM_GSCAT(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_vl(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> VL128  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> VL256  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> VL512  | NELEM=1*/
    xed3_operand_set_nelem(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_NELEM_TUPLE2(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_vl(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> VL128  | NELEM=2*/
    xed3_operand_set_nelem(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> VL256  | NELEM=2*/
    xed3_operand_set_nelem(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> VL512  | NELEM=2*/
    xed3_operand_set_nelem(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_NELEM_TUPLE4(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_vl(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> VL128  | NELEM=4*/
    xed3_operand_set_nelem(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> VL256  | NELEM=4*/
    xed3_operand_set_nelem(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> VL512  | NELEM=4*/
    xed3_operand_set_nelem(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_NELEM_TUPLE8(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_vl(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> VL128  | NELEM=8*/
    xed3_operand_set_nelem(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> VL256  | NELEM=8*/
    xed3_operand_set_nelem(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> VL512  | NELEM=8*/
    xed3_operand_set_nelem(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_NELEM_MEM128(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_bcrc(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> BCRC=0b0  | ELEMENT_SIZE=64 NELEM=2*/
    xed3_operand_set_element_size(d, 0x40);
    xed3_operand_set_nelem(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> BCRC=0b1  | error*/
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_NELEM_FULL(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_bcrc(d)) << ((0));
key += (xed3_operand_get_element_size(d)) << ((1));
key += (xed3_operand_get_vl(d)) << ((10));
/* now switch code..*/
switch(key) {
case 32: /*(0, 16, 0) -> BCRC=0b0  ELEMENT_SIZE=16 VL128 | NELEM=8*/
    xed3_operand_set_nelem(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 33: /*(1, 16, 0) -> BCRC=0b1  ELEMENT_SIZE=16 VL128 | NELEM=1  EMX_BROADCAST_1TO8_16*/
    xed3_operand_set_nelem(d, 0x1);
    xed3_operand_set_bcast(d, 0xe);
/*pacify the compiler */
(void)d;
    break;
case 64: /*(0, 32, 0) -> BCRC=0b0  ELEMENT_SIZE=32 VL128 | NELEM=4*/
    xed3_operand_set_nelem(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 65: /*(1, 32, 0) -> BCRC=0b1  ELEMENT_SIZE=32 VL128 | NELEM=1  EMX_BROADCAST_1TO4_32*/
    xed3_operand_set_nelem(d, 0x1);
    xed3_operand_set_bcast(d, 0xa);
/*pacify the compiler */
(void)d;
    break;
case 128: /*(0, 64, 0) -> BCRC=0b0  ELEMENT_SIZE=64 VL128 | NELEM=2*/
    xed3_operand_set_nelem(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 129: /*(1, 64, 0) -> BCRC=0b1  ELEMENT_SIZE=64 VL128 | NELEM=1  EMX_BROADCAST_1TO2_64*/
    xed3_operand_set_nelem(d, 0x1);
    xed3_operand_set_bcast(d, 0xb);
/*pacify the compiler */
(void)d;
    break;
case 1056: /*(0, 16, 1) -> BCRC=0b0  ELEMENT_SIZE=16 VL256 | NELEM=16*/
    xed3_operand_set_nelem(d, 0x10);
/*pacify the compiler */
(void)d;
    break;
case 1057: /*(1, 16, 1) -> BCRC=0b1  ELEMENT_SIZE=16 VL256 | NELEM=1  EMX_BROADCAST_1TO16_16*/
    xed3_operand_set_nelem(d, 0x1);
    xed3_operand_set_bcast(d, 0xf);
/*pacify the compiler */
(void)d;
    break;
case 1088: /*(0, 32, 1) -> BCRC=0b0  ELEMENT_SIZE=32 VL256 | NELEM=8*/
    xed3_operand_set_nelem(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 1089: /*(1, 32, 1) -> BCRC=0b1  ELEMENT_SIZE=32 VL256 | NELEM=1  EMX_BROADCAST_1TO8_32*/
    xed3_operand_set_nelem(d, 0x1);
    xed3_operand_set_bcast(d, 0x3);
/*pacify the compiler */
(void)d;
    break;
case 1152: /*(0, 64, 1) -> BCRC=0b0  ELEMENT_SIZE=64 VL256 | NELEM=4*/
    xed3_operand_set_nelem(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 1153: /*(1, 64, 1) -> BCRC=0b1  ELEMENT_SIZE=64 VL256 | NELEM=1  EMX_BROADCAST_1TO4_64*/
    xed3_operand_set_nelem(d, 0x1);
    xed3_operand_set_bcast(d, 0xd);
/*pacify the compiler */
(void)d;
    break;
case 2080: /*(0, 16, 2) -> BCRC=0b0  ELEMENT_SIZE=16 VL512 | NELEM=32*/
    xed3_operand_set_nelem(d, 0x20);
/*pacify the compiler */
(void)d;
    break;
case 2081: /*(1, 16, 2) -> BCRC=0b1  ELEMENT_SIZE=16 VL512 | NELEM=1  EMX_BROADCAST_1TO32_16*/
    xed3_operand_set_nelem(d, 0x1);
    xed3_operand_set_bcast(d, 0x10);
/*pacify the compiler */
(void)d;
    break;
case 2112: /*(0, 32, 2) -> BCRC=0b0  ELEMENT_SIZE=32 VL512 | NELEM=16*/
    xed3_operand_set_nelem(d, 0x10);
/*pacify the compiler */
(void)d;
    break;
case 2113: /*(1, 32, 2) -> BCRC=0b1  ELEMENT_SIZE=32 VL512 | NELEM=1  EMX_BROADCAST_1TO16_32*/
    xed3_operand_set_nelem(d, 0x1);
    xed3_operand_set_bcast(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 2176: /*(0, 64, 2) -> BCRC=0b0  ELEMENT_SIZE=64 VL512 | NELEM=8*/
    xed3_operand_set_nelem(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 2177: /*(1, 64, 2) -> BCRC=0b1  ELEMENT_SIZE=64 VL512 | NELEM=1  EMX_BROADCAST_1TO8_64*/
    xed3_operand_set_nelem(d, 0x1);
    xed3_operand_set_bcast(d, 0x5);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_NELEM_HALF(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_bcrc(d)) << ((0));
key += (xed3_operand_get_element_size(d)) << ((1));
key += (xed3_operand_get_vl(d)) << ((10));
/* now switch code..*/
switch(key) {
case 32: /*(0, 16, 0) -> BCRC=0b0  ELEMENT_SIZE=16 VL128 | NELEM=4*/
    xed3_operand_set_nelem(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 33: /*(1, 16, 0) -> BCRC=0b1  ELEMENT_SIZE=16 VL128 | NELEM=1    EMX_BROADCAST_1TO4_16*/
    xed3_operand_set_nelem(d, 0x1);
    xed3_operand_set_bcast(d, 0x1b);
/*pacify the compiler */
(void)d;
    break;
case 64: /*(0, 32, 0) -> BCRC=0b0  ELEMENT_SIZE=32 VL128 | NELEM=2*/
    xed3_operand_set_nelem(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 65: /*(1, 32, 0) -> BCRC=0b1  ELEMENT_SIZE=32 VL128 | NELEM=1    EMX_BROADCAST_1TO2_32*/
    xed3_operand_set_nelem(d, 0x1);
    xed3_operand_set_bcast(d, 0x16);
/*pacify the compiler */
(void)d;
    break;
case 1056: /*(0, 16, 1) -> BCRC=0b0  ELEMENT_SIZE=16 VL256 | NELEM=8*/
    xed3_operand_set_nelem(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 1057: /*(1, 16, 1) -> BCRC=0b1  ELEMENT_SIZE=16 VL256 | NELEM=1    EMX_BROADCAST_1TO8_16*/
    xed3_operand_set_nelem(d, 0x1);
    xed3_operand_set_bcast(d, 0xe);
/*pacify the compiler */
(void)d;
    break;
case 1088: /*(0, 32, 1) -> BCRC=0b0  ELEMENT_SIZE=32 VL256 | NELEM=4*/
    xed3_operand_set_nelem(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 1089: /*(1, 32, 1) -> BCRC=0b1  ELEMENT_SIZE=32 VL256 | NELEM=1    EMX_BROADCAST_1TO4_32*/
    xed3_operand_set_nelem(d, 0x1);
    xed3_operand_set_bcast(d, 0xa);
/*pacify the compiler */
(void)d;
    break;
case 2080: /*(0, 16, 2) -> BCRC=0b0  ELEMENT_SIZE=16 VL512 | NELEM=16*/
    xed3_operand_set_nelem(d, 0x10);
/*pacify the compiler */
(void)d;
    break;
case 2081: /*(1, 16, 2) -> BCRC=0b1  ELEMENT_SIZE=16 VL512 | NELEM=1    EMX_BROADCAST_1TO16_16*/
    xed3_operand_set_nelem(d, 0x1);
    xed3_operand_set_bcast(d, 0xf);
/*pacify the compiler */
(void)d;
    break;
case 2112: /*(0, 32, 2) -> BCRC=0b0  ELEMENT_SIZE=32 VL512 | NELEM=8*/
    xed3_operand_set_nelem(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 2113: /*(1, 32, 2) -> BCRC=0b1  ELEMENT_SIZE=32 VL512 | NELEM=1    EMX_BROADCAST_1TO8_32*/
    xed3_operand_set_nelem(d, 0x1);
    xed3_operand_set_bcast(d, 0x3);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_FIX_ROUND_LEN512(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mode(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> mode16 | VL512 VL_IGN=1*/
    xed3_operand_set_vl(d, 0x2);
    xed3_operand_set_vl_ign(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> mode32 | VL512 VL_IGN=1*/
    xed3_operand_set_vl(d, 0x2);
    xed3_operand_set_vl_ign(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> mode64 | VL512 VL_IGN=1*/
    xed3_operand_set_vl(d, 0x2);
    xed3_operand_set_vl_ign(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_FIX_ROUND_LEN128(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mode(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> mode16 | VL128 VL_IGN=1*/
    xed3_operand_set_vl(d, 0x0);
    xed3_operand_set_vl_ign(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> mode32 | VL128 VL_IGN=1*/
    xed3_operand_set_vl(d, 0x0);
    xed3_operand_set_vl_ign(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> mode64 | VL128 VL_IGN=1*/
    xed3_operand_set_vl(d, 0x0);
    xed3_operand_set_vl_ign(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_UISA_VMODRM_ZMM(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mod(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> MOD=0b00  UISA_VSIB_ZMM()             |*/
    xed3_capture_nt_UISA_VSIB_ZMM(d);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> MOD=0b01  UISA_VSIB_ZMM() MEMDISP8()  |*/
    xed3_capture_nt_UISA_VSIB_ZMM(d);
    xed3_capture_nt_MEMDISP8(d);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> MOD=0b10  UISA_VSIB_ZMM() MEMDISP32() |*/
    xed3_capture_nt_UISA_VSIB_ZMM(d);
    xed3_capture_nt_MEMDISP32(d);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_UISA_VMODRM_YMM(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mod(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> MOD=0b00  UISA_VSIB_YMM()             |*/
    xed3_capture_nt_UISA_VSIB_YMM(d);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> MOD=0b01  UISA_VSIB_YMM() MEMDISP8()  |*/
    xed3_capture_nt_UISA_VSIB_YMM(d);
    xed3_capture_nt_MEMDISP8(d);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> MOD=0b10  UISA_VSIB_YMM() MEMDISP32() |*/
    xed3_capture_nt_UISA_VSIB_YMM(d);
    xed3_capture_nt_MEMDISP32(d);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_UISA_VMODRM_XMM(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mod(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> MOD=0b00  UISA_VSIB_XMM()             |*/
    xed3_capture_nt_UISA_VSIB_XMM(d);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> MOD=0b01  UISA_VSIB_XMM() MEMDISP8()  |*/
    xed3_capture_nt_UISA_VSIB_XMM(d);
    xed3_capture_nt_MEMDISP8(d);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> MOD=0b10  UISA_VSIB_XMM() MEMDISP32() |*/
    xed3_capture_nt_UISA_VSIB_XMM(d);
    xed3_capture_nt_MEMDISP32(d);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_UISA_VSIB_ZMM(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_sibscale(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> SIBSCALE[0b00] SIBINDEX[iii] SIBBASE[bbb] UISA_VSIB_BASE()  | INDEX=UISA_VSIB_INDEX_ZMM()  SCALE=1*/
    xed3_capture_nt_UISA_VSIB_BASE(d);
    xed3_capture_nt_UISA_VSIB_INDEX_ZMM(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> SIBSCALE[0b01] SIBINDEX[iii] SIBBASE[bbb] UISA_VSIB_BASE()  | INDEX=UISA_VSIB_INDEX_ZMM()  SCALE=2*/
    xed3_capture_nt_UISA_VSIB_BASE(d);
    xed3_capture_nt_UISA_VSIB_INDEX_ZMM(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> SIBSCALE[0b10] SIBINDEX[iii] SIBBASE[bbb] UISA_VSIB_BASE()  | INDEX=UISA_VSIB_INDEX_ZMM()  SCALE=4*/
    xed3_capture_nt_UISA_VSIB_BASE(d);
    xed3_capture_nt_UISA_VSIB_INDEX_ZMM(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> SIBSCALE[0b11] SIBINDEX[iii] SIBBASE[bbb] UISA_VSIB_BASE()  | INDEX=UISA_VSIB_INDEX_ZMM()  SCALE=8*/
    xed3_capture_nt_UISA_VSIB_BASE(d);
    xed3_capture_nt_UISA_VSIB_INDEX_ZMM(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_UISA_VSIB_YMM(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_sibscale(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> SIBSCALE[0b00] SIBINDEX[iii] SIBBASE[bbb] UISA_VSIB_BASE()  | INDEX=UISA_VSIB_INDEX_YMM()  SCALE=1*/
    xed3_capture_nt_UISA_VSIB_BASE(d);
    xed3_capture_nt_UISA_VSIB_INDEX_YMM(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> SIBSCALE[0b01] SIBINDEX[iii] SIBBASE[bbb] UISA_VSIB_BASE()  | INDEX=UISA_VSIB_INDEX_YMM()  SCALE=2*/
    xed3_capture_nt_UISA_VSIB_BASE(d);
    xed3_capture_nt_UISA_VSIB_INDEX_YMM(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> SIBSCALE[0b10] SIBINDEX[iii] SIBBASE[bbb] UISA_VSIB_BASE()  | INDEX=UISA_VSIB_INDEX_YMM()  SCALE=4*/
    xed3_capture_nt_UISA_VSIB_BASE(d);
    xed3_capture_nt_UISA_VSIB_INDEX_YMM(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> SIBSCALE[0b11] SIBINDEX[iii] SIBBASE[bbb] UISA_VSIB_BASE()  | INDEX=UISA_VSIB_INDEX_YMM()  SCALE=8*/
    xed3_capture_nt_UISA_VSIB_BASE(d);
    xed3_capture_nt_UISA_VSIB_INDEX_YMM(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_UISA_VSIB_XMM(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_sibscale(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> SIBSCALE[0b00] SIBINDEX[iii] SIBBASE[bbb] UISA_VSIB_BASE()  | INDEX=UISA_VSIB_INDEX_XMM()  SCALE=1*/
    xed3_capture_nt_UISA_VSIB_BASE(d);
    xed3_capture_nt_UISA_VSIB_INDEX_XMM(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> SIBSCALE[0b01] SIBINDEX[iii] SIBBASE[bbb] UISA_VSIB_BASE()  | INDEX=UISA_VSIB_INDEX_XMM()  SCALE=2*/
    xed3_capture_nt_UISA_VSIB_BASE(d);
    xed3_capture_nt_UISA_VSIB_INDEX_XMM(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> SIBSCALE[0b10] SIBINDEX[iii] SIBBASE[bbb] UISA_VSIB_BASE()  | INDEX=UISA_VSIB_INDEX_XMM()  SCALE=4*/
    xed3_capture_nt_UISA_VSIB_BASE(d);
    xed3_capture_nt_UISA_VSIB_INDEX_XMM(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> SIBSCALE[0b11] SIBINDEX[iii] SIBBASE[bbb] UISA_VSIB_BASE()  | INDEX=UISA_VSIB_INDEX_XMM()  SCALE=8*/
    xed3_capture_nt_UISA_VSIB_BASE(d);
    xed3_capture_nt_UISA_VSIB_INDEX_XMM(d);
    xed3_operand_set_index(d, xed3_operand_get_outreg(d));
    xed3_operand_set_scale(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_UISA_VSIB_INDEX_ZMM(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_rexx(d)) << ((0));
key += (xed3_operand_get_sibindex(d)) << ((1));
key += (xed3_operand_get_vexdest4(d)) << ((4));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0, 0) -> VEXDEST4=0 REXX=0   SIBINDEX=0 | OUTREG=XED_REG_ZMM0*/
    xed3_operand_set_outreg(d, XED_REG_ZMM0);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0, 0) -> VEXDEST4=0 REXX=1   SIBINDEX=0 | OUTREG=XED_REG_ZMM8*/
    xed3_operand_set_outreg(d, XED_REG_ZMM8);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(0, 1, 0) -> VEXDEST4=0 REXX=0   SIBINDEX=1 | OUTREG=XED_REG_ZMM1*/
    xed3_operand_set_outreg(d, XED_REG_ZMM1);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(1, 1, 0) -> VEXDEST4=0 REXX=1   SIBINDEX=1 | OUTREG=XED_REG_ZMM9*/
    xed3_operand_set_outreg(d, XED_REG_ZMM9);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(0, 2, 0) -> VEXDEST4=0 REXX=0   SIBINDEX=2 | OUTREG=XED_REG_ZMM2*/
    xed3_operand_set_outreg(d, XED_REG_ZMM2);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(1, 2, 0) -> VEXDEST4=0 REXX=1   SIBINDEX=2 | OUTREG=XED_REG_ZMM10*/
    xed3_operand_set_outreg(d, XED_REG_ZMM10);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(0, 3, 0) -> VEXDEST4=0 REXX=0   SIBINDEX=3 | OUTREG=XED_REG_ZMM3*/
    xed3_operand_set_outreg(d, XED_REG_ZMM3);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(1, 3, 0) -> VEXDEST4=0 REXX=1   SIBINDEX=3 | OUTREG=XED_REG_ZMM11*/
    xed3_operand_set_outreg(d, XED_REG_ZMM11);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 4, 0) -> VEXDEST4=0 REXX=0   SIBINDEX=4 | OUTREG=XED_REG_ZMM4*/
    xed3_operand_set_outreg(d, XED_REG_ZMM4);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 4, 0) -> VEXDEST4=0 REXX=1   SIBINDEX=4 | OUTREG=XED_REG_ZMM12*/
    xed3_operand_set_outreg(d, XED_REG_ZMM12);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(0, 5, 0) -> VEXDEST4=0 REXX=0   SIBINDEX=5 | OUTREG=XED_REG_ZMM5*/
    xed3_operand_set_outreg(d, XED_REG_ZMM5);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(1, 5, 0) -> VEXDEST4=0 REXX=1   SIBINDEX=5 | OUTREG=XED_REG_ZMM13*/
    xed3_operand_set_outreg(d, XED_REG_ZMM13);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(0, 6, 0) -> VEXDEST4=0 REXX=0   SIBINDEX=6 | OUTREG=XED_REG_ZMM6*/
    xed3_operand_set_outreg(d, XED_REG_ZMM6);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(1, 6, 0) -> VEXDEST4=0 REXX=1   SIBINDEX=6 | OUTREG=XED_REG_ZMM14*/
    xed3_operand_set_outreg(d, XED_REG_ZMM14);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(0, 7, 0) -> VEXDEST4=0 REXX=0   SIBINDEX=7 | OUTREG=XED_REG_ZMM7*/
    xed3_operand_set_outreg(d, XED_REG_ZMM7);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(1, 7, 0) -> VEXDEST4=0 REXX=1   SIBINDEX=7 | OUTREG=XED_REG_ZMM15*/
    xed3_operand_set_outreg(d, XED_REG_ZMM15);
/*pacify the compiler */
(void)d;
    break;
case 16: /*(0, 0, 1) -> VEXDEST4=1 REXX=0   SIBINDEX=0 | OUTREG=XED_REG_ZMM16*/
    xed3_operand_set_outreg(d, XED_REG_ZMM16);
/*pacify the compiler */
(void)d;
    break;
case 17: /*(1, 0, 1) -> VEXDEST4=1 REXX=1   SIBINDEX=0 | OUTREG=XED_REG_ZMM24*/
    xed3_operand_set_outreg(d, XED_REG_ZMM24);
/*pacify the compiler */
(void)d;
    break;
case 18: /*(0, 1, 1) -> VEXDEST4=1 REXX=0   SIBINDEX=1 | OUTREG=XED_REG_ZMM17*/
    xed3_operand_set_outreg(d, XED_REG_ZMM17);
/*pacify the compiler */
(void)d;
    break;
case 19: /*(1, 1, 1) -> VEXDEST4=1 REXX=1   SIBINDEX=1 | OUTREG=XED_REG_ZMM25*/
    xed3_operand_set_outreg(d, XED_REG_ZMM25);
/*pacify the compiler */
(void)d;
    break;
case 20: /*(0, 2, 1) -> VEXDEST4=1 REXX=0   SIBINDEX=2 | OUTREG=XED_REG_ZMM18*/
    xed3_operand_set_outreg(d, XED_REG_ZMM18);
/*pacify the compiler */
(void)d;
    break;
case 21: /*(1, 2, 1) -> VEXDEST4=1 REXX=1   SIBINDEX=2 | OUTREG=XED_REG_ZMM26*/
    xed3_operand_set_outreg(d, XED_REG_ZMM26);
/*pacify the compiler */
(void)d;
    break;
case 22: /*(0, 3, 1) -> VEXDEST4=1 REXX=0   SIBINDEX=3 | OUTREG=XED_REG_ZMM19*/
    xed3_operand_set_outreg(d, XED_REG_ZMM19);
/*pacify the compiler */
(void)d;
    break;
case 23: /*(1, 3, 1) -> VEXDEST4=1 REXX=1   SIBINDEX=3 | OUTREG=XED_REG_ZMM27*/
    xed3_operand_set_outreg(d, XED_REG_ZMM27);
/*pacify the compiler */
(void)d;
    break;
case 24: /*(0, 4, 1) -> VEXDEST4=1 REXX=0   SIBINDEX=4 | OUTREG=XED_REG_ZMM20*/
    xed3_operand_set_outreg(d, XED_REG_ZMM20);
/*pacify the compiler */
(void)d;
    break;
case 25: /*(1, 4, 1) -> VEXDEST4=1 REXX=1   SIBINDEX=4 | OUTREG=XED_REG_ZMM28*/
    xed3_operand_set_outreg(d, XED_REG_ZMM28);
/*pacify the compiler */
(void)d;
    break;
case 26: /*(0, 5, 1) -> VEXDEST4=1 REXX=0   SIBINDEX=5 | OUTREG=XED_REG_ZMM21*/
    xed3_operand_set_outreg(d, XED_REG_ZMM21);
/*pacify the compiler */
(void)d;
    break;
case 27: /*(1, 5, 1) -> VEXDEST4=1 REXX=1   SIBINDEX=5 | OUTREG=XED_REG_ZMM29*/
    xed3_operand_set_outreg(d, XED_REG_ZMM29);
/*pacify the compiler */
(void)d;
    break;
case 28: /*(0, 6, 1) -> VEXDEST4=1 REXX=0   SIBINDEX=6 | OUTREG=XED_REG_ZMM22*/
    xed3_operand_set_outreg(d, XED_REG_ZMM22);
/*pacify the compiler */
(void)d;
    break;
case 29: /*(1, 6, 1) -> VEXDEST4=1 REXX=1   SIBINDEX=6 | OUTREG=XED_REG_ZMM30*/
    xed3_operand_set_outreg(d, XED_REG_ZMM30);
/*pacify the compiler */
(void)d;
    break;
case 30: /*(0, 7, 1) -> VEXDEST4=1 REXX=0   SIBINDEX=7 | OUTREG=XED_REG_ZMM23*/
    xed3_operand_set_outreg(d, XED_REG_ZMM23);
/*pacify the compiler */
(void)d;
    break;
case 31: /*(1, 7, 1) -> VEXDEST4=1 REXX=1   SIBINDEX=7 | OUTREG=XED_REG_ZMM31*/
    xed3_operand_set_outreg(d, XED_REG_ZMM31);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_UISA_VSIB_INDEX_YMM(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_rexx(d)) << ((0));
key += (xed3_operand_get_sibindex(d)) << ((1));
key += (xed3_operand_get_vexdest4(d)) << ((4));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0, 0) -> VEXDEST4=0 REXX=0   SIBINDEX=0 | OUTREG=XED_REG_YMM0*/
    xed3_operand_set_outreg(d, XED_REG_YMM0);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0, 0) -> VEXDEST4=0 REXX=1   SIBINDEX=0 | OUTREG=XED_REG_YMM8*/
    xed3_operand_set_outreg(d, XED_REG_YMM8);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(0, 1, 0) -> VEXDEST4=0 REXX=0   SIBINDEX=1 | OUTREG=XED_REG_YMM1*/
    xed3_operand_set_outreg(d, XED_REG_YMM1);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(1, 1, 0) -> VEXDEST4=0 REXX=1   SIBINDEX=1 | OUTREG=XED_REG_YMM9*/
    xed3_operand_set_outreg(d, XED_REG_YMM9);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(0, 2, 0) -> VEXDEST4=0 REXX=0   SIBINDEX=2 | OUTREG=XED_REG_YMM2*/
    xed3_operand_set_outreg(d, XED_REG_YMM2);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(1, 2, 0) -> VEXDEST4=0 REXX=1   SIBINDEX=2 | OUTREG=XED_REG_YMM10*/
    xed3_operand_set_outreg(d, XED_REG_YMM10);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(0, 3, 0) -> VEXDEST4=0 REXX=0   SIBINDEX=3 | OUTREG=XED_REG_YMM3*/
    xed3_operand_set_outreg(d, XED_REG_YMM3);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(1, 3, 0) -> VEXDEST4=0 REXX=1   SIBINDEX=3 | OUTREG=XED_REG_YMM11*/
    xed3_operand_set_outreg(d, XED_REG_YMM11);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 4, 0) -> VEXDEST4=0 REXX=0   SIBINDEX=4 | OUTREG=XED_REG_YMM4*/
    xed3_operand_set_outreg(d, XED_REG_YMM4);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 4, 0) -> VEXDEST4=0 REXX=1   SIBINDEX=4 | OUTREG=XED_REG_YMM12*/
    xed3_operand_set_outreg(d, XED_REG_YMM12);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(0, 5, 0) -> VEXDEST4=0 REXX=0   SIBINDEX=5 | OUTREG=XED_REG_YMM5*/
    xed3_operand_set_outreg(d, XED_REG_YMM5);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(1, 5, 0) -> VEXDEST4=0 REXX=1   SIBINDEX=5 | OUTREG=XED_REG_YMM13*/
    xed3_operand_set_outreg(d, XED_REG_YMM13);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(0, 6, 0) -> VEXDEST4=0 REXX=0   SIBINDEX=6 | OUTREG=XED_REG_YMM6*/
    xed3_operand_set_outreg(d, XED_REG_YMM6);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(1, 6, 0) -> VEXDEST4=0 REXX=1   SIBINDEX=6 | OUTREG=XED_REG_YMM14*/
    xed3_operand_set_outreg(d, XED_REG_YMM14);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(0, 7, 0) -> VEXDEST4=0 REXX=0   SIBINDEX=7 | OUTREG=XED_REG_YMM7*/
    xed3_operand_set_outreg(d, XED_REG_YMM7);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(1, 7, 0) -> VEXDEST4=0 REXX=1   SIBINDEX=7 | OUTREG=XED_REG_YMM15*/
    xed3_operand_set_outreg(d, XED_REG_YMM15);
/*pacify the compiler */
(void)d;
    break;
case 16: /*(0, 0, 1) -> VEXDEST4=1 REXX=0   SIBINDEX=0 | OUTREG=XED_REG_YMM16*/
    xed3_operand_set_outreg(d, XED_REG_YMM16);
/*pacify the compiler */
(void)d;
    break;
case 17: /*(1, 0, 1) -> VEXDEST4=1 REXX=1   SIBINDEX=0 | OUTREG=XED_REG_YMM24*/
    xed3_operand_set_outreg(d, XED_REG_YMM24);
/*pacify the compiler */
(void)d;
    break;
case 18: /*(0, 1, 1) -> VEXDEST4=1 REXX=0   SIBINDEX=1 | OUTREG=XED_REG_YMM17*/
    xed3_operand_set_outreg(d, XED_REG_YMM17);
/*pacify the compiler */
(void)d;
    break;
case 19: /*(1, 1, 1) -> VEXDEST4=1 REXX=1   SIBINDEX=1 | OUTREG=XED_REG_YMM25*/
    xed3_operand_set_outreg(d, XED_REG_YMM25);
/*pacify the compiler */
(void)d;
    break;
case 20: /*(0, 2, 1) -> VEXDEST4=1 REXX=0   SIBINDEX=2 | OUTREG=XED_REG_YMM18*/
    xed3_operand_set_outreg(d, XED_REG_YMM18);
/*pacify the compiler */
(void)d;
    break;
case 21: /*(1, 2, 1) -> VEXDEST4=1 REXX=1   SIBINDEX=2 | OUTREG=XED_REG_YMM26*/
    xed3_operand_set_outreg(d, XED_REG_YMM26);
/*pacify the compiler */
(void)d;
    break;
case 22: /*(0, 3, 1) -> VEXDEST4=1 REXX=0   SIBINDEX=3 | OUTREG=XED_REG_YMM19*/
    xed3_operand_set_outreg(d, XED_REG_YMM19);
/*pacify the compiler */
(void)d;
    break;
case 23: /*(1, 3, 1) -> VEXDEST4=1 REXX=1   SIBINDEX=3 | OUTREG=XED_REG_YMM27*/
    xed3_operand_set_outreg(d, XED_REG_YMM27);
/*pacify the compiler */
(void)d;
    break;
case 24: /*(0, 4, 1) -> VEXDEST4=1 REXX=0   SIBINDEX=4 | OUTREG=XED_REG_YMM20*/
    xed3_operand_set_outreg(d, XED_REG_YMM20);
/*pacify the compiler */
(void)d;
    break;
case 25: /*(1, 4, 1) -> VEXDEST4=1 REXX=1   SIBINDEX=4 | OUTREG=XED_REG_YMM28*/
    xed3_operand_set_outreg(d, XED_REG_YMM28);
/*pacify the compiler */
(void)d;
    break;
case 26: /*(0, 5, 1) -> VEXDEST4=1 REXX=0   SIBINDEX=5 | OUTREG=XED_REG_YMM21*/
    xed3_operand_set_outreg(d, XED_REG_YMM21);
/*pacify the compiler */
(void)d;
    break;
case 27: /*(1, 5, 1) -> VEXDEST4=1 REXX=1   SIBINDEX=5 | OUTREG=XED_REG_YMM29*/
    xed3_operand_set_outreg(d, XED_REG_YMM29);
/*pacify the compiler */
(void)d;
    break;
case 28: /*(0, 6, 1) -> VEXDEST4=1 REXX=0   SIBINDEX=6 | OUTREG=XED_REG_YMM22*/
    xed3_operand_set_outreg(d, XED_REG_YMM22);
/*pacify the compiler */
(void)d;
    break;
case 29: /*(1, 6, 1) -> VEXDEST4=1 REXX=1   SIBINDEX=6 | OUTREG=XED_REG_YMM30*/
    xed3_operand_set_outreg(d, XED_REG_YMM30);
/*pacify the compiler */
(void)d;
    break;
case 30: /*(0, 7, 1) -> VEXDEST4=1 REXX=0   SIBINDEX=7 | OUTREG=XED_REG_YMM23*/
    xed3_operand_set_outreg(d, XED_REG_YMM23);
/*pacify the compiler */
(void)d;
    break;
case 31: /*(1, 7, 1) -> VEXDEST4=1 REXX=1   SIBINDEX=7 | OUTREG=XED_REG_YMM31*/
    xed3_operand_set_outreg(d, XED_REG_YMM31);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_UISA_VSIB_INDEX_XMM(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_rexx(d)) << ((0));
key += (xed3_operand_get_sibindex(d)) << ((1));
key += (xed3_operand_get_vexdest4(d)) << ((4));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0, 0) -> VEXDEST4=0 REXX=0   SIBINDEX=0 | OUTREG=XED_REG_XMM0*/
    xed3_operand_set_outreg(d, XED_REG_XMM0);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0, 0) -> VEXDEST4=0 REXX=1   SIBINDEX=0 | OUTREG=XED_REG_XMM8*/
    xed3_operand_set_outreg(d, XED_REG_XMM8);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(0, 1, 0) -> VEXDEST4=0 REXX=0   SIBINDEX=1 | OUTREG=XED_REG_XMM1*/
    xed3_operand_set_outreg(d, XED_REG_XMM1);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(1, 1, 0) -> VEXDEST4=0 REXX=1   SIBINDEX=1 | OUTREG=XED_REG_XMM9*/
    xed3_operand_set_outreg(d, XED_REG_XMM9);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(0, 2, 0) -> VEXDEST4=0 REXX=0   SIBINDEX=2 | OUTREG=XED_REG_XMM2*/
    xed3_operand_set_outreg(d, XED_REG_XMM2);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(1, 2, 0) -> VEXDEST4=0 REXX=1   SIBINDEX=2 | OUTREG=XED_REG_XMM10*/
    xed3_operand_set_outreg(d, XED_REG_XMM10);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(0, 3, 0) -> VEXDEST4=0 REXX=0   SIBINDEX=3 | OUTREG=XED_REG_XMM3*/
    xed3_operand_set_outreg(d, XED_REG_XMM3);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(1, 3, 0) -> VEXDEST4=0 REXX=1   SIBINDEX=3 | OUTREG=XED_REG_XMM11*/
    xed3_operand_set_outreg(d, XED_REG_XMM11);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 4, 0) -> VEXDEST4=0 REXX=0   SIBINDEX=4 | OUTREG=XED_REG_XMM4*/
    xed3_operand_set_outreg(d, XED_REG_XMM4);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 4, 0) -> VEXDEST4=0 REXX=1   SIBINDEX=4 | OUTREG=XED_REG_XMM12*/
    xed3_operand_set_outreg(d, XED_REG_XMM12);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(0, 5, 0) -> VEXDEST4=0 REXX=0   SIBINDEX=5 | OUTREG=XED_REG_XMM5*/
    xed3_operand_set_outreg(d, XED_REG_XMM5);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(1, 5, 0) -> VEXDEST4=0 REXX=1   SIBINDEX=5 | OUTREG=XED_REG_XMM13*/
    xed3_operand_set_outreg(d, XED_REG_XMM13);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(0, 6, 0) -> VEXDEST4=0 REXX=0   SIBINDEX=6 | OUTREG=XED_REG_XMM6*/
    xed3_operand_set_outreg(d, XED_REG_XMM6);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(1, 6, 0) -> VEXDEST4=0 REXX=1   SIBINDEX=6 | OUTREG=XED_REG_XMM14*/
    xed3_operand_set_outreg(d, XED_REG_XMM14);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(0, 7, 0) -> VEXDEST4=0 REXX=0   SIBINDEX=7 | OUTREG=XED_REG_XMM7*/
    xed3_operand_set_outreg(d, XED_REG_XMM7);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(1, 7, 0) -> VEXDEST4=0 REXX=1   SIBINDEX=7 | OUTREG=XED_REG_XMM15*/
    xed3_operand_set_outreg(d, XED_REG_XMM15);
/*pacify the compiler */
(void)d;
    break;
case 16: /*(0, 0, 1) -> VEXDEST4=1 REXX=0   SIBINDEX=0 | OUTREG=XED_REG_XMM16*/
    xed3_operand_set_outreg(d, XED_REG_XMM16);
/*pacify the compiler */
(void)d;
    break;
case 17: /*(1, 0, 1) -> VEXDEST4=1 REXX=1   SIBINDEX=0 | OUTREG=XED_REG_XMM24*/
    xed3_operand_set_outreg(d, XED_REG_XMM24);
/*pacify the compiler */
(void)d;
    break;
case 18: /*(0, 1, 1) -> VEXDEST4=1 REXX=0   SIBINDEX=1 | OUTREG=XED_REG_XMM17*/
    xed3_operand_set_outreg(d, XED_REG_XMM17);
/*pacify the compiler */
(void)d;
    break;
case 19: /*(1, 1, 1) -> VEXDEST4=1 REXX=1   SIBINDEX=1 | OUTREG=XED_REG_XMM25*/
    xed3_operand_set_outreg(d, XED_REG_XMM25);
/*pacify the compiler */
(void)d;
    break;
case 20: /*(0, 2, 1) -> VEXDEST4=1 REXX=0   SIBINDEX=2 | OUTREG=XED_REG_XMM18*/
    xed3_operand_set_outreg(d, XED_REG_XMM18);
/*pacify the compiler */
(void)d;
    break;
case 21: /*(1, 2, 1) -> VEXDEST4=1 REXX=1   SIBINDEX=2 | OUTREG=XED_REG_XMM26*/
    xed3_operand_set_outreg(d, XED_REG_XMM26);
/*pacify the compiler */
(void)d;
    break;
case 22: /*(0, 3, 1) -> VEXDEST4=1 REXX=0   SIBINDEX=3 | OUTREG=XED_REG_XMM19*/
    xed3_operand_set_outreg(d, XED_REG_XMM19);
/*pacify the compiler */
(void)d;
    break;
case 23: /*(1, 3, 1) -> VEXDEST4=1 REXX=1   SIBINDEX=3 | OUTREG=XED_REG_XMM27*/
    xed3_operand_set_outreg(d, XED_REG_XMM27);
/*pacify the compiler */
(void)d;
    break;
case 24: /*(0, 4, 1) -> VEXDEST4=1 REXX=0   SIBINDEX=4 | OUTREG=XED_REG_XMM20*/
    xed3_operand_set_outreg(d, XED_REG_XMM20);
/*pacify the compiler */
(void)d;
    break;
case 25: /*(1, 4, 1) -> VEXDEST4=1 REXX=1   SIBINDEX=4 | OUTREG=XED_REG_XMM28*/
    xed3_operand_set_outreg(d, XED_REG_XMM28);
/*pacify the compiler */
(void)d;
    break;
case 26: /*(0, 5, 1) -> VEXDEST4=1 REXX=0   SIBINDEX=5 | OUTREG=XED_REG_XMM21*/
    xed3_operand_set_outreg(d, XED_REG_XMM21);
/*pacify the compiler */
(void)d;
    break;
case 27: /*(1, 5, 1) -> VEXDEST4=1 REXX=1   SIBINDEX=5 | OUTREG=XED_REG_XMM29*/
    xed3_operand_set_outreg(d, XED_REG_XMM29);
/*pacify the compiler */
(void)d;
    break;
case 28: /*(0, 6, 1) -> VEXDEST4=1 REXX=0   SIBINDEX=6 | OUTREG=XED_REG_XMM22*/
    xed3_operand_set_outreg(d, XED_REG_XMM22);
/*pacify the compiler */
(void)d;
    break;
case 29: /*(1, 6, 1) -> VEXDEST4=1 REXX=1   SIBINDEX=6 | OUTREG=XED_REG_XMM30*/
    xed3_operand_set_outreg(d, XED_REG_XMM30);
/*pacify the compiler */
(void)d;
    break;
case 30: /*(0, 7, 1) -> VEXDEST4=1 REXX=0   SIBINDEX=7 | OUTREG=XED_REG_XMM23*/
    xed3_operand_set_outreg(d, XED_REG_XMM23);
/*pacify the compiler */
(void)d;
    break;
case 31: /*(1, 7, 1) -> VEXDEST4=1 REXX=1   SIBINDEX=7 | OUTREG=XED_REG_XMM31*/
    xed3_operand_set_outreg(d, XED_REG_XMM31);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_UISA_VSIB_BASE(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mod(d)) << ((0));
key += (xed3_operand_get_rexb(d)) << ((2));
key += (xed3_operand_get_rexb4(d)) << ((3));
key += (xed3_operand_get_sibbase(d)) << ((4));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0, 0, 0) -> REXB4=0 REXB=0 SIBBASE=0 | BASE0=ArAX() SEG0=FINAL_DSEG()*/
case 1: /*(1, 0, 0, 0) -> REXB4=0 REXB=0 SIBBASE=0 | BASE0=ArAX() SEG0=FINAL_DSEG()*/
case 2: /*(2, 0, 0, 0) -> REXB4=0 REXB=0 SIBBASE=0 | BASE0=ArAX() SEG0=FINAL_DSEG()*/
case 3: /*(3, 0, 0, 0) -> REXB4=0 REXB=0 SIBBASE=0 | BASE0=ArAX() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_ArAX(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 4: /*(0, 1, 0, 0) -> REXB4=0 REXB=1 SIBBASE=0 | BASE0=Ar8() SEG0=FINAL_DSEG()*/
case 5: /*(1, 1, 0, 0) -> REXB4=0 REXB=1 SIBBASE=0 | BASE0=Ar8() SEG0=FINAL_DSEG()*/
case 6: /*(2, 1, 0, 0) -> REXB4=0 REXB=1 SIBBASE=0 | BASE0=Ar8() SEG0=FINAL_DSEG()*/
case 7: /*(3, 1, 0, 0) -> REXB4=0 REXB=1 SIBBASE=0 | BASE0=Ar8() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar8(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 0, 1, 0) -> REXB4=1 REXB=0 SIBBASE=0 | BASE0=Ar16() SEG0=FINAL_DSEG()*/
case 9: /*(1, 0, 1, 0) -> REXB4=1 REXB=0 SIBBASE=0 | BASE0=Ar16() SEG0=FINAL_DSEG()*/
case 10: /*(2, 0, 1, 0) -> REXB4=1 REXB=0 SIBBASE=0 | BASE0=Ar16() SEG0=FINAL_DSEG()*/
case 11: /*(3, 0, 1, 0) -> REXB4=1 REXB=0 SIBBASE=0 | BASE0=Ar16() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar16(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 12: /*(0, 1, 1, 0) -> REXB4=1 REXB=1 SIBBASE=0 | BASE0=Ar24() SEG0=FINAL_DSEG()*/
case 13: /*(1, 1, 1, 0) -> REXB4=1 REXB=1 SIBBASE=0 | BASE0=Ar24() SEG0=FINAL_DSEG()*/
case 14: /*(2, 1, 1, 0) -> REXB4=1 REXB=1 SIBBASE=0 | BASE0=Ar24() SEG0=FINAL_DSEG()*/
case 15: /*(3, 1, 1, 0) -> REXB4=1 REXB=1 SIBBASE=0 | BASE0=Ar24() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar24(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 16: /*(0, 0, 0, 1) -> REXB4=0 REXB=0 SIBBASE=1 | BASE0=ArCX() SEG0=FINAL_DSEG()*/
case 17: /*(1, 0, 0, 1) -> REXB4=0 REXB=0 SIBBASE=1 | BASE0=ArCX() SEG0=FINAL_DSEG()*/
case 18: /*(2, 0, 0, 1) -> REXB4=0 REXB=0 SIBBASE=1 | BASE0=ArCX() SEG0=FINAL_DSEG()*/
case 19: /*(3, 0, 0, 1) -> REXB4=0 REXB=0 SIBBASE=1 | BASE0=ArCX() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_ArCX(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 20: /*(0, 1, 0, 1) -> REXB4=0 REXB=1 SIBBASE=1 | BASE0=Ar9() SEG0=FINAL_DSEG()*/
case 21: /*(1, 1, 0, 1) -> REXB4=0 REXB=1 SIBBASE=1 | BASE0=Ar9() SEG0=FINAL_DSEG()*/
case 22: /*(2, 1, 0, 1) -> REXB4=0 REXB=1 SIBBASE=1 | BASE0=Ar9() SEG0=FINAL_DSEG()*/
case 23: /*(3, 1, 0, 1) -> REXB4=0 REXB=1 SIBBASE=1 | BASE0=Ar9() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar9(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 24: /*(0, 0, 1, 1) -> REXB4=1 REXB=0 SIBBASE=1 | BASE0=Ar17() SEG0=FINAL_DSEG()*/
case 25: /*(1, 0, 1, 1) -> REXB4=1 REXB=0 SIBBASE=1 | BASE0=Ar17() SEG0=FINAL_DSEG()*/
case 26: /*(2, 0, 1, 1) -> REXB4=1 REXB=0 SIBBASE=1 | BASE0=Ar17() SEG0=FINAL_DSEG()*/
case 27: /*(3, 0, 1, 1) -> REXB4=1 REXB=0 SIBBASE=1 | BASE0=Ar17() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar17(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 28: /*(0, 1, 1, 1) -> REXB4=1 REXB=1 SIBBASE=1 | BASE0=Ar25() SEG0=FINAL_DSEG()*/
case 29: /*(1, 1, 1, 1) -> REXB4=1 REXB=1 SIBBASE=1 | BASE0=Ar25() SEG0=FINAL_DSEG()*/
case 30: /*(2, 1, 1, 1) -> REXB4=1 REXB=1 SIBBASE=1 | BASE0=Ar25() SEG0=FINAL_DSEG()*/
case 31: /*(3, 1, 1, 1) -> REXB4=1 REXB=1 SIBBASE=1 | BASE0=Ar25() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar25(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 32: /*(0, 0, 0, 2) -> REXB4=0 REXB=0 SIBBASE=2 | BASE0=ArDX() SEG0=FINAL_DSEG()*/
case 33: /*(1, 0, 0, 2) -> REXB4=0 REXB=0 SIBBASE=2 | BASE0=ArDX() SEG0=FINAL_DSEG()*/
case 34: /*(2, 0, 0, 2) -> REXB4=0 REXB=0 SIBBASE=2 | BASE0=ArDX() SEG0=FINAL_DSEG()*/
case 35: /*(3, 0, 0, 2) -> REXB4=0 REXB=0 SIBBASE=2 | BASE0=ArDX() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_ArDX(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 36: /*(0, 1, 0, 2) -> REXB4=0 REXB=1 SIBBASE=2 | BASE0=Ar10() SEG0=FINAL_DSEG()*/
case 37: /*(1, 1, 0, 2) -> REXB4=0 REXB=1 SIBBASE=2 | BASE0=Ar10() SEG0=FINAL_DSEG()*/
case 38: /*(2, 1, 0, 2) -> REXB4=0 REXB=1 SIBBASE=2 | BASE0=Ar10() SEG0=FINAL_DSEG()*/
case 39: /*(3, 1, 0, 2) -> REXB4=0 REXB=1 SIBBASE=2 | BASE0=Ar10() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar10(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 40: /*(0, 0, 1, 2) -> REXB4=1 REXB=0 SIBBASE=2 | BASE0=Ar18() SEG0=FINAL_DSEG()*/
case 41: /*(1, 0, 1, 2) -> REXB4=1 REXB=0 SIBBASE=2 | BASE0=Ar18() SEG0=FINAL_DSEG()*/
case 42: /*(2, 0, 1, 2) -> REXB4=1 REXB=0 SIBBASE=2 | BASE0=Ar18() SEG0=FINAL_DSEG()*/
case 43: /*(3, 0, 1, 2) -> REXB4=1 REXB=0 SIBBASE=2 | BASE0=Ar18() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar18(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 44: /*(0, 1, 1, 2) -> REXB4=1 REXB=1 SIBBASE=2 | BASE0=Ar26() SEG0=FINAL_DSEG()*/
case 45: /*(1, 1, 1, 2) -> REXB4=1 REXB=1 SIBBASE=2 | BASE0=Ar26() SEG0=FINAL_DSEG()*/
case 46: /*(2, 1, 1, 2) -> REXB4=1 REXB=1 SIBBASE=2 | BASE0=Ar26() SEG0=FINAL_DSEG()*/
case 47: /*(3, 1, 1, 2) -> REXB4=1 REXB=1 SIBBASE=2 | BASE0=Ar26() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar26(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 48: /*(0, 0, 0, 3) -> REXB4=0 REXB=0 SIBBASE=3 | BASE0=ArBX() SEG0=FINAL_DSEG()*/
case 49: /*(1, 0, 0, 3) -> REXB4=0 REXB=0 SIBBASE=3 | BASE0=ArBX() SEG0=FINAL_DSEG()*/
case 50: /*(2, 0, 0, 3) -> REXB4=0 REXB=0 SIBBASE=3 | BASE0=ArBX() SEG0=FINAL_DSEG()*/
case 51: /*(3, 0, 0, 3) -> REXB4=0 REXB=0 SIBBASE=3 | BASE0=ArBX() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_ArBX(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 52: /*(0, 1, 0, 3) -> REXB4=0 REXB=1 SIBBASE=3 | BASE0=Ar11() SEG0=FINAL_DSEG()*/
case 53: /*(1, 1, 0, 3) -> REXB4=0 REXB=1 SIBBASE=3 | BASE0=Ar11() SEG0=FINAL_DSEG()*/
case 54: /*(2, 1, 0, 3) -> REXB4=0 REXB=1 SIBBASE=3 | BASE0=Ar11() SEG0=FINAL_DSEG()*/
case 55: /*(3, 1, 0, 3) -> REXB4=0 REXB=1 SIBBASE=3 | BASE0=Ar11() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar11(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 56: /*(0, 0, 1, 3) -> REXB4=1 REXB=0 SIBBASE=3 | BASE0=Ar19() SEG0=FINAL_DSEG()*/
case 57: /*(1, 0, 1, 3) -> REXB4=1 REXB=0 SIBBASE=3 | BASE0=Ar19() SEG0=FINAL_DSEG()*/
case 58: /*(2, 0, 1, 3) -> REXB4=1 REXB=0 SIBBASE=3 | BASE0=Ar19() SEG0=FINAL_DSEG()*/
case 59: /*(3, 0, 1, 3) -> REXB4=1 REXB=0 SIBBASE=3 | BASE0=Ar19() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar19(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 60: /*(0, 1, 1, 3) -> REXB4=1 REXB=1 SIBBASE=3 | BASE0=Ar27() SEG0=FINAL_DSEG()*/
case 61: /*(1, 1, 1, 3) -> REXB4=1 REXB=1 SIBBASE=3 | BASE0=Ar27() SEG0=FINAL_DSEG()*/
case 62: /*(2, 1, 1, 3) -> REXB4=1 REXB=1 SIBBASE=3 | BASE0=Ar27() SEG0=FINAL_DSEG()*/
case 63: /*(3, 1, 1, 3) -> REXB4=1 REXB=1 SIBBASE=3 | BASE0=Ar27() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar27(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 64: /*(0, 0, 0, 4) -> REXB4=0 REXB=0 SIBBASE=4 | BASE0=ArSP() SEG0=FINAL_SSEG()*/
case 65: /*(1, 0, 0, 4) -> REXB4=0 REXB=0 SIBBASE=4 | BASE0=ArSP() SEG0=FINAL_SSEG()*/
case 66: /*(2, 0, 0, 4) -> REXB4=0 REXB=0 SIBBASE=4 | BASE0=ArSP() SEG0=FINAL_SSEG()*/
case 67: /*(3, 0, 0, 4) -> REXB4=0 REXB=0 SIBBASE=4 | BASE0=ArSP() SEG0=FINAL_SSEG()*/
    xed3_capture_nt_ArSP(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_SSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 68: /*(0, 1, 0, 4) -> REXB4=0 REXB=1 SIBBASE=4 | BASE0=Ar12() SEG0=FINAL_DSEG()*/
case 69: /*(1, 1, 0, 4) -> REXB4=0 REXB=1 SIBBASE=4 | BASE0=Ar12() SEG0=FINAL_DSEG()*/
case 70: /*(2, 1, 0, 4) -> REXB4=0 REXB=1 SIBBASE=4 | BASE0=Ar12() SEG0=FINAL_DSEG()*/
case 71: /*(3, 1, 0, 4) -> REXB4=0 REXB=1 SIBBASE=4 | BASE0=Ar12() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar12(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 72: /*(0, 0, 1, 4) -> REXB4=1 REXB=0 SIBBASE=4 | BASE0=Ar20() SEG0=FINAL_SSEG()*/
case 73: /*(1, 0, 1, 4) -> REXB4=1 REXB=0 SIBBASE=4 | BASE0=Ar20() SEG0=FINAL_SSEG()*/
case 74: /*(2, 0, 1, 4) -> REXB4=1 REXB=0 SIBBASE=4 | BASE0=Ar20() SEG0=FINAL_SSEG()*/
case 75: /*(3, 0, 1, 4) -> REXB4=1 REXB=0 SIBBASE=4 | BASE0=Ar20() SEG0=FINAL_SSEG()*/
    xed3_capture_nt_Ar20(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_SSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 76: /*(0, 1, 1, 4) -> REXB4=1 REXB=1 SIBBASE=4 | BASE0=Ar28() SEG0=FINAL_DSEG()*/
case 77: /*(1, 1, 1, 4) -> REXB4=1 REXB=1 SIBBASE=4 | BASE0=Ar28() SEG0=FINAL_DSEG()*/
case 78: /*(2, 1, 1, 4) -> REXB4=1 REXB=1 SIBBASE=4 | BASE0=Ar28() SEG0=FINAL_DSEG()*/
case 79: /*(3, 1, 1, 4) -> REXB4=1 REXB=1 SIBBASE=4 | BASE0=Ar28() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar28(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 80: /*(0, 0, 0, 5) -> REXB4=0 REXB=0 SIBBASE=5 MOD=0  MEMDISP32() | BASE0=XED_REG_INVALID SEG0=FINAL_DSEG()*/
    xed3_capture_nt_MEMDISP32(d);
    xed3_operand_set_base0(d, XED_REG_INVALID);
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 81: /*(1, 0, 0, 5) -> REXB4=0 REXB=0 SIBBASE=5 MOD!=0 | BASE0=ArBP() SEG0=FINAL_SSEG()*/
case 82: /*(2, 0, 0, 5) -> REXB4=0 REXB=0 SIBBASE=5 MOD!=0 | BASE0=ArBP() SEG0=FINAL_SSEG()*/
case 83: /*(3, 0, 0, 5) -> REXB4=0 REXB=0 SIBBASE=5 MOD!=0 | BASE0=ArBP() SEG0=FINAL_SSEG()*/
    xed3_capture_nt_ArBP(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_SSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 84: /*(0, 1, 0, 5) -> REXB4=0 REXB=1 SIBBASE=5 MOD=0  MEMDISP32() | BASE0=XED_REG_INVALID SEG0=FINAL_DSEG()*/
    xed3_capture_nt_MEMDISP32(d);
    xed3_operand_set_base0(d, XED_REG_INVALID);
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 85: /*(1, 1, 0, 5) -> REXB4=0 REXB=1 SIBBASE=5 MOD!=0 | BASE0=Ar13() SEG0=FINAL_DSEG()*/
case 86: /*(2, 1, 0, 5) -> REXB4=0 REXB=1 SIBBASE=5 MOD!=0 | BASE0=Ar13() SEG0=FINAL_DSEG()*/
case 87: /*(3, 1, 0, 5) -> REXB4=0 REXB=1 SIBBASE=5 MOD!=0 | BASE0=Ar13() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar13(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 88: /*(0, 0, 1, 5) -> REXB4=1 REXB=0 SIBBASE=5 MOD=0  MEMDISP32() | BASE0=XED_REG_INVALID SEG0=FINAL_DSEG()*/
    xed3_capture_nt_MEMDISP32(d);
    xed3_operand_set_base0(d, XED_REG_INVALID);
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 89: /*(1, 0, 1, 5) -> REXB4=1 REXB=0 SIBBASE=5 MOD!=0 | BASE0=Ar21() SEG0=FINAL_SSEG()*/
case 90: /*(2, 0, 1, 5) -> REXB4=1 REXB=0 SIBBASE=5 MOD!=0 | BASE0=Ar21() SEG0=FINAL_SSEG()*/
case 91: /*(3, 0, 1, 5) -> REXB4=1 REXB=0 SIBBASE=5 MOD!=0 | BASE0=Ar21() SEG0=FINAL_SSEG()*/
    xed3_capture_nt_Ar21(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_SSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 92: /*(0, 1, 1, 5) -> REXB4=1 REXB=1 SIBBASE=5 MOD=0  MEMDISP32() | BASE0=XED_REG_INVALID SEG0=FINAL_DSEG()*/
    xed3_capture_nt_MEMDISP32(d);
    xed3_operand_set_base0(d, XED_REG_INVALID);
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 93: /*(1, 1, 1, 5) -> REXB4=1 REXB=1 SIBBASE=5 MOD!=0 | BASE0=Ar29() SEG0=FINAL_DSEG()*/
case 94: /*(2, 1, 1, 5) -> REXB4=1 REXB=1 SIBBASE=5 MOD!=0 | BASE0=Ar29() SEG0=FINAL_DSEG()*/
case 95: /*(3, 1, 1, 5) -> REXB4=1 REXB=1 SIBBASE=5 MOD!=0 | BASE0=Ar29() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar29(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 96: /*(0, 0, 0, 6) -> REXB4=0 REXB=0 SIBBASE=6 | BASE0=ArSI() SEG0=FINAL_DSEG()*/
case 97: /*(1, 0, 0, 6) -> REXB4=0 REXB=0 SIBBASE=6 | BASE0=ArSI() SEG0=FINAL_DSEG()*/
case 98: /*(2, 0, 0, 6) -> REXB4=0 REXB=0 SIBBASE=6 | BASE0=ArSI() SEG0=FINAL_DSEG()*/
case 99: /*(3, 0, 0, 6) -> REXB4=0 REXB=0 SIBBASE=6 | BASE0=ArSI() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_ArSI(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 100: /*(0, 1, 0, 6) -> REXB4=0 REXB=1 SIBBASE=6 | BASE0=Ar14() SEG0=FINAL_DSEG()*/
case 101: /*(1, 1, 0, 6) -> REXB4=0 REXB=1 SIBBASE=6 | BASE0=Ar14() SEG0=FINAL_DSEG()*/
case 102: /*(2, 1, 0, 6) -> REXB4=0 REXB=1 SIBBASE=6 | BASE0=Ar14() SEG0=FINAL_DSEG()*/
case 103: /*(3, 1, 0, 6) -> REXB4=0 REXB=1 SIBBASE=6 | BASE0=Ar14() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar14(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 104: /*(0, 0, 1, 6) -> REXB4=1 REXB=0 SIBBASE=6 | BASE0=Ar22() SEG0=FINAL_DSEG()*/
case 105: /*(1, 0, 1, 6) -> REXB4=1 REXB=0 SIBBASE=6 | BASE0=Ar22() SEG0=FINAL_DSEG()*/
case 106: /*(2, 0, 1, 6) -> REXB4=1 REXB=0 SIBBASE=6 | BASE0=Ar22() SEG0=FINAL_DSEG()*/
case 107: /*(3, 0, 1, 6) -> REXB4=1 REXB=0 SIBBASE=6 | BASE0=Ar22() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar22(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 108: /*(0, 1, 1, 6) -> REXB4=1 REXB=1 SIBBASE=6 | BASE0=Ar30() SEG0=FINAL_DSEG()*/
case 109: /*(1, 1, 1, 6) -> REXB4=1 REXB=1 SIBBASE=6 | BASE0=Ar30() SEG0=FINAL_DSEG()*/
case 110: /*(2, 1, 1, 6) -> REXB4=1 REXB=1 SIBBASE=6 | BASE0=Ar30() SEG0=FINAL_DSEG()*/
case 111: /*(3, 1, 1, 6) -> REXB4=1 REXB=1 SIBBASE=6 | BASE0=Ar30() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar30(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 112: /*(0, 0, 0, 7) -> REXB4=0 REXB=0 SIBBASE=7 | BASE0=ArDI() SEG0=FINAL_DSEG()*/
case 113: /*(1, 0, 0, 7) -> REXB4=0 REXB=0 SIBBASE=7 | BASE0=ArDI() SEG0=FINAL_DSEG()*/
case 114: /*(2, 0, 0, 7) -> REXB4=0 REXB=0 SIBBASE=7 | BASE0=ArDI() SEG0=FINAL_DSEG()*/
case 115: /*(3, 0, 0, 7) -> REXB4=0 REXB=0 SIBBASE=7 | BASE0=ArDI() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_ArDI(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 116: /*(0, 1, 0, 7) -> REXB4=0 REXB=1 SIBBASE=7 | BASE0=Ar15() SEG0=FINAL_DSEG()*/
case 117: /*(1, 1, 0, 7) -> REXB4=0 REXB=1 SIBBASE=7 | BASE0=Ar15() SEG0=FINAL_DSEG()*/
case 118: /*(2, 1, 0, 7) -> REXB4=0 REXB=1 SIBBASE=7 | BASE0=Ar15() SEG0=FINAL_DSEG()*/
case 119: /*(3, 1, 0, 7) -> REXB4=0 REXB=1 SIBBASE=7 | BASE0=Ar15() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar15(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 120: /*(0, 0, 1, 7) -> REXB4=1 REXB=0 SIBBASE=7 | BASE0=Ar23() SEG0=FINAL_DSEG()*/
case 121: /*(1, 0, 1, 7) -> REXB4=1 REXB=0 SIBBASE=7 | BASE0=Ar23() SEG0=FINAL_DSEG()*/
case 122: /*(2, 0, 1, 7) -> REXB4=1 REXB=0 SIBBASE=7 | BASE0=Ar23() SEG0=FINAL_DSEG()*/
case 123: /*(3, 0, 1, 7) -> REXB4=1 REXB=0 SIBBASE=7 | BASE0=Ar23() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar23(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
case 124: /*(0, 1, 1, 7) -> REXB4=1 REXB=1 SIBBASE=7 | BASE0=Ar31() SEG0=FINAL_DSEG()*/
case 125: /*(1, 1, 1, 7) -> REXB4=1 REXB=1 SIBBASE=7 | BASE0=Ar31() SEG0=FINAL_DSEG()*/
case 126: /*(2, 1, 1, 7) -> REXB4=1 REXB=1 SIBBASE=7 | BASE0=Ar31() SEG0=FINAL_DSEG()*/
case 127: /*(3, 1, 1, 7) -> REXB4=1 REXB=1 SIBBASE=7 | BASE0=Ar31() SEG0=FINAL_DSEG()*/
    xed3_capture_nt_Ar31(d);
    xed3_operand_set_base0(d, xed3_operand_get_outreg(d));
    xed3_capture_nt_FINAL_DSEG(d);
    xed3_operand_set_seg0(d, xed3_operand_get_outreg(d));
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_MASK1(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mask(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> MASK=0x0  | OUTREG=XED_REG_K0*/
    xed3_operand_set_outreg(d, XED_REG_K0);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> MASK=0x1  | OUTREG=XED_REG_K1*/
    xed3_operand_set_outreg(d, XED_REG_K1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> MASK=0x2  | OUTREG=XED_REG_K2*/
    xed3_operand_set_outreg(d, XED_REG_K2);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> MASK=0x3  | OUTREG=XED_REG_K3*/
    xed3_operand_set_outreg(d, XED_REG_K3);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4,) -> MASK=0x4  | OUTREG=XED_REG_K4*/
    xed3_operand_set_outreg(d, XED_REG_K4);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5,) -> MASK=0x5  | OUTREG=XED_REG_K5*/
    xed3_operand_set_outreg(d, XED_REG_K5);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6,) -> MASK=0x6  | OUTREG=XED_REG_K6*/
    xed3_operand_set_outreg(d, XED_REG_K6);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7,) -> MASK=0x7  | OUTREG=XED_REG_K7*/
    xed3_operand_set_outreg(d, XED_REG_K7);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_MASKNOT0(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mask(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> MASK=0x0  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> MASK=0x1  | OUTREG=XED_REG_K1*/
    xed3_operand_set_outreg(d, XED_REG_K1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> MASK=0x2  | OUTREG=XED_REG_K2*/
    xed3_operand_set_outreg(d, XED_REG_K2);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> MASK=0x3  | OUTREG=XED_REG_K3*/
    xed3_operand_set_outreg(d, XED_REG_K3);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4,) -> MASK=0x4  | OUTREG=XED_REG_K4*/
    xed3_operand_set_outreg(d, XED_REG_K4);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5,) -> MASK=0x5  | OUTREG=XED_REG_K5*/
    xed3_operand_set_outreg(d, XED_REG_K5);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6,) -> MASK=0x6  | OUTREG=XED_REG_K6*/
    xed3_operand_set_outreg(d, XED_REG_K6);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7,) -> MASK=0x7  | OUTREG=XED_REG_K7*/
    xed3_operand_set_outreg(d, XED_REG_K7);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_MASK_R(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_reg(d)) << ((0));
key += (xed3_operand_get_rexr(d)) << ((3));
key += (xed3_operand_get_rexr4(d)) << ((4));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0, 0) -> REXR4=0 REXR=0 REG=0x0 | OUTREG=XED_REG_K0*/
    xed3_operand_set_outreg(d, XED_REG_K0);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0, 0) -> REXR4=0 REXR=0 REG=0x1 | OUTREG=XED_REG_K1*/
    xed3_operand_set_outreg(d, XED_REG_K1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2, 0, 0) -> REXR4=0 REXR=0 REG=0x2 | OUTREG=XED_REG_K2*/
    xed3_operand_set_outreg(d, XED_REG_K2);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3, 0, 0) -> REXR4=0 REXR=0 REG=0x3 | OUTREG=XED_REG_K3*/
    xed3_operand_set_outreg(d, XED_REG_K3);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4, 0, 0) -> REXR4=0 REXR=0 REG=0x4 | OUTREG=XED_REG_K4*/
    xed3_operand_set_outreg(d, XED_REG_K4);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5, 0, 0) -> REXR4=0 REXR=0 REG=0x5 | OUTREG=XED_REG_K5*/
    xed3_operand_set_outreg(d, XED_REG_K5);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6, 0, 0) -> REXR4=0 REXR=0 REG=0x6 | OUTREG=XED_REG_K6*/
    xed3_operand_set_outreg(d, XED_REG_K6);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7, 0, 0) -> REXR4=0 REXR=0 REG=0x7 | OUTREG=XED_REG_K7*/
    xed3_operand_set_outreg(d, XED_REG_K7);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_MASK_B(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_rm(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> RM=0x0 | OUTREG=XED_REG_K0*/
    xed3_operand_set_outreg(d, XED_REG_K0);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> RM=0x1 | OUTREG=XED_REG_K1*/
    xed3_operand_set_outreg(d, XED_REG_K1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> RM=0x2 | OUTREG=XED_REG_K2*/
    xed3_operand_set_outreg(d, XED_REG_K2);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> RM=0x3 | OUTREG=XED_REG_K3*/
    xed3_operand_set_outreg(d, XED_REG_K3);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4,) -> RM=0x4 | OUTREG=XED_REG_K4*/
    xed3_operand_set_outreg(d, XED_REG_K4);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5,) -> RM=0x5 | OUTREG=XED_REG_K5*/
    xed3_operand_set_outreg(d, XED_REG_K5);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6,) -> RM=0x6 | OUTREG=XED_REG_K6*/
    xed3_operand_set_outreg(d, XED_REG_K6);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7,) -> RM=0x7 | OUTREG=XED_REG_K7*/
    xed3_operand_set_outreg(d, XED_REG_K7);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_MASK_N(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mode(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> mode16  | OUTREG=MASK_N32()*/
    xed3_capture_nt_MASK_N32(d);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> mode32  | OUTREG=MASK_N32()*/
    xed3_capture_nt_MASK_N32(d);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> mode64  | OUTREG=MASK_N64()*/
    xed3_capture_nt_MASK_N64(d);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_MASK_N64(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_vexdest210(d)) << ((0));
key += (xed3_operand_get_vexdest3(d)) << ((3));
/* now switch code..*/
switch(key) {
case 8: /*(0, 1) -> VEXDEST3=1 VEXDEST210=0x0 | OUTREG=XED_REG_K7*/
    xed3_operand_set_outreg(d, XED_REG_K7);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 1) -> VEXDEST3=1 VEXDEST210=0x1 | OUTREG=XED_REG_K6*/
    xed3_operand_set_outreg(d, XED_REG_K6);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(2, 1) -> VEXDEST3=1 VEXDEST210=0x2 | OUTREG=XED_REG_K5*/
    xed3_operand_set_outreg(d, XED_REG_K5);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(3, 1) -> VEXDEST3=1 VEXDEST210=0x3 | OUTREG=XED_REG_K4*/
    xed3_operand_set_outreg(d, XED_REG_K4);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(4, 1) -> VEXDEST3=1 VEXDEST210=0x4 | OUTREG=XED_REG_K3*/
    xed3_operand_set_outreg(d, XED_REG_K3);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(5, 1) -> VEXDEST3=1 VEXDEST210=0x5 | OUTREG=XED_REG_K2*/
    xed3_operand_set_outreg(d, XED_REG_K2);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(6, 1) -> VEXDEST3=1 VEXDEST210=0x6 | OUTREG=XED_REG_K1*/
    xed3_operand_set_outreg(d, XED_REG_K1);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(7, 1) -> VEXDEST3=1 VEXDEST210=0x7 | OUTREG=XED_REG_K0*/
    xed3_operand_set_outreg(d, XED_REG_K0);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_MASK_N32(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_vexdest210(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> VEXDEST210=0x0 | OUTREG=XED_REG_K7*/
    xed3_operand_set_outreg(d, XED_REG_K7);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> VEXDEST210=0x1 | OUTREG=XED_REG_K6*/
    xed3_operand_set_outreg(d, XED_REG_K6);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> VEXDEST210=0x2 | OUTREG=XED_REG_K5*/
    xed3_operand_set_outreg(d, XED_REG_K5);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> VEXDEST210=0x3 | OUTREG=XED_REG_K4*/
    xed3_operand_set_outreg(d, XED_REG_K4);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4,) -> VEXDEST210=0x4 | OUTREG=XED_REG_K3*/
    xed3_operand_set_outreg(d, XED_REG_K3);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5,) -> VEXDEST210=0x5 | OUTREG=XED_REG_K2*/
    xed3_operand_set_outreg(d, XED_REG_K2);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6,) -> VEXDEST210=0x6 | OUTREG=XED_REG_K1*/
    xed3_operand_set_outreg(d, XED_REG_K1);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7,) -> VEXDEST210=0x7 | OUTREG=XED_REG_K0*/
    xed3_operand_set_outreg(d, XED_REG_K0);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_XMM_R3(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mode(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> mode16 | OUTREG=XMM_R3_32()*/
    xed3_capture_nt_XMM_R3_32(d);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> mode32 | OUTREG=XMM_R3_32()*/
    xed3_capture_nt_XMM_R3_32(d);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> mode64 | OUTREG=XMM_R3_64()*/
    xed3_capture_nt_XMM_R3_64(d);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_XMM_R3_32(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_reg(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> REG=0 | OUTREG=XED_REG_XMM0*/
    xed3_operand_set_outreg(d, XED_REG_XMM0);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> REG=1 | OUTREG=XED_REG_XMM1*/
    xed3_operand_set_outreg(d, XED_REG_XMM1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> REG=2 | OUTREG=XED_REG_XMM2*/
    xed3_operand_set_outreg(d, XED_REG_XMM2);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> REG=3 | OUTREG=XED_REG_XMM3*/
    xed3_operand_set_outreg(d, XED_REG_XMM3);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4,) -> REG=4 | OUTREG=XED_REG_XMM4*/
    xed3_operand_set_outreg(d, XED_REG_XMM4);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5,) -> REG=5 | OUTREG=XED_REG_XMM5*/
    xed3_operand_set_outreg(d, XED_REG_XMM5);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6,) -> REG=6 | OUTREG=XED_REG_XMM6*/
    xed3_operand_set_outreg(d, XED_REG_XMM6);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7,) -> REG=7 | OUTREG=XED_REG_XMM7*/
    xed3_operand_set_outreg(d, XED_REG_XMM7);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_XMM_R3_64(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_reg(d)) << ((0));
key += (xed3_operand_get_rexr(d)) << ((3));
key += (xed3_operand_get_rexr4(d)) << ((4));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0, 0) -> REXR4=0 REXR=0 REG=0 | OUTREG=XED_REG_XMM0*/
    xed3_operand_set_outreg(d, XED_REG_XMM0);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0, 0) -> REXR4=0 REXR=0 REG=1 | OUTREG=XED_REG_XMM1*/
    xed3_operand_set_outreg(d, XED_REG_XMM1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2, 0, 0) -> REXR4=0 REXR=0 REG=2 | OUTREG=XED_REG_XMM2*/
    xed3_operand_set_outreg(d, XED_REG_XMM2);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3, 0, 0) -> REXR4=0 REXR=0 REG=3 | OUTREG=XED_REG_XMM3*/
    xed3_operand_set_outreg(d, XED_REG_XMM3);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4, 0, 0) -> REXR4=0 REXR=0 REG=4 | OUTREG=XED_REG_XMM4*/
    xed3_operand_set_outreg(d, XED_REG_XMM4);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5, 0, 0) -> REXR4=0 REXR=0 REG=5 | OUTREG=XED_REG_XMM5*/
    xed3_operand_set_outreg(d, XED_REG_XMM5);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6, 0, 0) -> REXR4=0 REXR=0 REG=6 | OUTREG=XED_REG_XMM6*/
    xed3_operand_set_outreg(d, XED_REG_XMM6);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7, 0, 0) -> REXR4=0 REXR=0 REG=7 | OUTREG=XED_REG_XMM7*/
    xed3_operand_set_outreg(d, XED_REG_XMM7);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 1, 0) -> REXR4=0 REXR=1 REG=0 | OUTREG=XED_REG_XMM8*/
    xed3_operand_set_outreg(d, XED_REG_XMM8);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 1, 0) -> REXR4=0 REXR=1 REG=1 | OUTREG=XED_REG_XMM9*/
    xed3_operand_set_outreg(d, XED_REG_XMM9);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(2, 1, 0) -> REXR4=0 REXR=1 REG=2 | OUTREG=XED_REG_XMM10*/
    xed3_operand_set_outreg(d, XED_REG_XMM10);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(3, 1, 0) -> REXR4=0 REXR=1 REG=3 | OUTREG=XED_REG_XMM11*/
    xed3_operand_set_outreg(d, XED_REG_XMM11);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(4, 1, 0) -> REXR4=0 REXR=1 REG=4 | OUTREG=XED_REG_XMM12*/
    xed3_operand_set_outreg(d, XED_REG_XMM12);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(5, 1, 0) -> REXR4=0 REXR=1 REG=5 | OUTREG=XED_REG_XMM13*/
    xed3_operand_set_outreg(d, XED_REG_XMM13);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(6, 1, 0) -> REXR4=0 REXR=1 REG=6 | OUTREG=XED_REG_XMM14*/
    xed3_operand_set_outreg(d, XED_REG_XMM14);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(7, 1, 0) -> REXR4=0 REXR=1 REG=7 | OUTREG=XED_REG_XMM15*/
    xed3_operand_set_outreg(d, XED_REG_XMM15);
/*pacify the compiler */
(void)d;
    break;
case 16: /*(0, 0, 1) -> REXR4=1 REXR=0 REG=0 | OUTREG=XED_REG_XMM16*/
    xed3_operand_set_outreg(d, XED_REG_XMM16);
/*pacify the compiler */
(void)d;
    break;
case 17: /*(1, 0, 1) -> REXR4=1 REXR=0 REG=1 | OUTREG=XED_REG_XMM17*/
    xed3_operand_set_outreg(d, XED_REG_XMM17);
/*pacify the compiler */
(void)d;
    break;
case 18: /*(2, 0, 1) -> REXR4=1 REXR=0 REG=2 | OUTREG=XED_REG_XMM18*/
    xed3_operand_set_outreg(d, XED_REG_XMM18);
/*pacify the compiler */
(void)d;
    break;
case 19: /*(3, 0, 1) -> REXR4=1 REXR=0 REG=3 | OUTREG=XED_REG_XMM19*/
    xed3_operand_set_outreg(d, XED_REG_XMM19);
/*pacify the compiler */
(void)d;
    break;
case 20: /*(4, 0, 1) -> REXR4=1 REXR=0 REG=4 | OUTREG=XED_REG_XMM20*/
    xed3_operand_set_outreg(d, XED_REG_XMM20);
/*pacify the compiler */
(void)d;
    break;
case 21: /*(5, 0, 1) -> REXR4=1 REXR=0 REG=5 | OUTREG=XED_REG_XMM21*/
    xed3_operand_set_outreg(d, XED_REG_XMM21);
/*pacify the compiler */
(void)d;
    break;
case 22: /*(6, 0, 1) -> REXR4=1 REXR=0 REG=6 | OUTREG=XED_REG_XMM22*/
    xed3_operand_set_outreg(d, XED_REG_XMM22);
/*pacify the compiler */
(void)d;
    break;
case 23: /*(7, 0, 1) -> REXR4=1 REXR=0 REG=7 | OUTREG=XED_REG_XMM23*/
    xed3_operand_set_outreg(d, XED_REG_XMM23);
/*pacify the compiler */
(void)d;
    break;
case 24: /*(0, 1, 1) -> REXR4=1 REXR=1 REG=0 | OUTREG=XED_REG_XMM24*/
    xed3_operand_set_outreg(d, XED_REG_XMM24);
/*pacify the compiler */
(void)d;
    break;
case 25: /*(1, 1, 1) -> REXR4=1 REXR=1 REG=1 | OUTREG=XED_REG_XMM25*/
    xed3_operand_set_outreg(d, XED_REG_XMM25);
/*pacify the compiler */
(void)d;
    break;
case 26: /*(2, 1, 1) -> REXR4=1 REXR=1 REG=2 | OUTREG=XED_REG_XMM26*/
    xed3_operand_set_outreg(d, XED_REG_XMM26);
/*pacify the compiler */
(void)d;
    break;
case 27: /*(3, 1, 1) -> REXR4=1 REXR=1 REG=3 | OUTREG=XED_REG_XMM27*/
    xed3_operand_set_outreg(d, XED_REG_XMM27);
/*pacify the compiler */
(void)d;
    break;
case 28: /*(4, 1, 1) -> REXR4=1 REXR=1 REG=4 | OUTREG=XED_REG_XMM28*/
    xed3_operand_set_outreg(d, XED_REG_XMM28);
/*pacify the compiler */
(void)d;
    break;
case 29: /*(5, 1, 1) -> REXR4=1 REXR=1 REG=5 | OUTREG=XED_REG_XMM29*/
    xed3_operand_set_outreg(d, XED_REG_XMM29);
/*pacify the compiler */
(void)d;
    break;
case 30: /*(6, 1, 1) -> REXR4=1 REXR=1 REG=6 | OUTREG=XED_REG_XMM30*/
    xed3_operand_set_outreg(d, XED_REG_XMM30);
/*pacify the compiler */
(void)d;
    break;
case 31: /*(7, 1, 1) -> REXR4=1 REXR=1 REG=7 | OUTREG=XED_REG_XMM31*/
    xed3_operand_set_outreg(d, XED_REG_XMM31);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_YMM_R3(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mode(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> mode16 | OUTREG=YMM_R3_32()*/
    xed3_capture_nt_YMM_R3_32(d);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> mode32 | OUTREG=YMM_R3_32()*/
    xed3_capture_nt_YMM_R3_32(d);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> mode64 | OUTREG=YMM_R3_64()*/
    xed3_capture_nt_YMM_R3_64(d);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_YMM_R3_32(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_reg(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> REG=0 | OUTREG=XED_REG_YMM0*/
    xed3_operand_set_outreg(d, XED_REG_YMM0);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> REG=1 | OUTREG=XED_REG_YMM1*/
    xed3_operand_set_outreg(d, XED_REG_YMM1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> REG=2 | OUTREG=XED_REG_YMM2*/
    xed3_operand_set_outreg(d, XED_REG_YMM2);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> REG=3 | OUTREG=XED_REG_YMM3*/
    xed3_operand_set_outreg(d, XED_REG_YMM3);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4,) -> REG=4 | OUTREG=XED_REG_YMM4*/
    xed3_operand_set_outreg(d, XED_REG_YMM4);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5,) -> REG=5 | OUTREG=XED_REG_YMM5*/
    xed3_operand_set_outreg(d, XED_REG_YMM5);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6,) -> REG=6 | OUTREG=XED_REG_YMM6*/
    xed3_operand_set_outreg(d, XED_REG_YMM6);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7,) -> REG=7 | OUTREG=XED_REG_YMM7*/
    xed3_operand_set_outreg(d, XED_REG_YMM7);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_YMM_R3_64(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_reg(d)) << ((0));
key += (xed3_operand_get_rexr(d)) << ((3));
key += (xed3_operand_get_rexr4(d)) << ((4));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0, 0) -> REXR4=0 REXR=0 REG=0 | OUTREG=XED_REG_YMM0*/
    xed3_operand_set_outreg(d, XED_REG_YMM0);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0, 0) -> REXR4=0 REXR=0 REG=1 | OUTREG=XED_REG_YMM1*/
    xed3_operand_set_outreg(d, XED_REG_YMM1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2, 0, 0) -> REXR4=0 REXR=0 REG=2 | OUTREG=XED_REG_YMM2*/
    xed3_operand_set_outreg(d, XED_REG_YMM2);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3, 0, 0) -> REXR4=0 REXR=0 REG=3 | OUTREG=XED_REG_YMM3*/
    xed3_operand_set_outreg(d, XED_REG_YMM3);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4, 0, 0) -> REXR4=0 REXR=0 REG=4 | OUTREG=XED_REG_YMM4*/
    xed3_operand_set_outreg(d, XED_REG_YMM4);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5, 0, 0) -> REXR4=0 REXR=0 REG=5 | OUTREG=XED_REG_YMM5*/
    xed3_operand_set_outreg(d, XED_REG_YMM5);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6, 0, 0) -> REXR4=0 REXR=0 REG=6 | OUTREG=XED_REG_YMM6*/
    xed3_operand_set_outreg(d, XED_REG_YMM6);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7, 0, 0) -> REXR4=0 REXR=0 REG=7 | OUTREG=XED_REG_YMM7*/
    xed3_operand_set_outreg(d, XED_REG_YMM7);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 1, 0) -> REXR4=0 REXR=1 REG=0 | OUTREG=XED_REG_YMM8*/
    xed3_operand_set_outreg(d, XED_REG_YMM8);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 1, 0) -> REXR4=0 REXR=1 REG=1 | OUTREG=XED_REG_YMM9*/
    xed3_operand_set_outreg(d, XED_REG_YMM9);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(2, 1, 0) -> REXR4=0 REXR=1 REG=2 | OUTREG=XED_REG_YMM10*/
    xed3_operand_set_outreg(d, XED_REG_YMM10);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(3, 1, 0) -> REXR4=0 REXR=1 REG=3 | OUTREG=XED_REG_YMM11*/
    xed3_operand_set_outreg(d, XED_REG_YMM11);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(4, 1, 0) -> REXR4=0 REXR=1 REG=4 | OUTREG=XED_REG_YMM12*/
    xed3_operand_set_outreg(d, XED_REG_YMM12);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(5, 1, 0) -> REXR4=0 REXR=1 REG=5 | OUTREG=XED_REG_YMM13*/
    xed3_operand_set_outreg(d, XED_REG_YMM13);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(6, 1, 0) -> REXR4=0 REXR=1 REG=6 | OUTREG=XED_REG_YMM14*/
    xed3_operand_set_outreg(d, XED_REG_YMM14);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(7, 1, 0) -> REXR4=0 REXR=1 REG=7 | OUTREG=XED_REG_YMM15*/
    xed3_operand_set_outreg(d, XED_REG_YMM15);
/*pacify the compiler */
(void)d;
    break;
case 16: /*(0, 0, 1) -> REXR4=1 REXR=0 REG=0 | OUTREG=XED_REG_YMM16*/
    xed3_operand_set_outreg(d, XED_REG_YMM16);
/*pacify the compiler */
(void)d;
    break;
case 17: /*(1, 0, 1) -> REXR4=1 REXR=0 REG=1 | OUTREG=XED_REG_YMM17*/
    xed3_operand_set_outreg(d, XED_REG_YMM17);
/*pacify the compiler */
(void)d;
    break;
case 18: /*(2, 0, 1) -> REXR4=1 REXR=0 REG=2 | OUTREG=XED_REG_YMM18*/
    xed3_operand_set_outreg(d, XED_REG_YMM18);
/*pacify the compiler */
(void)d;
    break;
case 19: /*(3, 0, 1) -> REXR4=1 REXR=0 REG=3 | OUTREG=XED_REG_YMM19*/
    xed3_operand_set_outreg(d, XED_REG_YMM19);
/*pacify the compiler */
(void)d;
    break;
case 20: /*(4, 0, 1) -> REXR4=1 REXR=0 REG=4 | OUTREG=XED_REG_YMM20*/
    xed3_operand_set_outreg(d, XED_REG_YMM20);
/*pacify the compiler */
(void)d;
    break;
case 21: /*(5, 0, 1) -> REXR4=1 REXR=0 REG=5 | OUTREG=XED_REG_YMM21*/
    xed3_operand_set_outreg(d, XED_REG_YMM21);
/*pacify the compiler */
(void)d;
    break;
case 22: /*(6, 0, 1) -> REXR4=1 REXR=0 REG=6 | OUTREG=XED_REG_YMM22*/
    xed3_operand_set_outreg(d, XED_REG_YMM22);
/*pacify the compiler */
(void)d;
    break;
case 23: /*(7, 0, 1) -> REXR4=1 REXR=0 REG=7 | OUTREG=XED_REG_YMM23*/
    xed3_operand_set_outreg(d, XED_REG_YMM23);
/*pacify the compiler */
(void)d;
    break;
case 24: /*(0, 1, 1) -> REXR4=1 REXR=1 REG=0 | OUTREG=XED_REG_YMM24*/
    xed3_operand_set_outreg(d, XED_REG_YMM24);
/*pacify the compiler */
(void)d;
    break;
case 25: /*(1, 1, 1) -> REXR4=1 REXR=1 REG=1 | OUTREG=XED_REG_YMM25*/
    xed3_operand_set_outreg(d, XED_REG_YMM25);
/*pacify the compiler */
(void)d;
    break;
case 26: /*(2, 1, 1) -> REXR4=1 REXR=1 REG=2 | OUTREG=XED_REG_YMM26*/
    xed3_operand_set_outreg(d, XED_REG_YMM26);
/*pacify the compiler */
(void)d;
    break;
case 27: /*(3, 1, 1) -> REXR4=1 REXR=1 REG=3 | OUTREG=XED_REG_YMM27*/
    xed3_operand_set_outreg(d, XED_REG_YMM27);
/*pacify the compiler */
(void)d;
    break;
case 28: /*(4, 1, 1) -> REXR4=1 REXR=1 REG=4 | OUTREG=XED_REG_YMM28*/
    xed3_operand_set_outreg(d, XED_REG_YMM28);
/*pacify the compiler */
(void)d;
    break;
case 29: /*(5, 1, 1) -> REXR4=1 REXR=1 REG=5 | OUTREG=XED_REG_YMM29*/
    xed3_operand_set_outreg(d, XED_REG_YMM29);
/*pacify the compiler */
(void)d;
    break;
case 30: /*(6, 1, 1) -> REXR4=1 REXR=1 REG=6 | OUTREG=XED_REG_YMM30*/
    xed3_operand_set_outreg(d, XED_REG_YMM30);
/*pacify the compiler */
(void)d;
    break;
case 31: /*(7, 1, 1) -> REXR4=1 REXR=1 REG=7 | OUTREG=XED_REG_YMM31*/
    xed3_operand_set_outreg(d, XED_REG_YMM31);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_ZMM_R3(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mode(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> mode16 | OUTREG=ZMM_R3_32()*/
    xed3_capture_nt_ZMM_R3_32(d);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> mode32 | OUTREG=ZMM_R3_32()*/
    xed3_capture_nt_ZMM_R3_32(d);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> mode64 | OUTREG=ZMM_R3_64()*/
    xed3_capture_nt_ZMM_R3_64(d);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_ZMM_R3_32(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_reg(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> REG=0 | OUTREG=XED_REG_ZMM0*/
    xed3_operand_set_outreg(d, XED_REG_ZMM0);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> REG=1 | OUTREG=XED_REG_ZMM1*/
    xed3_operand_set_outreg(d, XED_REG_ZMM1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> REG=2 | OUTREG=XED_REG_ZMM2*/
    xed3_operand_set_outreg(d, XED_REG_ZMM2);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> REG=3 | OUTREG=XED_REG_ZMM3*/
    xed3_operand_set_outreg(d, XED_REG_ZMM3);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4,) -> REG=4 | OUTREG=XED_REG_ZMM4*/
    xed3_operand_set_outreg(d, XED_REG_ZMM4);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5,) -> REG=5 | OUTREG=XED_REG_ZMM5*/
    xed3_operand_set_outreg(d, XED_REG_ZMM5);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6,) -> REG=6 | OUTREG=XED_REG_ZMM6*/
    xed3_operand_set_outreg(d, XED_REG_ZMM6);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7,) -> REG=7 | OUTREG=XED_REG_ZMM7*/
    xed3_operand_set_outreg(d, XED_REG_ZMM7);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_ZMM_R3_64(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_reg(d)) << ((0));
key += (xed3_operand_get_rexr(d)) << ((3));
key += (xed3_operand_get_rexr4(d)) << ((4));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0, 0) -> REXR4=0 REXR=0 REG=0 | OUTREG=XED_REG_ZMM0*/
    xed3_operand_set_outreg(d, XED_REG_ZMM0);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0, 0) -> REXR4=0 REXR=0 REG=1 | OUTREG=XED_REG_ZMM1*/
    xed3_operand_set_outreg(d, XED_REG_ZMM1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2, 0, 0) -> REXR4=0 REXR=0 REG=2 | OUTREG=XED_REG_ZMM2*/
    xed3_operand_set_outreg(d, XED_REG_ZMM2);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3, 0, 0) -> REXR4=0 REXR=0 REG=3 | OUTREG=XED_REG_ZMM3*/
    xed3_operand_set_outreg(d, XED_REG_ZMM3);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4, 0, 0) -> REXR4=0 REXR=0 REG=4 | OUTREG=XED_REG_ZMM4*/
    xed3_operand_set_outreg(d, XED_REG_ZMM4);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5, 0, 0) -> REXR4=0 REXR=0 REG=5 | OUTREG=XED_REG_ZMM5*/
    xed3_operand_set_outreg(d, XED_REG_ZMM5);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6, 0, 0) -> REXR4=0 REXR=0 REG=6 | OUTREG=XED_REG_ZMM6*/
    xed3_operand_set_outreg(d, XED_REG_ZMM6);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7, 0, 0) -> REXR4=0 REXR=0 REG=7 | OUTREG=XED_REG_ZMM7*/
    xed3_operand_set_outreg(d, XED_REG_ZMM7);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 1, 0) -> REXR4=0 REXR=1 REG=0 | OUTREG=XED_REG_ZMM8*/
    xed3_operand_set_outreg(d, XED_REG_ZMM8);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 1, 0) -> REXR4=0 REXR=1 REG=1 | OUTREG=XED_REG_ZMM9*/
    xed3_operand_set_outreg(d, XED_REG_ZMM9);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(2, 1, 0) -> REXR4=0 REXR=1 REG=2 | OUTREG=XED_REG_ZMM10*/
    xed3_operand_set_outreg(d, XED_REG_ZMM10);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(3, 1, 0) -> REXR4=0 REXR=1 REG=3 | OUTREG=XED_REG_ZMM11*/
    xed3_operand_set_outreg(d, XED_REG_ZMM11);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(4, 1, 0) -> REXR4=0 REXR=1 REG=4 | OUTREG=XED_REG_ZMM12*/
    xed3_operand_set_outreg(d, XED_REG_ZMM12);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(5, 1, 0) -> REXR4=0 REXR=1 REG=5 | OUTREG=XED_REG_ZMM13*/
    xed3_operand_set_outreg(d, XED_REG_ZMM13);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(6, 1, 0) -> REXR4=0 REXR=1 REG=6 | OUTREG=XED_REG_ZMM14*/
    xed3_operand_set_outreg(d, XED_REG_ZMM14);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(7, 1, 0) -> REXR4=0 REXR=1 REG=7 | OUTREG=XED_REG_ZMM15*/
    xed3_operand_set_outreg(d, XED_REG_ZMM15);
/*pacify the compiler */
(void)d;
    break;
case 16: /*(0, 0, 1) -> REXR4=1 REXR=0 REG=0 | OUTREG=XED_REG_ZMM16*/
    xed3_operand_set_outreg(d, XED_REG_ZMM16);
/*pacify the compiler */
(void)d;
    break;
case 17: /*(1, 0, 1) -> REXR4=1 REXR=0 REG=1 | OUTREG=XED_REG_ZMM17*/
    xed3_operand_set_outreg(d, XED_REG_ZMM17);
/*pacify the compiler */
(void)d;
    break;
case 18: /*(2, 0, 1) -> REXR4=1 REXR=0 REG=2 | OUTREG=XED_REG_ZMM18*/
    xed3_operand_set_outreg(d, XED_REG_ZMM18);
/*pacify the compiler */
(void)d;
    break;
case 19: /*(3, 0, 1) -> REXR4=1 REXR=0 REG=3 | OUTREG=XED_REG_ZMM19*/
    xed3_operand_set_outreg(d, XED_REG_ZMM19);
/*pacify the compiler */
(void)d;
    break;
case 20: /*(4, 0, 1) -> REXR4=1 REXR=0 REG=4 | OUTREG=XED_REG_ZMM20*/
    xed3_operand_set_outreg(d, XED_REG_ZMM20);
/*pacify the compiler */
(void)d;
    break;
case 21: /*(5, 0, 1) -> REXR4=1 REXR=0 REG=5 | OUTREG=XED_REG_ZMM21*/
    xed3_operand_set_outreg(d, XED_REG_ZMM21);
/*pacify the compiler */
(void)d;
    break;
case 22: /*(6, 0, 1) -> REXR4=1 REXR=0 REG=6 | OUTREG=XED_REG_ZMM22*/
    xed3_operand_set_outreg(d, XED_REG_ZMM22);
/*pacify the compiler */
(void)d;
    break;
case 23: /*(7, 0, 1) -> REXR4=1 REXR=0 REG=7 | OUTREG=XED_REG_ZMM23*/
    xed3_operand_set_outreg(d, XED_REG_ZMM23);
/*pacify the compiler */
(void)d;
    break;
case 24: /*(0, 1, 1) -> REXR4=1 REXR=1 REG=0 | OUTREG=XED_REG_ZMM24*/
    xed3_operand_set_outreg(d, XED_REG_ZMM24);
/*pacify the compiler */
(void)d;
    break;
case 25: /*(1, 1, 1) -> REXR4=1 REXR=1 REG=1 | OUTREG=XED_REG_ZMM25*/
    xed3_operand_set_outreg(d, XED_REG_ZMM25);
/*pacify the compiler */
(void)d;
    break;
case 26: /*(2, 1, 1) -> REXR4=1 REXR=1 REG=2 | OUTREG=XED_REG_ZMM26*/
    xed3_operand_set_outreg(d, XED_REG_ZMM26);
/*pacify the compiler */
(void)d;
    break;
case 27: /*(3, 1, 1) -> REXR4=1 REXR=1 REG=3 | OUTREG=XED_REG_ZMM27*/
    xed3_operand_set_outreg(d, XED_REG_ZMM27);
/*pacify the compiler */
(void)d;
    break;
case 28: /*(4, 1, 1) -> REXR4=1 REXR=1 REG=4 | OUTREG=XED_REG_ZMM28*/
    xed3_operand_set_outreg(d, XED_REG_ZMM28);
/*pacify the compiler */
(void)d;
    break;
case 29: /*(5, 1, 1) -> REXR4=1 REXR=1 REG=5 | OUTREG=XED_REG_ZMM29*/
    xed3_operand_set_outreg(d, XED_REG_ZMM29);
/*pacify the compiler */
(void)d;
    break;
case 30: /*(6, 1, 1) -> REXR4=1 REXR=1 REG=6 | OUTREG=XED_REG_ZMM30*/
    xed3_operand_set_outreg(d, XED_REG_ZMM30);
/*pacify the compiler */
(void)d;
    break;
case 31: /*(7, 1, 1) -> REXR4=1 REXR=1 REG=7 | OUTREG=XED_REG_ZMM31*/
    xed3_operand_set_outreg(d, XED_REG_ZMM31);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_XMM_B3(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mode(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> mode16 | OUTREG=XMM_B3_32()*/
    xed3_capture_nt_XMM_B3_32(d);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> mode32 | OUTREG=XMM_B3_32()*/
    xed3_capture_nt_XMM_B3_32(d);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> mode64 | OUTREG=XMM_B3_64()*/
    xed3_capture_nt_XMM_B3_64(d);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_XMM_B3_32(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_rm(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> RM=0 | OUTREG=XED_REG_XMM0*/
    xed3_operand_set_outreg(d, XED_REG_XMM0);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> RM=1 | OUTREG=XED_REG_XMM1*/
    xed3_operand_set_outreg(d, XED_REG_XMM1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> RM=2 | OUTREG=XED_REG_XMM2*/
    xed3_operand_set_outreg(d, XED_REG_XMM2);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> RM=3 | OUTREG=XED_REG_XMM3*/
    xed3_operand_set_outreg(d, XED_REG_XMM3);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4,) -> RM=4 | OUTREG=XED_REG_XMM4*/
    xed3_operand_set_outreg(d, XED_REG_XMM4);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5,) -> RM=5 | OUTREG=XED_REG_XMM5*/
    xed3_operand_set_outreg(d, XED_REG_XMM5);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6,) -> RM=6 | OUTREG=XED_REG_XMM6*/
    xed3_operand_set_outreg(d, XED_REG_XMM6);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7,) -> RM=7 | OUTREG=XED_REG_XMM7*/
    xed3_operand_set_outreg(d, XED_REG_XMM7);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_XMM_B3_64(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_rexb(d)) << ((0));
key += (xed3_operand_get_rexx(d)) << ((1));
key += (xed3_operand_get_rm(d)) << ((2));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0, 0) -> REXX=0 REXB=0 RM=0 | OUTREG=XED_REG_XMM0*/
    xed3_operand_set_outreg(d, XED_REG_XMM0);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0, 0) -> REXX=0 REXB=1 RM=0 | OUTREG=XED_REG_XMM8*/
    xed3_operand_set_outreg(d, XED_REG_XMM8);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(0, 1, 0) -> REXX=1 REXB=0 RM=0 | OUTREG=XED_REG_XMM16*/
    xed3_operand_set_outreg(d, XED_REG_XMM16);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(1, 1, 0) -> REXX=1 REXB=1 RM=0 | OUTREG=XED_REG_XMM24*/
    xed3_operand_set_outreg(d, XED_REG_XMM24);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(0, 0, 1) -> REXX=0 REXB=0 RM=1 | OUTREG=XED_REG_XMM1*/
    xed3_operand_set_outreg(d, XED_REG_XMM1);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(1, 0, 1) -> REXX=0 REXB=1 RM=1 | OUTREG=XED_REG_XMM9*/
    xed3_operand_set_outreg(d, XED_REG_XMM9);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(0, 1, 1) -> REXX=1 REXB=0 RM=1 | OUTREG=XED_REG_XMM17*/
    xed3_operand_set_outreg(d, XED_REG_XMM17);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(1, 1, 1) -> REXX=1 REXB=1 RM=1 | OUTREG=XED_REG_XMM25*/
    xed3_operand_set_outreg(d, XED_REG_XMM25);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 0, 2) -> REXX=0 REXB=0 RM=2 | OUTREG=XED_REG_XMM2*/
    xed3_operand_set_outreg(d, XED_REG_XMM2);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 0, 2) -> REXX=0 REXB=1 RM=2 | OUTREG=XED_REG_XMM10*/
    xed3_operand_set_outreg(d, XED_REG_XMM10);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(0, 1, 2) -> REXX=1 REXB=0 RM=2 | OUTREG=XED_REG_XMM18*/
    xed3_operand_set_outreg(d, XED_REG_XMM18);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(1, 1, 2) -> REXX=1 REXB=1 RM=2 | OUTREG=XED_REG_XMM26*/
    xed3_operand_set_outreg(d, XED_REG_XMM26);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(0, 0, 3) -> REXX=0 REXB=0 RM=3 | OUTREG=XED_REG_XMM3*/
    xed3_operand_set_outreg(d, XED_REG_XMM3);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(1, 0, 3) -> REXX=0 REXB=1 RM=3 | OUTREG=XED_REG_XMM11*/
    xed3_operand_set_outreg(d, XED_REG_XMM11);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(0, 1, 3) -> REXX=1 REXB=0 RM=3 | OUTREG=XED_REG_XMM19*/
    xed3_operand_set_outreg(d, XED_REG_XMM19);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(1, 1, 3) -> REXX=1 REXB=1 RM=3 | OUTREG=XED_REG_XMM27*/
    xed3_operand_set_outreg(d, XED_REG_XMM27);
/*pacify the compiler */
(void)d;
    break;
case 16: /*(0, 0, 4) -> REXX=0 REXB=0 RM=4 | OUTREG=XED_REG_XMM4*/
    xed3_operand_set_outreg(d, XED_REG_XMM4);
/*pacify the compiler */
(void)d;
    break;
case 17: /*(1, 0, 4) -> REXX=0 REXB=1 RM=4 | OUTREG=XED_REG_XMM12*/
    xed3_operand_set_outreg(d, XED_REG_XMM12);
/*pacify the compiler */
(void)d;
    break;
case 18: /*(0, 1, 4) -> REXX=1 REXB=0 RM=4 | OUTREG=XED_REG_XMM20*/
    xed3_operand_set_outreg(d, XED_REG_XMM20);
/*pacify the compiler */
(void)d;
    break;
case 19: /*(1, 1, 4) -> REXX=1 REXB=1 RM=4 | OUTREG=XED_REG_XMM28*/
    xed3_operand_set_outreg(d, XED_REG_XMM28);
/*pacify the compiler */
(void)d;
    break;
case 20: /*(0, 0, 5) -> REXX=0 REXB=0 RM=5 | OUTREG=XED_REG_XMM5*/
    xed3_operand_set_outreg(d, XED_REG_XMM5);
/*pacify the compiler */
(void)d;
    break;
case 21: /*(1, 0, 5) -> REXX=0 REXB=1 RM=5 | OUTREG=XED_REG_XMM13*/
    xed3_operand_set_outreg(d, XED_REG_XMM13);
/*pacify the compiler */
(void)d;
    break;
case 22: /*(0, 1, 5) -> REXX=1 REXB=0 RM=5 | OUTREG=XED_REG_XMM21*/
    xed3_operand_set_outreg(d, XED_REG_XMM21);
/*pacify the compiler */
(void)d;
    break;
case 23: /*(1, 1, 5) -> REXX=1 REXB=1 RM=5 | OUTREG=XED_REG_XMM29*/
    xed3_operand_set_outreg(d, XED_REG_XMM29);
/*pacify the compiler */
(void)d;
    break;
case 24: /*(0, 0, 6) -> REXX=0 REXB=0 RM=6 | OUTREG=XED_REG_XMM6*/
    xed3_operand_set_outreg(d, XED_REG_XMM6);
/*pacify the compiler */
(void)d;
    break;
case 25: /*(1, 0, 6) -> REXX=0 REXB=1 RM=6 | OUTREG=XED_REG_XMM14*/
    xed3_operand_set_outreg(d, XED_REG_XMM14);
/*pacify the compiler */
(void)d;
    break;
case 26: /*(0, 1, 6) -> REXX=1 REXB=0 RM=6 | OUTREG=XED_REG_XMM22*/
    xed3_operand_set_outreg(d, XED_REG_XMM22);
/*pacify the compiler */
(void)d;
    break;
case 27: /*(1, 1, 6) -> REXX=1 REXB=1 RM=6 | OUTREG=XED_REG_XMM30*/
    xed3_operand_set_outreg(d, XED_REG_XMM30);
/*pacify the compiler */
(void)d;
    break;
case 28: /*(0, 0, 7) -> REXX=0 REXB=0 RM=7 | OUTREG=XED_REG_XMM7*/
    xed3_operand_set_outreg(d, XED_REG_XMM7);
/*pacify the compiler */
(void)d;
    break;
case 29: /*(1, 0, 7) -> REXX=0 REXB=1 RM=7 | OUTREG=XED_REG_XMM15*/
    xed3_operand_set_outreg(d, XED_REG_XMM15);
/*pacify the compiler */
(void)d;
    break;
case 30: /*(0, 1, 7) -> REXX=1 REXB=0 RM=7 | OUTREG=XED_REG_XMM23*/
    xed3_operand_set_outreg(d, XED_REG_XMM23);
/*pacify the compiler */
(void)d;
    break;
case 31: /*(1, 1, 7) -> REXX=1 REXB=1 RM=7 | OUTREG=XED_REG_XMM31*/
    xed3_operand_set_outreg(d, XED_REG_XMM31);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_YMM_B3(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mode(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> mode16 | OUTREG=YMM_B3_32()*/
    xed3_capture_nt_YMM_B3_32(d);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> mode32 | OUTREG=YMM_B3_32()*/
    xed3_capture_nt_YMM_B3_32(d);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> mode64 | OUTREG=YMM_B3_64()*/
    xed3_capture_nt_YMM_B3_64(d);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_YMM_B3_32(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_rm(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> RM=0 | OUTREG=XED_REG_YMM0*/
    xed3_operand_set_outreg(d, XED_REG_YMM0);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> RM=1 | OUTREG=XED_REG_YMM1*/
    xed3_operand_set_outreg(d, XED_REG_YMM1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> RM=2 | OUTREG=XED_REG_YMM2*/
    xed3_operand_set_outreg(d, XED_REG_YMM2);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> RM=3 | OUTREG=XED_REG_YMM3*/
    xed3_operand_set_outreg(d, XED_REG_YMM3);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4,) -> RM=4 | OUTREG=XED_REG_YMM4*/
    xed3_operand_set_outreg(d, XED_REG_YMM4);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5,) -> RM=5 | OUTREG=XED_REG_YMM5*/
    xed3_operand_set_outreg(d, XED_REG_YMM5);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6,) -> RM=6 | OUTREG=XED_REG_YMM6*/
    xed3_operand_set_outreg(d, XED_REG_YMM6);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7,) -> RM=7 | OUTREG=XED_REG_YMM7*/
    xed3_operand_set_outreg(d, XED_REG_YMM7);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_YMM_B3_64(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_rexb(d)) << ((0));
key += (xed3_operand_get_rexx(d)) << ((1));
key += (xed3_operand_get_rm(d)) << ((2));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0, 0) -> REXX=0 REXB=0 RM=0 | OUTREG=XED_REG_YMM0*/
    xed3_operand_set_outreg(d, XED_REG_YMM0);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0, 0) -> REXX=0 REXB=1 RM=0 | OUTREG=XED_REG_YMM8*/
    xed3_operand_set_outreg(d, XED_REG_YMM8);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(0, 1, 0) -> REXX=1 REXB=0 RM=0 | OUTREG=XED_REG_YMM16*/
    xed3_operand_set_outreg(d, XED_REG_YMM16);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(1, 1, 0) -> REXX=1 REXB=1 RM=0 | OUTREG=XED_REG_YMM24*/
    xed3_operand_set_outreg(d, XED_REG_YMM24);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(0, 0, 1) -> REXX=0 REXB=0 RM=1 | OUTREG=XED_REG_YMM1*/
    xed3_operand_set_outreg(d, XED_REG_YMM1);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(1, 0, 1) -> REXX=0 REXB=1 RM=1 | OUTREG=XED_REG_YMM9*/
    xed3_operand_set_outreg(d, XED_REG_YMM9);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(0, 1, 1) -> REXX=1 REXB=0 RM=1 | OUTREG=XED_REG_YMM17*/
    xed3_operand_set_outreg(d, XED_REG_YMM17);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(1, 1, 1) -> REXX=1 REXB=1 RM=1 | OUTREG=XED_REG_YMM25*/
    xed3_operand_set_outreg(d, XED_REG_YMM25);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 0, 2) -> REXX=0 REXB=0 RM=2 | OUTREG=XED_REG_YMM2*/
    xed3_operand_set_outreg(d, XED_REG_YMM2);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 0, 2) -> REXX=0 REXB=1 RM=2 | OUTREG=XED_REG_YMM10*/
    xed3_operand_set_outreg(d, XED_REG_YMM10);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(0, 1, 2) -> REXX=1 REXB=0 RM=2 | OUTREG=XED_REG_YMM18*/
    xed3_operand_set_outreg(d, XED_REG_YMM18);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(1, 1, 2) -> REXX=1 REXB=1 RM=2 | OUTREG=XED_REG_YMM26*/
    xed3_operand_set_outreg(d, XED_REG_YMM26);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(0, 0, 3) -> REXX=0 REXB=0 RM=3 | OUTREG=XED_REG_YMM3*/
    xed3_operand_set_outreg(d, XED_REG_YMM3);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(1, 0, 3) -> REXX=0 REXB=1 RM=3 | OUTREG=XED_REG_YMM11*/
    xed3_operand_set_outreg(d, XED_REG_YMM11);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(0, 1, 3) -> REXX=1 REXB=0 RM=3 | OUTREG=XED_REG_YMM19*/
    xed3_operand_set_outreg(d, XED_REG_YMM19);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(1, 1, 3) -> REXX=1 REXB=1 RM=3 | OUTREG=XED_REG_YMM27*/
    xed3_operand_set_outreg(d, XED_REG_YMM27);
/*pacify the compiler */
(void)d;
    break;
case 16: /*(0, 0, 4) -> REXX=0 REXB=0 RM=4 | OUTREG=XED_REG_YMM4*/
    xed3_operand_set_outreg(d, XED_REG_YMM4);
/*pacify the compiler */
(void)d;
    break;
case 17: /*(1, 0, 4) -> REXX=0 REXB=1 RM=4 | OUTREG=XED_REG_YMM12*/
    xed3_operand_set_outreg(d, XED_REG_YMM12);
/*pacify the compiler */
(void)d;
    break;
case 18: /*(0, 1, 4) -> REXX=1 REXB=0 RM=4 | OUTREG=XED_REG_YMM20*/
    xed3_operand_set_outreg(d, XED_REG_YMM20);
/*pacify the compiler */
(void)d;
    break;
case 19: /*(1, 1, 4) -> REXX=1 REXB=1 RM=4 | OUTREG=XED_REG_YMM28*/
    xed3_operand_set_outreg(d, XED_REG_YMM28);
/*pacify the compiler */
(void)d;
    break;
case 20: /*(0, 0, 5) -> REXX=0 REXB=0 RM=5 | OUTREG=XED_REG_YMM5*/
    xed3_operand_set_outreg(d, XED_REG_YMM5);
/*pacify the compiler */
(void)d;
    break;
case 21: /*(1, 0, 5) -> REXX=0 REXB=1 RM=5 | OUTREG=XED_REG_YMM13*/
    xed3_operand_set_outreg(d, XED_REG_YMM13);
/*pacify the compiler */
(void)d;
    break;
case 22: /*(0, 1, 5) -> REXX=1 REXB=0 RM=5 | OUTREG=XED_REG_YMM21*/
    xed3_operand_set_outreg(d, XED_REG_YMM21);
/*pacify the compiler */
(void)d;
    break;
case 23: /*(1, 1, 5) -> REXX=1 REXB=1 RM=5 | OUTREG=XED_REG_YMM29*/
    xed3_operand_set_outreg(d, XED_REG_YMM29);
/*pacify the compiler */
(void)d;
    break;
case 24: /*(0, 0, 6) -> REXX=0 REXB=0 RM=6 | OUTREG=XED_REG_YMM6*/
    xed3_operand_set_outreg(d, XED_REG_YMM6);
/*pacify the compiler */
(void)d;
    break;
case 25: /*(1, 0, 6) -> REXX=0 REXB=1 RM=6 | OUTREG=XED_REG_YMM14*/
    xed3_operand_set_outreg(d, XED_REG_YMM14);
/*pacify the compiler */
(void)d;
    break;
case 26: /*(0, 1, 6) -> REXX=1 REXB=0 RM=6 | OUTREG=XED_REG_YMM22*/
    xed3_operand_set_outreg(d, XED_REG_YMM22);
/*pacify the compiler */
(void)d;
    break;
case 27: /*(1, 1, 6) -> REXX=1 REXB=1 RM=6 | OUTREG=XED_REG_YMM30*/
    xed3_operand_set_outreg(d, XED_REG_YMM30);
/*pacify the compiler */
(void)d;
    break;
case 28: /*(0, 0, 7) -> REXX=0 REXB=0 RM=7 | OUTREG=XED_REG_YMM7*/
    xed3_operand_set_outreg(d, XED_REG_YMM7);
/*pacify the compiler */
(void)d;
    break;
case 29: /*(1, 0, 7) -> REXX=0 REXB=1 RM=7 | OUTREG=XED_REG_YMM15*/
    xed3_operand_set_outreg(d, XED_REG_YMM15);
/*pacify the compiler */
(void)d;
    break;
case 30: /*(0, 1, 7) -> REXX=1 REXB=0 RM=7 | OUTREG=XED_REG_YMM23*/
    xed3_operand_set_outreg(d, XED_REG_YMM23);
/*pacify the compiler */
(void)d;
    break;
case 31: /*(1, 1, 7) -> REXX=1 REXB=1 RM=7 | OUTREG=XED_REG_YMM31*/
    xed3_operand_set_outreg(d, XED_REG_YMM31);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_ZMM_B3(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mode(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> mode16 | OUTREG=ZMM_B3_32()*/
    xed3_capture_nt_ZMM_B3_32(d);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> mode32 | OUTREG=ZMM_B3_32()*/
    xed3_capture_nt_ZMM_B3_32(d);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> mode64 | OUTREG=ZMM_B3_64()*/
    xed3_capture_nt_ZMM_B3_64(d);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_ZMM_B3_32(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_rm(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> RM=0 | OUTREG=XED_REG_ZMM0*/
    xed3_operand_set_outreg(d, XED_REG_ZMM0);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> RM=1 | OUTREG=XED_REG_ZMM1*/
    xed3_operand_set_outreg(d, XED_REG_ZMM1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> RM=2 | OUTREG=XED_REG_ZMM2*/
    xed3_operand_set_outreg(d, XED_REG_ZMM2);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> RM=3 | OUTREG=XED_REG_ZMM3*/
    xed3_operand_set_outreg(d, XED_REG_ZMM3);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4,) -> RM=4 | OUTREG=XED_REG_ZMM4*/
    xed3_operand_set_outreg(d, XED_REG_ZMM4);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5,) -> RM=5 | OUTREG=XED_REG_ZMM5*/
    xed3_operand_set_outreg(d, XED_REG_ZMM5);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6,) -> RM=6 | OUTREG=XED_REG_ZMM6*/
    xed3_operand_set_outreg(d, XED_REG_ZMM6);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7,) -> RM=7 | OUTREG=XED_REG_ZMM7*/
    xed3_operand_set_outreg(d, XED_REG_ZMM7);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_ZMM_B3_64(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_rexb(d)) << ((0));
key += (xed3_operand_get_rexx(d)) << ((1));
key += (xed3_operand_get_rm(d)) << ((2));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0, 0) -> REXX=0 REXB=0 RM=0 | OUTREG=XED_REG_ZMM0*/
    xed3_operand_set_outreg(d, XED_REG_ZMM0);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0, 0) -> REXX=0 REXB=1 RM=0 | OUTREG=XED_REG_ZMM8*/
    xed3_operand_set_outreg(d, XED_REG_ZMM8);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(0, 1, 0) -> REXX=1 REXB=0 RM=0 | OUTREG=XED_REG_ZMM16*/
    xed3_operand_set_outreg(d, XED_REG_ZMM16);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(1, 1, 0) -> REXX=1 REXB=1 RM=0 | OUTREG=XED_REG_ZMM24*/
    xed3_operand_set_outreg(d, XED_REG_ZMM24);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(0, 0, 1) -> REXX=0 REXB=0 RM=1 | OUTREG=XED_REG_ZMM1*/
    xed3_operand_set_outreg(d, XED_REG_ZMM1);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(1, 0, 1) -> REXX=0 REXB=1 RM=1 | OUTREG=XED_REG_ZMM9*/
    xed3_operand_set_outreg(d, XED_REG_ZMM9);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(0, 1, 1) -> REXX=1 REXB=0 RM=1 | OUTREG=XED_REG_ZMM17*/
    xed3_operand_set_outreg(d, XED_REG_ZMM17);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(1, 1, 1) -> REXX=1 REXB=1 RM=1 | OUTREG=XED_REG_ZMM25*/
    xed3_operand_set_outreg(d, XED_REG_ZMM25);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 0, 2) -> REXX=0 REXB=0 RM=2 | OUTREG=XED_REG_ZMM2*/
    xed3_operand_set_outreg(d, XED_REG_ZMM2);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 0, 2) -> REXX=0 REXB=1 RM=2 | OUTREG=XED_REG_ZMM10*/
    xed3_operand_set_outreg(d, XED_REG_ZMM10);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(0, 1, 2) -> REXX=1 REXB=0 RM=2 | OUTREG=XED_REG_ZMM18*/
    xed3_operand_set_outreg(d, XED_REG_ZMM18);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(1, 1, 2) -> REXX=1 REXB=1 RM=2 | OUTREG=XED_REG_ZMM26*/
    xed3_operand_set_outreg(d, XED_REG_ZMM26);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(0, 0, 3) -> REXX=0 REXB=0 RM=3 | OUTREG=XED_REG_ZMM3*/
    xed3_operand_set_outreg(d, XED_REG_ZMM3);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(1, 0, 3) -> REXX=0 REXB=1 RM=3 | OUTREG=XED_REG_ZMM11*/
    xed3_operand_set_outreg(d, XED_REG_ZMM11);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(0, 1, 3) -> REXX=1 REXB=0 RM=3 | OUTREG=XED_REG_ZMM19*/
    xed3_operand_set_outreg(d, XED_REG_ZMM19);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(1, 1, 3) -> REXX=1 REXB=1 RM=3 | OUTREG=XED_REG_ZMM27*/
    xed3_operand_set_outreg(d, XED_REG_ZMM27);
/*pacify the compiler */
(void)d;
    break;
case 16: /*(0, 0, 4) -> REXX=0 REXB=0 RM=4 | OUTREG=XED_REG_ZMM4*/
    xed3_operand_set_outreg(d, XED_REG_ZMM4);
/*pacify the compiler */
(void)d;
    break;
case 17: /*(1, 0, 4) -> REXX=0 REXB=1 RM=4 | OUTREG=XED_REG_ZMM12*/
    xed3_operand_set_outreg(d, XED_REG_ZMM12);
/*pacify the compiler */
(void)d;
    break;
case 18: /*(0, 1, 4) -> REXX=1 REXB=0 RM=4 | OUTREG=XED_REG_ZMM20*/
    xed3_operand_set_outreg(d, XED_REG_ZMM20);
/*pacify the compiler */
(void)d;
    break;
case 19: /*(1, 1, 4) -> REXX=1 REXB=1 RM=4 | OUTREG=XED_REG_ZMM28*/
    xed3_operand_set_outreg(d, XED_REG_ZMM28);
/*pacify the compiler */
(void)d;
    break;
case 20: /*(0, 0, 5) -> REXX=0 REXB=0 RM=5 | OUTREG=XED_REG_ZMM5*/
    xed3_operand_set_outreg(d, XED_REG_ZMM5);
/*pacify the compiler */
(void)d;
    break;
case 21: /*(1, 0, 5) -> REXX=0 REXB=1 RM=5 | OUTREG=XED_REG_ZMM13*/
    xed3_operand_set_outreg(d, XED_REG_ZMM13);
/*pacify the compiler */
(void)d;
    break;
case 22: /*(0, 1, 5) -> REXX=1 REXB=0 RM=5 | OUTREG=XED_REG_ZMM21*/
    xed3_operand_set_outreg(d, XED_REG_ZMM21);
/*pacify the compiler */
(void)d;
    break;
case 23: /*(1, 1, 5) -> REXX=1 REXB=1 RM=5 | OUTREG=XED_REG_ZMM29*/
    xed3_operand_set_outreg(d, XED_REG_ZMM29);
/*pacify the compiler */
(void)d;
    break;
case 24: /*(0, 0, 6) -> REXX=0 REXB=0 RM=6 | OUTREG=XED_REG_ZMM6*/
    xed3_operand_set_outreg(d, XED_REG_ZMM6);
/*pacify the compiler */
(void)d;
    break;
case 25: /*(1, 0, 6) -> REXX=0 REXB=1 RM=6 | OUTREG=XED_REG_ZMM14*/
    xed3_operand_set_outreg(d, XED_REG_ZMM14);
/*pacify the compiler */
(void)d;
    break;
case 26: /*(0, 1, 6) -> REXX=1 REXB=0 RM=6 | OUTREG=XED_REG_ZMM22*/
    xed3_operand_set_outreg(d, XED_REG_ZMM22);
/*pacify the compiler */
(void)d;
    break;
case 27: /*(1, 1, 6) -> REXX=1 REXB=1 RM=6 | OUTREG=XED_REG_ZMM30*/
    xed3_operand_set_outreg(d, XED_REG_ZMM30);
/*pacify the compiler */
(void)d;
    break;
case 28: /*(0, 0, 7) -> REXX=0 REXB=0 RM=7 | OUTREG=XED_REG_ZMM7*/
    xed3_operand_set_outreg(d, XED_REG_ZMM7);
/*pacify the compiler */
(void)d;
    break;
case 29: /*(1, 0, 7) -> REXX=0 REXB=1 RM=7 | OUTREG=XED_REG_ZMM15*/
    xed3_operand_set_outreg(d, XED_REG_ZMM15);
/*pacify the compiler */
(void)d;
    break;
case 30: /*(0, 1, 7) -> REXX=1 REXB=0 RM=7 | OUTREG=XED_REG_ZMM23*/
    xed3_operand_set_outreg(d, XED_REG_ZMM23);
/*pacify the compiler */
(void)d;
    break;
case 31: /*(1, 1, 7) -> REXX=1 REXB=1 RM=7 | OUTREG=XED_REG_ZMM31*/
    xed3_operand_set_outreg(d, XED_REG_ZMM31);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_XMM_N3(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mode(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> mode16 | OUTREG=XMM_N3_32()*/
    xed3_capture_nt_XMM_N3_32(d);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> mode32 | OUTREG=XMM_N3_32()*/
    xed3_capture_nt_XMM_N3_32(d);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> mode64 | OUTREG=XMM_N3_64()*/
    xed3_capture_nt_XMM_N3_64(d);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_XMM_N3_32(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_vexdest210(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> VEXDEST210=0 | OUTREG=XED_REG_XMM7*/
    xed3_operand_set_outreg(d, XED_REG_XMM7);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> VEXDEST210=1 | OUTREG=XED_REG_XMM6*/
    xed3_operand_set_outreg(d, XED_REG_XMM6);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> VEXDEST210=2 | OUTREG=XED_REG_XMM5*/
    xed3_operand_set_outreg(d, XED_REG_XMM5);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> VEXDEST210=3 | OUTREG=XED_REG_XMM4*/
    xed3_operand_set_outreg(d, XED_REG_XMM4);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4,) -> VEXDEST210=4 | OUTREG=XED_REG_XMM3*/
    xed3_operand_set_outreg(d, XED_REG_XMM3);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5,) -> VEXDEST210=5 | OUTREG=XED_REG_XMM2*/
    xed3_operand_set_outreg(d, XED_REG_XMM2);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6,) -> VEXDEST210=6 | OUTREG=XED_REG_XMM1*/
    xed3_operand_set_outreg(d, XED_REG_XMM1);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7,) -> VEXDEST210=7 | OUTREG=XED_REG_XMM0*/
    xed3_operand_set_outreg(d, XED_REG_XMM0);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_XMM_N3_64(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_vexdest210(d)) << ((0));
key += (xed3_operand_get_vexdest3(d)) << ((3));
key += (xed3_operand_get_vexdest4(d)) << ((4));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=0 | OUTREG=XED_REG_XMM15*/
    xed3_operand_set_outreg(d, XED_REG_XMM15);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=1 | OUTREG=XED_REG_XMM14*/
    xed3_operand_set_outreg(d, XED_REG_XMM14);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=2 | OUTREG=XED_REG_XMM13*/
    xed3_operand_set_outreg(d, XED_REG_XMM13);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=3 | OUTREG=XED_REG_XMM12*/
    xed3_operand_set_outreg(d, XED_REG_XMM12);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=4 | OUTREG=XED_REG_XMM11*/
    xed3_operand_set_outreg(d, XED_REG_XMM11);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=5 | OUTREG=XED_REG_XMM10*/
    xed3_operand_set_outreg(d, XED_REG_XMM10);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=6 | OUTREG=XED_REG_XMM9*/
    xed3_operand_set_outreg(d, XED_REG_XMM9);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=7 | OUTREG=XED_REG_XMM8*/
    xed3_operand_set_outreg(d, XED_REG_XMM8);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=0 | OUTREG=XED_REG_XMM7*/
    xed3_operand_set_outreg(d, XED_REG_XMM7);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=1 | OUTREG=XED_REG_XMM6*/
    xed3_operand_set_outreg(d, XED_REG_XMM6);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(2, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=2 | OUTREG=XED_REG_XMM5*/
    xed3_operand_set_outreg(d, XED_REG_XMM5);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(3, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=3 | OUTREG=XED_REG_XMM4*/
    xed3_operand_set_outreg(d, XED_REG_XMM4);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(4, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=4 | OUTREG=XED_REG_XMM3*/
    xed3_operand_set_outreg(d, XED_REG_XMM3);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(5, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=5 | OUTREG=XED_REG_XMM2*/
    xed3_operand_set_outreg(d, XED_REG_XMM2);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(6, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=6 | OUTREG=XED_REG_XMM1*/
    xed3_operand_set_outreg(d, XED_REG_XMM1);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(7, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=7 | OUTREG=XED_REG_XMM0*/
    xed3_operand_set_outreg(d, XED_REG_XMM0);
/*pacify the compiler */
(void)d;
    break;
case 16: /*(0, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=0 | OUTREG=XED_REG_XMM31*/
    xed3_operand_set_outreg(d, XED_REG_XMM31);
/*pacify the compiler */
(void)d;
    break;
case 17: /*(1, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=1 | OUTREG=XED_REG_XMM30*/
    xed3_operand_set_outreg(d, XED_REG_XMM30);
/*pacify the compiler */
(void)d;
    break;
case 18: /*(2, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=2 | OUTREG=XED_REG_XMM29*/
    xed3_operand_set_outreg(d, XED_REG_XMM29);
/*pacify the compiler */
(void)d;
    break;
case 19: /*(3, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=3 | OUTREG=XED_REG_XMM28*/
    xed3_operand_set_outreg(d, XED_REG_XMM28);
/*pacify the compiler */
(void)d;
    break;
case 20: /*(4, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=4 | OUTREG=XED_REG_XMM27*/
    xed3_operand_set_outreg(d, XED_REG_XMM27);
/*pacify the compiler */
(void)d;
    break;
case 21: /*(5, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=5 | OUTREG=XED_REG_XMM26*/
    xed3_operand_set_outreg(d, XED_REG_XMM26);
/*pacify the compiler */
(void)d;
    break;
case 22: /*(6, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=6 | OUTREG=XED_REG_XMM25*/
    xed3_operand_set_outreg(d, XED_REG_XMM25);
/*pacify the compiler */
(void)d;
    break;
case 23: /*(7, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=7 | OUTREG=XED_REG_XMM24*/
    xed3_operand_set_outreg(d, XED_REG_XMM24);
/*pacify the compiler */
(void)d;
    break;
case 24: /*(0, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=0 | OUTREG=XED_REG_XMM23*/
    xed3_operand_set_outreg(d, XED_REG_XMM23);
/*pacify the compiler */
(void)d;
    break;
case 25: /*(1, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=1 | OUTREG=XED_REG_XMM22*/
    xed3_operand_set_outreg(d, XED_REG_XMM22);
/*pacify the compiler */
(void)d;
    break;
case 26: /*(2, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=2 | OUTREG=XED_REG_XMM21*/
    xed3_operand_set_outreg(d, XED_REG_XMM21);
/*pacify the compiler */
(void)d;
    break;
case 27: /*(3, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=3 | OUTREG=XED_REG_XMM20*/
    xed3_operand_set_outreg(d, XED_REG_XMM20);
/*pacify the compiler */
(void)d;
    break;
case 28: /*(4, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=4 | OUTREG=XED_REG_XMM19*/
    xed3_operand_set_outreg(d, XED_REG_XMM19);
/*pacify the compiler */
(void)d;
    break;
case 29: /*(5, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=5 | OUTREG=XED_REG_XMM18*/
    xed3_operand_set_outreg(d, XED_REG_XMM18);
/*pacify the compiler */
(void)d;
    break;
case 30: /*(6, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=6 | OUTREG=XED_REG_XMM17*/
    xed3_operand_set_outreg(d, XED_REG_XMM17);
/*pacify the compiler */
(void)d;
    break;
case 31: /*(7, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=7 | OUTREG=XED_REG_XMM16*/
    xed3_operand_set_outreg(d, XED_REG_XMM16);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_YMM_N3(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mode(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> mode16 | OUTREG=YMM_N3_32()*/
    xed3_capture_nt_YMM_N3_32(d);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> mode32 | OUTREG=YMM_N3_32()*/
    xed3_capture_nt_YMM_N3_32(d);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> mode64 | OUTREG=YMM_N3_64()*/
    xed3_capture_nt_YMM_N3_64(d);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_YMM_N3_32(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_vexdest210(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> VEXDEST210=0 | OUTREG=XED_REG_YMM7*/
    xed3_operand_set_outreg(d, XED_REG_YMM7);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> VEXDEST210=1 | OUTREG=XED_REG_YMM6*/
    xed3_operand_set_outreg(d, XED_REG_YMM6);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> VEXDEST210=2 | OUTREG=XED_REG_YMM5*/
    xed3_operand_set_outreg(d, XED_REG_YMM5);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> VEXDEST210=3 | OUTREG=XED_REG_YMM4*/
    xed3_operand_set_outreg(d, XED_REG_YMM4);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4,) -> VEXDEST210=4 | OUTREG=XED_REG_YMM3*/
    xed3_operand_set_outreg(d, XED_REG_YMM3);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5,) -> VEXDEST210=5 | OUTREG=XED_REG_YMM2*/
    xed3_operand_set_outreg(d, XED_REG_YMM2);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6,) -> VEXDEST210=6 | OUTREG=XED_REG_YMM1*/
    xed3_operand_set_outreg(d, XED_REG_YMM1);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7,) -> VEXDEST210=7 | OUTREG=XED_REG_YMM0*/
    xed3_operand_set_outreg(d, XED_REG_YMM0);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_YMM_N3_64(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_vexdest210(d)) << ((0));
key += (xed3_operand_get_vexdest3(d)) << ((3));
key += (xed3_operand_get_vexdest4(d)) << ((4));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=0 | OUTREG=XED_REG_YMM15*/
    xed3_operand_set_outreg(d, XED_REG_YMM15);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=1 | OUTREG=XED_REG_YMM14*/
    xed3_operand_set_outreg(d, XED_REG_YMM14);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=2 | OUTREG=XED_REG_YMM13*/
    xed3_operand_set_outreg(d, XED_REG_YMM13);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=3 | OUTREG=XED_REG_YMM12*/
    xed3_operand_set_outreg(d, XED_REG_YMM12);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=4 | OUTREG=XED_REG_YMM11*/
    xed3_operand_set_outreg(d, XED_REG_YMM11);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=5 | OUTREG=XED_REG_YMM10*/
    xed3_operand_set_outreg(d, XED_REG_YMM10);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=6 | OUTREG=XED_REG_YMM9*/
    xed3_operand_set_outreg(d, XED_REG_YMM9);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=7 | OUTREG=XED_REG_YMM8*/
    xed3_operand_set_outreg(d, XED_REG_YMM8);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=0 | OUTREG=XED_REG_YMM7*/
    xed3_operand_set_outreg(d, XED_REG_YMM7);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=1 | OUTREG=XED_REG_YMM6*/
    xed3_operand_set_outreg(d, XED_REG_YMM6);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(2, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=2 | OUTREG=XED_REG_YMM5*/
    xed3_operand_set_outreg(d, XED_REG_YMM5);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(3, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=3 | OUTREG=XED_REG_YMM4*/
    xed3_operand_set_outreg(d, XED_REG_YMM4);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(4, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=4 | OUTREG=XED_REG_YMM3*/
    xed3_operand_set_outreg(d, XED_REG_YMM3);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(5, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=5 | OUTREG=XED_REG_YMM2*/
    xed3_operand_set_outreg(d, XED_REG_YMM2);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(6, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=6 | OUTREG=XED_REG_YMM1*/
    xed3_operand_set_outreg(d, XED_REG_YMM1);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(7, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=7 | OUTREG=XED_REG_YMM0*/
    xed3_operand_set_outreg(d, XED_REG_YMM0);
/*pacify the compiler */
(void)d;
    break;
case 16: /*(0, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=0 | OUTREG=XED_REG_YMM31*/
    xed3_operand_set_outreg(d, XED_REG_YMM31);
/*pacify the compiler */
(void)d;
    break;
case 17: /*(1, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=1 | OUTREG=XED_REG_YMM30*/
    xed3_operand_set_outreg(d, XED_REG_YMM30);
/*pacify the compiler */
(void)d;
    break;
case 18: /*(2, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=2 | OUTREG=XED_REG_YMM29*/
    xed3_operand_set_outreg(d, XED_REG_YMM29);
/*pacify the compiler */
(void)d;
    break;
case 19: /*(3, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=3 | OUTREG=XED_REG_YMM28*/
    xed3_operand_set_outreg(d, XED_REG_YMM28);
/*pacify the compiler */
(void)d;
    break;
case 20: /*(4, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=4 | OUTREG=XED_REG_YMM27*/
    xed3_operand_set_outreg(d, XED_REG_YMM27);
/*pacify the compiler */
(void)d;
    break;
case 21: /*(5, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=5 | OUTREG=XED_REG_YMM26*/
    xed3_operand_set_outreg(d, XED_REG_YMM26);
/*pacify the compiler */
(void)d;
    break;
case 22: /*(6, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=6 | OUTREG=XED_REG_YMM25*/
    xed3_operand_set_outreg(d, XED_REG_YMM25);
/*pacify the compiler */
(void)d;
    break;
case 23: /*(7, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=7 | OUTREG=XED_REG_YMM24*/
    xed3_operand_set_outreg(d, XED_REG_YMM24);
/*pacify the compiler */
(void)d;
    break;
case 24: /*(0, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=0 | OUTREG=XED_REG_YMM23*/
    xed3_operand_set_outreg(d, XED_REG_YMM23);
/*pacify the compiler */
(void)d;
    break;
case 25: /*(1, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=1 | OUTREG=XED_REG_YMM22*/
    xed3_operand_set_outreg(d, XED_REG_YMM22);
/*pacify the compiler */
(void)d;
    break;
case 26: /*(2, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=2 | OUTREG=XED_REG_YMM21*/
    xed3_operand_set_outreg(d, XED_REG_YMM21);
/*pacify the compiler */
(void)d;
    break;
case 27: /*(3, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=3 | OUTREG=XED_REG_YMM20*/
    xed3_operand_set_outreg(d, XED_REG_YMM20);
/*pacify the compiler */
(void)d;
    break;
case 28: /*(4, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=4 | OUTREG=XED_REG_YMM19*/
    xed3_operand_set_outreg(d, XED_REG_YMM19);
/*pacify the compiler */
(void)d;
    break;
case 29: /*(5, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=5 | OUTREG=XED_REG_YMM18*/
    xed3_operand_set_outreg(d, XED_REG_YMM18);
/*pacify the compiler */
(void)d;
    break;
case 30: /*(6, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=6 | OUTREG=XED_REG_YMM17*/
    xed3_operand_set_outreg(d, XED_REG_YMM17);
/*pacify the compiler */
(void)d;
    break;
case 31: /*(7, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=7 | OUTREG=XED_REG_YMM16*/
    xed3_operand_set_outreg(d, XED_REG_YMM16);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_ZMM_N3(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mode(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> mode16 | OUTREG=ZMM_N3_32()*/
    xed3_capture_nt_ZMM_N3_32(d);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> mode32 | OUTREG=ZMM_N3_32()*/
    xed3_capture_nt_ZMM_N3_32(d);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> mode64 | OUTREG=ZMM_N3_64()*/
    xed3_capture_nt_ZMM_N3_64(d);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_ZMM_N3_32(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_vexdest210(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> VEXDEST210=0 | OUTREG=XED_REG_ZMM7*/
    xed3_operand_set_outreg(d, XED_REG_ZMM7);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1,) -> VEXDEST210=1 | OUTREG=XED_REG_ZMM6*/
    xed3_operand_set_outreg(d, XED_REG_ZMM6);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> VEXDEST210=2 | OUTREG=XED_REG_ZMM5*/
    xed3_operand_set_outreg(d, XED_REG_ZMM5);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> VEXDEST210=3 | OUTREG=XED_REG_ZMM4*/
    xed3_operand_set_outreg(d, XED_REG_ZMM4);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4,) -> VEXDEST210=4 | OUTREG=XED_REG_ZMM3*/
    xed3_operand_set_outreg(d, XED_REG_ZMM3);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5,) -> VEXDEST210=5 | OUTREG=XED_REG_ZMM2*/
    xed3_operand_set_outreg(d, XED_REG_ZMM2);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6,) -> VEXDEST210=6 | OUTREG=XED_REG_ZMM1*/
    xed3_operand_set_outreg(d, XED_REG_ZMM1);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7,) -> VEXDEST210=7 | OUTREG=XED_REG_ZMM0*/
    xed3_operand_set_outreg(d, XED_REG_ZMM0);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_ZMM_N3_64(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_vexdest210(d)) << ((0));
key += (xed3_operand_get_vexdest3(d)) << ((3));
key += (xed3_operand_get_vexdest4(d)) << ((4));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=0 | OUTREG=XED_REG_ZMM15*/
    xed3_operand_set_outreg(d, XED_REG_ZMM15);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=1 | OUTREG=XED_REG_ZMM14*/
    xed3_operand_set_outreg(d, XED_REG_ZMM14);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=2 | OUTREG=XED_REG_ZMM13*/
    xed3_operand_set_outreg(d, XED_REG_ZMM13);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=3 | OUTREG=XED_REG_ZMM12*/
    xed3_operand_set_outreg(d, XED_REG_ZMM12);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=4 | OUTREG=XED_REG_ZMM11*/
    xed3_operand_set_outreg(d, XED_REG_ZMM11);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=5 | OUTREG=XED_REG_ZMM10*/
    xed3_operand_set_outreg(d, XED_REG_ZMM10);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=6 | OUTREG=XED_REG_ZMM9*/
    xed3_operand_set_outreg(d, XED_REG_ZMM9);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=7 | OUTREG=XED_REG_ZMM8*/
    xed3_operand_set_outreg(d, XED_REG_ZMM8);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=0 | OUTREG=XED_REG_ZMM7*/
    xed3_operand_set_outreg(d, XED_REG_ZMM7);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=1 | OUTREG=XED_REG_ZMM6*/
    xed3_operand_set_outreg(d, XED_REG_ZMM6);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(2, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=2 | OUTREG=XED_REG_ZMM5*/
    xed3_operand_set_outreg(d, XED_REG_ZMM5);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(3, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=3 | OUTREG=XED_REG_ZMM4*/
    xed3_operand_set_outreg(d, XED_REG_ZMM4);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(4, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=4 | OUTREG=XED_REG_ZMM3*/
    xed3_operand_set_outreg(d, XED_REG_ZMM3);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(5, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=5 | OUTREG=XED_REG_ZMM2*/
    xed3_operand_set_outreg(d, XED_REG_ZMM2);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(6, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=6 | OUTREG=XED_REG_ZMM1*/
    xed3_operand_set_outreg(d, XED_REG_ZMM1);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(7, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=7 | OUTREG=XED_REG_ZMM0*/
    xed3_operand_set_outreg(d, XED_REG_ZMM0);
/*pacify the compiler */
(void)d;
    break;
case 16: /*(0, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=0 | OUTREG=XED_REG_ZMM31*/
    xed3_operand_set_outreg(d, XED_REG_ZMM31);
/*pacify the compiler */
(void)d;
    break;
case 17: /*(1, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=1 | OUTREG=XED_REG_ZMM30*/
    xed3_operand_set_outreg(d, XED_REG_ZMM30);
/*pacify the compiler */
(void)d;
    break;
case 18: /*(2, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=2 | OUTREG=XED_REG_ZMM29*/
    xed3_operand_set_outreg(d, XED_REG_ZMM29);
/*pacify the compiler */
(void)d;
    break;
case 19: /*(3, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=3 | OUTREG=XED_REG_ZMM28*/
    xed3_operand_set_outreg(d, XED_REG_ZMM28);
/*pacify the compiler */
(void)d;
    break;
case 20: /*(4, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=4 | OUTREG=XED_REG_ZMM27*/
    xed3_operand_set_outreg(d, XED_REG_ZMM27);
/*pacify the compiler */
(void)d;
    break;
case 21: /*(5, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=5 | OUTREG=XED_REG_ZMM26*/
    xed3_operand_set_outreg(d, XED_REG_ZMM26);
/*pacify the compiler */
(void)d;
    break;
case 22: /*(6, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=6 | OUTREG=XED_REG_ZMM25*/
    xed3_operand_set_outreg(d, XED_REG_ZMM25);
/*pacify the compiler */
(void)d;
    break;
case 23: /*(7, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=7 | OUTREG=XED_REG_ZMM24*/
    xed3_operand_set_outreg(d, XED_REG_ZMM24);
/*pacify the compiler */
(void)d;
    break;
case 24: /*(0, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=0 | OUTREG=XED_REG_ZMM23*/
    xed3_operand_set_outreg(d, XED_REG_ZMM23);
/*pacify the compiler */
(void)d;
    break;
case 25: /*(1, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=1 | OUTREG=XED_REG_ZMM22*/
    xed3_operand_set_outreg(d, XED_REG_ZMM22);
/*pacify the compiler */
(void)d;
    break;
case 26: /*(2, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=2 | OUTREG=XED_REG_ZMM21*/
    xed3_operand_set_outreg(d, XED_REG_ZMM21);
/*pacify the compiler */
(void)d;
    break;
case 27: /*(3, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=3 | OUTREG=XED_REG_ZMM20*/
    xed3_operand_set_outreg(d, XED_REG_ZMM20);
/*pacify the compiler */
(void)d;
    break;
case 28: /*(4, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=4 | OUTREG=XED_REG_ZMM19*/
    xed3_operand_set_outreg(d, XED_REG_ZMM19);
/*pacify the compiler */
(void)d;
    break;
case 29: /*(5, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=5 | OUTREG=XED_REG_ZMM18*/
    xed3_operand_set_outreg(d, XED_REG_ZMM18);
/*pacify the compiler */
(void)d;
    break;
case 30: /*(6, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=6 | OUTREG=XED_REG_ZMM17*/
    xed3_operand_set_outreg(d, XED_REG_ZMM17);
/*pacify the compiler */
(void)d;
    break;
case 31: /*(7, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=7 | OUTREG=XED_REG_ZMM16*/
    xed3_operand_set_outreg(d, XED_REG_ZMM16);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_TMM_R(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_reg(d)) << ((0));
key += (xed3_operand_get_rexr(d)) << ((3));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0) -> REXR=0 REG=0 | OUTREG=XED_REG_TMM0*/
    xed3_operand_set_outreg(d, XED_REG_TMM0);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0) -> REXR=0 REG=1 | OUTREG=XED_REG_TMM1*/
    xed3_operand_set_outreg(d, XED_REG_TMM1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2, 0) -> REXR=0 REG=2 | OUTREG=XED_REG_TMM2*/
    xed3_operand_set_outreg(d, XED_REG_TMM2);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3, 0) -> REXR=0 REG=3 | OUTREG=XED_REG_TMM3*/
    xed3_operand_set_outreg(d, XED_REG_TMM3);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4, 0) -> REXR=0 REG=4 | OUTREG=XED_REG_TMM4*/
    xed3_operand_set_outreg(d, XED_REG_TMM4);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5, 0) -> REXR=0 REG=5 | OUTREG=XED_REG_TMM5*/
    xed3_operand_set_outreg(d, XED_REG_TMM5);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6, 0) -> REXR=0 REG=6 | OUTREG=XED_REG_TMM6*/
    xed3_operand_set_outreg(d, XED_REG_TMM6);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7, 0) -> REXR=0 REG=7 | OUTREG=XED_REG_TMM7*/
    xed3_operand_set_outreg(d, XED_REG_TMM7);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_TMM_B(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_rexb(d)) << ((0));
key += (xed3_operand_get_rm(d)) << ((1));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0) -> REXB=0 RM=0 | OUTREG=XED_REG_TMM0*/
    xed3_operand_set_outreg(d, XED_REG_TMM0);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(0, 1) -> REXB=0 RM=1 | OUTREG=XED_REG_TMM1*/
    xed3_operand_set_outreg(d, XED_REG_TMM1);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(0, 2) -> REXB=0 RM=2 | OUTREG=XED_REG_TMM2*/
    xed3_operand_set_outreg(d, XED_REG_TMM2);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(0, 3) -> REXB=0 RM=3 | OUTREG=XED_REG_TMM3*/
    xed3_operand_set_outreg(d, XED_REG_TMM3);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 4) -> REXB=0 RM=4 | OUTREG=XED_REG_TMM4*/
    xed3_operand_set_outreg(d, XED_REG_TMM4);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(0, 5) -> REXB=0 RM=5 | OUTREG=XED_REG_TMM5*/
    xed3_operand_set_outreg(d, XED_REG_TMM5);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(0, 6) -> REXB=0 RM=6 | OUTREG=XED_REG_TMM6*/
    xed3_operand_set_outreg(d, XED_REG_TMM6);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(0, 7) -> REXB=0 RM=7 | OUTREG=XED_REG_TMM7*/
    xed3_operand_set_outreg(d, XED_REG_TMM7);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_TMM_N(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_vexdest210(d)) << ((0));
key += (xed3_operand_get_vexdest3(d)) << ((3));
/* now switch code..*/
switch(key) {
case 8: /*(0, 1) -> VEXDEST3=1 VEXDEST210=0 | OUTREG=XED_REG_TMM7*/
    xed3_operand_set_outreg(d, XED_REG_TMM7);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 1) -> VEXDEST3=1 VEXDEST210=1 | OUTREG=XED_REG_TMM6*/
    xed3_operand_set_outreg(d, XED_REG_TMM6);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(2, 1) -> VEXDEST3=1 VEXDEST210=2 | OUTREG=XED_REG_TMM5*/
    xed3_operand_set_outreg(d, XED_REG_TMM5);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(3, 1) -> VEXDEST3=1 VEXDEST210=3 | OUTREG=XED_REG_TMM4*/
    xed3_operand_set_outreg(d, XED_REG_TMM4);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(4, 1) -> VEXDEST3=1 VEXDEST210=4 | OUTREG=XED_REG_TMM3*/
    xed3_operand_set_outreg(d, XED_REG_TMM3);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(5, 1) -> VEXDEST3=1 VEXDEST210=5 | OUTREG=XED_REG_TMM2*/
    xed3_operand_set_outreg(d, XED_REG_TMM2);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(6, 1) -> VEXDEST3=1 VEXDEST210=6 | OUTREG=XED_REG_TMM1*/
    xed3_operand_set_outreg(d, XED_REG_TMM1);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(7, 1) -> VEXDEST3=1 VEXDEST210=7 | OUTREG=XED_REG_TMM0*/
    xed3_operand_set_outreg(d, XED_REG_TMM0);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_NELEM_QUARTER(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_bcrc(d)) << ((0));
key += (xed3_operand_get_element_size(d)) << ((1));
key += (xed3_operand_get_vl(d)) << ((10));
/* now switch code..*/
switch(key) {
case 32: /*(0, 16, 0) -> BCRC=0b0  ELEMENT_SIZE=16 VL128 | NELEM=2*/
    xed3_operand_set_nelem(d, 0x2);
/*pacify the compiler */
(void)d;
    break;
case 33: /*(1, 16, 0) -> BCRC=0b1  ELEMENT_SIZE=16 VL128 | NELEM=1    EMX_BROADCAST_1TO2_16*/
    xed3_operand_set_nelem(d, 0x1);
    xed3_operand_set_bcast(d, 0x1a);
/*pacify the compiler */
(void)d;
    break;
case 1056: /*(0, 16, 1) -> BCRC=0b0  ELEMENT_SIZE=16 VL256 | NELEM=4*/
    xed3_operand_set_nelem(d, 0x4);
/*pacify the compiler */
(void)d;
    break;
case 1057: /*(1, 16, 1) -> BCRC=0b1  ELEMENT_SIZE=16 VL256 | NELEM=1    EMX_BROADCAST_1TO4_16*/
    xed3_operand_set_nelem(d, 0x1);
    xed3_operand_set_bcast(d, 0x1b);
/*pacify the compiler */
(void)d;
    break;
case 2080: /*(0, 16, 2) -> BCRC=0b0  ELEMENT_SIZE=16 VL512 | NELEM=8*/
    xed3_operand_set_nelem(d, 0x8);
/*pacify the compiler */
(void)d;
    break;
case 2081: /*(1, 16, 2) -> BCRC=0b1  ELEMENT_SIZE=16 VL512 | NELEM=1    EMX_BROADCAST_1TO8_16*/
    xed3_operand_set_nelem(d, 0x1);
    xed3_operand_set_bcast(d, 0xe);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_XMM_L_R3(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mode(d)) << ((0));
/* now switch code..*/
switch(key) {
case 2: /*(2,) -> mode64 | OUTREG=XMM_L_R3_64()*/
    xed3_capture_nt_XMM_L_R3_64(d);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_XMM_L_R3_64(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_reg(d)) << ((0));
key += (xed3_operand_get_rexr(d)) << ((3));
key += (xed3_operand_get_rexr4(d)) << ((4));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0, 0) -> REXR4=0 REXR=0 REG=0 | OUTREG=XED_REG_XMM0*/
    xed3_operand_set_outreg(d, XED_REG_XMM0);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0, 0) -> REXR4=0 REXR=0 REG=1 | OUTREG=XED_REG_XMM1*/
    xed3_operand_set_outreg(d, XED_REG_XMM1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2, 0, 0) -> REXR4=0 REXR=0 REG=2 | OUTREG=XED_REG_XMM2*/
    xed3_operand_set_outreg(d, XED_REG_XMM2);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3, 0, 0) -> REXR4=0 REXR=0 REG=3 | OUTREG=XED_REG_XMM3*/
    xed3_operand_set_outreg(d, XED_REG_XMM3);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4, 0, 0) -> REXR4=0 REXR=0 REG=4 | OUTREG=XED_REG_XMM4*/
    xed3_operand_set_outreg(d, XED_REG_XMM4);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5, 0, 0) -> REXR4=0 REXR=0 REG=5 | OUTREG=XED_REG_XMM5*/
    xed3_operand_set_outreg(d, XED_REG_XMM5);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6, 0, 0) -> REXR4=0 REXR=0 REG=6 | OUTREG=XED_REG_XMM6*/
    xed3_operand_set_outreg(d, XED_REG_XMM6);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7, 0, 0) -> REXR4=0 REXR=0 REG=7 | OUTREG=XED_REG_XMM7*/
    xed3_operand_set_outreg(d, XED_REG_XMM7);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 1, 0) -> REXR4=0 REXR=1 REG=0 | OUTREG=XED_REG_XMM8*/
    xed3_operand_set_outreg(d, XED_REG_XMM8);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 1, 0) -> REXR4=0 REXR=1 REG=1 | OUTREG=XED_REG_XMM9*/
    xed3_operand_set_outreg(d, XED_REG_XMM9);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(2, 1, 0) -> REXR4=0 REXR=1 REG=2 | OUTREG=XED_REG_XMM10*/
    xed3_operand_set_outreg(d, XED_REG_XMM10);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(3, 1, 0) -> REXR4=0 REXR=1 REG=3 | OUTREG=XED_REG_XMM11*/
    xed3_operand_set_outreg(d, XED_REG_XMM11);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(4, 1, 0) -> REXR4=0 REXR=1 REG=4 | OUTREG=XED_REG_XMM12*/
    xed3_operand_set_outreg(d, XED_REG_XMM12);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(5, 1, 0) -> REXR4=0 REXR=1 REG=5 | OUTREG=XED_REG_XMM13*/
    xed3_operand_set_outreg(d, XED_REG_XMM13);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(6, 1, 0) -> REXR4=0 REXR=1 REG=6 | OUTREG=XED_REG_XMM14*/
    xed3_operand_set_outreg(d, XED_REG_XMM14);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(7, 1, 0) -> REXR4=0 REXR=1 REG=7 | OUTREG=XED_REG_XMM15*/
    xed3_operand_set_outreg(d, XED_REG_XMM15);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_XMM_L_B3(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mode(d)) << ((0));
/* now switch code..*/
switch(key) {
case 2: /*(2,) -> mode64 | OUTREG=XMM_L_B3_64()*/
    xed3_capture_nt_XMM_L_B3_64(d);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_XMM_L_B3_64(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_rexb(d)) << ((0));
key += (xed3_operand_get_rexx(d)) << ((1));
key += (xed3_operand_get_rm(d)) << ((2));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0, 0) -> REXX=0 REXB=0 RM=0 | OUTREG=XED_REG_XMM0*/
    xed3_operand_set_outreg(d, XED_REG_XMM0);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0, 0) -> REXX=0 REXB=1 RM=0 | OUTREG=XED_REG_XMM8*/
    xed3_operand_set_outreg(d, XED_REG_XMM8);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(0, 0, 1) -> REXX=0 REXB=0 RM=1 | OUTREG=XED_REG_XMM1*/
    xed3_operand_set_outreg(d, XED_REG_XMM1);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(1, 0, 1) -> REXX=0 REXB=1 RM=1 | OUTREG=XED_REG_XMM9*/
    xed3_operand_set_outreg(d, XED_REG_XMM9);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 0, 2) -> REXX=0 REXB=0 RM=2 | OUTREG=XED_REG_XMM2*/
    xed3_operand_set_outreg(d, XED_REG_XMM2);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 0, 2) -> REXX=0 REXB=1 RM=2 | OUTREG=XED_REG_XMM10*/
    xed3_operand_set_outreg(d, XED_REG_XMM10);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(0, 0, 3) -> REXX=0 REXB=0 RM=3 | OUTREG=XED_REG_XMM3*/
    xed3_operand_set_outreg(d, XED_REG_XMM3);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(1, 0, 3) -> REXX=0 REXB=1 RM=3 | OUTREG=XED_REG_XMM11*/
    xed3_operand_set_outreg(d, XED_REG_XMM11);
/*pacify the compiler */
(void)d;
    break;
case 16: /*(0, 0, 4) -> REXX=0 REXB=0 RM=4 | OUTREG=XED_REG_XMM4*/
    xed3_operand_set_outreg(d, XED_REG_XMM4);
/*pacify the compiler */
(void)d;
    break;
case 17: /*(1, 0, 4) -> REXX=0 REXB=1 RM=4 | OUTREG=XED_REG_XMM12*/
    xed3_operand_set_outreg(d, XED_REG_XMM12);
/*pacify the compiler */
(void)d;
    break;
case 20: /*(0, 0, 5) -> REXX=0 REXB=0 RM=5 | OUTREG=XED_REG_XMM5*/
    xed3_operand_set_outreg(d, XED_REG_XMM5);
/*pacify the compiler */
(void)d;
    break;
case 21: /*(1, 0, 5) -> REXX=0 REXB=1 RM=5 | OUTREG=XED_REG_XMM13*/
    xed3_operand_set_outreg(d, XED_REG_XMM13);
/*pacify the compiler */
(void)d;
    break;
case 24: /*(0, 0, 6) -> REXX=0 REXB=0 RM=6 | OUTREG=XED_REG_XMM6*/
    xed3_operand_set_outreg(d, XED_REG_XMM6);
/*pacify the compiler */
(void)d;
    break;
case 25: /*(1, 0, 6) -> REXX=0 REXB=1 RM=6 | OUTREG=XED_REG_XMM14*/
    xed3_operand_set_outreg(d, XED_REG_XMM14);
/*pacify the compiler */
(void)d;
    break;
case 28: /*(0, 0, 7) -> REXX=0 REXB=0 RM=7 | OUTREG=XED_REG_XMM7*/
    xed3_operand_set_outreg(d, XED_REG_XMM7);
/*pacify the compiler */
(void)d;
    break;
case 29: /*(1, 0, 7) -> REXX=0 REXB=1 RM=7 | OUTREG=XED_REG_XMM15*/
    xed3_operand_set_outreg(d, XED_REG_XMM15);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_GPRv_N(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_eosz(d)) << ((0));
/* now switch code..*/
switch(key) {
case 1: /*(1,) -> EOSZ=1 | OUTREG=GPR16_N()*/
    xed3_capture_nt_GPR16_N(d);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2,) -> EOSZ=2 | OUTREG=GPR32_N()*/
    xed3_capture_nt_GPR32_N(d);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3,) -> EOSZ=3 | OUTREG=GPR64_N()*/
    xed3_capture_nt_GPR64_N(d);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_GPR64_N(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_vexdest210(d)) << ((0));
key += (xed3_operand_get_vexdest3(d)) << ((3));
key += (xed3_operand_get_vexdest4(d)) << ((4));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=0   | OUTREG=XED_REG_R15*/
    xed3_operand_set_outreg(d, XED_REG_R15);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=1   | OUTREG=XED_REG_R14*/
    xed3_operand_set_outreg(d, XED_REG_R14);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=2   | OUTREG=XED_REG_R13*/
    xed3_operand_set_outreg(d, XED_REG_R13);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=3   | OUTREG=XED_REG_R12*/
    xed3_operand_set_outreg(d, XED_REG_R12);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=4   | OUTREG=XED_REG_R11*/
    xed3_operand_set_outreg(d, XED_REG_R11);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=5   | OUTREG=XED_REG_R10*/
    xed3_operand_set_outreg(d, XED_REG_R10);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=6   | OUTREG=XED_REG_R9*/
    xed3_operand_set_outreg(d, XED_REG_R9);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=7   | OUTREG=XED_REG_R8*/
    xed3_operand_set_outreg(d, XED_REG_R8);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=0   | OUTREG=XED_REG_RDI*/
    xed3_operand_set_outreg(d, XED_REG_RDI);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=1   | OUTREG=XED_REG_RSI*/
    xed3_operand_set_outreg(d, XED_REG_RSI);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(2, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=2   | OUTREG=XED_REG_RBP*/
    xed3_operand_set_outreg(d, XED_REG_RBP);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(3, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=3   | OUTREG=XED_REG_RSP*/
    xed3_operand_set_outreg(d, XED_REG_RSP);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(4, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=4   | OUTREG=XED_REG_RBX*/
    xed3_operand_set_outreg(d, XED_REG_RBX);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(5, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=5   | OUTREG=XED_REG_RDX*/
    xed3_operand_set_outreg(d, XED_REG_RDX);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(6, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=6   | OUTREG=XED_REG_RCX*/
    xed3_operand_set_outreg(d, XED_REG_RCX);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(7, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=7   | OUTREG=XED_REG_RAX*/
    xed3_operand_set_outreg(d, XED_REG_RAX);
/*pacify the compiler */
(void)d;
    break;
case 16: /*(0, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=0   | OUTREG=XED_REG_R31 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R31);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 17: /*(1, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=1   | OUTREG=XED_REG_R30 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R30);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 18: /*(2, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=2   | OUTREG=XED_REG_R29 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R29);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 19: /*(3, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=3   | OUTREG=XED_REG_R28 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R28);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 20: /*(4, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=4   | OUTREG=XED_REG_R27 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R27);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 21: /*(5, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=5   | OUTREG=XED_REG_R26 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R26);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 22: /*(6, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=6   | OUTREG=XED_REG_R25 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R25);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 23: /*(7, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=7   | OUTREG=XED_REG_R24 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R24);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 24: /*(0, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=0   | OUTREG=XED_REG_R23 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R23);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 25: /*(1, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=1   | OUTREG=XED_REG_R22 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R22);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 26: /*(2, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=2   | OUTREG=XED_REG_R21 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R21);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 27: /*(3, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=3   | OUTREG=XED_REG_R20 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R20);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 28: /*(4, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=4   | OUTREG=XED_REG_R19 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R19);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 29: /*(5, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=5   | OUTREG=XED_REG_R18 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R18);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 30: /*(6, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=6   | OUTREG=XED_REG_R17 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R17);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 31: /*(7, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=7   | OUTREG=XED_REG_R16 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R16);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_GPR32_N(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_vexdest210(d)) << ((0));
key += (xed3_operand_get_vexdest3(d)) << ((3));
key += (xed3_operand_get_vexdest4(d)) << ((4));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=0   | OUTREG=XED_REG_R15D*/
    xed3_operand_set_outreg(d, XED_REG_R15D);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=1   | OUTREG=XED_REG_R14D*/
    xed3_operand_set_outreg(d, XED_REG_R14D);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=2   | OUTREG=XED_REG_R13D*/
    xed3_operand_set_outreg(d, XED_REG_R13D);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=3   | OUTREG=XED_REG_R12D*/
    xed3_operand_set_outreg(d, XED_REG_R12D);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=4   | OUTREG=XED_REG_R11D*/
    xed3_operand_set_outreg(d, XED_REG_R11D);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=5   | OUTREG=XED_REG_R10D*/
    xed3_operand_set_outreg(d, XED_REG_R10D);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=6   | OUTREG=XED_REG_R9D*/
    xed3_operand_set_outreg(d, XED_REG_R9D);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=7   | OUTREG=XED_REG_R8D*/
    xed3_operand_set_outreg(d, XED_REG_R8D);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=0   | OUTREG=XED_REG_EDI*/
    xed3_operand_set_outreg(d, XED_REG_EDI);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=1   | OUTREG=XED_REG_ESI*/
    xed3_operand_set_outreg(d, XED_REG_ESI);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(2, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=2   | OUTREG=XED_REG_EBP*/
    xed3_operand_set_outreg(d, XED_REG_EBP);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(3, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=3   | OUTREG=XED_REG_ESP*/
    xed3_operand_set_outreg(d, XED_REG_ESP);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(4, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=4   | OUTREG=XED_REG_EBX*/
    xed3_operand_set_outreg(d, XED_REG_EBX);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(5, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=5   | OUTREG=XED_REG_EDX*/
    xed3_operand_set_outreg(d, XED_REG_EDX);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(6, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=6   | OUTREG=XED_REG_ECX*/
    xed3_operand_set_outreg(d, XED_REG_ECX);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(7, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=7   | OUTREG=XED_REG_EAX*/
    xed3_operand_set_outreg(d, XED_REG_EAX);
/*pacify the compiler */
(void)d;
    break;
case 16: /*(0, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=0   | OUTREG=XED_REG_R31D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R31D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 17: /*(1, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=1   | OUTREG=XED_REG_R30D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R30D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 18: /*(2, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=2   | OUTREG=XED_REG_R29D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R29D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 19: /*(3, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=3   | OUTREG=XED_REG_R28D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R28D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 20: /*(4, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=4   | OUTREG=XED_REG_R27D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R27D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 21: /*(5, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=5   | OUTREG=XED_REG_R26D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R26D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 22: /*(6, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=6   | OUTREG=XED_REG_R25D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R25D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 23: /*(7, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=7   | OUTREG=XED_REG_R24D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R24D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 24: /*(0, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=0   | OUTREG=XED_REG_R23D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R23D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 25: /*(1, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=1   | OUTREG=XED_REG_R22D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R22D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 26: /*(2, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=2   | OUTREG=XED_REG_R21D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R21D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 27: /*(3, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=3   | OUTREG=XED_REG_R20D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R20D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 28: /*(4, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=4   | OUTREG=XED_REG_R19D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R19D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 29: /*(5, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=5   | OUTREG=XED_REG_R18D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R18D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 30: /*(6, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=6   | OUTREG=XED_REG_R17D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R17D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 31: /*(7, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=7   | OUTREG=XED_REG_R16D HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R16D);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_GPR16_N(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_vexdest210(d)) << ((0));
key += (xed3_operand_get_vexdest3(d)) << ((3));
key += (xed3_operand_get_vexdest4(d)) << ((4));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=0   | OUTREG=XED_REG_R15W*/
    xed3_operand_set_outreg(d, XED_REG_R15W);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=1   | OUTREG=XED_REG_R14W*/
    xed3_operand_set_outreg(d, XED_REG_R14W);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=2   | OUTREG=XED_REG_R13W*/
    xed3_operand_set_outreg(d, XED_REG_R13W);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=3   | OUTREG=XED_REG_R12W*/
    xed3_operand_set_outreg(d, XED_REG_R12W);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=4   | OUTREG=XED_REG_R11W*/
    xed3_operand_set_outreg(d, XED_REG_R11W);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=5   | OUTREG=XED_REG_R10W*/
    xed3_operand_set_outreg(d, XED_REG_R10W);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=6   | OUTREG=XED_REG_R9W*/
    xed3_operand_set_outreg(d, XED_REG_R9W);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=7   | OUTREG=XED_REG_R8W*/
    xed3_operand_set_outreg(d, XED_REG_R8W);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=0   | OUTREG=XED_REG_DI*/
    xed3_operand_set_outreg(d, XED_REG_DI);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=1   | OUTREG=XED_REG_SI*/
    xed3_operand_set_outreg(d, XED_REG_SI);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(2, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=2   | OUTREG=XED_REG_BP*/
    xed3_operand_set_outreg(d, XED_REG_BP);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(3, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=3   | OUTREG=XED_REG_SP*/
    xed3_operand_set_outreg(d, XED_REG_SP);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(4, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=4   | OUTREG=XED_REG_BX*/
    xed3_operand_set_outreg(d, XED_REG_BX);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(5, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=5   | OUTREG=XED_REG_DX*/
    xed3_operand_set_outreg(d, XED_REG_DX);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(6, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=6   | OUTREG=XED_REG_CX*/
    xed3_operand_set_outreg(d, XED_REG_CX);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(7, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=7   | OUTREG=XED_REG_AX*/
    xed3_operand_set_outreg(d, XED_REG_AX);
/*pacify the compiler */
(void)d;
    break;
case 16: /*(0, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=0   | OUTREG=XED_REG_R31W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R31W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 17: /*(1, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=1   | OUTREG=XED_REG_R30W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R30W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 18: /*(2, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=2   | OUTREG=XED_REG_R29W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R29W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 19: /*(3, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=3   | OUTREG=XED_REG_R28W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R28W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 20: /*(4, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=4   | OUTREG=XED_REG_R27W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R27W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 21: /*(5, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=5   | OUTREG=XED_REG_R26W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R26W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 22: /*(6, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=6   | OUTREG=XED_REG_R25W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R25W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 23: /*(7, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=7   | OUTREG=XED_REG_R24W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R24W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 24: /*(0, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=0   | OUTREG=XED_REG_R23W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R23W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 25: /*(1, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=1   | OUTREG=XED_REG_R22W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R22W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 26: /*(2, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=2   | OUTREG=XED_REG_R21W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R21W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 27: /*(3, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=3   | OUTREG=XED_REG_R20W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R20W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 28: /*(4, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=4   | OUTREG=XED_REG_R19W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R19W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 29: /*(5, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=5   | OUTREG=XED_REG_R18W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R18W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 30: /*(6, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=6   | OUTREG=XED_REG_R17W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R17W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 31: /*(7, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=7   | OUTREG=XED_REG_R16W HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R16W);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_GPR8_N(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_vexdest210(d)) << ((0));
key += (xed3_operand_get_vexdest3(d)) << ((3));
key += (xed3_operand_get_vexdest4(d)) << ((4));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=0   | OUTREG=XED_REG_R15B*/
    xed3_operand_set_outreg(d, XED_REG_R15B);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=1   | OUTREG=XED_REG_R14B*/
    xed3_operand_set_outreg(d, XED_REG_R14B);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=2   | OUTREG=XED_REG_R13B*/
    xed3_operand_set_outreg(d, XED_REG_R13B);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=3   | OUTREG=XED_REG_R12B*/
    xed3_operand_set_outreg(d, XED_REG_R12B);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=4   | OUTREG=XED_REG_R11B*/
    xed3_operand_set_outreg(d, XED_REG_R11B);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=5   | OUTREG=XED_REG_R10B*/
    xed3_operand_set_outreg(d, XED_REG_R10B);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=6   | OUTREG=XED_REG_R9B*/
    xed3_operand_set_outreg(d, XED_REG_R9B);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=7   | OUTREG=XED_REG_R8B*/
    xed3_operand_set_outreg(d, XED_REG_R8B);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=0   | OUTREG=XED_REG_DIL*/
    xed3_operand_set_outreg(d, XED_REG_DIL);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=1   | OUTREG=XED_REG_SIL*/
    xed3_operand_set_outreg(d, XED_REG_SIL);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(2, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=2   | OUTREG=XED_REG_BPL*/
    xed3_operand_set_outreg(d, XED_REG_BPL);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(3, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=3   | OUTREG=XED_REG_SPL*/
    xed3_operand_set_outreg(d, XED_REG_SPL);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(4, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=4   | OUTREG=XED_REG_BL*/
    xed3_operand_set_outreg(d, XED_REG_BL);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(5, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=5   | OUTREG=XED_REG_DL*/
    xed3_operand_set_outreg(d, XED_REG_DL);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(6, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=6   | OUTREG=XED_REG_CL*/
    xed3_operand_set_outreg(d, XED_REG_CL);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(7, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=7   | OUTREG=XED_REG_AL*/
    xed3_operand_set_outreg(d, XED_REG_AL);
/*pacify the compiler */
(void)d;
    break;
case 16: /*(0, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=0   | OUTREG=XED_REG_R31B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R31B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 17: /*(1, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=1   | OUTREG=XED_REG_R30B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R30B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 18: /*(2, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=2   | OUTREG=XED_REG_R29B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R29B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 19: /*(3, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=3   | OUTREG=XED_REG_R28B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R28B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 20: /*(4, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=4   | OUTREG=XED_REG_R27B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R27B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 21: /*(5, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=5   | OUTREG=XED_REG_R26B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R26B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 22: /*(6, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=6   | OUTREG=XED_REG_R25B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R25B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 23: /*(7, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=7   | OUTREG=XED_REG_R24B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R24B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 24: /*(0, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=0   | OUTREG=XED_REG_R23B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R23B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 25: /*(1, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=1   | OUTREG=XED_REG_R22B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R22B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 26: /*(2, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=2   | OUTREG=XED_REG_R21B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R21B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 27: /*(3, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=3   | OUTREG=XED_REG_R20B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R20B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 28: /*(4, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=4   | OUTREG=XED_REG_R19B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R19B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 29: /*(5, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=5   | OUTREG=XED_REG_R18B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R18B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 30: /*(6, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=6   | OUTREG=XED_REG_R17B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R17B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 31: /*(7, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=7   | OUTREG=XED_REG_R16B HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R16B);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_GPR64_N_NORSP(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_vexdest210(d)) << ((0));
key += (xed3_operand_get_vexdest3(d)) << ((3));
key += (xed3_operand_get_vexdest4(d)) << ((4));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=0   | OUTREG=XED_REG_R15*/
    xed3_operand_set_outreg(d, XED_REG_R15);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=1   | OUTREG=XED_REG_R14*/
    xed3_operand_set_outreg(d, XED_REG_R14);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=2   | OUTREG=XED_REG_R13*/
    xed3_operand_set_outreg(d, XED_REG_R13);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=3   | OUTREG=XED_REG_R12*/
    xed3_operand_set_outreg(d, XED_REG_R12);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=4   | OUTREG=XED_REG_R11*/
    xed3_operand_set_outreg(d, XED_REG_R11);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=5   | OUTREG=XED_REG_R10*/
    xed3_operand_set_outreg(d, XED_REG_R10);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=6   | OUTREG=XED_REG_R9*/
    xed3_operand_set_outreg(d, XED_REG_R9);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7, 0, 0) -> VEXDEST4=0 VEXDEST3=0 VEXDEST210=7   | OUTREG=XED_REG_R8*/
    xed3_operand_set_outreg(d, XED_REG_R8);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=0   | OUTREG=XED_REG_RDI*/
    xed3_operand_set_outreg(d, XED_REG_RDI);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=1   | OUTREG=XED_REG_RSI*/
    xed3_operand_set_outreg(d, XED_REG_RSI);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(2, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=2   | OUTREG=XED_REG_RBP*/
    xed3_operand_set_outreg(d, XED_REG_RBP);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(3, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=3   | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(4, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=4   | OUTREG=XED_REG_RBX*/
    xed3_operand_set_outreg(d, XED_REG_RBX);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(5, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=5   | OUTREG=XED_REG_RDX*/
    xed3_operand_set_outreg(d, XED_REG_RDX);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(6, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=6   | OUTREG=XED_REG_RCX*/
    xed3_operand_set_outreg(d, XED_REG_RCX);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(7, 1, 0) -> VEXDEST4=0 VEXDEST3=1 VEXDEST210=7   | OUTREG=XED_REG_RAX*/
    xed3_operand_set_outreg(d, XED_REG_RAX);
/*pacify the compiler */
(void)d;
    break;
case 16: /*(0, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=0   | OUTREG=XED_REG_R31 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R31);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 17: /*(1, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=1   | OUTREG=XED_REG_R30 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R30);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 18: /*(2, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=2   | OUTREG=XED_REG_R29 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R29);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 19: /*(3, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=3   | OUTREG=XED_REG_R28 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R28);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 20: /*(4, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=4   | OUTREG=XED_REG_R27 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R27);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 21: /*(5, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=5   | OUTREG=XED_REG_R26 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R26);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 22: /*(6, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=6   | OUTREG=XED_REG_R25 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R25);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 23: /*(7, 0, 1) -> VEXDEST4=1 VEXDEST3=0 VEXDEST210=7   | OUTREG=XED_REG_R24 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R24);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 24: /*(0, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=0   | OUTREG=XED_REG_R23 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R23);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 25: /*(1, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=1   | OUTREG=XED_REG_R22 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R22);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 26: /*(2, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=2   | OUTREG=XED_REG_R21 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R21);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 27: /*(3, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=3   | OUTREG=XED_REG_R20 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R20);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 28: /*(4, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=4   | OUTREG=XED_REG_R19 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R19);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 29: /*(5, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=5   | OUTREG=XED_REG_R18 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R18);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 30: /*(6, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=6   | OUTREG=XED_REG_R17 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R17);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 31: /*(7, 1, 1) -> VEXDEST4=1 VEXDEST3=1 VEXDEST210=7   | OUTREG=XED_REG_R16 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R16);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_GPR64_B_NORSP(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_rexb(d)) << ((0));
key += (xed3_operand_get_rexb4(d)) << ((1));
key += (xed3_operand_get_rm(d)) << ((2));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0, 0) -> REXB4=0 REXB=0 RM=0x0  | OUTREG=XED_REG_RAX*/
    xed3_operand_set_outreg(d, XED_REG_RAX);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0, 0) -> REXB4=0 REXB=1 RM=0x0  | OUTREG=XED_REG_R8*/
    xed3_operand_set_outreg(d, XED_REG_R8);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(0, 1, 0) -> REXB4=1 REXB=0 RM=0x0  | OUTREG=XED_REG_R16 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R16);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(1, 1, 0) -> REXB4=1 REXB=1 RM=0x0  | OUTREG=XED_REG_R24 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R24);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(0, 0, 1) -> REXB4=0 REXB=0 RM=0x1  | OUTREG=XED_REG_RCX*/
    xed3_operand_set_outreg(d, XED_REG_RCX);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(1, 0, 1) -> REXB4=0 REXB=1 RM=0x1  | OUTREG=XED_REG_R9*/
    xed3_operand_set_outreg(d, XED_REG_R9);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(0, 1, 1) -> REXB4=1 REXB=0 RM=0x1  | OUTREG=XED_REG_R17 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R17);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(1, 1, 1) -> REXB4=1 REXB=1 RM=0x1  | OUTREG=XED_REG_R25 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R25);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 0, 2) -> REXB4=0 REXB=0 RM=0x2  | OUTREG=XED_REG_RDX*/
    xed3_operand_set_outreg(d, XED_REG_RDX);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 0, 2) -> REXB4=0 REXB=1 RM=0x2  | OUTREG=XED_REG_R10*/
    xed3_operand_set_outreg(d, XED_REG_R10);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(0, 1, 2) -> REXB4=1 REXB=0 RM=0x2  | OUTREG=XED_REG_R18 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R18);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(1, 1, 2) -> REXB4=1 REXB=1 RM=0x2  | OUTREG=XED_REG_R26 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R26);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(0, 0, 3) -> REXB4=0 REXB=0 RM=0x3  | OUTREG=XED_REG_RBX*/
    xed3_operand_set_outreg(d, XED_REG_RBX);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(1, 0, 3) -> REXB4=0 REXB=1 RM=0x3  | OUTREG=XED_REG_R11*/
    xed3_operand_set_outreg(d, XED_REG_R11);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(0, 1, 3) -> REXB4=1 REXB=0 RM=0x3  | OUTREG=XED_REG_R19 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R19);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(1, 1, 3) -> REXB4=1 REXB=1 RM=0x3  | OUTREG=XED_REG_R27 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R27);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 16: /*(0, 0, 4) -> REXB4=0 REXB=0 RM=0x4  | OUTREG=XED_REG_ERROR*/
    xed3_operand_set_outreg(d, XED_REG_ERROR);
    xed3_operand_set_error(d, XED_ERROR_BAD_REGISTER);
/*pacify the compiler */
(void)d;
    break;
case 17: /*(1, 0, 4) -> REXB4=0 REXB=1 RM=0x4  | OUTREG=XED_REG_R12*/
    xed3_operand_set_outreg(d, XED_REG_R12);
/*pacify the compiler */
(void)d;
    break;
case 18: /*(0, 1, 4) -> REXB4=1 REXB=0 RM=0x4  | OUTREG=XED_REG_R20 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R20);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 19: /*(1, 1, 4) -> REXB4=1 REXB=1 RM=0x4  | OUTREG=XED_REG_R28 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R28);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 20: /*(0, 0, 5) -> REXB4=0 REXB=0 RM=0x5  | OUTREG=XED_REG_RBP*/
    xed3_operand_set_outreg(d, XED_REG_RBP);
/*pacify the compiler */
(void)d;
    break;
case 21: /*(1, 0, 5) -> REXB4=0 REXB=1 RM=0x5  | OUTREG=XED_REG_R13*/
    xed3_operand_set_outreg(d, XED_REG_R13);
/*pacify the compiler */
(void)d;
    break;
case 22: /*(0, 1, 5) -> REXB4=1 REXB=0 RM=0x5  | OUTREG=XED_REG_R21 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R21);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 23: /*(1, 1, 5) -> REXB4=1 REXB=1 RM=0x5  | OUTREG=XED_REG_R29 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R29);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 24: /*(0, 0, 6) -> REXB4=0 REXB=0 RM=0x6  | OUTREG=XED_REG_RSI*/
    xed3_operand_set_outreg(d, XED_REG_RSI);
/*pacify the compiler */
(void)d;
    break;
case 25: /*(1, 0, 6) -> REXB4=0 REXB=1 RM=0x6  | OUTREG=XED_REG_R14*/
    xed3_operand_set_outreg(d, XED_REG_R14);
/*pacify the compiler */
(void)d;
    break;
case 26: /*(0, 1, 6) -> REXB4=1 REXB=0 RM=0x6  | OUTREG=XED_REG_R22 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R22);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 27: /*(1, 1, 6) -> REXB4=1 REXB=1 RM=0x6  | OUTREG=XED_REG_R30 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R30);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 28: /*(0, 0, 7) -> REXB4=0 REXB=0 RM=0x7  | OUTREG=XED_REG_RDI*/
    xed3_operand_set_outreg(d, XED_REG_RDI);
/*pacify the compiler */
(void)d;
    break;
case 29: /*(1, 0, 7) -> REXB4=0 REXB=1 RM=0x7  | OUTREG=XED_REG_R15*/
    xed3_operand_set_outreg(d, XED_REG_R15);
/*pacify the compiler */
(void)d;
    break;
case 30: /*(0, 1, 7) -> REXB4=1 REXB=0 RM=0x7  | OUTREG=XED_REG_R23 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R23);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
case 31: /*(1, 1, 7) -> REXB4=1 REXB=1 RM=0x7  | OUTREG=XED_REG_R31 HAS_EGPR=1*/
    xed3_operand_set_outreg(d, XED_REG_R31);
    xed3_operand_set_has_egpr(d, 0x1);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_DFV(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_vexdest210(d)) << ((0));
key += (xed3_operand_get_vexdest3(d)) << ((3));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0) -> VEXDEST3=0 VEXDEST210=0 | OUTREG=XED_REG_DFV0*/
    xed3_operand_set_outreg(d, XED_REG_DFV0);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0) -> VEXDEST3=0 VEXDEST210=1 | OUTREG=XED_REG_DFV1*/
    xed3_operand_set_outreg(d, XED_REG_DFV1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2, 0) -> VEXDEST3=0 VEXDEST210=2 | OUTREG=XED_REG_DFV2*/
    xed3_operand_set_outreg(d, XED_REG_DFV2);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3, 0) -> VEXDEST3=0 VEXDEST210=3 | OUTREG=XED_REG_DFV3*/
    xed3_operand_set_outreg(d, XED_REG_DFV3);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4, 0) -> VEXDEST3=0 VEXDEST210=4 | OUTREG=XED_REG_DFV4*/
    xed3_operand_set_outreg(d, XED_REG_DFV4);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5, 0) -> VEXDEST3=0 VEXDEST210=5 | OUTREG=XED_REG_DFV5*/
    xed3_operand_set_outreg(d, XED_REG_DFV5);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6, 0) -> VEXDEST3=0 VEXDEST210=6 | OUTREG=XED_REG_DFV6*/
    xed3_operand_set_outreg(d, XED_REG_DFV6);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7, 0) -> VEXDEST3=0 VEXDEST210=7 | OUTREG=XED_REG_DFV7*/
    xed3_operand_set_outreg(d, XED_REG_DFV7);
/*pacify the compiler */
(void)d;
    break;
case 8: /*(0, 1) -> VEXDEST3=1 VEXDEST210=0 | OUTREG=XED_REG_DFV8*/
    xed3_operand_set_outreg(d, XED_REG_DFV8);
/*pacify the compiler */
(void)d;
    break;
case 9: /*(1, 1) -> VEXDEST3=1 VEXDEST210=1 | OUTREG=XED_REG_DFV9*/
    xed3_operand_set_outreg(d, XED_REG_DFV9);
/*pacify the compiler */
(void)d;
    break;
case 10: /*(2, 1) -> VEXDEST3=1 VEXDEST210=2 | OUTREG=XED_REG_DFV10*/
    xed3_operand_set_outreg(d, XED_REG_DFV10);
/*pacify the compiler */
(void)d;
    break;
case 11: /*(3, 1) -> VEXDEST3=1 VEXDEST210=3 | OUTREG=XED_REG_DFV11*/
    xed3_operand_set_outreg(d, XED_REG_DFV11);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(4, 1) -> VEXDEST3=1 VEXDEST210=4 | OUTREG=XED_REG_DFV12*/
    xed3_operand_set_outreg(d, XED_REG_DFV12);
/*pacify the compiler */
(void)d;
    break;
case 13: /*(5, 1) -> VEXDEST3=1 VEXDEST210=5 | OUTREG=XED_REG_DFV13*/
    xed3_operand_set_outreg(d, XED_REG_DFV13);
/*pacify the compiler */
(void)d;
    break;
case 14: /*(6, 1) -> VEXDEST3=1 VEXDEST210=6 | OUTREG=XED_REG_DFV14*/
    xed3_operand_set_outreg(d, XED_REG_DFV14);
/*pacify the compiler */
(void)d;
    break;
case 15: /*(7, 1) -> VEXDEST3=1 VEXDEST210=7 | OUTREG=XED_REG_DFV15*/
    xed3_operand_set_outreg(d, XED_REG_DFV15);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_TMM_R3(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_reg(d)) << ((0));
key += (xed3_operand_get_rexr(d)) << ((3));
key += (xed3_operand_get_rexr4(d)) << ((4));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0, 0) -> REXR4=0 REXR=0 REG=0 | OUTREG=XED_REG_TMM0*/
    xed3_operand_set_outreg(d, XED_REG_TMM0);
/*pacify the compiler */
(void)d;
    break;
case 1: /*(1, 0, 0) -> REXR4=0 REXR=0 REG=1 | OUTREG=XED_REG_TMM1*/
    xed3_operand_set_outreg(d, XED_REG_TMM1);
/*pacify the compiler */
(void)d;
    break;
case 2: /*(2, 0, 0) -> REXR4=0 REXR=0 REG=2 | OUTREG=XED_REG_TMM2*/
    xed3_operand_set_outreg(d, XED_REG_TMM2);
/*pacify the compiler */
(void)d;
    break;
case 3: /*(3, 0, 0) -> REXR4=0 REXR=0 REG=3 | OUTREG=XED_REG_TMM3*/
    xed3_operand_set_outreg(d, XED_REG_TMM3);
/*pacify the compiler */
(void)d;
    break;
case 4: /*(4, 0, 0) -> REXR4=0 REXR=0 REG=4 | OUTREG=XED_REG_TMM4*/
    xed3_operand_set_outreg(d, XED_REG_TMM4);
/*pacify the compiler */
(void)d;
    break;
case 5: /*(5, 0, 0) -> REXR4=0 REXR=0 REG=5 | OUTREG=XED_REG_TMM5*/
    xed3_operand_set_outreg(d, XED_REG_TMM5);
/*pacify the compiler */
(void)d;
    break;
case 6: /*(6, 0, 0) -> REXR4=0 REXR=0 REG=6 | OUTREG=XED_REG_TMM6*/
    xed3_operand_set_outreg(d, XED_REG_TMM6);
/*pacify the compiler */
(void)d;
    break;
case 7: /*(7, 0, 0) -> REXR4=0 REXR=0 REG=7 | OUTREG=XED_REG_TMM7*/
    xed3_operand_set_outreg(d, XED_REG_TMM7);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_EVAPX(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_mask(d)) << ((0));
key += (xed3_operand_get_nf(d)) << ((3));
key += (xed3_operand_get_no_apx(d)) << ((4));
/* now switch code..*/
switch(key) {
case 0: /*(0, 0, 0) -> NO_APX=0 NF=0 MASK=0 | EVEX_APX         SCC=0 BCRC=0*/
    xed3_operand_set_evvspace(d, 0x1);
    xed3_operand_set_scc(d, 0x0);
    xed3_operand_set_bcrc(d, 0x0);
/*pacify the compiler */
(void)d;
    break;
case 12: /*(4, 1, 0) -> NO_APX=0 NF=1 MASK=4 | EVEX_APX  MASK=0 SCC=0 BCRC=0*/
    xed3_operand_set_evvspace(d, 0x1);
    xed3_operand_set_mask(d, 0x0);
    xed3_operand_set_scc(d, 0x0);
    xed3_operand_set_bcrc(d, 0x0);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
static XED_INLINE void xed3_capture_nt_EVAPX_SCC(xed_decoded_inst_t* d)
{
xed_uint32_t key = 0;
key += (xed3_operand_get_dummy(d)) << ((0));
/* now switch code..*/
switch(key) {
case 0: /*(0,) -> true  | EVEX_APX_SCC MASK=0 VEXDEST4=0 NF=0 BCRC=0*/
    xed3_operand_set_evvspace(d, 0x2);
    xed3_operand_set_mask(d, 0x0);
    xed3_operand_set_vexdest4(d, 0x0);
    xed3_operand_set_nf(d, 0x0);
    xed3_operand_set_bcrc(d, 0x0);
/*pacify the compiler */
(void)d;
    break;
default:
    xed3_operand_set_error(d, XED_ERROR_GENERAL_ERROR);
    break;
}
}
#endif
